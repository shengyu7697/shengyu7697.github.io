<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShengYu Talk</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shengyu7697.github.io/"/>
  <updated>2024-07-03T23:40:08.385Z</updated>
  <id>https://shengyu7697.github.io/</id>
  
  <author>
    <name>ShengYu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>macOS 下使用 rm 指令如何避免誤刪除</title>
    <link href="https://shengyu7697.github.io/mac-ubuntu-prevent-accidental-deletion-with-rm-command/"/>
    <id>https://shengyu7697.github.io/mac-ubuntu-prevent-accidental-deletion-with-rm-command/</id>
    <published>2024-07-01T12:00:00.000Z</published>
    <updated>2024-07-03T23:40:08.385Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 macOS 下使用 rm 指令如何避免誤刪除，在 macOS 下，使用 <code>rm</code> 指令刪除檔案和目錄是一種常見的操作。然而，誤刪除重要檔案可能帶來不小的麻煩。為了防止這類情況，我們可以採用一些替代方法來減少風險，其中之一便是使用 <code>trash</code> 指令。這篇文章將介紹如何在 macOS 上安裝和使用 <code>trash</code> 指令，讓你的檔案刪除操作更加安全可靠。</p><h2><span id="什麼是-trash-指令">什麼是 <code>trash</code> 指令？</span></h2><p><code>trash</code> 指令是一個指令行工具，它將檔案移動到系統的垃圾桶，而不是直接永久刪除。這樣，即使你誤刪除了檔案，也可以輕鬆地從垃圾桶中還原。</p><h2><span id="為什麼選擇-trash-指令">為什麼選擇 <code>trash</code> 指令？</span></h2><ol><li><strong>還原檔案</strong>：誤刪除的檔案可以從垃圾桶中輕鬆還原。</li><li><strong>安全可靠</strong>：減少了使用 <code>rm</code> 指令時誤刪除重要檔案的風險。</li><li><strong>易於使用</strong>：<code>trash</code> 指令的使用方法與 <code>rm</code> 指令類似，學習成本低。</li></ol><h2><span id="如何在-macos-上安裝-trash-指令">如何在 macOS 上安裝 <code>trash</code> 指令？</span></h2><p>首先，我們需要安裝 Homebrew，這是一個 macOS 的包管理器。如果你的系統中尚未安裝 Homebrew，可以透過以下指令來安裝：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><p>安裝完成後，可以使用 Homebrew 來安裝 <code>trash</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install trash</span><br></pre></td></tr></table></figure><p>在 macOS 下建議不要用 <a href="https://formulae.brew.sh/formula/trash-cli" rel="noopener" target="_blank">trash-cli</a> <code>brew install trash-cli</code> 這套而是使用 <a href="https://formulae.brew.sh/formula/trash" rel="noopener" target="_blank">trash</a> 這套，因為 trash-cli 會丟到 <code>~/.local/share/Trash</code> 不會丟進 Finder 的垃圾桶，這樣不方便結合 Finder 的操作。</p><h2><span id="如何使用-trash-指令">如何使用 <code>trash</code> 指令？</span></h2><p><code>trash</code> 指令的基本使用方法與 <code>rm</code> 指令類似，只需將 <code>rm</code> 替換為 <code>trash</code> 即可。例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trash filename</span><br></pre></td></tr></table></figure><p>如果你想刪除多個檔案，可以這樣操作：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trash file1 file2 file3</span><br></pre></td></tr></table></figure><h2><span id="使用-alias-別名替換-rm-指令">使用 alias 別名替換 <code>rm</code> 指令</span></h2><p>為了進一步簡化操作並降低風險，我們可以為 <code>rm</code> 指令設定別名，使其預設使用 <code>trash</code> 指令。這樣，每次你使用 <code>rm</code> 指令時，實際上會呼叫 <code>trash</code> 指令。</p><p>打開你的 shell 設定檔案（例如 <code>.bashrc</code>、<code>.zshrc</code> 或 <code>.bash_profile</code>），並新增以下行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> rm=<span class="string">'trash'</span></span><br></pre></td></tr></table></figure><p>保存檔案並重新載入設定：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc   <span class="comment"># 或 source ~/.zshrc</span></span><br></pre></td></tr></table></figure><p>這樣，當你輸入 <code>rm filename</code> 時，實際上會執行 <code>trash filename</code>，避免了誤刪除檔案的風險。</p><h2><span id="如何從垃圾桶中還原檔案">如何從垃圾桶中還原檔案？</span></h2><p>要還原誤刪除的檔案，可以打開 Finder，然後導航到垃圾桶。找到你需要還原的檔案，右鍵點擊選擇<code>還原</code>即可。</p><h3><span id="結論">結論</span></h3><p>在 macOS 下使用 <code>rm</code> 指令時，誤刪除檔案是一個常見問題。使用 <code>trash</code> 指令可以有效避免這一風險，並提供一個安全的檔案刪除替代方案。透過設定 alias 別名，你可以進一步簡化操作，確保檔案刪除過程更加安全可靠。希望這篇文章能幫助你更好地保護你的重要檔案，提升你的 macOS 使用體驗。</p><p>以上就是 macOS 下使用 rm 指令如何避免誤刪除的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/ubuntu-prevent-accidental-deletion-with-rm-command/" title="Ubuntu 下使用 rm 指令如何避免誤刪除">Ubuntu 下使用 rm 指令如何避免誤刪除</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 macOS 下使用 rm 指令如何避免誤刪除，在 macOS 下，使用 &lt;code&gt;rm&lt;/code&gt; 指令刪除檔案和目錄是一種常見的操作。然而，誤刪除重要檔案可能帶來不小的麻煩。為了防止這類情況，我們可以採用一些替代方法來減少風險，其中之一便是
      
    
    </summary>
    
    
      <category term="macOS" scheme="https://shengyu7697.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>Linux nohup 斷線不中斷程式執行用法範例</title>
    <link href="https://shengyu7697.github.io/linux-nohup/"/>
    <id>https://shengyu7697.github.io/linux-nohup/</id>
    <published>2024-06-30T12:00:00.000Z</published>
    <updated>2024-06-16T13:45:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Linux nohup 指令用法，<code>nohup</code> 是一個 Linux 指令，用於執行指令時忽略 Hangup（斷開連線）訊號，使指令在後台執行，即使使用者退出登錄會話或斷開連線，該指令也將繼續執行。有時我們需要執行耗時較長的指令或行程，但希望即使在退出終端或斷開連線後，這些行程仍然能夠持續執行。這就是 nohup 指令的用武之地。現在讓我們簡單介紹一下 <code>nohup</code> 指令的基本用法、其他常見用法以及一些進階技巧和常用選項。</p><h2><span id="基本用法">基本用法</span></h2><p>要使用 <code>nohup</code>，只需在要執行的指令之前加上 <code>nohup</code>，然後在指令後面加上 <code>&amp;</code> 以將其放入後台執行。例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup <span class="built_in">command</span> &amp;</span><br></pre></td></tr></table></figure></p><p>這將使 <code>command</code> 在後台持續執行，即使使用者退出登錄會話或斷開連線。</p><h2><span id="其他常見用法">其他常見用法</span></h2><p><code>nohup</code> 指令將輸出重導向到檔案，範例如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup <span class="built_in">command</span> &gt; output.log &amp;</span><br></pre></td></tr></table></figure></p><p>這將 <code>command</code> 的輸出重導向到指定的檔案 <code>output.log</code> 中，以便您稍後查閱。</p><p><code>nohup</code> 指令忽略所有輸入，範例如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup <span class="built_in">command</span> &gt; /dev/null &amp;</span><br></pre></td></tr></table></figure></p><p>這將使 <code>command</code> 忽略所有輸入，並將所有輸出重導向到 <code>/dev/null</code>，即丟棄輸出。</p><h2><span id="nohup-常用選項"><code>nohup</code> 常用選項</span></h2><p><code>-p</code>：將 <code>nohup</code> 指令的行程 ID（PID）寫入指定檔案。<br><code>-c</code>：指定要執行的指令。<br><code>-f</code>：使指令在前台執行，即使有斷開連線的風險。</p><h2><span id="結語">結語</span></h2><p><code>nohup</code> 指令是在 Linux 系統中執行長時間指令的有用工具。透過將指令放入後台執行並忽略 Hangup 訊號，它可以確保即使在登錄會話結束後，指令仍然持續執行。藉助適當的輸出重導向，您可以將指令的輸出保存到檔案中，以便稍後檢查。<code>nohup</code> 的進階選項可以提供更多靈活性和控制，讓您更好地管理執行中的指令。</p><p>以上就是 Linux nohup 指令用法範例的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/linux-tutorial/" title="Linux 常用指令教學懶人包">Linux 常用指令教學懶人包</a><br><a href="/linux-wget/" title="Linux wget 下載檔案用法與範例">Linux wget 下載檔案用法與範例</a><br><a href="/linux-sed/" title="Linux sed 字串取代用法與範例">Linux sed 字串取代用法與範例</a><br><a href="/linux-find/" title="Linux find 尋找檔案/尋找資料夾用法與範例">Linux find 尋找檔案/尋找資料夾用法與範例</a><br><a href="/linux-grep-ack-ag/" title="Linux grep/ack/ag 搜尋字串用法與範例">Linux grep/ack/ag 搜尋字串用法與範例</a><br><a href="/linux-tee/" title="Linux tee 同時螢幕標準輸出和輸出到檔案用法與範例">Linux tee 同時螢幕標準輸出和輸出到檔案用法與範例</a><br><a href="/linux-xargs/" title="Linux xargs 參數清單轉換用法與範例">Linux xargs 參數清單轉換用法與範例</a><br><a href="/linux-tail/" title="Linux tail 持續監看檔案輸出用法與範例">Linux tail 持續監看檔案輸出用法與範例</a><br><a href="/linux-du/" title="Linux du 查詢硬碟剩餘空間/資料夾容量用法與範例">Linux du 查詢硬碟剩餘空間/資料夾容量用法與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Linux nohup 指令用法，&lt;code&gt;nohup&lt;/code&gt; 是一個 Linux 指令，用於執行指令時忽略 Hangup（斷開連線）訊號，使指令在後台執行，即使使用者退出登錄會話或斷開連線，該指令也將繼續執行。有時我們需要執行耗時較長的
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shengyu7697.github.io/tags/Ubuntu/"/>
    
      <category term="Linux Command" scheme="https://shengyu7697.github.io/tags/Linux-Command/"/>
    
      <category term="Linux" scheme="https://shengyu7697.github.io/tags/Linux/"/>
    
      <category term="Shell Script" scheme="https://shengyu7697.github.io/tags/Shell-Script/"/>
    
  </entry>
  
  <entry>
    <title>PHP 執行發生錯誤在 Chrome/Firefox 上顯示 Error 500，要怎麼讓 PHP 顯示錯誤</title>
    <link href="https://shengyu7697.github.io/php-display-errors/"/>
    <id>https://shengyu7697.github.io/php-display-errors/</id>
    <published>2024-06-29T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹怎麼讓 PHP 在瀏覽器上顯示錯誤，PHP 執行發生錯誤在 Chrome/Firefox 上顯示 Error 500，要怎麼辦？要怎麼讓 PHP 顯示錯誤？當你在使用 PHP 網站時遇到 Error 500（內部伺服器錯誤），這通常表示伺服器發生了某種錯誤。要解決這個問題，可以按照以下步驟來進行排查和顯示詳細錯誤訊息：</p><h2><span id="1-啟用-php-錯誤顯示">1. 啟用 PHP 錯誤顯示</span></h2><p>要讓 PHP 顯示錯誤訊息，可以在 PHP 設定檔 (<code>php.ini</code>) 中進行設定，或者在程式碼中直接啟用錯誤顯示。</p><h3><span id="修改-phpini-設定檔">修改 <code>php.ini</code> 設定檔</span></h3><p>找到並修改 <code>php.ini</code> 中以下設定：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">display_errors</span> = <span class="literal">On</span></span><br><span class="line"><span class="attr">display_startup_errors</span> = <span class="literal">On</span></span><br><span class="line"><span class="attr">error_reporting</span> = E_ALL</span><br></pre></td></tr></table></figure></p><p>修改後，重啟網頁伺服器（如 Apache 或 Nginx）。</p><h3><span id="在-php-程式碼中啟用錯誤顯示">在 PHP 程式碼中啟用錯誤顯示</span></h3><p>在 PHP 檔案的開頭加入以下程式碼：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ini_set(<span class="string">'display_errors'</span>, <span class="number">1</span>);</span><br><span class="line">ini_set(<span class="string">'display_startup_errors'</span>, <span class="number">1</span>);</span><br><span class="line">error_reporting(E_ALL);</span><br></pre></td></tr></table></figure></p><h2><span id="2-檢查伺服器錯誤日誌">2. 檢查伺服器錯誤日誌</span></h2><p>即使啟用了錯誤顯示，有時候錯誤仍然不會顯示在瀏覽器上，特別是如果伺服器設定了禁止顯示錯誤訊息給使用者。在這種情況下，可以檢查伺服器的錯誤日誌以找到詳細錯誤資訊。</p><h3><span id="apache">Apache</span></h3><p>Apache 的錯誤日誌通常位於 <code>/var/log/apache2/error.log</code> 或 <code>/var/log/httpd/error_log</code>。可以使用以下指令查看日誌：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /var/<span class="built_in">log</span>/apache2/error.log</span><br></pre></td></tr></table></figure></p><h3><span id="nginx">Nginx</span></h3><p>Nginx 的錯誤日誌通常位於 <code>/var/log/nginx/error.log</code>。可以使用以下指令查看日誌：<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -f /var/<span class="built_in">log</span>/nginx/error.log</span><br></pre></td></tr></table></figure></p><h2><span id="3-確認-htaccess-設定">3. 確認 .htaccess 設定</span></h2><p>如果你使用 Apache 伺服器，可能 <code>.htaccess</code> 檔案中的設定引起了錯誤。確保 <code>.htaccess</code> 檔案中沒有語法錯誤，並且設定正確。</p><h2><span id="4-檢查-php-腳本">4. 檢查 PHP 腳本</span></h2><p>確認你的 PHP 腳本中沒有語法錯誤或邏輯錯誤。可以使用 <code>php -l your_script.php</code> 來檢查 PHP 腳本的語法。</p><h2><span id="5-檢查-php-擴展">5. 檢查 PHP 擴展</span></h2><p>確保所有必要的 PHP 擴展都已正確安裝並啟用。有時候，缺少某些 PHP 擴展也會導致 500 錯誤。</p><p>透過以上步驟，你應該能夠找出並解決 PHP 網站中導致 Error 500 的問題。</p><p>以上就是怎麼讓 PHP 在瀏覽器上顯示錯誤教學介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 PHP 相關技術，可以參考看看下面的文章，<br><a href="/php-mysqli/" title="PHP 和 MySQLi 進行資料庫操作">PHP 和 MySQLi 進行資料庫操作</a><br><a href="/php-pdo/" title="PHP 和 PDO 進行資料庫操作">PHP 和 PDO 進行資料庫操作</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹怎麼讓 PHP 在瀏覽器上顯示錯誤，PHP 執行發生錯誤在 Chrome/Firefox 上顯示 Error 500，要怎麼辦？要怎麼讓 PHP 顯示錯誤？當你在使用 PHP 網站時遇到 Error 500（內部伺服器錯誤），這通常表示伺服器發生了
      
    
    </summary>
    
    
      <category term="PHP" scheme="https://shengyu7697.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>NextCloud 安裝教學、使用方式與常見問題</title>
    <link href="https://shengyu7697.github.io/nextcloud/"/>
    <id>https://shengyu7697.github.io/nextcloud/</id>
    <published>2024-06-28T12:00:00.000Z</published>
    <updated>2024-07-03T14:40:08.015Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 NextCloud 安裝教學、使用方式與常見問題，NextCloud是一個開源的雲端儲存和檔案同步解決方案，讓使用者可以在自己的伺服器上建立和管理私有雲。它類似於商業服務如 Dropbox 或 Google Drive，但提供了更高的隱私和控制權。目前 NextCloud 已經不支援 SQLite 只有支援 MySQL/MariaDB。NextCloud是一個靈活、安全且功能豐富的私有雲解決方案，特別適合希望保護資料隱私並需要自定義功能的使用者和企業，詳細介紹請見本文。</p><p>以下為本篇內容的目錄，</p><ul><li>Ubuntu NextCloud 安裝步驟</li><li>更換 nextcloud 儲存路徑</li><li>調整 PHP 的記憶體限制</li><li>為什麼 nextcloud 手機版 app 的功能沒有網頁版完整</li><li>QA. NextCloud 設定檔位置在哪？</li><li>QA. nextcloud log 檔位置在哪？</li><li>遇到 Internal Server Error 問題怎麼看 log</li><li>遇到 Nextcloud 硬碟容量滿的問題</li><li>增加信任的網域及內網的 IP</li><li>QA. 怎麼分享照片給別人，即使別人沒有帳號的情況下</li><li>QA. 手機照片備份後，我手機刪了某張照片後，nextcloud 遠端備份的那張會刪除嗎？</li><li>QA. 反過來的話，手機照片備份後，nextcloud 遠端備份刪了某張照片後，我手機那張會刪除嗎？</li><li>QA. 通常檢視、整理、刪減照片這個動作應該在手機端操作還是 nextcloud 遠端上？</li><li>資料安全建議</li></ul><h2><span id="ubuntu-nextcloud-安裝步驟">Ubuntu NextCloud 安裝步驟</span></h2><p>以下為 Ubuntu 22.04 的 NextCloud 安裝方式，在 Ubuntu 22.04 中 php 版本已更新到 8.1，以下為安裝步驟，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br><span class="line">sudo apt install apache2 mariadb-server libapache2-mod-php php-gd php-mysql \</span><br><span class="line">php-curl php-mbstring php-intl php-gmp php-bcmath php-xml php-imagick php-zip</span><br></pre></td></tr></table></figure></p><p>使用 MySQL 指令執行以下步驟，建立一個名為 nextcloud 的mysql 資料庫及使用者，<code>your-password</code> 部分的密碼改用你自己的設定。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql</span><br><span class="line">CREATE USER &apos;nextcloud&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;your-password&apos;;</span><br><span class="line">CREATE DATABASE IF NOT EXISTS nextcloud CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;</span><br><span class="line">GRANT ALL PRIVILEGES ON nextcloud.* TO &apos;nextcloud&apos;@&apos;localhost&apos;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">quit;</span><br></pre></td></tr></table></figure></p><p>到目前為止，已經完成 nextcloud 所有依賴套件的安裝，接下來準備安裝 nextcloud，<br>下載 nextcloud，現在最新版的 nectcloud是 29.0.3，然後解壓縮到 <code>/var/www/html</code> 目錄下，官網說明是解壓縮到 <code>/var/www/</code> 這邊我採用常見的作法，如果沒有安裝unzip程式會無法解壓縮，要先用 <code>sudo apt install unzip</code> 安裝 unzip 程式，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.nextcloud.com/server/releases/nextcloud-29.0.3.zip</span><br><span class="line">sudo unzip nextcloud-29.0.3.zip -d /var/www/html</span><br><span class="line">sudo chown -R www-data:www-data /var/www/html/nextcloud/</span><br></pre></td></tr></table></figure></p><p>以下 apache2 的設定有兩種方式，一種方式是用 IP 或是 <code>https://www.example.com/nextcloud/</code> 這種方式。另一種是用 vhost 虛擬主機的方式，例如你想要你的 Nextcloud 能夠像 <a href="https://cloud.example.com/" rel="noopener" target="_blank">https://cloud.example.com/</a> 這樣的子網域存取的話.。</p><p>這邊先介紹第一種方式，新增 nextcloud.conf 設定檔到 apache2 下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apache2/sites-available/nextcloud.conf</span><br></pre></td></tr></table></figure></p><p>nextcloud.conf 設定檔如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Alias /nextcloud &quot;/var/www/html/nextcloud/&quot;</span><br><span class="line"></span><br><span class="line">&lt;Directory /var/www/html/nextcloud/&gt;</span><br><span class="line">  Require all granted</span><br><span class="line">  AllowOverride All</span><br><span class="line">  Options FollowSymLinks MultiViews</span><br><span class="line"></span><br><span class="line">  &lt;IfModule mod_dav.c&gt;</span><br><span class="line">    Dav off</span><br><span class="line">  &lt;/IfModule&gt;</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></p><p>這是第二種 vhost 虛擬主機方式，建立 apache2 的虛擬主機設定檔，如果有多個主機名稱，需要個別建立。</p><p>nextcloud.conf 設定檔如下，ServerName 的 <code>your.server.com</code> 要換成你自己的網域名稱，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">  DocumentRoot /var/www/html/nextcloud/</span><br><span class="line">  ServerName  your.server.com</span><br><span class="line"></span><br><span class="line">  &lt;Directory /var/www/html/nextcloud/&gt;</span><br><span class="line">    Require all granted</span><br><span class="line">    AllowOverride All</span><br><span class="line">    Options FollowSymLinks MultiViews</span><br><span class="line"></span><br><span class="line">    &lt;IfModule mod_dav.c&gt;</span><br><span class="line">      Dav off</span><br><span class="line">    &lt;/IfModule&gt;</span><br><span class="line">  &lt;/Directory&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></p><p>之後啟用這個網站設定，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo a2ensite nextcloud</span><br></pre></td></tr></table></figure></p><p>啟用 apache2 的相關模組，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo a2enmod rewrite headers env dir mime setenvif ssl</span><br></pre></td></tr></table></figure></p><p>重新啟動 apache2，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure></p><p>在瀏覽器上輸入: <code>http://xx.xx.xx.xx/nextcloud/</code>(第一種設定) 或是 <code>http://your.server.com</code> (第二種設定)</p><p>接下來就可以看到 nextcloud 的設定畫面，最上面是準備要新增 nextcloud 的管理員帳號，中間是 server 上資料的存放位置，下面是資料庫的相關設定。<br><img src="/nextcloud/nextcloud-1.png" title="nextcloud">  </p><p>設定資料庫內容，輸入在剛剛前面 mysql 設定的帳號密碼，<br><img src="/nextcloud/nextcloud-2.png" title="nextcloud">  </p><p>按下 Install 等一段時間安裝後，之後就會跳轉頁面，這樣就可以開始使用 nextcloud 了唷！耶！<br><img src="/nextcloud/nextcloud-3.png" title="nextcloud">  </p><p>相關參考<br><a href="https://docs.nextcloud.com/server/latest/admin_manual/installation/example_ubuntu.html" rel="noopener" target="_blank">Example installation on Ubuntu 22.04 LTS</a><br><a href="https://docs.nextcloud.com/server/latest/admin_manual/installation/source_installation.html#apache-configuration-label" rel="noopener" target="_blank">Apache Web server configuration</a><br><a href="https://luyaku.pixnet.net/blog/post/355073992" rel="noopener" target="_blank">Ubuntu Server 22.04 LTS的架設 8. Nextcloud server架設</a></p><p>安裝完基本上已經可以使用，但是想要或提更加的使用體驗的話，最好確認你的環境是否有調整到最佳狀態，可以利用<code>概覽</code>確認建議修正事項，詳細看後續介紹。</p><h2><span id="更換-nextcloud-儲存路徑">更換 nextcloud 儲存路徑</span></h2><p>預設的檔案路徑是放在 /var/www/html/nextcloud/data ，但 /var 這個目錄磁碟空間往往比較小，<br>所以我個人是把檔案放在 /home/nextcloud 這個目錄下。<br>所以要先在 /home 目錄下建立 nextcloud目錄並把owner及權限設好，執行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /home/nextcloud</span><br><span class="line">sudo chown -R www-data:www-data /home/nextcloud</span><br><span class="line">sudo chmod 755 /home/nextcloud</span><br></pre></td></tr></table></figure></p><h2><span id="設定-crontab-機制">設定 crontab 機制</span></h2><p>在網頁版裡的<code>基本設定</code>&gt;<code>背景工作</code>裡將 AJAX 換成 Cron。</p><p>其他相關參考<br><a href="https://docs.ossii.com.tw/books/nextcloud-G0B/page/nextcloud-Acd" rel="noopener" target="_blank">Nextcloud 基本參數調校作業</a></p><h2><span id="調整-php-的記憶體限制">調整 PHP 的記憶體限制</span></h2><p>在網頁版裡的<code>管理</code>&gt;<code>概覽</code>裡會出現「目前的 PHP 的記憶體限制設定低於建議值 512 MB。」的訊息</p><p>編輯 php 設定檔<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/php/8.1/apache2/php.ini</span><br></pre></td></tr></table></figure></p><p>從原本的 128M 改成 512M，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memory_limit = 512M</span><br></pre></td></tr></table></figure></p><p>之後在重啟 Apache 服務，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure></p><h2><span id="為什麼-nextcloud-手機版-app-的功能沒有網頁版完整">為什麼 nextcloud 手機版 app 的功能沒有網頁版完整</span></h2><p>Nextcloud 的手機版 app 一般不如網頁介面功能全面。這是因為手機應用主要專注於檔案同步和基本功能，以保持輕便和易於使用。網頁介面則提供了更廣泛的功能和設定選項，適合進行更深入的管理和設定。</p><p>以下是一些在手機版 app 上可能缺少的功能：</p><ol><li><strong>詳細的管理設定</strong>：如使用者管理、組織管理和應用管理等。</li><li><strong>應用擴展</strong>：一些應用和擴展功能僅能透過網頁介面訪問和設定。</li><li><strong>詳細日誌和報告</strong>：更詳細的日誌和報告功能通常需要在網頁介面中查看。</li><li><strong>高級設定</strong>：如共享設定、高級安全設定等。</li></ol><p>如果你需要使用這些更高級的功能，建議使用網頁介面訪問 Nextcloud。手機版應用更多是用於日常的檔案訪問和簡單的同步操作。</p><h2><span id="qa-nextcloud-設定檔位置在哪">QA. NextCloud 設定檔位置在哪？</span></h2><p>NextCloud 設定檔設定位置在 <code>/var/www/html/nextcloud/config/config.php</code></p><h2><span id="qa-nextcloud-log-檔位置在哪">QA. nextcloud log 檔位置在哪？</span></h2><p>Nextcloud 的 log 檔位置通常在安裝目錄下的 <code>data</code> 資料夾內。預設情況下的路徑是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/var/www/nextcloud/data/nextcloud.log # 官網設定</span><br><span class="line">或</span><br><span class="line">/var/www/html/nextcloud/data/nextcloud.log # 其他常見設定</span><br></pre></td></tr></table></figure><p>網頁版要怎麼查看的話，可以看這篇<br><a href="https://rangotec.com/blog/46.html" rel="noopener" target="_blank">https://rangotec.com/blog/46.html</a></p><h2><span id="遇到-internal-server-error-問題怎麼看-log">遇到 Internal Server Error 問題怎麼看 log</span></h2><p>查看 log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tail -f /var/log/apache2/error.log</span><br><span class="line">or</span><br><span class="line">tail -f /usr/local/apache2/logs/error.log</span><br></pre></td></tr></table></figure></p><h2><span id="遇到-nextcloud-硬碟容量滿的問題">遇到 Nextcloud 硬碟容量滿的問題</span></h2><p>首先先確認是不是真的硬碟容量滿了，使用 df -h 指令查看，我就遇過我的 VM 開 40GB 空間，但VM開啟安裝好後檢查空間上限結果是變成19 GB<br><a href="https://www.coder17.com/posts/nextcloud-storage-full/" rel="noopener" target="_blank">Nextcloud 誤報儲存已滿</a><br><a href="https://blog.csdn.net/gyro1/article/details/101280541" rel="noopener" target="_blank">NextCloud 在Nginx下報告報告空間不足</a><br>它使用NGINX，NextCloud 是透過 /index.php/apps/files/ajax/getstoragestats.php 來取得可用空間的，但是如果設定不正確的nginx的pathinfo，就會壞掉，看起新版沒有這個檔案了。</p><h2><span id="增加信任的網域及內網的-ip">增加信任的網域及內網的 IP</span></h2><p>新增加信任的網域及內網的 IP，如果未來有設要跟 NextCloud 結合會建在這裡增網域及 IP<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&apos;trusted_domains&apos; =&gt; </span><br><span class="line">array (</span><br><span class="line">  0 =&gt; &apos;[sub.domain].com&apos;,</span><br><span class="line">  1 =&gt; &apos;192.168.1.10&apos;,</span><br><span class="line">),</span><br></pre></td></tr></table></figure></p><h2><span id="qa-怎麼分享照片給別人即使別人沒有帳號的情況下">QA. 怎麼分享照片給別人，即使別人沒有帳號的情況下</span></h2><p>選照片後，可以按分享連結後就可以產生一個短連結分享給其他人，這就很像google 雲端硬碟分享照片設定權限給任何知道連結的人都能觀看的那個功能。</p><h2><span id="qa-手機照片備份後我手機刪了某張照片後nextcloud-遠端備份的那張會刪除嗎">QA. 手機照片備份後，我手機刪了某張照片後，nextcloud 遠端備份的那張會刪除嗎？</span></h2><p>手機照片備份到 Nextcloud 後，如果你在手機上刪除了某張照片，Nextcloud 遠端備份的那張照片通常不會自動刪除。Nextcloud 主要是用於備份和同步檔案，但它不會預設同步刪除操作，除非你啟用了特定的同步選項。</p><h2><span id="qa-反過來的話手機照片備份後nextcloud-遠端備份刪了某張照片後我手機那張會刪除嗎">QA. 反過來的話，手機照片備份後，nextcloud 遠端備份刪了某張照片後，我手機那張會刪除嗎？</span></h2><p>如果你在 Nextcloud 遠端備份中刪除了某張照片，通常情況下，你手機上的那張照片不會被刪除。這是因為大多數情況下，Nextcloud 的自動上傳功能是單向的（從手機上傳到伺服器），而不是雙向同步。</p><h2><span id="qa-通常檢視-整理-刪減照片這個動作應該在手機端操作還是-nextcloud-遠端上">QA. 通常檢視、整理、刪減照片這個動作應該在手機端操作還是 nextcloud 遠端上？</span></h2><p>通常情況下，建議在手機端進行檢視、整理和刪除照片，因為手機端的操作更加直觀和方便，並且可以確保你只刪除真正不需要的照片。下面是一些詳細的理由和建議：</p><h3><span id="在手機端操作的優勢">在手機端操作的優勢</span></h3><ol><li><strong>直觀方便</strong>：手機端可以直接預覽照片，放大細節，更容易判斷照片的質量和是否需要保留。</li><li><strong>立即效果</strong>：在手機端刪除或整理照片可以立即看到效果，不需要等待同步。</li><li><strong>避免誤刪</strong>：在手機端操作，可以更好地控制刪除的內容，減少誤刪重要照片的風險。</li></ol><h3><span id="nextcloud-遠端操作的優勢">Nextcloud 遠端操作的優勢</span></h3><ol><li><strong>節省手機儲存</strong>：如果你的手機儲存空間有限，可以將不常用的照片備份到 Nextcloud 後再從手機上刪除。</li><li><strong>集中管理</strong>：Nextcloud 端可以更方便地集中管理和備份大量照片，特別是如果你有多台裝置需要統一管理照片。</li></ol><h3><span id="推薦的操作流程">推薦的操作流程</span></h3><ol><li><p><strong>在手機端進行初步整理</strong>：</p><ul><li>定期在手機端查看和刪除不需要的照片（例如模糊、不合格或重覆的照片）。</li><li>保留重要的和需要備份的照片。</li></ul></li><li><p><strong>將整理後的照片備份到 Nextcloud</strong>：</p><ul><li>使用 Nextcloud 自動上傳功能，備份整理後的照片到伺服器。</li></ul></li><li><p><strong>在 Nextcloud 端進行二次整理（可選）</strong>：</p><ul><li>如果需要進一步分類或刪除不需要的備份照片，可以在 Nextcloud 端進行。</li><li>注意確保不會影響手機端的照片。</li></ul></li></ol><h2><span id="資料安全建議">資料安全建議</span></h2><ol><li><strong>多重備份</strong>：除了 Nextcloud，可以考慮將重要照片備份到其他雲服務或外部儲存裝置，增加資料的安全性。</li><li><strong>定期檢查</strong>：定期檢查手機和 Nextcloud 上的照片，確保所有重要照片都已經備份，並且沒有誤刪。</li></ol><h2><span id="其他網友遇到的問題">其他網友遇到的問題</span></h2><p><a href="https://rangotec.com/blog/29.html" rel="noopener" target="_blank">Nextcloud 局域网上传速度慢</a><br>不確定新版本還有沒有這個問題，待確認</p><p>其他相關參考<br><a href="https://www.asustor.com/zh-tw/online/College_topic?topic=273" rel="noopener" target="_blank">使用 Nextcloud 在 ASUSTOR NAS 上進行協同作業</a><br>在 ASUSTOR NAS 上安裝 Nextcloud 並將其與 OnlyOffice 結合使用以進行協同作業</p><p>以上就是 NextCloud 安裝教學與使用方式介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 NextCloud 安裝教學、使用方式與常見問題，NextCloud是一個開源的雲端儲存和檔案同步解決方案，讓使用者可以在自己的伺服器上建立和管理私有雲。它類似於商業服務如 Dropbox 或 Google Drive，但提供了更高的隱私和控制權
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>信義101健康管理診所 體驗心得</title>
    <link href="https://shengyu7697.github.io/xinyi101/"/>
    <id>https://shengyu7697.github.io/xinyi101/</id>
    <published>2024-06-27T12:00:00.000Z</published>
    <updated>2024-06-30T04:00:06.940Z</updated>
    
    <content type="html"><![CDATA[<p>近期 ShengYu 進行年度健康檢查，今年比較特別就想選新的健檢中心嘗試看看，就選了信義101健康管理診所這家健檢中心，就來順手紀錄一下體驗心得。</p><p>第一次來信義101健康管理診所進行年度檢查，先用機台報到後會有號碼，然後準備等櫃檯叫號，然後會請你安裝他們的APP，稍後會用到。<br><img src="/xinyi101/PXL_20240626_002521002.jpg" width="640" title="信義101">  </p><p>捷運紅線101下車2號出口走出來後就可以看到這棟建築物了，信義101健康管理診所位於這棟大樓的4樓，這棟看起來都是新光集團的。<br><img src="/xinyi101/PXL_20240626_040539440.jpg" width="640" title="信義101">  </p><p>第一次做電梯是要在外面先按樓層，然後它在告訴你去哪個電梯搭，沒見過世面的鄉下孩子XD。<br><img src="/xinyi101/PXL_20240626_002533853.jpg" width="640" title="信義101">  </p><p>這一袋是等等要換的衣服褲子跟拖鞋，是送的可以帶回家，蛤？！我當下嚇到，可以帶回家喔，但是發現有Logo不會穿出門，大概在家穿吧。事後才知道原來是公司合作的方案中會送，一般要回收的是紫色的。男生只能穿自己的內褲，還有帶著手機，因為要看APP看診號跑站點。<br><img src="/xinyi101/PXL_20240626_003836357.jpg" width="640" title="信義101"> <img src="/xinyi101/PXL_20240626_003845987.jpg" width="640" title="信義101">  </p><p>動線算是一個放射線的路線，每個門診前都有座位區可以等候，還有螢幕可以看候位狀況，不時地也會有人來告訴你怎麼去哪一號門診，每門診結束後都會告訴你下一站去哪一號，整個健檢中心都在同一層樓，這部分表現不錯。<br><img src="/xinyi101/PXL_20240626_005209008.jpg" width="640" title="信義101"><br><img src="/xinyi101/PXL_20240626_033301146.jpg" width="640" title="信義101">  </p><p>花了兩個多小時終於跑完所有站點做完檢查，肚子超餓的，來去用餐了，用餐環境不錯，領取號碼牌就直接去想做的位子等就可以了。<br><img src="/xinyi101/PXL_20240626_025845302.jpg" width="640" title="信義101">  </p><p>餐點會稍候送到位子上，餐點我是選雞肉沙拉，吃起來還不錯，飲料可續杯，第二杯我換黑咖啡提提神，跟別間健檢中心相比，我還是比較喜歡吃有飯的餐盒，我是飯食主義者，沙拉吃不飽，雖然裡面也有一些地瓜跟幾條螺旋麵。<br><img src="/xinyi101/PXL_20240626_030013805.jpg" width="640" title="信義101">  </p><h2><span id="結論">結論</span></h2><p>整體來說，感受是不錯的，唯獨少數一些站點人員可能有一些職業倦怠，過程中講的一連串東西沒想過有沒有聽進去，就是把它講完交差了事，遇到大約2-3個這樣的狀況，排除這個問題以外，整體的感覺是不錯的。</p><p>檢查報告的部分，PDF電子檔報告要15個工作天寄送電子信箱，實體紙本報告要20個工作天。如果可以當天就知道檢驗結果的話會更好，我之前去的健檢中心都可以做到當天就能看報告還有醫生跟你一起看，然後之後報告再寄送。</p><p>最後誠心建議，很久沒健康檢查的各位，要定期去做檢康檢查唷！不要工作忙碌就忘記去檢查唷！身體跟汽車一樣也是要進場保養維修，這樣才能開更久遠。</p><p>附上本次的健檢中心資訊，<br>官網連結：<a href="https://www.xinyi101.com.tw/" rel="noopener" target="_blank">信義101健康管理診所</a><br>地址：台北市信義區信義路五段8號4樓</p><iframe src="https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d14460.152865894115!2d121.5609844!3d25.0327771!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x3442ab44d70acd2f%3A0x5be6b87e4e1486c3!2z5L-h576pMTAx5YGl5bq3566h55CG6Ki65omA!5e0!3m2!1szh-TW!2stw!4v1719714401505!5m2!1szh-TW!2stw" width="100%" height="400" style="border:0;" allowfullscreen loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe><p>如果你覺得我的分享寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;近期 ShengYu 進行年度健康檢查，今年比較特別就想選新的健檢中心嘗試看看，就選了信義101健康管理診所這家健檢中心，就來順手紀錄一下體驗心得。&lt;/p&gt;
&lt;p&gt;第一次來信義101健康管理診所進行年度檢查，先用機台報到後會有號碼，然後準備等櫃檯叫號，然後會請你安裝他們的A
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>3 種 Python 字串搜尋並且忽略大小寫方法</title>
    <link href="https://shengyu7697.github.io/python-search-strings-ignore-case/"/>
    <id>https://shengyu7697.github.io/python-search-strings-ignore-case/</id>
    <published>2024-06-26T12:00:00.000Z</published>
    <updated>2024-06-27T13:00:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 3 種 Python 字串搜尋並且忽略大小寫方法，在 Python 程式設計中，字串搜尋是一個常見且重要的操作。無論是檢查使用者輸入，還是從大量資料中篩選特定資訊，能夠有效地搜尋字串都是至關重要的。而在進行字串搜尋時，我們經常需要忽略大小寫。本文將介紹幾種在 Python 中搜尋字串並忽略大小寫的方法。</p><h2><span id="方法一使用-in-來進行大小寫無關的搜尋">方法一：使用 <code>in</code> 來進行大小寫無關的搜尋</span></h2><p><code>in</code> 關鍵字是 Python 中最簡單的字串搜尋方法之一。要忽略大小寫，可以將字串和關鍵字都轉換為小寫或大寫後再進行比較。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">keyword = <span class="string">"python"</span></span><br><span class="line">text = <span class="string">"I love programming in Python."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> keyword.lower() <span class="keyword">in</span> text.lower():</span><br><span class="line">    print(<span class="string">"Keyword found!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Keyword not found."</span>)</span><br></pre></td></tr></table></figure><p>這種方法直觀且易於實現，非常適合用於簡單的字串匹配需求。</p><h2><span id="方法二使用-casefold-進行更強大的大小寫無關搜尋">方法二：使用 <code>casefold()</code> 進行更強大的大小寫無關搜尋</span></h2><p><code>casefold()</code> 方法比 <code>lower()</code> 更強大，因為它不僅可以處理 ASCII 字元，還能處理其他語言中的字元。這使得它在國際化應用中尤為有效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">keyword = <span class="string">"python"</span></span><br><span class="line">text = <span class="string">"I love programming in Python."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> keyword.casefold() <span class="keyword">in</span> text.casefold():</span><br><span class="line">    print(<span class="string">"Keyword found!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Keyword not found."</span>)</span><br></pre></td></tr></table></figure><h2><span id="方法三使用正則表達式進行大小寫無關的搜尋">方法三：使用正則表達式進行大小寫無關的搜尋</span></h2><p>正則表達式（Regular Expressions, 簡稱 regex）是一種功能強大的字串處理工具。在 Python 中，我們可以使用 <code>re</code> 模組並指定 <code>re.IGNORECASE</code> 標誌來進行不區分大小寫的匹配。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">keyword = <span class="string">"python"</span></span><br><span class="line">text = <span class="string">"I love programming in Python."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> re.search(keyword, text, re.IGNORECASE):</span><br><span class="line">    print(<span class="string">"Keyword found!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Keyword not found."</span>)</span><br></pre></td></tr></table></figure><p>這種方法適用於更複雜的匹配需求，例如模式匹配或多次出現的關鍵字。</p><h2><span id="小結">小結</span></h2><p>在 Python 中搜尋字串並忽略大小寫有多種方法可以選擇。使用 <code>in</code> 關鍵字、<code>casefold()</code> 方法以及正則表達式都能達到這個目的。根據具體需求選擇合適的方法，可以讓你的程式更加高效和準確。希望這些方法能幫助你在 Python 字串處理上更加得心應手。</p><p>以上就是 3 種在 Python 中進行字串搜尋且忽略大小寫的常用方法介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a><br><a href="/python-search-keywords-in-string/" title="4 種 Python 字串中搜尋關鍵字的方法">4 種 Python 字串中搜尋關鍵字的方法</a><br><a href="/python-str-find/" title="Python str.find() 用法與範例">Python str.find() 用法與範例</a><br><a href="/python-str/" title="Python str 字串用法與範例">Python str 字串用法與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 3 種 Python 字串搜尋並且忽略大小寫方法，在 Python 程式設計中，字串搜尋是一個常見且重要的操作。無論是檢查使用者輸入，還是從大量資料中篩選特定資訊，能夠有效地搜尋字串都是至關重要的。而在進行字串搜尋時，我們經常需要忽略大小寫。本文
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>4 種 Python 字串中搜尋關鍵字的方法</title>
    <link href="https://shengyu7697.github.io/python-search-keywords-in-string/"/>
    <id>https://shengyu7697.github.io/python-search-keywords-in-string/</id>
    <published>2024-06-24T12:00:00.000Z</published>
    <updated>2024-06-30T02:30:07.713Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 4 種 Python 字串中搜尋關鍵字的方法，在 Python 中，搜尋字串中的關鍵字是一項常見且基本的操作。無論是處理文字資料、過濾日誌檔案，還是開發網頁爬蟲，了解如何在字串中搜尋關鍵字都十分重要。本文將介紹四種在 Python 中搜尋關鍵字的方法，幫助你更有效地處理文字資料。</p><h2><span id="1-使用-in-運算子">1. 使用 <code>in</code> 運算子</span></h2><p><code>in</code> 運算子是 Python 中最簡單且直觀的方法之一。它用於檢查子串是否存在於另一個字串中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"Python is a powerful programming language."</span></span><br><span class="line">keyword = <span class="string">"powerful"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> keyword <span class="keyword">in</span> text:</span><br><span class="line">    print(<span class="string">"Keyword found!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Keyword not found."</span>)</span><br></pre></td></tr></table></figure><p>這種方法簡潔明瞭，非常適合用於簡單的存在性檢查。</p><h2><span id="2-使用-strfind-方法">2. 使用 <code>str.find()</code> 方法</span></h2><p><code>str.find()</code> 方法回傳子串在字串中的最低索引值，如果未找到子串，則回傳 -1。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"Python is a powerful programming language."</span></span><br><span class="line">keyword = <span class="string">"powerful"</span></span><br><span class="line"></span><br><span class="line">position = text.find(keyword)</span><br><span class="line"><span class="keyword">if</span> position != <span class="number">-1</span>:</span><br><span class="line">    print(<span class="string">f"Keyword found at position <span class="subst">&#123;position&#125;</span>."</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Keyword not found."</span>)</span><br></pre></td></tr></table></figure><p>這種方法比 <code>in</code> 運算子提供更多的資訊，如子串的具體位置。</p><h2><span id="3-使用-re-模組進行正則表達式搜尋">3. 使用 <code>re</code> 模組進行正則表達式搜尋</span></h2><p><code>re</code> 模組允許使用正則表達式進行更複雜的模式對應。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">text = <span class="string">"Python is a powerful programming language."</span></span><br><span class="line">keyword = <span class="string">"powerful"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> re.search(keyword, text):</span><br><span class="line">    print(<span class="string">"Keyword found!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Keyword not found."</span>)</span><br></pre></td></tr></table></figure><p>正則表達式適合需要進行複雜模式對應的情況，例如在文字中搜尋多個變化形式的關鍵字。</p><h2><span id="4-使用-strindex-方法">4. 使用 <code>str.index()</code> 方法</span></h2><p><code>str.index()</code> 方法類似於 <code>str.find()</code>，但當子串未找到時會引發 <code>ValueError</code> 異常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"Python is a powerful programming language."</span></span><br><span class="line">keyword = <span class="string">"powerful"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    position = text.index(keyword)</span><br><span class="line">    print(<span class="string">f"Keyword found at position <span class="subst">&#123;position&#125;</span>."</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    print(<span class="string">"Keyword not found."</span>)</span><br></pre></td></tr></table></figure><p>這種方法適合需要處理異常情況的應用場景。</p><h2><span id="結語">結語</span></h2><p>了解和掌握不同的搜尋方法能夠幫助你在處理文字資料時更靈活應對各種需求。每種方法都有其獨特的優勢和適用場景，選擇合適的方法可以使你的程式碼更加高效和可讀性更高。</p><p>以上就是 4 種 Python 字串中搜尋關鍵字的方法的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a><br><a href="/python-search-strings-ignore-case/" title="3 種 Python 字串搜尋並且忽略大小寫方法">3 種 Python 字串搜尋並且忽略大小寫方法</a><br><a href="/python-str-find/" title="Python str.find() 用法與範例">Python str.find() 用法與範例</a><br><a href="/python-str/" title="Python str 字串用法與範例">Python str 字串用法與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 4 種 Python 字串中搜尋關鍵字的方法，在 Python 中，搜尋字串中的關鍵字是一項常見且基本的操作。無論是處理文字資料、過濾日誌檔案，還是開發網頁爬蟲，了解如何在字串中搜尋關鍵字都十分重要。本文將介紹四種在 Python 中搜尋關鍵字的
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Linux pstree 指令用法範例</title>
    <link href="https://shengyu7697.github.io/linux-pstree/"/>
    <id>https://shengyu7697.github.io/linux-pstree/</id>
    <published>2024-06-23T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Linux pstree 指令用法，<code>pstree</code> 是一個用於以樹狀結構顯示行程的 Linux 指令。它可以幫助您更清晰地了解系統中執行的行程及其之間的關係，例如：我想要知道這個執行緒是在哪個父行程裡的，或者我想要知道這個行程裡有哪些子執行緒，使用 <code>pstree</code> 超方便一目瞭然。現在讓我們來簡單介紹一下 <code>pstree</code> 指令的基本用法、其他常見用法和一些進階技巧以及常用選項。</p><h3><span id="基本用法">基本用法</span></h3><p>要使用 <code>pstree</code>，只需在終端中輸入以下指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pstree</span><br></pre></td></tr></table></figure></p><p>這將顯示當前系統中執行的所有行程的樹狀結構。每個行程的名稱將按照其隸屬關係進行縮進。</p><img src="/linux-pstree/pstree.png" title="pstree">  <h3><span id="其他常見用法">其他常見用法</span></h3><p><code>pstree</code> 指令顯示指定行程的樹狀結構：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pstree -p PID</span><br></pre></td></tr></table></figure></p><p>這將僅顯示指定行程 ID（PID）的樹狀結構。將 <code>PID</code> 替換為要查詢的行程 ID。</p><img src="/linux-pstree/pstree2.png" title="pstree">  <p><code>pstree</code> 指令顯示完整的行程指令行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pstree -a</span><br></pre></td></tr></table></figure></p><p>這將顯示每個行程的完整指令行，而不僅僅是行程名。</p><img src="/linux-pstree/pstree3.png" title="pstree">  <h3><span id="pstree-常用選項"><code>pstree</code> 常用選項</span></h3><p>當你在 Linux 系統中執行 <code>pstree</code> 指令時，你可以使用一些選項來調整它的行為。以下是一些常用的選項及其說明：<br><code>-p</code>：顯示每個行程的行程 ID（PID）。<br><code>-n</code>：按行程 ID（PID）進行數字排序。<br><code>-u</code>：顯示每個行程的使用者名稱和 UID。<br><code>-G</code>：將與當前使用者相關的行程以及其父行程用顏色高亮顯示。<br><code>-h</code>：高亮顯示指定的 PID 及其祖先。<br><code>-H</code>：高亮顯示當前 <code>pstree</code> 指令的 PID 及其祖先。<br><code>-a</code>：顯示行程的指令行參數。<br><code>-l</code>：以長格式顯示，包括 PID、PPID、PGID 和 SID。<br><code>-s</code>：顯示每個行程的行程組 ID（PGID）。</p><p>這些選項可以根據你的需求來定制 <code>pstree</code> 指令的輸出，以便更好地理解系統中行程的層次結構。</p><h3><span id="結語">結語</span></h3><p>透過 <code>pstree</code> 指令，您可以以一種清晰易懂的方式查看系統中執行的行程及其之間的隸屬關係。這對於理解系統的執行狀況和行程之間的相互作用非常有用。請記住，在進行系統故障排查或性能優化時，<code>pstree</code> 是一個非常實用的工具。</p><p>以上就是 Linux pstree 指令用法範例的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/linux-tutorial/" title="Linux 常用指令教學懶人包">Linux 常用指令教學懶人包</a><br><a href="/linux-wget/" title="Linux wget 下載檔案用法與範例">Linux wget 下載檔案用法與範例</a><br><a href="/linux-sed/" title="Linux sed 字串取代用法與範例">Linux sed 字串取代用法與範例</a><br><a href="/linux-find/" title="Linux find 尋找檔案/尋找資料夾用法與範例">Linux find 尋找檔案/尋找資料夾用法與範例</a><br><a href="/linux-grep-ack-ag/" title="Linux grep/ack/ag 搜尋字串用法與範例">Linux grep/ack/ag 搜尋字串用法與範例</a><br><a href="/linux-tee/" title="Linux tee 同時螢幕標準輸出和輸出到檔案用法與範例">Linux tee 同時螢幕標準輸出和輸出到檔案用法與範例</a><br><a href="/linux-xargs/" title="Linux xargs 參數清單轉換用法與範例">Linux xargs 參數清單轉換用法與範例</a><br><a href="/linux-tail/" title="Linux tail 持續監看檔案輸出用法與範例">Linux tail 持續監看檔案輸出用法與範例</a><br><a href="/linux-du/" title="Linux du 查詢硬碟剩餘空間/資料夾容量用法與範例">Linux du 查詢硬碟剩餘空間/資料夾容量用法與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Linux pstree 指令用法，&lt;code&gt;pstree&lt;/code&gt; 是一個用於以樹狀結構顯示行程的 Linux 指令。它可以幫助您更清晰地了解系統中執行的行程及其之間的關係，例如：我想要知道這個執行緒是在哪個父行程裡的，或者我想要知道這個
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shengyu7697.github.io/tags/Ubuntu/"/>
    
      <category term="Linux Command" scheme="https://shengyu7697.github.io/tags/Linux-Command/"/>
    
      <category term="Linux" scheme="https://shengyu7697.github.io/tags/Linux/"/>
    
      <category term="Shell Script" scheme="https://shengyu7697.github.io/tags/Shell-Script/"/>
    
  </entry>
  
  <entry>
    <title>使用 PHP 的 PDO 進行資料庫操作：入門指南</title>
    <link href="https://shengyu7697.github.io/php-pdo/"/>
    <id>https://shengyu7697.github.io/php-pdo/</id>
    <published>2024-06-22T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 PHP 和 PDO 進行資料庫操作用法，在 PHP 開發中，與資料庫進行互動是一個常見的需求。PDO（PHP Data Objects）是一個提供一致接口來訪問多種資料庫的擴展。PDO 使得處理不同資料庫（如 MySQL、PostgreSQL、SQLite 等）變得更加容易和一致。本文將介紹如何使用 PDO 進行基本的資料庫操作，包括連線資料庫、執行查詢、插入、更新和刪除資料。</p><h2><span id="什麼是-pdo">什麼是 PDO？</span></h2><p>PDO（PHP Data Objects）是一個物件導向的資料庫抽象層，旨在提高安全性和開發效率，同時提供一致的語法以支援多種資料庫。PDO 的功能和特點如下：</p><ol><li><p><strong>通用性強</strong>：PDO 支援多種資料庫系統，如 MySQL、MS SQL、ODBC、PostgreSQL、SQLite、Firebird、Informix 等。這意味著只要更換連線的資料庫驅動程式，程式碼無需更改即可適用於不同的資料庫系統。</p></li><li><p><strong>語法一致性</strong>：無論 PHP 版本如何，PDO 的語法在所有支援的資料庫系統中都是一致的。這與 MySQL 驅動（如 <code>mysql</code> 和 <code>mysqli</code>）不同，後者在不同 PHP 版本中可能需要不同的語法。</p></li><li><p><strong>物件導向設計</strong>：PDO 採用物件導向的設計，使得程式碼更具結構性和可讀性。物件導向的方式也更容易進行模組化和重用。</p></li><li><p><strong>增強安全性</strong>：PDO 提供了預處理語句和參數化查詢，有效防止 SQL 注入攻擊。這些功能允許開發者安全地處理來自使用者輸入的資料，減少潛在的安全風險。</p></li><li><p><strong>方便的資料操作</strong>：PDO 支援將查詢結果轉換為對應的 PHP 物件或陣列，使得資料操作更加方便和直觀。例如，使用 <code>fetchObject()</code> 方法可以直接將資料庫查詢結果轉換為 PHP 物件。</p></li><li><p><strong>內建於 PHP 5.5 以上版本</strong>：從 PHP 5.5 開始，PDO 已內建於 PHP 核心，無需額外安裝。這使得 PDO 成為一個非常方便和強大的選擇。</p></li></ol><p>綜上所述，PDO 是 PHP 開發中一個強大且靈活的資料庫操作工具。它不僅提供了跨資料庫的通用語法，還透過物件導向和安全性增強的設計，提高了開發效率和應用程式的安全性。</p><h2><span id="1-建立-pdo-連線">1. 建立 PDO 連線</span></h2><p>首先，我們需要建立一個 PDO 物件來連線資料庫。這需要提供資料來源名稱（DSN）、使用者名和密碼。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    $dsn = <span class="string">'mysql:host=localhost;dbname=testdb'</span>;</span><br><span class="line">    $username = <span class="string">'root'</span>;</span><br><span class="line">    $password = <span class="string">'password'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 建立 PDO 連線</span></span><br><span class="line">    $pdo = <span class="keyword">new</span> PDO($dsn, $username, $password);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 設定 PDO 錯誤模式為異常</span></span><br><span class="line">    $pdo-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"連線成功"</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (PDOException $e) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"連線失敗: "</span> . $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>這段程式碼中，我們建立了一個 PDO 實例並設定錯誤模式為異常，以便在出現錯誤時能夠更容易地進行除錯。</p><h2><span id="2-執行-sql-查詢">2. 執行 SQL 查詢</span></h2><h3><span id="使用-query-方法">使用 <code>query</code> 方法</span></h3><p>對於不需要參數的簡單查詢，我們可以使用 <code>query</code> 方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sql = <span class="string">"SELECT * FROM users"</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($pdo-&gt;query($sql) <span class="keyword">as</span> $row) &#123;</span><br><span class="line">    print_r($row);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="使用-prepare-和-execute-方法">使用 <code>prepare</code> 和 <code>execute</code> 方法</span></h3><p>對於需要參數的查詢，應使用 <code>prepare</code> 方法來防止 SQL 注入攻擊：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sql = <span class="string">"SELECT * FROM users WHERE id = :id"</span>;</span><br><span class="line">$stmt = $pdo-&gt;prepare($sql);</span><br><span class="line">$stmt-&gt;execute([<span class="string">'id'</span> =&gt; <span class="number">1</span>]);</span><br><span class="line">$user = $stmt-&gt;fetch(PDO::FETCH_ASSOC);</span><br><span class="line"></span><br><span class="line">print_r($user);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2><span id="3-插入資料">3. 插入資料</span></h2><p>使用 <code>prepare</code> 和 <code>execute</code> 方法插入資料：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sql = <span class="string">"INSERT INTO users (username, email) VALUES (:username, :email)"</span>;</span><br><span class="line">$stmt = $pdo-&gt;prepare($sql);</span><br><span class="line">$stmt-&gt;execute([<span class="string">'username'</span> =&gt; <span class="string">'shengyu'</span>, <span class="string">'email'</span> =&gt; <span class="string">'shengyu@example.com'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"新記錄插入成功，ID: "</span> . $pdo-&gt;lastInsertId();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2><span id="4-更新資料">4. 更新資料</span></h2><p>同樣地，可以使用 <code>prepare</code> 和 <code>execute</code> 方法更新資料：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sql = <span class="string">"UPDATE users SET email = :email WHERE id = :id"</span>;</span><br><span class="line">$stmt = $pdo-&gt;prepare($sql);</span><br><span class="line">$stmt-&gt;execute([<span class="string">'email'</span> =&gt; <span class="string">'newemail@example.com'</span>, <span class="string">'id'</span> =&gt; <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"記錄更新成功"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2><span id="5-刪除資料">5. 刪除資料</span></h2><p>使用 <code>prepare</code> 和 <code>execute</code> 方法刪除資料：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sql = <span class="string">"DELETE FROM users WHERE id = :id"</span>;</span><br><span class="line">$stmt = $pdo-&gt;prepare($sql);</span><br><span class="line">$stmt-&gt;execute([<span class="string">'id'</span> =&gt; <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"記錄刪除成功"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2><span id="6-關閉連線">6. 關閉連線</span></h2><p>在 PHP 中，當 PDO 物件被銷毀時，連線會自動關閉。因此，不需要顯式地關閉連線。</p><h2><span id="總結">總結</span></h2><p>PDO 提供了一個靈活且安全的方式來處理資料庫操作。透過使用 <code>prepare</code> 和 <code>execute</code> 方法，可以有效地防止 SQL 注入攻擊。PDO 的一致性和易用性使得它成為 PHP 開發人員處理資料庫操作的首選工具。</p><p>以上就是 PHP 和 PDO 進行資料庫操作的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 PHP 相關技術，可以參考看看下面的文章，<br><a href="/php-mysqli/" title="PHP 和 MySQLi 進行資料庫操作">PHP 和 MySQLi 進行資料庫操作</a><br><a href="/php-display-errors/" title="PHP 執行發生錯誤在 Chrome/Firefox 上顯示 Error 500，要怎麼讓 PHP 顯示錯誤">PHP 執行發生錯誤在 Chrome/Firefox 上顯示 Error 500，要怎麼讓 PHP 顯示錯誤</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 PHP 和 PDO 進行資料庫操作用法，在 PHP 開發中，與資料庫進行互動是一個常見的需求。PDO（PHP Data Objects）是一個提供一致接口來訪問多種資料庫的擴展。PDO 使得處理不同資料庫（如 MySQL、PostgreSQL、S
      
    
    </summary>
    
      <category term="PHP教學" scheme="https://shengyu7697.github.io/categories/PHP%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="PHP" scheme="https://shengyu7697.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Google Sheets 累計月份金額或數字</title>
    <link href="https://shengyu7697.github.io/google-sheets-sum-by-month/"/>
    <id>https://shengyu7697.github.io/google-sheets-sum-by-month/</id>
    <published>2024-06-21T12:00:00.000Z</published>
    <updated>2024-06-24T00:00:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>某天 ShengYu 在紀錄自己的收入時，發現需要將每個月份的多個收入累計起來，這時候就是要出動 Excel，喔不，現在這個時代就是要善用雲端工具，所以本篇介紹 Google Sheets  的做法，在 Google Sheets 中，你可以使用 <code>SUMIF</code> 或 <code>SUMIFS</code> 函數來累計某個月份的金額。假設你有一個表格，其中有一列是日期（例如 A 列），另一列是金額（例如 B 列）。你可以通過以下步驟來累計某個月份的金額：</p><h2><span id="方法-1使用-sumif-函數">方法 1：使用 <code>SUMIF</code> 函數</span></h2><p>假設你想累計 2024 年 6 月的金額，可以使用以下公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=SUMIF(A:A, &quot;&gt;=2024-06-01&quot;, B:B) - SUMIF(A:A, &quot;&gt;=2024-07-01&quot;, B:B)</span><br></pre></td></tr></table></figure><p>這個公式的意思是：</p><ol><li>累計 2024 年 6 月 1 日及之後的金額。</li><li>減去 2024 年 7 月 1 日及之後的金額，這樣就只剩下 2024 年 6 月的金額。</li></ol><h2><span id="方法-2使用-sumifs-函數">方法 2：使用 <code>SUMIFS</code> 函數</span></h2><p><code>SUMIFS</code> 函數允許你設置多個條件來進行篩選，這樣可以更加準確。假設你仍然想累計 2024 年 6 月的金額，可以使用以下公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=SUMIFS(B:B, A:A, &quot;&gt;=2024-06-01&quot;, A:A, &quot;&lt;2024-07-01&quot;)</span><br></pre></td></tr></table></figure><p>這個公式的意思是：</p><ol><li>篩選出日期在 2024 年 6 月 1 日及之後的數據。</li><li>再篩選出日期在 2024 年 7 月 1 日之前的數據。</li><li>最後累計符合條件的金額。</li></ol><p>假設你的表格數據如下：</p><table><thead><tr><th>日期</th><th>金額</th></tr></thead><tbody><tr><td>2024-06-01</td><td>100</td></tr><tr><td>2024-06-15</td><td>200</td></tr><tr><td>2024-07-01</td><td>150</td></tr><tr><td>2024-06-20</td><td>300</td></tr><tr><td>2024-05-30</td><td>50</td></tr></tbody></table><p>在 C1 單元格中輸入公式 <code>=SUMIFS(B:B, A:A, &quot;&gt;=2024-06-01&quot;, A:A, &quot;&lt;2024-07-01&quot;)</code>，結果將會是 <code>600</code>，因為 2024 年 6 月的所有金額（100 + 200 + 300）都被累計起來了。</p><p>這樣你就可以輕鬆地在 Google Sheets 中累計某個月份的金額了。</p><h2><span id="這個公式怎麼套用在-2022-跟-2023-年呢">這個公式怎麼套用在 2022 跟 2023 年呢？</span></h2><p>那這個公式怎麼套用在 2022 跟 2023 年呢？如果你希望公式可以更靈活，能夠輸入年份和月份來進行累計，可以使用 <code>DATE</code> 函數來生成正確的日期，並且自動處理月份進位。以下是改進後的公式：</p><p>假設你在 <code>D1</code> 單元格中輸入年份，在 <code>E1</code> 單元格中輸入月份，則可以使用以下公式來自動累計：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=SUMIFS(B:B, A:A, &quot;&gt;=&quot; &amp; DATE(D1, E1, 1), A:A, &quot;&lt;&quot; &amp; DATE(D1, E1 + 1, 1))</span><br></pre></td></tr></table></figure><p>這樣，即使 <code>E1</code> 單元格中的月份超過 12，<code>DATE</code> 函數也會自動處理進位。例如小於 DATE(2022, 12 + 1, 1)的話，那麼結果會自動變成 2023-01-01。</p><p>假設你的表格數據如下：</p><table><thead><tr><th>日期</th><th>金額</th></tr></thead><tbody><tr><td>2023-06-01</td><td>100</td></tr><tr><td>2023-06-15</td><td>200</td></tr><tr><td>2023-07-01</td><td>150</td></tr><tr><td>2023-06-20</td><td>300</td></tr><tr><td>2022-06-01</td><td>400</td></tr><tr><td>2022-06-15</td><td>500</td></tr><tr><td>2022-07-01</td><td>250</td></tr><tr><td>2022-06-20</td><td>600</td></tr></tbody></table><p>在 <code>D1</code> 單元格輸入 <code>2023</code>，在 <code>E1</code> 單元格輸入 <code>6</code>，然後在其他單元格輸入公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=SUMIFS(B:B, A:A, &quot;&gt;=&quot; &amp; DATE(D1, E1, 1), A:A, &quot;&lt;&quot; &amp; DATE(D1, E1 + 1, 1))</span><br></pre></td></tr></table></figure><p>這樣的話，結果將會是 <code>600</code>，因為 2023 年 6 月的所有金額（100 + 200 + 300）都被累計起來了。</p><p>類似地，如果在 <code>D1</code> 單元格輸入 <code>2022</code>，在 <code>E1</code> 單元格輸入 <code>6</code>，公式會自動累計 2022 年 6 月的金額，結果將會是 <code>1500</code>（400 + 500 + 600）。</p><p>這樣，你就可以靈活地在不同年份和月份之間切換，並且不必擔心月份進位問題。</p><p>或著你可以使用 EOMONTH 來取得每月的最後一天日期也可以達成</p><p>以上就是 Google Sheets 累計月份金額或數字介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;某天 ShengYu 在紀錄自己的收入時，發現需要將每個月份的多個收入累計起來，這時候就是要出動 Excel，喔不，現在這個時代就是要善用雲端工具，所以本篇介紹 Google Sheets  的做法，在 Google Sheets 中，你可以使用 &lt;code&gt;SUMIF&lt;/
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux watch 指令用法與範例</title>
    <link href="https://shengyu7697.github.io/linux-watch/"/>
    <id>https://shengyu7697.github.io/linux-watch/</id>
    <published>2024-06-19T14:00:00.000Z</published>
    <updated>2024-06-19T14:10:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Linux watch 指令用法與範例，在 Linux 系統中，<code>watch</code> 指令是一個強大的工具，它允許使用者定期執行指定的指令並顯示其輸出，這在許多情況下都非常有用。無論是監視系統狀態、跟蹤檔案變化還是測試指令的執行情況，<code>watch</code> 都能夠輕鬆應對。在本文中，我們將深入探討 <code>watch</code> 指令的基本用法、進階技巧以及一些實用的應用場景。</p><h2><span id="基本用法">基本用法</span></h2><p><code>watch</code> 指令的基本用法非常簡單，只需在終端中輸入 <code>watch</code>，然後跟上要執行的指令即可。也就是說 <code>watch</code> 會幫你下這串指令，例如，要每隔一秒執行一次 <code>date</code> 指令，可以使用以下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch date</span><br></pre></td></tr></table></figure><p>這將在終端上顯示當前的日期和時間，並每秒更新一次。</p><h2><span id="定期執行指令並顯示結果">定期執行指令並顯示結果</span></h2><p>除了這種基本用法之外，<code>watch</code> 還提供了一些選項，用於自定義其行為。例如，可以使用 <code>-n</code> 選項來指定更新的間隔時間。以下指令將每隔五秒執行一次 <code>ls -l</code> 指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -n 5 ls -l</span><br></pre></td></tr></table></figure><h2><span id="更改間隔時間">更改間隔時間</span></h2><p>這個指令每隔3秒執行一次 <code>ls -l</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -n 3 ls -l</span><br></pre></td></tr></table></figure><p>這個指令每隔0.5秒執行一次 <code>ls -l</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -n 0.5 ls -l</span><br></pre></td></tr></table></figure><h2><span id="進階技巧">進階技巧</span></h2><p><code>watch</code> 指令的進階技巧使其更加靈活和強大。其中一個常用的技巧是使用 <code>-d</code> 選項來突出顯示指令輸出中發生變化的部分。這對於監視檔案變化或系統狀態非常有用。以下是一個範例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -d df -h</span><br></pre></td></tr></table></figure><p>這將每隔兩秒執行一次 <code>df -h</code> 指令，並在終端上突出顯示檔案系統使用情況發生變化的部分。</p><p>另一個有用的技巧是使用 <code>-t</code> 選項顯示當前的時間。這對於記錄指令執行的時間非常有用。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -t date</span><br></pre></td></tr></table></figure><p>這將每隔一秒執行一次 <code>date</code> 指令，並在終端上顯示當前的時間。</p><p>此外，<code>watch</code> 還允許使用者自定義終端視窗的標題，這可以透過 <code>--title</code> 選項實現。以下是一個範例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch --title=<span class="string">"Custom Title"</span> -n 10 -d df -h</span><br></pre></td></tr></table></figure><p>這將在終端視窗的標題中顯示”Custom Title”，並每隔十秒突出顯示檔案系統使用情況發生變化的部分。</p><h2><span id="實用應用場景">實用應用場景</span></h2><p>除了上述基本用法和進階技巧之外，<code>watch</code> 指令還有許多實用的應用場景。以下是一些範例：</p><ol><li>監視日誌檔案的變化：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch tail /var/<span class="built_in">log</span>/syslog</span><br></pre></td></tr></table></figure><p>這將持續監視系統日誌檔案的變化，並將新的日誌內容顯示在終端上。</p><ol><li>監視網路連接狀態：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -n 5 netstat -tuln</span><br></pre></td></tr></table></figure><p>這將每隔五秒顯示一次系統中所有的 TCP 和 UDP 網路連接。</p><ol><li>監視系統資源使用率：</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -n 1 top</span><br></pre></td></tr></table></figure><p>這將每秒顯示一次系統中各個行程的資源利用情況，包括 CPU 和記憶體使用情況。</p><h2><span id="總結">總結</span></h2><p><code>watch</code> 指令是一個非常實用的工具，它可以幫助使用者輕鬆監視和跟蹤各種指令的執行情況。透過了解其基本用法、進階技巧以及實用的應用場景，使用者可以更好地利用這個功能強大的指令，提高工作效率，更好地管理和監控 Linux 系統。</p><p>以上就是 Linux watch 指令用法與範例的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/linux-tutorial/" title="Linux 常用指令教學懶人包">Linux 常用指令教學懶人包</a><br><a href="/linux-wget/" title="Linux wget 下載檔案用法與範例">Linux wget 下載檔案用法與範例</a><br><a href="/linux-sed/" title="Linux sed 字串取代用法與範例">Linux sed 字串取代用法與範例</a><br><a href="/linux-find/" title="Linux find 尋找檔案/尋找資料夾用法與範例">Linux find 尋找檔案/尋找資料夾用法與範例</a><br><a href="/linux-grep-ack-ag/" title="Linux grep/ack/ag 搜尋字串用法與範例">Linux grep/ack/ag 搜尋字串用法與範例</a><br><a href="/linux-tee/" title="Linux tee 同時螢幕標準輸出和輸出到檔案用法與範例">Linux tee 同時螢幕標準輸出和輸出到檔案用法與範例</a><br><a href="/linux-xargs/" title="Linux xargs 參數列表轉換用法與範例">Linux xargs 參數列表轉換用法與範例</a><br><a href="/linux-tail/" title="Linux tail 持續監看檔案輸出用法與範例">Linux tail 持續監看檔案輸出用法與範例</a><br><a href="/linux-du/" title="Linux du 查詢硬碟剩餘空間/資料夾容量用法與範例">Linux du 查詢硬碟剩餘空間/資料夾容量用法與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Linux watch 指令用法與範例，在 Linux 系統中，&lt;code&gt;watch&lt;/code&gt; 指令是一個強大的工具，它允許使用者定期執行指定的指令並顯示其輸出，這在許多情況下都非常有用。無論是監視系統狀態、跟蹤檔案變化還是測試指令的執行情
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shengyu7697.github.io/tags/Ubuntu/"/>
    
      <category term="Linux Command" scheme="https://shengyu7697.github.io/tags/Linux-Command/"/>
    
      <category term="Linux" scheme="https://shengyu7697.github.io/tags/Linux/"/>
    
      <category term="Shell Script" scheme="https://shengyu7697.github.io/tags/Shell-Script/"/>
    
  </entry>
  
  <entry>
    <title>Python 中的 subprocess.run 完整指南與範例</title>
    <link href="https://shengyu7697.github.io/python-subprocess.run/"/>
    <id>https://shengyu7697.github.io/python-subprocess.run/</id>
    <published>2024-06-17T12:00:00.000Z</published>
    <updated>2024-06-20T13:10:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python subprocess.run 用法與範例，在現代編程中，經常需要從 Python 程式中執行系統指令或外部程式。Python 提供了多種方式來實現這一點，其中最強大和靈活的工具之一就是 <code>subprocess</code> 模組中的 <code>subprocess.run</code> 函式。本文將詳盡介紹 <code>subprocess.run</code> 的用途、語法，並透過具體範例來展示其應用。</p><h2><span id="subprocessrun-的用途"><code>subprocess.run</code> 的用途</span></h2><p><code>subprocess.run</code> 是一個用於執行系統指令或外部程式的高級接口。它允許開發者執行指令、等待指令完成、檢查指令的退出狀態碼，並選擇性地取得指令的標準輸出和標準錯誤。這使得 <code>subprocess.run</code> 成為一個非常靈活和強大的工具，適合各種需要與外部程式互動的場景。</p><h2><span id="subprocessrun-的語法"><code>subprocess.run</code> 的語法</span></h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">subprocess.run(args, *, stdin=<span class="literal">None</span>, input=<span class="literal">None</span>, stdout=<span class="literal">None</span>, stderr=<span class="literal">None</span>, capture_output=<span class="literal">False</span>, shell=<span class="literal">False</span>, cwd=<span class="literal">None</span>, timeout=<span class="literal">None</span>, check=<span class="literal">False</span>, encoding=<span class="literal">None</span>, errors=<span class="literal">None</span>, text=<span class="literal">None</span>, env=<span class="literal">None</span>, universal_newlines=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h2><span id="參數說明">參數說明</span></h2><ul><li><code>args</code>：這是要執行的指令及其參數，通常以清單形式提供，例如 <code>[&#39;ls&#39;, &#39;-l&#39;]</code>。</li><li><code>stdin</code>、<code>stdout</code>、<code>stderr</code>：分別指定標準輸入、標準輸出和標準錯誤的處理方式。</li><li><code>capture_output</code>：若設定為 <code>True</code>，將捕獲標準輸出和標準錯誤。</li><li><code>shell</code>：若設定為 <code>True</code>，指令將透過 shell 執行（例如 <code>bash</code> 或 <code>cmd</code>）。</li><li><code>cwd</code>：設定指令執行的當前工作目錄。</li><li><code>timeout</code>：設定指令執行的超時時間（以秒為單位）。</li><li><code>check</code>：若設定為 <code>True</code>，當指令回傳非零退出狀態時將拋出 <code>CalledProcessError</code>。</li><li><code>encoding</code> 和 <code>errors</code>：設定標準輸入、輸出和錯誤的編碼和錯誤處理。</li><li><code>text</code> 或 <code>universal_newlines</code>：若設定為 <code>True</code>，將輸入和輸出視為文字流，而非位元組流。</li><li><code>env</code>：提供一個字典來設定環境變數。</li></ul><h2><span id="範例-1執行一個簡單的指令">範例 1：執行一個簡單的指令</span></h2><p>以下範例示範如何使用 <code>subprocess.run</code> 執行一個簡單的指令並打印其輸出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">result = subprocess.run([<span class="string">'ls'</span>, <span class="string">'-l'</span>], capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line">print(result.stdout)</span><br></pre></td></tr></table></figure><p>這段程式碼執行 <code>ls -l</code> 指令並打印輸出到控制台。透過設定 <code>capture_output=True</code> 和 <code>text=True</code>，我們能夠捕獲並以文字形式處理指令的標準輸出。</p><h2><span id="範例-2檢查指令的退出狀態">範例 2：檢查指令的退出狀態</span></h2><p>在某些情況下，我們需要檢查指令的退出狀態以確定其是否成功執行。以下範例展示了如何實現這一點：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">result = subprocess.run([<span class="string">'ls'</span>, <span class="string">'-l'</span>, <span class="string">'/nonexistent'</span>], capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">if</span> result.returncode != <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">"Error:"</span>, result.stderr)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(result.stdout)</span><br></pre></td></tr></table></figure><p>這段程式碼執行 <code>ls -l /nonexistent</code> 指令，如果目錄不存在，則會打印錯誤資訊。</p><h2><span id="範例-3在-shell-中執行指令">範例 3：在 shell 中執行指令</span></h2><p>有時我們需要透過 shell 來執行指令，例如使用環境變數。以下範例展示了如何設定 <code>shell=True</code> 來達成這一目標：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">result = subprocess.run(<span class="string">'echo $HOME'</span>, shell=<span class="literal">True</span>, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line">print(result.stdout)</span><br></pre></td></tr></table></figure><p>這段程式碼在 shell 中執行 <code>echo $HOME</code> 指令並打印出環境變數 <code>HOME</code> 的值。</p><h2><span id="範例-4處理指令超時">範例 4：處理指令超時</span></h2><p>在某些情況下，指令可能會執行很長時間。在這種情況下，我們可以設定超時來防止指令無限期地執行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    result = subprocess.run([<span class="string">'sleep'</span>, <span class="string">'5'</span>], timeout=<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span> subprocess.TimeoutExpired:</span><br><span class="line">    print(<span class="string">"Command timed out"</span>)</span><br></pre></td></tr></table></figure><p>這段程式碼嘗試執行 <code>sleep 5</code> 指令，但設定了 2 秒的超時時間。由於指令需要更長時間才能完成，因此會拋出 <code>TimeoutExpired</code> 異常。</p><h2><span id="結論">結論</span></h2><p><code>subprocess.run</code> 是 Python 中一個非常有用的函式，用於執行外部指令並處理其輸出。透過理解其各種參數和選項，您可以靈活地將其應用於多種場景，無論是簡單的指令執行還是複雜的行程管理。本文透過具體的範例展示了 <code>subprocess.run</code> 的一些常見用法，希望能幫助您更好地掌握這個強大的工具。</p><p>透過這些範例和解釋，相信您已經對 <code>subprocess.run</code> 有了一個全面的了解。不妨在自己的項目中嘗試使用，進一步體會其強大和靈活性。</p><p>以上就是 Python subprocess.run 用法與範例的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a><br><a href="/python-subprocess.call/" title="Python subprocess.call 用法與範例解析">Python subprocess.call 用法與範例解析</a><br><a href="/python-subprocess.popen/" title="Python subprocess.Popen 用法與範例">Python subprocess.Popen 用法與範例</a><br><a href="/python-swap/" title="Python swap 用法與範例">Python swap 用法與範例</a><br><a href="/python-sqlite/" title="如何在Python中使用SQLite：完整指南與實用範例">如何在Python中使用SQLite：完整指南與實用範例</a><br><a href="/python-mongodb/" title="Python 與 MongoDB 的完美結合：詳細指南與範例">Python 與 MongoDB 的完美結合：詳細指南與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python subprocess.run 用法與範例，在現代編程中，經常需要從 Python 程式中執行系統指令或外部程式。Python 提供了多種方式來實現這一點，其中最強大和靈活的工具之一就是 &lt;code&gt;subprocess&lt;/code&gt;
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Android dumpsys 指令用法與範例</title>
    <link href="https://shengyu7697.github.io/android-dumpsys/"/>
    <id>https://shengyu7697.github.io/android-dumpsys/</id>
    <published>2024-06-16T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Android dumpsys 指令用法，<code>dumpsys</code> 是 Android 系統提供的一個用於查看系統服務資訊的指令。它可以提供關於系統狀態、各種服務、行程和其他詳細資訊的報告。現在讓我們來看一下它的基本用法以及其他常見和進階的用法。</p><h2><span id="基本用法">基本用法</span></h2><p><code>dumpsys</code> 指令的基本用法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dumpsys [service]</span><br></pre></td></tr></table></figure></p><p>其中，<code>service</code> 是要查看的系統服務的名稱。</p><p>要查看系統中所有可用的服務，只需在終端中輸入以下指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dumpsys</span><br></pre></td></tr></table></figure></p><p>這將列出系統中所有可用的服務列表。</p><p>要查看特定服務的詳細資訊，只需在指令後跟上服務名稱。例如，要查看電池資訊，可以使用以下指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dumpsys battery</span><br></pre></td></tr></table></figure></p><p>這將顯示有關電池狀態的詳細資訊，如電量、充電狀態等。</p><h2><span id="其他常見用法">其他常見用法</span></h2><p><code>dumpsys</code> 指令查看記憶體資訊，用法如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dumpsys meminfo</span><br></pre></td></tr></table></figure></p><p>這將顯示有關系統記憶體使用情況的詳細資訊，包括記憶體占用、行程列表等。</p><p><code>dumpsys</code> 指令查看網路資訊，用法如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dumpsys connectivity</span><br></pre></td></tr></table></figure></p><p>這將顯示有關網路連接狀態的詳細資訊，包括當前的網路類型、IP 地址等。</p><h2><span id="進階用法">進階用法</span></h2><p><code>dumpsys</code> 指令匯出資訊到檔案，用法如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dumpsys battery &gt; battery_info.txt</span><br></pre></td></tr></table></figure></p><p>這將將電池資訊保存到指定的檔案中，方便後續查閱和分析。</p><p><code>dumpsys</code> 指令監視系統狀態，用法如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -n 5 dumpsys meminfo</span><br></pre></td></tr></table></figure></p><p>這將每隔五秒更新一次系統的記憶體資訊，可以用於監視系統的記憶體使用情況。</p><p><code>dumpsys</code> 指令查看指定應用的資訊，用法如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dumpsys package com.example.app</span><br></pre></td></tr></table></figure></p><p>這將顯示指定應用的詳細資訊，包括行程 ID、UID、版本資訊等。</p><h2><span id="總結">總結</span></h2><p><code>dumpsys</code> 指令是 Android 系統中一個非常有用的工具，可以幫助開發人員和使用者查看系統的各種詳細資訊。透過了解其基本用法、其他常見用法和進階用法，使用者可以更好地了解和監視系統的執行狀態，從而進行故障排查、性能優化等工作。無論是開發中還是使用者使用中，<code>dumpsys</code> 都是一個非常實用的指令。</p><p>以上就是 Android dumpsys 指令用法與範例的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/android-tutorial/" title="Android 系列文章">Android 系列文章</a><br><a href="/android-adb/" title="Android adb 基本用法教學">Android adb 基本用法教學</a><br><a href="/android-fastboot/" title="Android fastboot 基本用法教學">Android fastboot 基本用法教學</a><br><a href="/android-adb-logcat/" title="Android adb logcat 基本用法教學">Android adb logcat 基本用法教學</a><br><a href="/android-adb-forward/" title="Android adb forward 通訊埠轉發用法教學">Android adb forward 通訊埠轉發用法教學</a><br><a href="/android-adb-shell-input/" title="Android adb shell input 事件用法">Android adb shell input 事件用法</a><br><a href="/android-change-line-notification-sound/" title="Android 更換 line 的通知鈴聲方法">Android 更換 line 的通知鈴聲方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Android dumpsys 指令用法，&lt;code&gt;dumpsys&lt;/code&gt; 是 Android 系統提供的一個用於查看系統服務資訊的指令。它可以提供關於系統狀態、各種服務、行程和其他詳細資訊的報告。現在讓我們來看一下它的基本用法以及其他常
      
    
    </summary>
    
    
      <category term="Android" scheme="https://shengyu7697.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>使用 PHP 和 MySQLi 進行資料庫操作的簡單指南</title>
    <link href="https://shengyu7697.github.io/php-mysqli/"/>
    <id>https://shengyu7697.github.io/php-mysqli/</id>
    <published>2024-06-15T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 PHP 和 MySQLi 進行資料庫操作用法，在這篇文章中，我們將介紹如何使用 PHP 和 MySQLi 來進行基本的資料庫操作。MySQLi（MySQL Improved）是一個用於訪問 MySQL 資料庫的 PHP 擴展，提供了比舊的 MySQL 擴展更好的功能和性能。</p><h2><span id="1-連線資料庫">1. 連線資料庫</span></h2><p>首先，我們需要連線 MySQL 資料庫。這可以透過 <code>mysqli_connect()</code> 函式來實現。以下是範例程式碼：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$servername = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"root"</span>;</span><br><span class="line">$password = <span class="string">""</span>;</span><br><span class="line">$database = <span class="string">"test_db"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立連線</span></span><br><span class="line">$conn = mysqli_connect($servername, $username, $password, $database);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 檢查連線</span></span><br><span class="line"><span class="keyword">if</span> (!$conn) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Connection failed: "</span> . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Connected successfully"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>這段程式碼嘗試連線到名為 <code>test_db</code> 的資料庫。如果連線失敗，會輸出錯誤資訊並終止腳本。</p><h2><span id="2-執行-sql-查詢">2. 執行 SQL 查詢</span></h2><p>連線成功後，我們可以使用 <code>mysqli_query()</code> 函式來執行 SQL 查詢。以下是插入資料和查詢資料的範例。</p><h3><span id="插入資料">插入資料</span></h3><p>我們可以使用如下程式碼插入一條新記錄到 <code>users</code> 表中：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sql = <span class="string">"INSERT INTO users (username, email) VALUES ('shengyu', 'shengyu@example.com')"</span>;</span><br><span class="line"><span class="keyword">if</span> (mysqli_query($conn, $sql)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"New record created successfully"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Error: "</span> . $sql . <span class="string">"&lt;br&gt;"</span> . mysqli_error($conn);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><h3><span id="查詢資料">查詢資料</span></h3><p>接下來，我們來查詢 <code>users</code> 表中的資料：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$sql = <span class="string">"SELECT id, username, email FROM users"</span>;</span><br><span class="line">$result = mysqli_query($conn, $sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mysqli_num_rows($result) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 輸出資料</span></span><br><span class="line">    <span class="keyword">while</span>($row = mysqli_fetch_assoc($result)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"id: "</span> . $row[<span class="string">"id"</span>]. <span class="string">" - Name: "</span> . $row[<span class="string">"username"</span>]. <span class="string">" - Email: "</span> . $row[<span class="string">"email"</span>]. <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"0 results"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><h2><span id="3-關閉連線">3. 關閉連線</span></h2><p>操作完成後，別忘了關閉連線：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">mysqli_close($conn);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><h2><span id="完整範例">完整範例</span></h2><p>最後，我們將上述步驟整合成一個完整的範例，展示如何連線到資料庫、插入資料、查詢資料以及關閉連線：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$servername = <span class="string">"localhost"</span>;</span><br><span class="line">$username = <span class="string">"root"</span>;</span><br><span class="line">password = <span class="string">""</span>;</span><br><span class="line">$database = <span class="string">"test_db"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立連線</span></span><br><span class="line">$conn = mysqli_connect($servername, $username, $password, $database);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 檢查連線</span></span><br><span class="line"><span class="keyword">if</span> (!$conn) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Connection failed: "</span> . mysqli_connect_error());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Connected successfully&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入資料</span></span><br><span class="line">$sql = <span class="string">"INSERT INTO users (username, email) VALUES ('shengyu', 'shengyu@example.com')"</span>;</span><br><span class="line"><span class="keyword">if</span> (mysqli_query($conn, $sql)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"New record created successfully&lt;br&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Error: "</span> . $sql . <span class="string">"&lt;br&gt;"</span> . mysqli_error($conn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查詢資料</span></span><br><span class="line">$sql = <span class="string">"SELECT id, username, email FROM users"</span>;</span><br><span class="line">$result = mysqli_query($conn, $sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mysqli_num_rows($result) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 輸出資料</span></span><br><span class="line">    <span class="keyword">while</span>($row = mysqli_fetch_assoc($result)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"id: "</span> . $row[<span class="string">"id"</span>]. <span class="string">" - Name: "</span> . $row[<span class="string">"username"</span>]. <span class="string">" - Email: "</span> . $row[<span class="string">"email"</span>]. <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"0 results"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 關閉連線</span></span><br><span class="line">mysqli_close($conn);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p><p>這個範例展示了如何使用 MySQLi 進行基本的資料庫操作，包括連線到資料庫、插入資料、查詢資料以及關閉連線。在實際應用中，應該新增更多的錯誤處理和安全措施，比如使用預處理語句來防止 SQL 注入攻擊。希望這篇文章能夠幫助你更好地理解和使用 MySQLi。</p><p>以上就是 PHP 和 MySQLi 進行資料庫操作用法的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 PHP 相關技術，可以參考看看下面的文章，<br><a href="/php-pdo/" title="PHP 和 PDO 進行資料庫操作">PHP 和 PDO 進行資料庫操作</a><br><a href="/php-display-errors/" title="PHP 執行發生錯誤在 Chrome/Firefox 上顯示 Error 500，要怎麼讓 PHP 顯示錯誤">PHP 執行發生錯誤在 Chrome/Firefox 上顯示 Error 500，要怎麼讓 PHP 顯示錯誤</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 PHP 和 MySQLi 進行資料庫操作用法，在這篇文章中，我們將介紹如何使用 PHP 和 MySQLi 來進行基本的資料庫操作。MySQLi（MySQL Improved）是一個用於訪問 MySQL 資料庫的 PHP 擴展，提供了比舊的 MyS
      
    
    </summary>
    
      <category term="PHP教學" scheme="https://shengyu7697.github.io/categories/PHP%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="PHP" scheme="https://shengyu7697.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Python subprocess.call 用法與範例解析</title>
    <link href="https://shengyu7697.github.io/python-subprocess.call/"/>
    <id>https://shengyu7697.github.io/python-subprocess.call/</id>
    <published>2024-06-14T12:00:00.000Z</published>
    <updated>2024-06-20T13:10:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python subprocess.call 用法與範例，在 Python 中，有時候我們需要呼叫外部指令或腳本來完成某些任務。這時候，Python 的 <code>subprocess</code> 模組就派上用場了。這篇文章將詳細介紹 <code>subprocess.call</code> 的用途及如何在實際應用中使用它。我們將涵蓋一些基本用法及進階範例，並且比較 <code>subprocess.call</code> 與 <code>subprocess.run</code> 之間的區別，以便於讀者在不同情況下選擇合適的方法。</p><h2><span id="什麼是-subprocesscall">什麼是 <code>subprocess.call</code></span></h2><p><code>subprocess.call</code> 是 Python 標準庫中的一個函式，用來在 Python 程式中執行外部指令或程式。這個函式會執行給定的指令並等待其完成，回傳執行指令後的退出狀態碼。</p><h2><span id="為什麼使用-subprocesscall">為什麼使用 <code>subprocess.call</code></span></h2><p>使用 <code>subprocess.call</code> 可以讓你：</p><ol><li><strong>執行系統指令</strong>：呼叫作業系統的指令，如列出目錄內容、移動檔案等。</li><li><strong>腳本自動化</strong>：在 Python 腳本中執行其他腳本或程式，實現自動化流程。</li><li><strong>呼叫外部工具</strong>：在 Python 腳本中呼叫其他語言編寫的工具或程式，擴展 Python 的功能。</li></ol><h2><span id="subprocesscall-的基本用法"><code>subprocess.call</code> 的基本用法</span></h2><p>以下是一些常見的使用範例，展示如何在 Python 中使用 <code>subprocess.call</code>。</p><h3><span id="執行簡單的系統指令">執行簡單的系統指令</span></h3><p>在 Unix-like 系統（如 Linux 和 macOS）中，使用 <code>ls</code> 指令來列出當前目錄中的檔案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="comment"># 執行 'ls' 指令</span></span><br><span class="line">return_code = subprocess.call([<span class="string">'ls'</span>])</span><br><span class="line">print(<span class="string">f"Command returned with code: <span class="subst">&#123;return_code&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><p>在 Windows 系統中，可以使用 <code>dir</code> 指令來實現相同的功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="comment"># 執行 'dir' 指令</span></span><br><span class="line">return_code = subprocess.call([<span class="string">'cmd'</span>, <span class="string">'/c'</span>, <span class="string">'dir'</span>])</span><br><span class="line">print(<span class="string">f"Command returned with code: <span class="subst">&#123;return_code&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><h3><span id="執行帶參數的指令">執行帶參數的指令</span></h3><p>有時候，我們需要傳遞參數給外部指令。例如，使用 <code>echo</code> 指令輸出特定內容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="comment"># 執行 'echo' 指令並輸出 'Hello, World!'</span></span><br><span class="line">return_code = subprocess.call([<span class="string">'echo'</span>, <span class="string">'Hello, World!'</span>])</span><br><span class="line">print(<span class="string">f"Command returned with code: <span class="subst">&#123;return_code&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><h3><span id="捕捉標準輸出和標準錯誤">捕捉標準輸出和標準錯誤</span></h3><p>有些情況下，我們可能需要捕捉外部指令的標準輸出和標準錯誤。這可以透過設定 <code>stdout</code> 和 <code>stderr</code> 參數來實現：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="comment"># 執行 'ls' 指令並捕捉其輸出</span></span><br><span class="line">return_code = subprocess.call([<span class="string">'ls'</span>], stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line">print(<span class="string">f"Command returned with code: <span class="subst">&#123;return_code&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><h2><span id="進階應用subprocessrun">進階應用：<code>subprocess.run</code></span></h2><p>雖然 <code>subprocess.call</code> 已經能夠滿足許多需求，但在 Python 3.5 之後，<code>subprocess.run</code> 提供了更多功能並且是 <code>subprocess.call</code> 的推薦替代方法。以下是一個使用 <code>subprocess.run</code> 的範例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 subprocess.run 執行指令並捕捉輸出</span></span><br><span class="line">result = subprocess.run([<span class="string">'ls'</span>], capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 輸出指令的回傳碼和輸出內容</span></span><br><span class="line">print(<span class="string">f"Command returned with code: <span class="subst">&#123;result.returncode&#125;</span>"</span>)</span><br><span class="line">print(<span class="string">f"Command output:\n<span class="subst">&#123;result.stdout&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><h2><span id="subprocessrun-與-subprocesscall-的差異"><code>subprocess.run</code> 與 <code>subprocess.call</code> 的差異</span></h2><p>以下列出 <code>subprocess.run</code> vs <code>subprocess.call</code> 相似之處與不同之處，</p><h3><span id="相似之處">相似之處</span></h3><ul><li><strong>執行外部指令</strong>：兩者都能執行外部指令。</li><li><strong>同步執行</strong>：都會等待指令完成後才繼續執行後續的 Python 程式碼。</li></ul><h3><span id="不同之處">不同之處</span></h3><ul><li><strong>功能豐富性</strong>：<code>subprocess.run</code> 提供了更多功能，比如捕捉輸出（<code>capture_output</code>）、文字模式（<code>text</code>）等。</li><li><strong>回傳值</strong>：<code>subprocess.call</code> 回傳退出狀態碼，而 <code>subprocess.run</code> 回傳一個 <code>CompletedProcess</code> 物件，包含了退出狀態碼、標準輸出、標準錯誤等資訊。</li></ul><h2><span id="subprocesscall-跟-subprocesspopen-的差異">subprocess.call 跟 subprocess.Popen 的差異</span></h2><p>subprocess.call 跟 subprocess.Popen 有什麼不一樣？<br><code>subprocess.call</code> 和 <code>subprocess.Popen</code> 是 Python 中常用的模組，用來執行外部指令。這兩個方法有一些關鍵的不同之處，了解這些差異能幫助你更有效地使用它們。</p><h3><span id="執行方式和阻塞行為">執行方式和阻塞行為</span></h3><ul><li><p><strong><code>subprocess.call</code></strong>：這是一個簡單的封裝，用來執行一個指令並等待它完成。當你使用 <code>subprocess.call</code> 時，當前的 Python 程式會被阻塞，直到所呼叫的指令執行完成。它的回傳值是子行程的退出狀態碼。</p><p>範例程式碼：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">retcode = subprocess.call([<span class="string">"ls"</span>, <span class="string">"-l"</span>])</span><br><span class="line">print(<span class="string">"Exit code:"</span>, retcode)</span><br></pre></td></tr></table></figure><p>在這個例子中，<code>subprocess.call</code> 執行了 <code>ls -l</code> 指令，並等待指令完成後回傳退出碼。</p></li><li><p><strong><code>subprocess.Popen</code></strong>：這是一個更底層的接口，用來建立和處理子行程。使用 <code>Popen</code> 建立子行程後，當前程式不會自動等待子行程完成。你需要手動使用 <code>Popen</code> 的 <code>wait()</code> 方法來等待子行程結束，或者透過其他方式來與子行程互動。<code>Popen</code> 回傳一個子行程物件，提供更高的控制靈活性。</p><p>範例程式碼：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">process = subprocess.Popen([<span class="string">"ls"</span>, <span class="string">"-l"</span>])</span><br><span class="line">process.wait()  <span class="comment"># 等待子行程完成</span></span><br><span class="line">print(<span class="string">"Exit code:"</span>, process.returncode)</span><br></pre></td></tr></table></figure><p>在這個例子中，<code>subprocess.Popen</code> 建立了一個子行程來執行 <code>ls -l</code> 指令。<code>wait()</code> 方法會阻塞當前程式，直到子行程結束。</p></li></ul><h3><span id="靈活性">靈活性</span></h3><ul><li><p><strong><code>subprocess.call</code></strong>：適用於簡單的指令執行，不需要與子行程進行太多互動的情況。它的用法簡單，非常適合快速執行指令並取得結果。</p></li><li><p><strong><code>subprocess.Popen</code></strong>：提供了更高的靈活性和控制，可以處理標準輸入、標準輸出和標準錯誤流，設定環境變數等。這使得 <code>Popen</code> 適用於需要與子行程進行更多互動的複雜情況。</p></li></ul><h3><span id="subprocesscall-與-subprocesspopen-如何選擇">subprocess.call 與 subprocess.Popen 如何選擇</span></h3><p>如果你需要執行一個指令並等待其完成，且不需要與子行程進行互動，使用 <code>subprocess.call</code> 是更簡單的選擇。</p><p>如果你需要更高的靈活性，或者需要與子行程進行互動，如讀取輸出、寫入輸入，或處理錯誤流，<code>subprocess.Popen</code> 是更合適的工具。</p><p>總結來說，<code>subprocess.call</code> 是執行簡單指令的便捷方法，而 <code>subprocess.Popen</code> 提供了更強大的功能和靈活性，適合更複雜的需求。</p><h2><span id="總結">總結</span></h2><p><code>subprocess.call</code> 是一個強大的工具，適用於簡單的指令執行場景。如果你需要更多功能或更高的靈活性，則應該考慮使用 <code>subprocess.run</code>。透過這篇文章，希望你能夠對 <code>subprocess.call</code> 和 <code>subprocess.run</code> 有一個全面的了解，並能在實際項目中靈活運用。</p><p>以上就是 Python subprocess.call 用法與範例的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a><br><a href="/python-subprocess.run/" title="Python 中的 subprocess.run 完整指南與範例">Python 中的 subprocess.run 完整指南與範例</a><br><a href="/python-subprocess.popen/" title="Python subprocess.Popen 用法與範例">Python subprocess.Popen 用法與範例</a><br><a href="/python-swap/" title="Python swap 用法與範例">Python swap 用法與範例</a><br><a href="/python-sqlite/" title="如何在Python中使用SQLite：完整指南與實用範例">如何在Python中使用SQLite：完整指南與實用範例</a><br><a href="/python-mongodb/" title="Python 與 MongoDB 的完美結合：詳細指南與範例">Python 與 MongoDB 的完美結合：詳細指南與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python subprocess.call 用法與範例，在 Python 中，有時候我們需要呼叫外部指令或腳本來完成某些任務。這時候，Python 的 &lt;code&gt;subprocess&lt;/code&gt; 模組就派上用場了。這篇文章將詳細介紹 &lt;co
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>如何在Python中使用SQLite：完整指南與實用範例</title>
    <link href="https://shengyu7697.github.io/python-sqlite/"/>
    <id>https://shengyu7697.github.io/python-sqlite/</id>
    <published>2024-06-12T12:00:00.000Z</published>
    <updated>2024-06-17T23:20:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python SQLite 用法與範例，在開發應用程式的過程中，選擇合適的資料庫系統是至關重要的。SQLite 是一個輕量級、嵌入式的關聯資料庫系統，不需要單獨的伺服器程式來管理資料庫，非常適合用於本地資料儲存。無論你是開發手機應用、桌面應用還是小型網站，SQLite 都是一個理想的選擇。本文將詳細介紹如何在Python中使用SQLite，包括基本操作、實用範例和最佳實踐。</p><h2><span id="為什麼選擇sqlite">為什麼選擇SQLite？</span></h2><p>SQLite 具有以下幾個顯著的優點：</p><ol><li><strong>輕量級</strong>：SQLite 的體積小，不會佔用太多資源，非常適合嵌入式系統和小型應用。</li><li><strong>易於使用</strong>：不需要單獨的伺服器程式，資料庫儲存在一個檔案中，便於分發和備份。</li><li><strong>高效</strong>：對於小型到中型的應用，SQLite 的性能表現非常優秀。</li><li><strong>跨平台</strong>：SQLite 支持多種作業系統，包括Windows、macOS、Linux等。</li></ol><h2><span id="python-與-sqlite">Python 與 SQLite</span></h2><p>Python 提供了 <code>sqlite3</code> 模組來操作 SQLite 資料庫。這個模組內建於Python標準庫中，無需額外安裝。透過 <code>sqlite3</code> 模組，你可以輕鬆地建立和操作SQLite資料庫。</p><h3><span id="安裝與設定">安裝與設定</span></h3><p>首先，確保你的開發環境中安裝了Python。大多數現代的Python版本已經預裝了 <code>sqlite3</code> 模組。如果你使用的是較舊版本，可以透過以下方式安裝：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pysqlite3</span><br></pre></td></tr></table></figure><h3><span id="建立和連接資料庫">建立和連接資料庫</span></h3><p>在Python中使用SQLite非常簡單。以下是建立和連接資料庫的基本步驟：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 連接到資料庫（如果資料庫不存在，則會自動建立）</span></span><br><span class="line">conn = sqlite3.connect(<span class="string">'example.db'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立遊標物件</span></span><br><span class="line">cursor = conn.cursor()</span><br></pre></td></tr></table></figure><p>這段程式碼會建立一個名為 <code>example.db</code> 的資料庫檔案。如果檔案已存在，則會連接到現有的資料庫。</p><h3><span id="建立資料表">建立資料表</span></h3><p>建立資料表是操作資料庫的第一步。以下是如何建立一個簡單的使用者表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立表</span></span><br><span class="line">cursor.execute(<span class="string">'''</span></span><br><span class="line"><span class="string">CREATE TABLE IF NOT EXISTS users (</span></span><br><span class="line"><span class="string">    id INTEGER PRIMARY KEY,</span></span><br><span class="line"><span class="string">    name TEXT NOT NULL,</span></span><br><span class="line"><span class="string">    age INTEGER NOT NULL</span></span><br><span class="line"><span class="string">)</span></span><br><span class="line"><span class="string">'''</span>)</span><br></pre></td></tr></table></figure><p>這段程式碼會建立一個名為 <code>users</code> 的表，包含三個字段：<code>id</code>、<code>name</code> 和 <code>age</code>。其中，<code>id</code> 是主鍵，會自動遞增。</p><h3><span id="插入資料">插入資料</span></h3><p>向表中插入資料可以使用 <code>INSERT INTO</code> 語句。以下是插入兩條記錄的範例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 插入資料</span></span><br><span class="line">cursor.execute(<span class="string">'INSERT INTO users (name, age) VALUES (?, ?)'</span>, (<span class="string">'Alice'</span>, <span class="number">30</span>))</span><br><span class="line">cursor.execute(<span class="string">'INSERT INTO users (name, age) VALUES (?, ?)'</span>, (<span class="string">'Bob'</span>, <span class="number">25</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 送出修改</span></span><br><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><p>使用 <code>?</code> 作為佔位符，可以有效防止SQL注入攻擊。</p><h3><span id="查詢資料">查詢資料</span></h3><p>要查詢資料，可以使用 <code>SELECT</code> 語句。以下是查詢所有使用者資料的範例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查詢資料</span></span><br><span class="line">cursor.execute(<span class="string">'SELECT * FROM users'</span>)</span><br><span class="line">rows = cursor.fetchall()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">    print(row)</span><br></pre></td></tr></table></figure><p>這段程式碼會輸出所有使用者的資料。</p><h3><span id="更新資料">更新資料</span></h3><p>更新資料可以使用 <code>UPDATE</code> 語句。以下是將名為Bob的使用者年齡更新為26的範例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新資料</span></span><br><span class="line">cursor.execute(<span class="string">'UPDATE users SET age = ? WHERE name = ?'</span>, (<span class="number">26</span>, <span class="string">'Bob'</span>))</span><br><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><h3><span id="刪除資料">刪除資料</span></h3><p>刪除資料可以使用 <code>DELETE</code> 語句。以下是刪除名為Alice的使用者的範例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 刪除資料</span></span><br><span class="line">cursor.execute(<span class="string">'DELETE FROM users WHERE name = ?'</span>, (<span class="string">'Alice'</span>,))</span><br><span class="line">conn.commit()</span><br></pre></td></tr></table></figure><h3><span id="關閉連接">關閉連接</span></h3><p>完成所有操作後，記得關閉資料庫連接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 關閉連接</span></span><br><span class="line">conn.close()</span><br></pre></td></tr></table></figure><h2><span id="最佳實踐">最佳實踐</span></h2><ol><li><strong>使用上下文管理器</strong>：上下文管理器 (<code>with</code> 語句) 可以自動處理資料庫連接的開啟和關閉，確保資源得到釋放。</li><li><strong>防止SQL注入</strong>：始終使用佔位符 (<code>?</code>) 來插入變數，防止SQL注入攻擊。</li><li><strong>定期備份資料庫</strong>：由於SQLite資料庫儲存在一個檔案中，備份非常簡單。定期備份可以防止資料丟失。</li><li><strong>使用索引</strong>：為常用的查詢字段建立索引，可以顯著提高查詢性能。</li></ol><h3><span id="使用上下文管理器的範例">使用上下文管理器的範例</span></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用上下文管理器</span></span><br><span class="line"><span class="keyword">with</span> sqlite3.connect(<span class="string">'example.db'</span>) <span class="keyword">as</span> conn:</span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    cursor.execute(<span class="string">'SELECT * FROM users'</span>)</span><br><span class="line">    rows = cursor.fetchall()</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">        print(row)</span><br></pre></td></tr></table></figure><p>這樣的寫法可以確保在操作完成後，自動關閉資料庫連接。</p><h2><span id="結論">結論</span></h2><p>SQLite 是一個功能強大且易於使用的嵌入式資料庫系統，非常適合小型應用和本地資料儲存。透過Python的 <code>sqlite3</code> 模組，你可以輕鬆地建立、操作和管理SQLite資料庫。希望這篇指南能幫助你更好地理解和使用SQLite。</p><p>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a><br><a href="/python-mongodb/" title="Python 與 MongoDB 的完美結合：詳細指南與範例">Python 與 MongoDB 的完美結合：詳細指南與範例</a><br><a href="/python-subprocess.run/" title="Python 中的 subprocess.run 完整指南與範例">Python 中的 subprocess.run 完整指南與範例</a><br><a href="/python-subprocess.call/" title="Python subprocess.call 用法與範例解析">Python subprocess.call 用法與範例解析</a><br><a href="/python-swap/" title="Python swap 用法與範例">Python swap 用法與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python SQLite 用法與範例，在開發應用程式的過程中，選擇合適的資料庫系統是至關重要的。SQLite 是一個輕量級、嵌入式的關聯資料庫系統，不需要單獨的伺服器程式來管理資料庫，非常適合用於本地資料儲存。無論你是開發手機應用、桌面應用還是
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>什麼是PDCA循環？了解持續改進的管理利器</title>
    <link href="https://shengyu7697.github.io/what-is-pdca/"/>
    <id>https://shengyu7697.github.io/what-is-pdca/</id>
    <published>2024-06-11T12:00:00.000Z</published>
    <updated>2024-06-07T09:51:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>在現代管理學中，PDCA（Plan-Do-Check-Act）迴圈是一個被廣泛採用的管理工具。它不僅有助於組織進行持續改進，還能提高工作效率和質量。這篇文章將為您詳細介紹PDCA循環的四個步驟及其應用。</p><h2><span id="pdca循環的四個步驟">PDCA循環的四個步驟</span></h2><ol><li><p><strong>計劃（Plan）</strong><br>計劃階段是PDCA循環的起點。在這個階段，您需要確定需要改進的過程或問題，並設立具體的目標。制定詳細的計劃是關鍵，計劃應該包含資源設定、時間表和每一步的具體操作步驟。</p></li><li><p><strong>執行（Do）</strong><br>在計劃完成後，下一步是執行計劃。在執行階段，您需要按照計劃中的步驟和時間表進行操作，確保每一個步驟都按預期進行。這個階段的重點是將計劃轉化為具體的行動。</p></li><li><p><strong>檢查（Check）</strong><br>執行完計劃後，進入檢查階段。在這個階段，您需要評估和檢查結果。透過收集資料並分析實際效果與預期目標的差異，可以找出成功和不足之處。檢查階段有助於了解哪些方面需要進一步改進。</p></li><li><p><strong>行動（Act）</strong><br>根據檢查結果，採取必要的行動進行調整或改進。如果改進措施有效，應將新流程標準化並應用於日常工作中。如果發現問題，則重新進行規劃，進入下一輪PDCA循環。</p></li></ol><h2><span id="pdca循環的應用">PDCA循環的應用</span></h2><p>PDCA循環是一個不斷重複的過程，其目的在於逐步改進和優化工作流程。透過不斷地計劃、執行、檢查和行動，組織可以實現持續改進，提升整體運營效能。這種方法被廣泛應用於質量管理、流程改進、問題解決等多個領域。</p><h2><span id="結論">結論</span></h2><p>PDCA循環是一種簡單而強大的管理工具，適用於各種規模的組織和行業。透過PDCA循環，企業能夠實現持續改進，提升競爭力。如果您希望優化您的工作流程或解決組織內的問題，不妨試試PDCA循環這一經典方法。</p><p>了解並應用PDCA循環，讓您的組織在競爭中脫穎而出，實現卓越的運營效能。</p><p>以上就是 PDCA 循環介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在現代管理學中，PDCA（Plan-Do-Check-Act）迴圈是一個被廣泛採用的管理工具。它不僅有助於組織進行持續改進，還能提高工作效率和質量。這篇文章將為您詳細介紹PDCA循環的四個步驟及其應用。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;pdca循環的四個步驟&quot;&gt;PDCA
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Python 與 MongoDB 的完美結合：詳細指南與範例</title>
    <link href="https://shengyu7697.github.io/python-mongodb/"/>
    <id>https://shengyu7697.github.io/python-mongodb/</id>
    <published>2024-06-10T12:00:00.000Z</published>
    <updated>2024-06-17T23:20:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python MongoDB 用法與範例，在現代的應用程式開發中，資料庫扮演著至關重要的角色。隨著非結構化資料的需求增加，NoSQL資料庫如MongoDB變得越來越受歡迎。Python作為一個強大的程式語言，結合MongoDB可以實現高效的資料存取與管理。本文將詳細介紹Python與MongoDB的用途、基本操作及進階應用，並透過具體範例展示其實現過程。</p><h2><span id="為什麼選擇python與mongodb">為什麼選擇Python與MongoDB？</span></h2><p>MongoDB是一種NoSQL資料庫，以其高性能、可擴展性和靈活的資料模型而著稱。相比於傳統的關係型資料庫，MongoDB更加適合處理非結構化資料和動態變化的資料需求。Python則因其簡單易用、擁有豐富的庫和框架而成為開發人員的首選語言。將Python與MongoDB結合，可以充分發揮兩者的優勢。</p><h2><span id="python與mongodb的用途">Python與MongoDB的用途</span></h2><ol><li><strong>資料存取與查詢</strong>：透過Python應用程式對MongoDB進行資料的插入、查詢、更新和刪除操作。</li><li><strong>資料分析與處理</strong>：利用Python強大的資料處理和分析庫（如Pandas）結合MongoDB進行大規模資料分析。</li><li><strong>Web應用後端</strong>：利用MongoDB作為資料儲存，結合Flask或Django等Python框架構建Web應用。</li><li><strong>原型設計與開發</strong>：快速設計和測試新的資料模型和應用功能，MongoDB的靈活性特別適合於這種用途。</li></ol><h2><span id="安裝-pymongo">安裝 <code>pymongo</code></span></h2><p>在開始操作之前，我們需要安裝<code>pymongo</code>，這是一個官方推薦的MongoDB Python客戶端庫。你可以使用以下指令進行安裝：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymongo</span><br></pre></td></tr></table></figure><h2><span id="基本操作範例">基本操作範例</span></h2><h3><span id="1-連接到mongodb">1. 連接到MongoDB</span></h3><p>首先，我們需要建立與MongoDB的連接並選擇我們需要操作的資料庫：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立連接</span></span><br><span class="line">client = MongoClient(<span class="string">"mongodb://localhost:27017/"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 選擇資料庫</span></span><br><span class="line">db = client.my_database</span><br></pre></td></tr></table></figure><h3><span id="2-插入資料">2. 插入資料</span></h3><p>插入資料是我們最常見的操作之一，可以插入單條資料或多條資料：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 選擇集合（相當於關係資料庫中的表）</span></span><br><span class="line">collection = db.my_collection</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入一條資料</span></span><br><span class="line">data = &#123;<span class="string">"name"</span>: <span class="string">"Alice"</span>, <span class="string">"age"</span>: <span class="number">25</span>, <span class="string">"city"</span>: <span class="string">"New York"</span>&#125;</span><br><span class="line">collection.insert_one(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入多條資料</span></span><br><span class="line">data_list = [</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"Bob"</span>, <span class="string">"age"</span>: <span class="number">30</span>, <span class="string">"city"</span>: <span class="string">"Chicago"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"Charlie"</span>, <span class="string">"age"</span>: <span class="number">35</span>, <span class="string">"city"</span>: <span class="string">"San Francisco"</span>&#125;</span><br><span class="line">]</span><br><span class="line">collection.insert_many(data_list)</span><br></pre></td></tr></table></figure><h3><span id="3-查詢資料">3. 查詢資料</span></h3><p>查詢資料是我們從資料庫中取得資訊的主要方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查詢一條資料</span></span><br><span class="line">result = collection.find_one(&#123;<span class="string">"name"</span>: <span class="string">"Alice"</span>&#125;)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查詢多條資料</span></span><br><span class="line">results = collection.find(&#123;<span class="string">"age"</span>: &#123;<span class="string">"$gt"</span>: <span class="number">25</span>&#125;&#125;)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><h3><span id="4-更新資料">4. 更新資料</span></h3><p>有時我們需要更新已存在的資料，可以使用以下方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新一條資料</span></span><br><span class="line">collection.update_one(&#123;<span class="string">"name"</span>: <span class="string">"Alice"</span>&#125;, &#123;<span class="string">"$set"</span>: &#123;<span class="string">"age"</span>: <span class="number">26</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新多條資料</span></span><br><span class="line">collection.update_many(&#123;<span class="string">"city"</span>: <span class="string">"Chicago"</span>&#125;, &#123;<span class="string">"$set"</span>: &#123;<span class="string">"city"</span>: <span class="string">"Los Angeles"</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h3><span id="5-刪除資料">5. 刪除資料</span></h3><p>刪除資料同樣是我們經常需要進行的操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 刪除一條資料</span></span><br><span class="line">collection.delete_one(&#123;<span class="string">"name"</span>: <span class="string">"Alice"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 刪除多條資料</span></span><br><span class="line">collection.delete_many(&#123;<span class="string">"age"</span>: &#123;<span class="string">"$gt"</span>: <span class="number">30</span>&#125;&#125;)</span><br></pre></td></tr></table></figure><h2><span id="進階應用">進階應用</span></h2><h3><span id="1-聚合操作">1. 聚合操作</span></h3><p>MongoDB的聚合框架允許我們執行更複雜的資料查詢和轉換：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pipeline = [</span><br><span class="line">    &#123;<span class="string">"$match"</span>: &#123;<span class="string">"age"</span>: &#123;<span class="string">"$gt"</span>: <span class="number">20</span>&#125;&#125;&#125;,</span><br><span class="line">    &#123;<span class="string">"$group"</span>: &#123;<span class="string">"_id"</span>: <span class="string">"$city"</span>, <span class="string">"average_age"</span>: &#123;<span class="string">"$avg"</span>: <span class="string">"$age"</span>&#125;&#125;&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">results = collection.aggregate(pipeline)</span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    print(result)</span><br></pre></td></tr></table></figure><h3><span id="2-建立索引">2. 建立索引</span></h3><p>建立索引可以顯著提高查詢性能，特別是在大型資料集上：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">collection.create_index(<span class="string">"name"</span>)</span><br><span class="line">collection.create_index([(<span class="string">"age"</span>, pymongo.ASCENDING), (<span class="string">"city"</span>, pymongo.DESCENDING)])</span><br></pre></td></tr></table></figure><h2><span id="總結">總結</span></h2><p>本文介紹了Python與MongoDB結合的基本用途和操作，包括資料存取、查詢、更新和刪除等基本操作，以及聚合和索引等進階應用。透過這些範例，你應該能夠理解如何利用Python與MongoDB進行高效的資料處理和應用開發。</p><p>不論你是用於資料分析還是Web應用開發，Python與MongoDB都是一個強大的組合。希望這篇指南能幫助你更好地掌握這兩者的使用技巧，提升你的開發效率和資料管理能力。</p><p>以上就是 Python MongoDB 用法與範例的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a><br><a href="/python-sqlite/" title="如何在Python中使用SQLite：完整指南與實用範例">如何在Python中使用SQLite：完整指南與實用範例</a><br><a href="/python-subprocess.run/" title="Python 中的 subprocess.run 完整指南與範例">Python 中的 subprocess.run 完整指南與範例</a><br><a href="/python-subprocess.call/" title="Python subprocess.call 用法與範例解析">Python subprocess.call 用法與範例解析</a><br><a href="/python-swap/" title="Python swap 用法與範例">Python swap 用法與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python MongoDB 用法與範例，在現代的應用程式開發中，資料庫扮演著至關重要的角色。隨著非結構化資料的需求增加，NoSQL資料庫如MongoDB變得越來越受歡迎。Python作為一個強大的程式語言，結合MongoDB可以實現高效的資料存
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Linux vmstat 指令用法範例</title>
    <link href="https://shengyu7697.github.io/linux-vmstat/"/>
    <id>https://shengyu7697.github.io/linux-vmstat/</id>
    <published>2024-06-09T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Linux vmstat 指令用法，<code>vmstat</code> 是一個用於顯示系統資源使用情況的 Linux 指令。它提供了關於虛擬記憶體、CPU、記憶體、磁碟、系統行程等方面的詳細資訊。現在讓我們來看一下它的基本用法以及其他常見和進階的用法。</p><h2><span id="基本用法">基本用法</span></h2><p><code>vmstat</code> 指令的基本用法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmstat [options] [delay [count]]</span><br></pre></td></tr></table></figure></p><p>其中，<code>options</code> 是一些可選的參數，<code>delay</code> 是兩次回報之間的延遲時間（以秒為單位），<code>count</code> 是回報的次數。</p><p>要查看當前系統的資源使用情況，只需在終端中輸入以下指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmstat</span><br></pre></td></tr></table></figure></p><p>這將顯示一系列資源使用指標，包括 CPU 使用率、記憶體使用、虛擬記憶體使用、IO 狀況等。</p><img src="/linux-vmstat/vmstat.png" title="vmstat">  <h2><span id="其他常見用法">其他常見用法</span></h2><p><code>vmstat</code> 指令指定延遲時間和回報次數，用法如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmstat 5 3</span><br></pre></td></tr></table></figure></p><p>這將每隔五秒回報一次資源使用情況，共回報三次。</p><p><code>vmstat</code> 指令每隔1秒總共回報10次，用法如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmstat 1 10</span><br></pre></td></tr></table></figure></p><p><code>vmstat</code> 指令顯示記憶體使用情況（以 KB 為單位），用法如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmstat -s</span><br></pre></td></tr></table></figure></p><p>這將顯示更詳細的記憶體使用情況，包括可用記憶體、已使用記憶體、快取和緩衝區等。</p><h2><span id="進階用法">進階用法</span></h2><p><code>vmstat</code> 指令監視系統資源使用情況，用法如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch vmstat -n 1</span><br></pre></td></tr></table></figure></p><p>這將持續監視系統的資源使用情況，每秒更新一次。</p><p><code>vmstat</code> 指令顯示指定項目的資源使用情況，用法如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmstat -s | grep <span class="string">"swap"</span></span><br></pre></td></tr></table></figure></p><p>這將僅顯示與虛擬記憶體（swap）相關的資源使用情況。</p><p><code>vmstat</code> 指令匯出 <code>vmstat</code> 輸出到檔案，用法如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vmstat 5 10 &gt; vmstat_output.txt</span><br></pre></td></tr></table></figure></p><p>這將將 <code>vmstat</code> 的輸出保存到指定的檔案中，方便後續分析。</p><h2><span id="總結">總結</span></h2><p><code>vmstat</code> 指令是一個強大的工具，用於監視和分析系統資源使用情況。透過了解其基本用法、其他常見用法和進階用法，使用者可以更好地理解和管理 Linux 系統的性能。無論是用於故障排除、性能優化還是監視系統狀態，<code>vmstat</code> 都是一個非常有用的工具。</p><p>以上就是 Linux vmstat 指令用法範例的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/linux-tutorial/" title="Linux 常用指令教學懶人包">Linux 常用指令教學懶人包</a><br><a href="/linux-wget/" title="Linux wget 下載檔案用法與範例">Linux wget 下載檔案用法與範例</a><br><a href="/linux-sed/" title="Linux sed 字串取代用法與範例">Linux sed 字串取代用法與範例</a><br><a href="/linux-find/" title="Linux find 尋找檔案/尋找資料夾用法與範例">Linux find 尋找檔案/尋找資料夾用法與範例</a><br><a href="/linux-grep-ack-ag/" title="Linux grep/ack/ag 搜尋字串用法與範例">Linux grep/ack/ag 搜尋字串用法與範例</a><br><a href="/linux-tee/" title="Linux tee 同時螢幕標準輸出和輸出到檔案用法與範例">Linux tee 同時螢幕標準輸出和輸出到檔案用法與範例</a><br><a href="/linux-xargs/" title="Linux xargs 參數列表轉換用法與範例">Linux xargs 參數列表轉換用法與範例</a><br><a href="/linux-tail/" title="Linux tail 持續監看檔案輸出用法與範例">Linux tail 持續監看檔案輸出用法與範例</a><br><a href="/linux-du/" title="Linux du 查詢硬碟剩餘空間/資料夾容量用法與範例">Linux du 查詢硬碟剩餘空間/資料夾容量用法與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Linux vmstat 指令用法，&lt;code&gt;vmstat&lt;/code&gt; 是一個用於顯示系統資源使用情況的 Linux 指令。它提供了關於虛擬記憶體、CPU、記憶體、磁碟、系統行程等方面的詳細資訊。現在讓我們來看一下它的基本用法以及其他常見和進
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shengyu7697.github.io/tags/Ubuntu/"/>
    
      <category term="Linux Command" scheme="https://shengyu7697.github.io/tags/Linux-Command/"/>
    
      <category term="Linux" scheme="https://shengyu7697.github.io/tags/Linux/"/>
    
      <category term="Shell Script" scheme="https://shengyu7697.github.io/tags/Shell-Script/"/>
    
  </entry>
  
  <entry>
    <title>Python swap 用法與範例</title>
    <link href="https://shengyu7697.github.io/python-swap/"/>
    <id>https://shengyu7697.github.io/python-swap/</id>
    <published>2024-06-08T12:00:00.000Z</published>
    <updated>2024-06-17T23:20:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python swap 用法與範例，在寫Python程式中，經常需要交換變數的值。這在許多情況下都是非常有用的操作，例如在演算法中或者在簡單的邏輯處理中。本文將介紹Python中兩種交換變數值的方法：一種是使用Python的特性進行簡單的交換，另一種是透過自製swap函式實現交換。我們將深入探討這兩種方法的優缺點，以及何時使用它們。</p><h3><span id="方法一簡單方法">方法一：簡單方法</span></h3><p>首先，讓我們看一下使用Python特性進行簡單交換的方法。在Python中，可以使用一行程式碼就完成變數值的交換。下面是一個範例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">a, b = b, a</span><br><span class="line">print(<span class="string">"a ="</span>, a)  <span class="comment"># Output: a = 2</span></span><br><span class="line">print(<span class="string">"b ="</span>, b)  <span class="comment"># Output: b = 1</span></span><br></pre></td></tr></table></figure><p>這裡我們使用了元組解包的特性，將b的值賦給a，將a的值賦給b，從而實現了變數值的交換。這種方法非常簡潔和直觀，適用於大多數情況下的變數交換需求。</p><h3><span id="方法二自製swap函式">方法二：自製swap函式</span></h3><p>除了使用Python的特性外，我們還可以編寫一個自製的swap函式來實現變數交換。這樣做的好處是可以提高程式碼的可讀性和重用性。下面是一個範例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> y, x</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">a, b = swap(a, b)</span><br><span class="line">print(<span class="string">"a ="</span>, a)  <span class="comment"># Output: a = 2</span></span><br><span class="line">print(<span class="string">"b ="</span>, b)  <span class="comment"># Output: b = 1</span></span><br></pre></td></tr></table></figure><p>在這個範例中，我們定義了一個名為swap的函式，接受兩個參數x和y，並回傳它們的交換值。透過呼叫這個函式，我們可以實現變數值的交換。這種方法雖然需要額外的函式呼叫，但提供了更好的可讀性和可維護性，特別是在需要多次交換變數值的情況下。</p><h3><span id="何時使用哪種方法">何時使用哪種方法？</span></h3><p>那麼，在實際寫程式中，我們應該何時選擇哪種方法呢？這取決於具體的情況和需求。</p><ul><li><p><strong>使用簡單方法</strong>：當只需要交換少量變數值時，或者希望程式碼簡潔明了時，可以使用簡單方法。它適用於大多數情況下的變數交換需求，並且具有更好的性能。</p></li><li><p><strong>使用自製swap函式</strong>：當需要在多個地方重覆使用變數交換邏輯時，或者希望提高程式碼的可讀性和可維護性時，可以考慮使用自製swap函式。雖然它需要額外的函式呼叫，但可以提高程式碼的模組化程度，並且在覆雜邏輯中更容易理解。</p></li></ul><h3><span id="總結">總結</span></h3><p>本文介紹了Python中兩種交換變數值的方法：簡單方法和自製swap函式。簡單方法利用Python的特性，一行程式碼即可完成變數值的交換，適用於大多數情況下的需求。而自製swap函式則提供了更好的可讀性和重用性，適用於需要多次交換變數值或者提高程式碼可維護性的情況。在實際寫程式中，根據具體情況選擇合適的方法，可以提高程式碼的效率和可維護性。</p><p>以上就是 Python swap 用法與範例的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a><br><a href="/python-subprocess.run/" title="Python 中的 subprocess.run 完整指南與範例">Python 中的 subprocess.run 完整指南與範例</a><br><a href="/python-subprocess.call/" title="Python subprocess.call 用法與範例解析">Python subprocess.call 用法與範例解析</a><br><a href="/python-sqlite/" title="如何在Python中使用SQLite：完整指南與實用範例">如何在Python中使用SQLite：完整指南與實用範例</a><br><a href="/python-mongodb/" title="Python 與 MongoDB 的完美結合：詳細指南與範例">Python 與 MongoDB 的完美結合：詳細指南與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python swap 用法與範例，在寫Python程式中，經常需要交換變數的值。這在許多情況下都是非常有用的操作，例如在演算法中或者在簡單的邏輯處理中。本文將介紹Python中兩種交換變數值的方法：一種是使用Python的特性進行簡單的交換，另
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
</feed>

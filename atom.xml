<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShengYu Talk</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shengyu7697.github.io/"/>
  <updated>2022-07-12T14:51:34.602Z</updated>
  <id>https://shengyu7697.github.io/</id>
  
  <author>
    <name>ShengYu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++ std::vector&lt;char&gt; 轉 std::string 的 2 種方法</title>
    <link href="https://shengyu7697.github.io/cpp-vector-char-to-string/"/>
    <id>https://shengyu7697.github.io/cpp-vector-char-to-string/</id>
    <published>2022-07-11T14:00:00.000Z</published>
    <updated>2022-07-12T14:51:34.602Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C++ <code>std::vector&lt;char&gt;</code> 轉 <code>std::string</code> 的方法，  </p><p>以下 C++ <code>std::vector&lt;char&gt;</code> 轉 <code>std::string</code> 的 2 種方法分別是，  </p><ul><li>使用 string range constructor  </li><li>使用 for 迴圈  </li></ul><p>那我們就開始吧！  </p><h2 id="使用-string-range-constructor"><a href="#使用-string-range-constructor" class="headerlink" title="使用 string range constructor"></a>使用 string range constructor</h2><p>C++ <code>std::vector&lt;char&gt;</code> 轉 <code>std::string</code> 可以使用 string 建構子中的 range constructor，方法如下，<br><figure class="highlight cpp"><figcaption><span>cpp-vector-char-to-string.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-vector-char-to-string.cpp -o a.out -std=c++11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; v = &#123;<span class="string">'H'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>&#125;;</span><br><span class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(v.begin(), v.end())</span></span>;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br></pre></td></tr></table></figure></p><h2 id="使用-for-迴圈"><a href="#使用-for-迴圈" class="headerlink" title="使用 for 迴圈"></a>使用 for 迴圈</h2><p>另一種 C++ <code>std::string</code> 轉 <code>std::vector&lt;char&gt;</code> 可以使用 for 迴圈將 vector 裡每個元素添加到 string 裡，添加到 string 可以使用 <code>std::string</code> 的 +=operator 的方式或是 push_back 的方式都可以，<br><figure class="highlight cpp"><figcaption><span>cpp-vector-char-to-string2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-vector-char-to-string2.cpp -o a.out -std=c++11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; v = &#123;<span class="string">'H'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>&#125;;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> &amp;c : v) &#123;</span><br><span class="line">        s += c;</span><br><span class="line">        <span class="comment">//s.push_back(c);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure></p><p>以上就是 C++ <code>std::vector&lt;char&gt;</code> 轉 <code>std::string</code> 的 2 種方法的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p>其他參考<br>Convert a vector of chars to std::string in C++<br><a href="https://www.techiedelight.com/convert-vector-chars-std-string/" target="_blank" rel="noopener">https://www.techiedelight.com/convert-vector-chars-std-string/</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-string-to-vector-char/" title="C++ std::string 轉 std::vector&lt;char> 的 2 種方法">C++ std::string 轉 std::vector&lt;char> 的 2 種方法</a><br><a href="/cpp-integer-to-string/" title="C/C++ 整數轉字串的方法與範例">C/C++ 整數轉字串的方法與範例</a><br><a href="/cpp-virtual/" title="C++ virtual 的兩種用法">C++ virtual 的兩種用法</a><br><a href="/cpp-string-reverse/" title="C/C++ 字串反轉 reverse">C/C++ 字串反轉 reverse</a><br><a href="/cpp-call-by-value-pointer-reference/" title="C/C++ call by value傳值, call by pointer傳址, call by reference傳參考 的差別">C/C++ call by value傳值, call by pointer傳址, call by reference傳參考 的差別</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C++ &lt;code&gt;std::vector&amp;lt;char&amp;gt;&lt;/code&gt; 轉 &lt;code&gt;std::string&lt;/code&gt; 的方法，  &lt;/p&gt;
&lt;p&gt;以下 C++ &lt;code&gt;std::vector&amp;lt;char&amp;gt;&lt;/cod
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C++ std::string 轉 std::vector&lt;char&gt; 的 2 種方法</title>
    <link href="https://shengyu7697.github.io/cpp-string-to-vector-char/"/>
    <id>https://shengyu7697.github.io/cpp-string-to-vector-char/</id>
    <published>2022-07-07T14:00:00.000Z</published>
    <updated>2022-07-12T14:51:34.601Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C++ <code>std::string</code> 轉 <code>std::vector&lt;char&gt;</code> 的方法，  </p><p>以下 C++ <code>std::string</code> 轉 <code>std::vector&lt;char&gt;</code> 的 2 種方法分別是，  </p><ul><li>使用 vector range constructor  </li><li>使用 std::copy()  </li></ul><p>那我們就開始吧！  </p><h2 id="使用-vector-range-constructor"><a href="#使用-vector-range-constructor" class="headerlink" title="使用 vector range constructor"></a>使用 vector range constructor</h2><p>C++ <code>std::string</code> 轉 <code>std::vector&lt;char&gt;</code> 可以使用 vector 建構子中的 range constructor，方法如下，<br><figure class="highlight cpp"><figcaption><span>cpp-string-to-vector-char.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-string-to-vector-char.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> s = <span class="string">"Hello World"</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; v(s.begin(), s.end());</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure></p><h2 id="使用-std-copy"><a href="#使用-std-copy" class="headerlink" title="使用 std::copy()"></a>使用 std::copy()</h2><p>另一種 C++ <code>std::string</code> 轉 <code>std::vector&lt;char&gt;</code> 可以使用 std::copy()，首先 vector 要配置好 string 長度的大小，之後再用 std::copy()，前兩個參數是指定複製的範圍，第三個參數是複製到哪裡，<br><figure class="highlight cpp"><figcaption><span>cpp-string-to-vector-char2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-string-to-vector-char2.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> s = <span class="string">"Hello World"</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; v(s.length());</span><br><span class="line">    <span class="built_in">std</span>::copy(s.begin(), s.end(), v.begin());</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure></p><p>std::copy() 還可以使用 std::back_inserter 將複製的資料在容器的尾端插入，std::back_inserter 會在內部互叫 push_back，所以 vector 一開始不用預先分配好 size，範例如下，但是以效能來說，前述例子預先分配好 size 會比較好，也不會有過多的預留空間，<br><figure class="highlight cpp"><figcaption><span>cpp-string-to-vector-char3.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-string-to-vector-char3.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> s = <span class="string">"Hello World"</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; v;</span><br><span class="line">    <span class="built_in">std</span>::copy(s.begin(), s.end(), <span class="built_in">std</span>::back_inserter(v));</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v.size(); i++) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; v[i];</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出同上。  </p><p>以上就是 C++ <code>std::string</code> 轉 <code>std::vector&lt;char&gt;</code> 的 2 種方法的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p>其他參考<br>c++ - How to copy std::string into std::vector&lt;char&gt;? - Stack Overflow<br><a href="https://stackoverflow.com/questions/8263926/how-to-copy-stdstring-into-stdvectorchar" target="_blank" rel="noopener">https://stackoverflow.com/questions/8263926/how-to-copy-stdstring-into-stdvectorchar</a><br>Convert a string to a vector of chars in C++<br><a href="https://www.techiedelight.com/convert-string-vector-chars-cpp/" target="_blank" rel="noopener">https://www.techiedelight.com/convert-string-vector-chars-cpp/</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-vector-char-to-string/" title="C++ std::vector&lt;char> 轉 std::string 的 2 種方法">C++ std::vector&lt;char> 轉 std::string 的 2 種方法</a><br><a href="/cpp-integer-to-string/" title="C/C++ 整數轉字串的方法與範例">C/C++ 整數轉字串的方法與範例</a><br><a href="/cpp-virtual/" title="C++ virtual 的兩種用法">C++ virtual 的兩種用法</a><br><a href="/cpp-string-reverse/" title="C/C++ 字串反轉 reverse">C/C++ 字串反轉 reverse</a><br><a href="/cpp-call-by-value-pointer-reference/" title="C/C++ call by value傳值, call by pointer傳址, call by reference傳參考 的差別">C/C++ call by value傳值, call by pointer傳址, call by reference傳參考 的差別</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C++ &lt;code&gt;std::string&lt;/code&gt; 轉 &lt;code&gt;std::vector&amp;lt;char&amp;gt;&lt;/code&gt; 的方法，  &lt;/p&gt;
&lt;p&gt;以下 C++ &lt;code&gt;std::string&lt;/code&gt; 轉 &lt;code&gt;s
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Shell Script 判斷目錄資料夾是否存在</title>
    <link href="https://shengyu7697.github.io/shell-script-check-if-directory-exists/"/>
    <id>https://shengyu7697.github.io/shell-script-check-if-directory-exists/</id>
    <published>2022-07-04T14:00:00.000Z</published>
    <updated>2022-07-04T15:32:00.225Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Shell Script 判斷目錄資料夾是否存在的用法與範例。  </p><p>以下 Shell Script 判斷目錄資料夾是否存在的用法介紹將分為這幾部份，  </p><ul><li>Shell Script 判斷目錄資料夾是否存在  </li><li>Shell Script 判斷多個目錄資料夾是否存在  </li></ul><p>那我們開始吧！  </p><h2 id="Shell-Script-判斷目錄資料夾是否存在"><a href="#Shell-Script-判斷目錄資料夾是否存在" class="headerlink" title="Shell Script 判斷目錄資料夾是否存在"></a>Shell Script 判斷目錄資料夾是否存在</h2><p>這邊示範用 Shell Script 來判斷 myfolder 目錄資料夾是否存在，判斷目錄資料夾要用 <code>-d</code>，如下範例，要注意 <code>-d</code> 前有個空格，因為使用 if 條件判斷語法 <code>[</code> <code>]</code> 中括號的兩端內側必須要有一個空白字元，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -d myfolder ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Yes"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"No"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>判斷檔案是否存在則是要用 <code>-f</code>。  </p><h2 id="Shell-Script-判斷多個目錄資料夾是否存在"><a href="#Shell-Script-判斷多個目錄資料夾是否存在" class="headerlink" title="Shell Script 判斷多個目錄資料夾是否存在"></a>Shell Script 判斷多個目錄資料夾是否存在</h2><p>這邊示範用 Shell Script 來判斷多個目錄資料夾是否存在，如果是要判斷兩個目錄資料夾都同時存在的話，可以用 <code>&amp;&amp;</code> 連接條件式，範例如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -d myfolder1 ] &amp;&amp; [ -d myfolder2 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Yes"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"No"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>如果要用 Shell Script 來判斷兩個目錄資料夾任一個目錄資料夾存在的話，可以用 <code>||</code> 連接條件式，範例如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -d myfolder1 ] || [ -d myfolder2 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Yes"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"No"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>如果要判斷 3 個目錄資料夾或 3 個以上的目錄資料夾是否同時存在，程式碼通常會比較長，<br>這時適時地換行就會比較好維護程式碼，範例如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -d myfolder1 ] &amp;&amp; </span><br><span class="line">   [ -d myfolder2 ] &amp;&amp;</span><br><span class="line">   [ -d myfolder3 ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Yes"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"No"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>以上就是 Shell Script 判斷目錄資料夾是否存在的用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 Shell Script 相關技術，可以參考看看下面的文章，<br><a href="/shell-script-check-if-file-exists/" title="Shell Script 判斷檔案是否存在">Shell Script 判斷檔案是否存在</a><br><a href="/shell-script-tutorial/" title="Shell Script 新手入門教學">Shell Script 新手入門教學</a><br><a href="/shell-script-arithmetic/" title="Shell Script 四則運算，變數相加、相減、相乘、相除">Shell Script 四則運算，變數相加、相減、相乘、相除</a><br><a href="/shell-script-if/" title="Shell Script if 條件判斷">Shell Script if 條件判斷</a><br><a href="/shell-script-for/" title="Shell Script for 迴圈">Shell Script for 迴圈</a><br><a href="/shell-script-while/" title="Shell Script while 迴圈">Shell Script while 迴圈</a><br><a href="/shell-script-read-text-file/" title="Shell Script 讀檔，讀取 txt 文字檔">Shell Script 讀檔，讀取 txt 文字檔</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Shell Script 判斷目錄資料夾是否存在的用法與範例。  &lt;/p&gt;
&lt;p&gt;以下 Shell Script 判斷目錄資料夾是否存在的用法介紹將分為這幾部份，  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shell Script 判斷目錄資料夾是否存在  
      
    
    </summary>
    
    
      <category term="Shell Script" scheme="https://shengyu7697.github.io/tags/Shell-Script/"/>
    
  </entry>
  
  <entry>
    <title>Android adb reverse 通訊埠轉發用法教學</title>
    <link href="https://shengyu7697.github.io/android-adb-reverse/"/>
    <id>https://shengyu7697.github.io/android-adb-reverse/</id>
    <published>2022-06-30T14:00:00.000Z</published>
    <updated>2022-07-01T01:16:06.438Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Android 的 adb reverse 通訊埠轉發的功能，adb reverse 的功能是轉發 Android 裝置上某個埠號 (port) 資料到 PC 電腦的某個埠號 (port)，例如：下列 <code>adb reverse</code> 指令就是將 Android Device 的 port 10000 收到的資料，轉發給到 PC 端的 port 20000，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reverse tcp:10000 tcp:20000</span><br></pre></td></tr></table></figure></p><p>Android 5.0 及以上才支援使用 adb reverse 指令，且 adb 要 1.0.32 之後的版本才支援。  </p><p>通常在 PC 端會啟動一個 server 程式，而 Android Device 的 client 程式想要連到 PC 端的 server，除了使用 ip 的方式連線以外，沒有 ip 的話，還可以利用 USB 連線的方式，也就是透過 adb reverse 轉發 port，如此一來 Android Device 的 client 程式就可以連上 PC 端的 server 程式，  </p><p>adb reverse 執行完後可以使用 <code>adb reverse --list</code> 查看轉發列表，或者用 <code>adb reverse --remove-all</code> 移除全部，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ adb reverse --list</span><br><span class="line">XX00X0000000 tcp:10000 tcp:20000</span><br></pre></td></tr></table></figure></p><p>如果要移除轉發的話，就這樣下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb reverse --remove tcp:10000</span><br></pre></td></tr></table></figure></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>以上就是 Android adb reverse 通訊埠轉發用法教學介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p><strong>相關主題</strong><br><a href="/android-adb-forward/" title="Android adb forward 通訊埠轉發用法教學">Android adb forward 通訊埠轉發用法教學</a><br><a href="/android-adb/" title="Android adb 基本用法教學">Android adb 基本用法教學</a><br>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Android 的 adb reverse 通訊埠轉發的功能，adb reverse 的功能是轉發 Android 裝置上某個埠號 (port) 資料到 PC 電腦的某個埠號 (port)，例如：下列 &lt;code&gt;adb reverse&lt;/cod
      
    
    </summary>
    
    
      <category term="Android" scheme="https://shengyu7697.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>LLDB 除錯教學</title>
    <link href="https://shengyu7697.github.io/lldb/"/>
    <id>https://shengyu7697.github.io/lldb/</id>
    <published>2022-06-27T14:00:00.000Z</published>
    <updated>2022-07-01T01:16:06.418Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 LLDB 除錯教學，LLDB Debugger 是 LLVM 專案的除錯元件。在使用 Debugger 時可以單步執行、執行到中斷點、查看變數內容、印出呼叫堆疊等等功能，是程式設計師的常用工具，以下將會介紹編譯完 C/C++ 程式後怎麼使用 LLDB 來替 C/C++ 程式偵錯。  </p><p>以下 LLDB 除錯教學的內容大概分為這幾部分，  </p><ul><li>clang/clang++ 編譯 C/C++ 程式  </li><li>LLDB 進行除錯  </li></ul><p>那我們開始吧！  </p><h2 id="clang-clang-編譯-C-C-程式"><a href="#clang-clang-編譯-C-C-程式" class="headerlink" title="clang/clang++ 編譯 C/C++ 程式"></a>clang/clang++ 編譯 C/C++ 程式</h2><p>我的桌機環境為 Ubuntu 16.04，以下為一個簡單的 C/C++ 程式，使用 <code>clang++ main.cpp -g -o a.out</code> 進行編譯，編譯成功後會產生 a.out 執行檔，<code>-g</code> 表示帶有除錯資訊，這邊當然也可以使用 gcc/g++ 去編譯 C/C++ 程式 (<code>g++ main.cpp -g -o a.out</code>)，gcc/g++ 編譯後的程式 LLDB 也可以進行除錯，<br><figure class="highlight cpp"><figcaption><span>main.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// clang++ main.cpp -g -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> s = <span class="string">"hello world"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"sum="</span> &lt;&lt; sum &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"end\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>程式輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br><span class="line">sum=10</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2 id="LLDB-進行除錯"><a href="#LLDB-進行除錯" class="headerlink" title="LLDB 進行除錯"></a>LLDB 進行除錯</h2><p>接著使用 lldb 指令對 a.out 進行除錯，執行 <code>lldb ./a.out</code> 指令進入 lldb 交互介面，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ lldb ./a.out </span><br><span class="line">(lldb) target create <span class="string">"./a.out"</span></span><br><span class="line">Current executable <span class="built_in">set</span> to <span class="string">'./a.out'</span> (x86_64).</span><br><span class="line">(lldb)</span><br></pre></td></tr></table></figure></p><p>輸入 <code>b main.cpp:14</code> 插入中斷點在 main.cpp 的 14 行，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(lldb) b main.cpp:14</span><br><span class="line">Breakpoint 1: <span class="built_in">where</span> = a.out`main + 188 at main.cpp:14, address = 0x0000000000400c2c</span><br><span class="line">(lldb)</span><br></pre></td></tr></table></figure></p><p>輸入 <code>b</code> 印出目前設定的中斷點，這個指令跟 gdb 有所不同，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(lldb) b</span><br><span class="line">Current breakpoints:</span><br><span class="line">1: file = &apos;main.cpp&apos;, line = 14, exact_match = 0, locations = 1</span><br><span class="line">  1.1: where = a.out`main + 188 at main.cpp:14, address = a.out[0x0000000000400c2c], unresolved, hit count = 0 </span><br><span class="line"></span><br><span class="line">(lldb)</span><br></pre></td></tr></table></figure></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>按下 <code>r</code> 開始執行，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(lldb) r</span><br><span class="line">Process 24479 launched: <span class="string">'./a.out'</span> (x86_64)</span><br><span class="line">hello world</span><br><span class="line">Process 24479 stopped</span><br><span class="line">* thread <span class="comment">#1, name = 'a.out', stop reason = breakpoint 1.1</span></span><br><span class="line">    frame <span class="comment">#0: 0x0000000000400c2c a.out`main at main.cpp:14</span></span><br><span class="line">   11       &#125;</span><br><span class="line">   12  </span><br><span class="line">   13       std::cout &lt;&lt; s &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">-&gt; 14       std::cout &lt;&lt; <span class="string">"sum="</span> &lt;&lt; sum &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">   15       std::cout &lt;&lt; <span class="string">"end\n"</span>;</span><br><span class="line">   16  </span><br><span class="line">   17       <span class="built_in">return</span> 0;</span><br><span class="line">(lldb)</span><br></pre></td></tr></table></figure></p><p>再次輸入 <code>b</code> 印出目前設定的中斷點，可以看到中斷點被觸發幾次，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(lldb) b</span><br><span class="line">Current breakpoints:</span><br><span class="line">1: file = <span class="string">'main.cpp'</span>, line = 14, exact_match = 0, locations = 1, resolved = 1, hit count = 1</span><br><span class="line">  1.1: <span class="built_in">where</span> = a.out`main + 188 at main.cpp:14, address = 0x0000000000400c2c, resolved, hit count = 1 </span><br><span class="line"></span><br><span class="line">(lldb)</span><br></pre></td></tr></table></figure></p><p>接著按 <code>c</code> 繼續執行直到程式結束，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(lldb) c</span><br><span class="line">Process 24479 resuming</span><br><span class="line">sum=10</span><br><span class="line">end</span><br><span class="line">Process 24479 exited with status = 0 (0x00000000)</span><br><span class="line">(lldb)</span><br></pre></td></tr></table></figure></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>以下為 lldb 常用的指令，<br><code>r</code>：run 開始執行<br><code>c</code>：continue 繼續執行<br><code>b main.cpp:14</code>：設定中斷點<br><code>b</code>：印出目前設定的中斷點（這個指令跟 gdb 有所不同）<br><code>po &lt;變數名稱&gt;</code>：印出目前變數的值，例如：<code>po sum</code><br><code>bt</code>：backtrace 印出程式呼叫的堆疊<br><code>q</code>：quit 離開  </p><p>以上就是 LLDB 除錯教學介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p>其他參考<br>LLDB 玩樂筆記. 最近在寫 uTensor 的 CNN Demo 文章，code 是可以… | by Dboy Liao | Medium<br><a href="https://dboyliao.medium.com/lldb-%E7%8E%A9%E6%A8%82%E7%AD%86%E8%A8%98-f5f5d5ed89ff" target="_blank" rel="noopener">https://dboyliao.medium.com/lldb-%E7%8E%A9%E6%A8%82%E7%AD%86%E8%A8%98-f5f5d5ed89ff</a>  </p><p><strong>相關主題</strong><br><a href="/gdb/" title="gdb 除錯教學">gdb 除錯教學</a><br><a href="/gdbserver/" title="gdbserver 遠端除錯教學">gdbserver 遠端除錯教學</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 LLDB 除錯教學，LLDB Debugger 是 LLVM 專案的除錯元件。在使用 Debugger 時可以單步執行、執行到中斷點、查看變數內容、印出呼叫堆疊等等功能，是程式設計師的常用工具，以下將會介紹編譯完 C/C++ 程式後怎麼使用 LL
      
    
    </summary>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>gdbserver 遠端除錯教學</title>
    <link href="https://shengyu7697.github.io/gdbserver/"/>
    <id>https://shengyu7697.github.io/gdbserver/</id>
    <published>2022-06-23T14:00:00.000Z</published>
    <updated>2022-06-27T14:54:39.489Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹使用 gdbserver 來遠端除錯教學，gdb 可以透過網路對遠端的程式進行除錯，需要遠端執行 gdbserver 以及搭配本地端 gdb 一起使用，而 gdbserver 是 server 的角色，而 gdb 是 client 的角色，一旦 gdb 連上遠端的 gdbserver 後，之後就使用 gdb 進行除錯，跟平常的 gdb 使用上沒有差異，我的桌機環境為 Ubuntu 16.04，  </p><p><strong>Remote 端</strong><br>在 Remote 端執行 gdbserver，執行 gdbserver 後面參數加上 <code>&lt;ip:port&gt;</code> 監聽的ip位址與port通訊埠以及要偵錯的執行檔路徑，這邊範例使用 port 20000，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdbserver 192.168.0.2:20000 samplehello</span><br></pre></td></tr></table></figure></p><p>gdbserver 要使用 attach 的方式的話，後面接上程式的 pid 即可，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdbserver 192.168.0.2:20000 --attach &lt;pid&gt;</span><br></pre></td></tr></table></figure></p><p><strong>Local 端</strong><br>在 Local 端執行 gdb，後面參數接上執行檔(debug 版本，no striped)，執行 gdb 後使用 <code>target remote &lt;ip:port&gt;</code> 來連上遠端的 gdbserver，這邊範例是連上本地端的 port 20000，這樣 Remote 的 gdbserver 就收到連線請求，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb samplehello</span><br><span class="line">(gdb) target remote 192.168.0.2:20000</span><br></pre></td></tr></table></figure></p><p>一般 gdb 除錯時是使用 r 開始執行程式。不過遠端除錯時，遠端的 gdbserver 已經 run 了，所以 gdb 要用 c 來繼續執行，不能用 r。  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>以下為 gdb 常用的指令，<br><code>r</code>：run 開始執行<br><code>c</code>：continue 繼續執行<br><code>b main.cpp:14</code>：設定中斷點<br><code>info b</code>：印出目前設定的中斷點<br><code>bt</code>：backtrace 印出程式呼叫的堆疊<br><code>q</code>：quit 離開  </p><p>以上就是 gdbserver 遠端除錯教學介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p><strong>相關主題</strong><br><a href="/gdb/" title="gdb 除錯教學">gdb 除錯教學</a><br><a href="/lldb/" title="LLDB 除錯教學">LLDB 除錯教學</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹使用 gdbserver 來遠端除錯教學，gdb 可以透過網路對遠端的程式進行除錯，需要遠端執行 gdbserver 以及搭配本地端 gdb 一起使用，而 gdbserver 是 server 的角色，而 gdb 是 client 的角色，一旦 g
      
    
    </summary>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>gdb 除錯教學</title>
    <link href="https://shengyu7697.github.io/gdb/"/>
    <id>https://shengyu7697.github.io/gdb/</id>
    <published>2022-06-20T14:00:00.000Z</published>
    <updated>2022-06-27T14:54:39.489Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 gdb 除錯教學，全名為 GNU Debugger，是 GNU 軟體系統中的標準偵錯器 Debugger，在使用 Debugger 時可以單步執行、執行到中斷點、查看變數內容、印出呼叫堆疊等等功能，是程式設計師的常用工具，以下將會介紹編譯完 C/C++ 程式後怎麼使用 gdb 來替 C/C++ 程式偵錯。  </p><p>以下 gdb 除錯教學的內容大概分為這幾部分，  </p><ul><li>gcc/g++ 編譯 C/C++ 程式  </li><li>gdb 進行除錯  </li></ul><p>那我們開始吧！  </p><h2 id="gcc-g-編譯-C-C-程式"><a href="#gcc-g-編譯-C-C-程式" class="headerlink" title="gcc/g++ 編譯 C/C++ 程式"></a>gcc/g++ 編譯 C/C++ 程式</h2><p>我的桌機環境為 Ubuntu 16.04，以下為一個簡單的 C/C++ 程式，使用 <code>g++ main.cpp -g -o a.out</code> 進行編譯，編譯成功後會產生 a.out 執行檔，<code>-g</code> 表示帶有除錯資訊，<br><figure class="highlight cpp"><figcaption><span>main.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ main.cpp -g -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> s = <span class="string">"hello world"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"sum="</span> &lt;&lt; sum &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"end\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>程式輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br><span class="line">sum=10</span><br><span class="line">end</span><br></pre></td></tr></table></figure></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2 id="gdb-進行除錯"><a href="#gdb-進行除錯" class="headerlink" title="gdb 進行除錯"></a>gdb 進行除錯</h2><p>接著使用 gdb 指令對 a.out 進行除錯，執行 <code>gdb ./a.out</code> 指令進入 gdb 交互介面，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ gdb ./a.out </span><br><span class="line">GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1</span><br><span class="line">Copyright (C) 2016 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">"show copying"</span></span><br><span class="line">and <span class="string">"show warranty"</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">"x86_64-linux-gnu"</span>.</span><br><span class="line">Type <span class="string">"show configuration"</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">"help"</span>.</span><br><span class="line">Type <span class="string">"apropos word"</span> to search <span class="keyword">for</span> commands related to <span class="string">"word"</span>...</span><br><span class="line">Reading symbols from a.out...done.</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure></p><p>輸入 <code>b main.cpp:14</code> 插入中斷點在 main.cpp 的 14 行，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(gdb) b main.cpp:14</span><br><span class="line">Breakpoint 1 at 0x400c09: file main.cpp, line 14.</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure></p><p>輸入 <code>info b</code> 印出目前設定的中斷點，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(gdb) info b</span><br><span class="line">Num     Type           Disp Enb Address            What</span><br><span class="line">1       breakpoint     keep y   0x0000000000400c09 in main() at main.cpp:14</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>按下 <code>r</code> 開始執行，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(gdb) r</span><br><span class="line">Starting program: /home/shengyu/a.out </span><br><span class="line">hello world</span><br><span class="line"></span><br><span class="line">Breakpoint 1, main () at main.cpp:14</span><br><span class="line">14    std::cout &lt;&lt; <span class="string">"sum="</span> &lt;&lt; sum &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure></p><p>再次輸入 <code>info b</code> 印出目前設定的中斷點，可以看到中斷點被觸發幾次，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(gdb) info b</span><br><span class="line">Num     Type           Disp Enb Address            What</span><br><span class="line">1       breakpoint     keep y   0x0000000000400c09 <span class="keyword">in</span> main() at main.cpp:14</span><br><span class="line">breakpoint already hit 1 time</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure></p><p>接著按 <code>c</code> 繼續執行直到程式結束，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(gdb) c</span><br><span class="line">Continuing.</span><br><span class="line">sum=10</span><br><span class="line">end</span><br><span class="line">[Inferior 1 (process 14925) exited normally]</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>以下為 gdb 常用的指令，<br><code>r</code>：run 開始執行<br><code>c</code>：continue 繼續執行<br><code>b main.cpp:14</code>：設定中斷點<br><code>info b</code>：印出目前設定的中斷點<br><code>bt</code>：backtrace 印出程式呼叫的堆疊<br><code>q</code>：quit 離開  </p><p>以上就是 gdb 除錯教學介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p>其他參考<br>C語言工具使用，GDB個人學習筆記 - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天<br><a href="https://ithelp.ithome.com.tw/articles/10257294" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10257294</a>  </p><p><strong>相關主題</strong><br><a href="/gdbserver/" title="gdbserver 遠端除錯教學">gdbserver 遠端除錯教學</a><br><a href="/lldb/" title="LLDB 除錯教學">LLDB 除錯教學</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 gdb 除錯教學，全名為 GNU Debugger，是 GNU 軟體系統中的標準偵錯器 Debugger，在使用 Debugger 時可以單步執行、執行到中斷點、查看變數內容、印出呼叫堆疊等等功能，是程式設計師的常用工具，以下將會介紹編譯完 C/
      
    
    </summary>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 使用 VS Code Debugger 除錯教學</title>
    <link href="https://shengyu7697.github.io/vscode-debugging-on-ubuntu/"/>
    <id>https://shengyu7697.github.io/vscode-debugging-on-ubuntu/</id>
    <published>2022-06-16T14:00:00.000Z</published>
    <updated>2022-06-16T14:57:22.956Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹在 Ubuntu 使用 Visual Studio Code(VS Code) 設定 C/C++ 除錯的環境，  </p><p>以下 Ubuntu 使用 VS Code 設定除錯環境的內容大概分為  </p><ul><li>VS Code 除錯環境設定  </li><li>VS Code 偵錯前先編譯  </li><li>VS Code 開啟 make 專案  </li><li>VS Code 開啟 cmake 專案  </li><li>VS Code 錯誤排除  </li></ul><p>那我們開始吧！  </p><h2 id="VS-Code-除錯環境設定"><a href="#VS-Code-除錯環境設定" class="headerlink" title="VS Code 除錯環境設定"></a>VS Code 除錯環境設定</h2><p>我的 VS Code 版本為 1.68.0，Ubuntu 版本為 16.04，<br>在新專案下按下 F5 時如果沒有 <code>.vscode/launch.json</code> 設定檔的話，會跳出一些選項讓你選擇，如圖中的 C++:  clang++<br><img src="/vscode-debugging-on-ubuntu/vscode-debugging-1.png" title="vscode lldb debugging">  </p><p>編譯時，新專案下沒有 <code>.vscode/tasks.json</code> 設定檔的話，也會跳出選項讓你選擇，這邊是示範選擇使用 clang++，用 g++ 也可以，<br><img src="/vscode-debugging-on-ubuntu/vscode-debugging-2.png" title="vscode lldb debugging">  </p><p>會在資料夾下產生 .vscode/launch.json 設定如下，如果沒有的話自己手動新增也可以，<br><figure class="highlight"><figcaption><span>.vscode/launch.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // Use IntelliSense to learn about possible attributes.</span><br><span class="line">    // Hover to view descriptions of existing attributes.</span><br><span class="line">    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    "version": "0.2.0",</span><br><span class="line">    "configurations": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"clang - Build and debug active file"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"cppdbg"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/a.out"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [],</span><br><span class="line">            <span class="attr">"stopAtEntry"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;fileDirname&#125;"</span>,</span><br><span class="line">            <span class="attr">"environment"</span>: [],</span><br><span class="line">            <span class="attr">"externalConsole"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"MIMode"</span>: <span class="string">"lldb"</span>,</span><br><span class="line">            <span class="attr">"setupCommands"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"description"</span>: <span class="string">"Enable pretty-printing for gdb"</span>,</span><br><span class="line">                    <span class="attr">"text"</span>: <span class="string">"-enable-pretty-printing"</span>,</span><br><span class="line">                    <span class="attr">"ignoreFailures"</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"miDebuggerPath"</span>: <span class="string">"/usr/bin/lldb-mi"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>編譯 C/C++ 時記得加上 <code>-g</code> 選項，按 F5 執行 Start Debugging 後，就成功了！<br><img src="/vscode-debugging-on-ubuntu/vscode-debugging-3.png" title="vscode lldb debugging">  </p><h2 id="VS-Code-偵錯前先編譯"><a href="#VS-Code-偵錯前先編譯" class="headerlink" title="VS Code 偵錯前先編譯"></a>VS Code 偵錯前先編譯</h2><p>VS Code 按下 F5 要先編譯再啟動偵錯的話，要在 launch.json 加上 preLaunchTask，如下範例，<br><figure class="highlight"><figcaption><span>.vscode/launch.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // Use IntelliSense to learn about possible attributes.</span><br><span class="line">    // Hover to view descriptions of existing attributes.</span><br><span class="line">    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    "version": "0.2.0",</span><br><span class="line">    "configurations": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"clang - Build and debug active file"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"cppdbg"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/a.out"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [],</span><br><span class="line">            <span class="attr">"stopAtEntry"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;fileDirname&#125;"</span>,</span><br><span class="line">            <span class="attr">"environment"</span>: [],</span><br><span class="line">            <span class="attr">"externalConsole"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"MIMode"</span>: <span class="string">"lldb"</span>,</span><br><span class="line">            <span class="attr">"setupCommands"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"description"</span>: <span class="string">"Enable pretty-printing for gdb"</span>,</span><br><span class="line">                    <span class="attr">"text"</span>: <span class="string">"-enable-pretty-printing"</span>,</span><br><span class="line">                    <span class="attr">"ignoreFailures"</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"preLaunchTask"</span>: <span class="string">"C/C++: clang build active file"</span>,</span><br><span class="line">            <span class="attr">"miDebuggerPath"</span>: <span class="string">"/usr/bin/lldb-mi"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>launch.json 的 <code>&quot;preLaunchTask&quot;: &quot;C/C++: clang build active file&quot;</code> 是對應到 tasks.json 的 label 名稱，<br><figure class="highlight json"><figcaption><span>.vscode/tasks.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"cppbuild"</span>,</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"C/C++: clang build active file"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"/usr/bin/clang++"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [</span><br><span class="line">                <span class="string">"-g"</span>,</span><br><span class="line">                <span class="string">"$&#123;file&#125;"</span>,</span><br><span class="line">                <span class="string">"-o"</span>,</span><br><span class="line">                <span class="string">"$&#123;fileDirname&#125;/a.out"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"options"</span>: &#123;</span><br><span class="line">                <span class="attr">"cwd"</span>: <span class="string">"$&#123;fileDirname&#125;"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"problemMatcher"</span>: [</span><br><span class="line">                <span class="string">"$gcc"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"group"</span>: &#123;</span><br><span class="line">                <span class="attr">"kind"</span>: <span class="string">"build"</span>,</span><br><span class="line">                <span class="attr">"isDefault"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"detail"</span>: <span class="string">"Task generated by Debugger."</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>這樣按 F5 啟動偵錯前會先編譯，成功編譯才會啟動偵錯。  </p><p>詳細的 <code>.vscode</code> 設定可以參考 <a href="https://github.com/shengyu7697/vscode-debugging/tree/master/ubuntu-lldb" target="_blank" rel="noopener">https://github.com/shengyu7697/vscode-debugging/tree/master/ubuntu-lldb</a>  </p><p>其他參考<br><a href="https://code.visualstudio.com/docs/cpp/launch-json-reference" target="_blank" rel="noopener">launch.json 參數說明</a><br><a href="https://blog.csdn.net/ZCShouCSDN/article/details/60466707" target="_blank" rel="noopener">Visual Studio Code （VSCode） 之 C/C++ 调试配置详解</a><br><a href="https://ithelp.ithome.com.tw/articles/10190238" target="_blank" rel="noopener">[VSCode] Visual Studio Code 執行 C++ (2) - IntelliSense + Building + Debugging</a>  </p><h2 id="VS-Code-開啟-make-專案"><a href="#VS-Code-開啟-make-專案" class="headerlink" title="VS Code 開啟 make 專案"></a>VS Code 開啟 make 專案</h2><p>make 專案編譯時會使用 Makefile 來執行裡面的腳本，所以 <code>.vscode/tasks.json</code> 不能在使用 <code>cppbuild</code> type 要換成 <code>shell</code> 來執行 make 這個指令，  </p><p>然後 command 換成 <code>cd ${workspaceFolder}; /usr/bin/make</code>，如下所示，<br><figure class="highlight json"><figcaption><span>.vscode/tasks.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"C/C++: make build"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"cd $&#123;workspaceFolder&#125;; /usr/bin/make"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [],</span><br><span class="line">            <span class="attr">"options"</span>: &#123;</span><br><span class="line">                <span class="attr">"cwd"</span>: <span class="string">"$&#123;fileDirname&#125;"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"problemMatcher"</span>: [</span><br><span class="line">                <span class="string">"$gcc"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"group"</span>: &#123;</span><br><span class="line">                <span class="attr">"kind"</span>: <span class="string">"build"</span>,</span><br><span class="line">                <span class="attr">"isDefault"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"detail"</span>: <span class="string">"偵錯工具產生的工作。"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>這邊也可以參考 <a href="https://stackoverflow.com/questions/57808398/using-visual-studio-code-tasks-to-automate-c-makefiles-in-multiple-folders" target="_blank" rel="noopener">Stack Overflow</a> 跟 <a href="https://gist.github.com/mattmc3/c021236c92c03b61d92c0ff233940643" target="_blank" rel="noopener">github gist</a> 兩篇的其他種做法。  </p><h2 id="VS-Code-開啟-cmake-專案"><a href="#VS-Code-開啟-cmake-專案" class="headerlink" title="VS Code 開啟 cmake 專案"></a>VS Code 開啟 cmake 專案</h2><p>cmake 專案在 generate 時，要使用 <code>cmake -DCMAKE_BUILD_TYPE=Debug ..</code> 給定編譯 Debug 版本，之後編譯出來的執行檔才有除錯的資訊，或者在 CMakeLists.txt 直接寫死是 Debug 版本，<br><figure class="highlight cmake"><figcaption><span>CMakeLists.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_TYPE <span class="string">"Debug"</span>)</span><br></pre></td></tr></table></figure></p><p><code>.vscode/tasks.json</code> 這邊可以參考<a href="https://blog.csdn.net/u012372584/article/details/123010410" target="_blank" rel="noopener">這篇</a>的寫法，將 cmake generate 與 cmake build 分成兩個 task，再用 C/C++: cmake build 這個 task 將前兩者串起來，<br><figure class="highlight json"><figcaption><span>.vscode/tasks.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"C/C++: cmake build"</span>,</span><br><span class="line">            <span class="attr">"dependsOrder"</span>: <span class="string">"sequence"</span>,</span><br><span class="line">            <span class="attr">"dependsOn"</span>:[<span class="string">"cmake generate"</span>, <span class="string">"cmake build"</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"cmake generate"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"cd $&#123;workspaceFolder&#125;/build; /usr/bin/env cmake .."</span>,</span><br><span class="line">            <span class="attr">"args"</span>: []</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"cmake build"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"cd $&#123;workspaceFolder&#125;/build; /usr/bin/env cmake --build ."</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [],</span><br><span class="line"></span><br><span class="line">            <span class="attr">"problemMatcher"</span>: [</span><br><span class="line">                <span class="string">"$gcc"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"group"</span>: &#123;</span><br><span class="line">                <span class="attr">"kind"</span>: <span class="string">"build"</span>,</span><br><span class="line">                <span class="attr">"isDefault"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"detail"</span>: <span class="string">"偵錯工具產生的工作。"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"options"</span>: &#123;</span><br><span class="line">        <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceRoot&#125;/build"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="VS-Code-錯誤排除"><a href="#VS-Code-錯誤排除" class="headerlink" title="VS Code 錯誤排除"></a>VS Code 錯誤排除</h2><p>如果在除錯的過程中逐步執行發現跳不到原始碼遇到 <code>Could not load source ... &#39;SourceRequest&#39; not supported</code> 這樣的錯誤訊息的話，可能就是找不到原始碼的路徑，可能就是因為執行檔跟原始碼擺放路徑不同，解決方式就是在 launch.json 使用 <code>sourceFileMap</code> 將正確的路徑對應好，再次啟動就可以正確找到了～～  </p><p>以上就是 Ubuntu 使用 VS Code Debugger 除錯介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p>其他參考<br><a href="https://www.youtube.com/watch?v=G9gnSGKYIg4" target="_blank" rel="noopener">Debug a C++ project in VS Code - Youtube</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/vscode-debugging-on-mac/" title="macOS 使用 VS Code Debugger 除錯教學">macOS 使用 VS Code Debugger 除錯教學</a><br><a href="/vscode-shortcuts/" title="Visual Studio Code 常用快捷鍵">Visual Studio Code 常用快捷鍵</a><br><a href="/vscode-add-cpp-include-path/" title="VS Code 新增 C++ 標頭檔路徑">VS Code 新增 C++ 標頭檔路徑</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹在 Ubuntu 使用 Visual Studio Code(VS Code) 設定 C/C++ 除錯的環境，  &lt;/p&gt;
&lt;p&gt;以下 Ubuntu 使用 VS Code 設定除錯環境的內容大概分為  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VS Code 除
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shengyu7697.github.io/tags/Ubuntu/"/>
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
      <category term="Visual Studio Code" scheme="https://shengyu7697.github.io/tags/Visual-Studio-Code/"/>
    
  </entry>
  
  <entry>
    <title>Android 使用 gdb 搭配 Visual Studio Code 遠端除錯教學</title>
    <link href="https://shengyu7697.github.io/android-debugging-with-vscode/"/>
    <id>https://shengyu7697.github.io/android-debugging-with-vscode/</id>
    <published>2022-06-13T14:00:00.000Z</published>
    <updated>2022-07-01T01:16:06.460Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Android 使用 gdb 與 gdbserver 以及搭配 Visual Studio Code(VS Code) 來遠端除錯，gdb 可以透過網路對遠端的程式進行除錯，需要遠端執行 gdbserver 以及搭配本地端 gdb 一起使用，而 gdbserver 是 server 的角色，而 gdb 是 client 的角色，一旦 gdb 連上遠端的 gdbserver 後，之後就使用 gdb 進行除錯，跟平常的 gdb 使用上沒有差異，我的桌機環境為 Ubuntu 16.04，  </p><p>以下 Android 使用 gdb 搭配 Visual Studio Code 遠端除錯教學內容大概分為這幾部分，  </p><ul><li>adb forward 轉發通訊埠  </li><li>Android 下 gdb 與 gdbserver 使用方法  </li><li>VS Code 遠端偵錯設定  </li><li>VS Code 錯誤排除  </li></ul><h2 id="adb-forward-轉發通訊埠"><a href="#adb-forward-轉發通訊埠" class="headerlink" title="adb forward 轉發通訊埠"></a>adb forward 轉發通訊埠</h2><p>用 <a href="/android-adb-forward/" title="adb forward">adb forward</a> 將 PC 的 port 20001 對應到 Android Device 的 port 20002，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:20001 tcp:20002</span><br></pre></td></tr></table></figure></p><p>可以使用 <code>adb forward --list</code> 檢查目前的轉發列表。  </p><h2 id="Android-下-gdb-與-gdbserver-使用方法"><a href="#Android-下-gdb-與-gdbserver-使用方法" class="headerlink" title="Android 下 gdb 與 gdbserver 使用方法"></a>Android 下 gdb 與 gdbserver 使用方法</h2><p>將編譯好的執行檔推到 Android Device，假設這個執行檔名稱叫 samplehello，在編譯時要確保有 <code>-g</code> 選項以及 <code>-O0</code> 不使用最佳化，以便提供足夠的偵錯資訊，  </p><p>gdb 與 gdbserver 不用自己編譯，直接拿 Android 預編譯好的執行檔即可，以 <a href="https://github.com/android/ndk/wiki/Unsupported-Downloads" target="_blank" rel="noopener">NDK r13b</a> 為例的話，也可以使用<a href="https://github.com/android/ndk/wiki" target="_blank" rel="noopener">最新的 NDK</a>，要注意的是 NDK r24 就移除 gdb/gdbserver 改用 lldb 了，所以 NDK r24 之後的版本改用 lldb，<br>gdb 執行檔路徑如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android-ndk-r13b-windows-x86_64.zip -&gt; android-ndk-r13b/prebuilt/windows-x86_64/bin/gdb.exe</span><br><span class="line">android-ndk-r13b-linux-x86_64.zip   -&gt; android-ndk-r13b/prebuilt/linux-x86_64/bin/gdb</span><br><span class="line">android-ndk-r13b-darwin-x86_64.zip  -&gt; android-ndk-r13b/prebuilt/darwin-x86_64/bin/gdb</span><br></pre></td></tr></table></figure></p><p>gdbserver 執行檔路徑如下，gdbserver 是在 Android Device 端執行的程式，視你要除錯的執行檔類型選擇對應架構的 gdbserver，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android-ndk-r13b-windows-x86_64.zip -&gt; android-ndk-r13b/prebuilt/android-arm/gdbserver/gdbserver</span><br><span class="line">android-ndk-r13b-windows-x86_64.zip -&gt; android-ndk-r13b/prebuilt/android-arm64/gdbserver/gdbserver</span><br><span class="line">android-ndk-r13b-linux-x86_64.zip   -&gt; android-ndk-r13b/prebuilt/android-arm/gdbserver/gdbserver</span><br><span class="line">android-ndk-r13b-linux-x86_64.zip   -&gt; android-ndk-r13b/prebuilt/android-arm64/gdbserver/gdbserver</span><br><span class="line">android-ndk-r13b-darwin-x86_64.zip  -&gt; android-ndk-r13b/prebuilt/android-arm/gdbserver/gdbserver</span><br><span class="line">android-ndk-r13b-darwin-x86_64.zip  -&gt; android-ndk-r13b/prebuilt/android-arm64/gdbserver/gdbserver</span><br></pre></td></tr></table></figure></p><p>或者使用 Android BSP / AOSP source code 裡附帶的也可以，預編譯好的 gdb 與 gdbserver 就在 prebuilts 目錄下。  </p><p><strong>Android Device 端</strong><br>在 Android Device 端執行 gdbserver 或 gdbserver64，假使要除錯的執行檔 (samplehello) 是 64bit 架構的就使用 gdbserver64，反之使用 gdbserver，使用錯誤的話到時 gdb 端會顯示錯誤訊息，執行 gdbserver 後面參數加上 <code>&lt;ip:port&gt;</code> 監聽的ip位址與port通訊埠以及要偵錯的執行檔路徑，這邊範例使用 port 20002，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdbserver64 :20002 /vendor/bin/samplehello</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">gdbserver64 127.0.0.1:20002 /vendor/bin/samplehello</span><br></pre></td></tr></table></figure></p><p>gdbserver 要使用 attach 的方式的話，後面接上程式的 pid 即可，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdbserver64 :20002 --attach &lt;pid&gt;</span><br></pre></td></tr></table></figure></p><p><strong>PC 端</strong><br>在 PC 端執行 gdb，後面參數接上執行檔(debug 版本，no striped)，這裡使用 codebase 預編譯好的 gdb，執行 gdb 後使用 <code>target remote &lt;ip:port&gt;</code> 來連上遠端的 gdbserver，這邊範例是連上本地端的 port 20001，因為稍早的 adb forward 設定會將 PC 本地端的 port 20001 轉發到 Android Device 遠端的 port 20002，使得 Android Device 上的 gdbserver 收到連線請求，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./prebuilts/gdb/linux-x86/bin/gdb ./out/target/product/&lt;product_name&gt;/symbols/vendor/bin/samplehello</span><br><span class="line">(gdb) target remote :20001</span><br><span class="line"># or</span><br><span class="line">(gdb) target remote 127.0.0.1:20001</span><br></pre></td></tr></table></figure></p><p>一般 gdb 除錯時是使用 r 開始執行程式。不過遠端除錯時，遠端的 gdbserver 已經 run 了，所以 gdb 要用 c 來繼續執行，不能用 r。  </p><p>以下為 gdb 常用的指令，<br><code>r</code>：run 開始執行<br><code>c</code>：continue 繼續執行<br><code>b samplehello.cpp:14</code>：設定中斷點<br><code>info b</code>：印出目前設定的中斷點<br><code>bt</code>：backtrace 印出程式呼叫的堆疊<br><code>q</code>：quit 離開  </p><p>確定基本的 gdbserver 與 gdb 都可以正常地遠端偵錯後，我們就來開始進行 VS Code 遠端偵錯的設定吧！</p><h2 id="VS-Code-遠端偵錯設定"><a href="#VS-Code-遠端偵錯設定" class="headerlink" title="VS Code 遠端偵錯設定"></a>VS Code 遠端偵錯設定</h2><p>VS Code 的 <code>.vscode/launch.json</code> 設定檔資訊如下，其中重點是 <code>miDebuggerServerAddress</code> 要設定對，例如本範例的 PC 本地端 port 20001 (轉發到 Android Device 遠端的 port 20002)，<code>miDebuggerPath</code> 是 gdb 執行檔的路徑，最後是 <code>program</code> 要除錯的執行檔路徑，<br><figure class="highlight"><figcaption><span>.vscode/launch.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // Use IntelliSense to learn about possible attributes.</span><br><span class="line">    // Hover to view descriptions of existing attributes.</span><br><span class="line">    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    "version": "0.2.0",</span><br><span class="line">    "configurations": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Remote GDB"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"cppdbg"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/out/target/product/&lt;product_name&gt;/symbols/vendor/bin/samplehello"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [],</span><br><span class="line">            <span class="attr">"stopAtEntry"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span>,</span><br><span class="line">            <span class="attr">"environment"</span>: [],</span><br><span class="line">            <span class="attr">"externalConsole"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"MIMode"</span>: <span class="string">"gdb"</span>,</span><br><span class="line">            <span class="attr">"setupCommands"</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"description"</span>: <span class="string">"Enable pretty-printing for gdb"</span>,</span><br><span class="line">                    <span class="attr">"text"</span>: <span class="string">"-enable-pretty-printing"</span>,</span><br><span class="line">                    <span class="attr">"ignoreFailures"</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"miDebuggerServerAddress"</span>: <span class="string">"localhost:20001"</span>,</span><br><span class="line">            <span class="attr">"miDebuggerPath"</span>: <span class="string">"$&#123;workspaceFolder&#125;/prebuilts/gdb/linux-x86/bin/gdb"</span></span><br><span class="line">            //<span class="string">"miDebuggerPath"</span>: <span class="string">"/opt/android-ndk-r13b/prebuilt/linux-x86_64/bin/gdb"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="VS-Code-錯誤排除"><a href="#VS-Code-錯誤排除" class="headerlink" title="VS Code 錯誤排除"></a>VS Code 錯誤排除</h2><p>如果在除錯的過程中逐步執行發現跳不到原始碼遇到 <code>Could not load source ... &#39;SourceRequest&#39; not supported</code> 這樣的錯誤訊息的話，可能就是找不到原始碼的路徑，可能就是因為執行檔跟原始碼擺放路徑不同，解決方式就是在 launch.json 使用 <code>sourceFileMap</code> 將正確的路徑對應好，再次啟動就可以正確找到了～～  </p><p>類似的狀況與解法可以在<a href="https://medium.com/@fengyu214/v8-playbook-1ac3b4b83cb1" target="_blank" rel="noopener">medium這篇</a>與<a href="https://github.com/microsoft/vscode-cpptools/issues/3831" target="_blank" rel="noopener">vscode-cpptools issues</a>這兩篇中發現。  </p><p>其他參考<br>Android Debugging with Visual Studio Code - General and Gameplay Programming - Tutorials - GameDev.net<br><a href="https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/android-debugging-with-visual-studio-code-r4820/" target="_blank" rel="noopener">https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/android-debugging-with-visual-studio-code-r4820/</a><br>GDBServer on Android<br><a href="https://appleapplecat.pixnet.net/blog/post/32464205" target="_blank" rel="noopener">https://appleapplecat.pixnet.net/blog/post/32464205</a><br>Using Debuggers  |  Android Open Source Project 官方最新文件<br><a href="https://source.android.google.cn/devices/tech/debug/gdb" target="_blank" rel="noopener">https://source.android.google.cn/devices/tech/debug/gdb</a><br>Debugging with GDB | Android Open Source 很舊的文件<br><a href="https://wladimir-tm4pda.github.io/porting/debugging_gdb.html" target="_blank" rel="noopener">https://wladimir-tm4pda.github.io/porting/debugging_gdb.html</a><br>(在 Android 6 及更低版本，gdbclient 的 shell 腳本，Android 6 以上是 gdbclient.py 的 python 腳本)<br>使用GDB在VS Code調試Android C/C++代碼（無需Android源碼）_陳六生的博客-CSDN博客<br><a href="https://blog.csdn.net/u011057800/article/details/108094858" target="_blank" rel="noopener">https://blog.csdn.net/u011057800/article/details/108094858</a><br>(launch.json 使用 <code>${env:ANDROID_NDK}</code> 取得環境變數的設定值)  </p><p><strong>相關主題</strong><br><a href="/android-adb-forward/" title="Android adb forward 通訊埠轉發用法教學">Android adb forward 通訊埠轉發用法教學</a><br><a href="/vscode-debugging-on-mac/" title="macOS 使用 VS Code Debugger 除錯">macOS 使用 VS Code Debugger 除錯</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Android 使用 gdb 與 gdbserver 以及搭配 Visual Studio Code(VS Code) 來遠端除錯，gdb 可以透過網路對遠端的程式進行除錯，需要遠端執行 gdbserver 以及搭配本地端 gdb 一起使用，而 
      
    
    </summary>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
      <category term="Visual Studio Code" scheme="https://shengyu7697.github.io/tags/Visual-Studio-Code/"/>
    
      <category term="Android" scheme="https://shengyu7697.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android adb forward 通訊埠轉發用法教學</title>
    <link href="https://shengyu7697.github.io/android-adb-forward/"/>
    <id>https://shengyu7697.github.io/android-adb-forward/</id>
    <published>2022-06-09T14:00:00.000Z</published>
    <updated>2022-07-01T01:16:06.438Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Android 的 adb forward 通訊埠轉發的功能，adb forward 的功能是轉發 PC 電腦上某個埠號 (port) 資料到 Android 裝置的某個埠號 (port)，例如：下列 <code>adb forward</code> 指令就是將 PC 端的 port 10000 收到的資料，轉發給到 Android Device 的 port 20000，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:10000 tcp:20000</span><br></pre></td></tr></table></figure></p><p>Android 5.0 及以上才支援使用 adb reverse 指令，且 adb 要 1.0.32 之後的版本才支援。  </p><p>通常在 Android Device 會啟動一個 server 程式，而 PC 端的 client 程式想要連到 Android Device 的 server，除了使用 ip 的方式連線以外，沒有 ip 的話，還可以利用 USB 連線的方式，也就是透過 adb forward 轉發 port，如此一來 PC 端的 client 程式就可以連上 Android Device 的 server 程式，  </p><p>adb forward 執行完後可以使用 <code>adb forward --list</code> 查看轉發列表，或者用 <code>adb forward --remove-all</code> 移除全部，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ adb forward --list</span><br><span class="line">XX00X0000000 tcp:10000 tcp:20000</span><br></pre></td></tr></table></figure></p><p>如果要移除轉發的話，就這樣下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb forward --remove tcp:10000</span><br></pre></td></tr></table></figure></p><p>如果要寫一個 PC Java client 與 Android Java server 通訊的話可以參考<a href="https://www.jianshu.com/p/63c4d5c31909" target="_blank" rel="noopener">這篇後半部的範例</a>。  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>以上就是 Android adb forward 通訊埠轉發用法教學介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p>其他參考<br>adb forward的細節（1）：原理概述_愛博客大伯的博客-CSDN博客_adb forward<br><a href="https://blog.csdn.net/u013553529/article/details/80036227" target="_blank" rel="noopener">https://blog.csdn.net/u013553529/article/details/80036227</a><br>Android Debug Bridge (ADB)  |  Android Developers<br><a href="https://developer.android.com/studio/command-line/adb.html#forwardports" target="_blank" rel="noopener">https://developer.android.com/studio/command-line/adb.html#forwardports</a>  </p><p><strong>相關主題</strong><br><a href="/android-adb-reverse/" title="Android adb reverse 通訊埠轉發用法教學">Android adb reverse 通訊埠轉發用法教學</a><br><a href="/android-adb/" title="Android adb 基本用法教學">Android adb 基本用法教學</a><br>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Android 的 adb forward 通訊埠轉發的功能，adb forward 的功能是轉發 PC 電腦上某個埠號 (port) 資料到 Android 裝置的某個埠號 (port)，例如：下列 &lt;code&gt;adb forward&lt;/cod
      
    
    </summary>
    
    
      <category term="Android" scheme="https://shengyu7697.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>macOS 使用 VS Code Debugger 除錯教學</title>
    <link href="https://shengyu7697.github.io/vscode-debugging-on-mac/"/>
    <id>https://shengyu7697.github.io/vscode-debugging-on-mac/</id>
    <published>2022-06-06T14:00:00.000Z</published>
    <updated>2022-06-16T14:57:22.956Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹在 macOS 使用 Visual Studio Code(VS Code) 設定 C/C++ 除錯的環境，  </p><p>以下 macOS 使用 VS Code 設定除錯環境的內容大概分為  </p><ul><li>VS Code 除錯環境設定  </li><li>VS Code 安裝 CodeLLDB extension  </li><li>VS Code 偵錯前先編譯  </li><li>VS Code 開啟 make 專案  </li><li>VS Code 開啟 cmake 專案  </li><li>VS Code 錯誤排除  </li></ul><p>那我們開始吧！  </p><h2 id="VS-Code-除錯環境設定"><a href="#VS-Code-除錯環境設定" class="headerlink" title="VS Code 除錯環境設定"></a>VS Code 除錯環境設定</h2><p>我的 VS Code 版本為 1.67.2，macOS 版本為 10.13.4，<br>在新專案下按下 F5 時如果沒有 <code>.vscode/launch.json</code> 設定檔的話，會跳出一些選項讓你選擇，如圖中的 C++ (GDB/LLDB)<br><img src="/vscode-debugging-on-mac/vscode-debugging-1.png" title="vscode lldb debugging">  </p><p>新專案下沒有 <code>.vscode/tasks.json</code> 設定檔的話，也會跳出選項讓你選擇，由於 macOS 早就已經棄用 gcc，所以這邊是選擇使用 clang，<br><img src="/vscode-debugging-on-mac/vscode-debugging-2.png" title="vscode lldb debugging">  </p><p>會在資料夾下產生 .vscode/launch.json 設定如下，如果沒有的話自己手動新增也可以，<br><figure class="highlight"><figcaption><span>.vscode/launch.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // Use IntelliSense to learn about possible attributes.</span><br><span class="line">    // Hover to view descriptions of existing attributes.</span><br><span class="line">    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    "version": "0.2.0",</span><br><span class="line">    "configurations": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"(lldb) Launch"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"cppdbg"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/a.out"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [],</span><br><span class="line">            <span class="attr">"stopAtEntry"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;fileDirname&#125;"</span>,</span><br><span class="line">            <span class="attr">"environment"</span>: [],</span><br><span class="line">            <span class="attr">"externalConsole"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"MIMode"</span>: <span class="string">"lldb"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>編譯 C/C++ 時記得加上 <code>-g</code> 選項，按 F5 執行 Start Debugging 後，<br>出現 <code>Unable to start debugging. LLDB exited unexpectedly with exit code 137 (0x89).</code> 如下圖所示，<br><img src="/vscode-debugging-on-mac/vscode-debugging-3.png" title="vscode lldb debugging">  </p><p>看到<a href="https://blog.csdn.net/weixin_42147726/article/details/112537822" target="_blank" rel="noopener">這篇文章</a>分享將 <code>.vscode/launch.json</code> 的 type 從原本的 <code>cppdbg</code> 改成 <code>lldb</code> 就可以使用了，type 改成 <code>lldb</code> 後像這樣，<br><figure class="highlight"><figcaption><span>.vscode/launch.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // Use IntelliSense to learn about possible attributes.</span><br><span class="line">    // Hover to view descriptions of existing attributes.</span><br><span class="line">    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    "version": "0.2.0",</span><br><span class="line">    "configurations": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"(lldb) Launch"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"lldb"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/a.out"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [],</span><br><span class="line">            <span class="attr">"stopAtEntry"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;fileDirname&#125;"</span>,</span><br><span class="line">            <span class="attr">"environment"</span>: [],</span><br><span class="line">            <span class="attr">"externalConsole"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"MIMode"</span>: <span class="string">"lldb"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>將 <code>.vscode/launch.json</code> 的 type 改成 <code>lldb</code> 後，再按 F5 執行 Start Debugging 後，<br>出現 <code>Configured debug type &#39;lldb&#39; is not supported.</code> 如下圖所示，<br><img src="/vscode-debugging-on-mac/vscode-debugging-4.png" title="vscode lldb debugging">  </p><p>看到<a href="https://github.com/vknabel/vscode-swift-development-environment/issues/29" target="_blank" rel="noopener">這篇 troyibm 這位網友</a>他也遇到同樣的問題，結果是安裝了 CodeLLDB 擴充套件就可以使用了！那我們來安裝 CodeLLDB 擴充套件吧。  </p><h2 id="VS-Code-安裝-CodeLLDB-extension"><a href="#VS-Code-安裝-CodeLLDB-extension" class="headerlink" title="VS Code 安裝 CodeLLDB extension"></a>VS Code 安裝 CodeLLDB extension</h2><p>接下來就安裝<a href="https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb" target="_blank" rel="noopener">CodeLLDB</a>擴充套件，<br>網頁有寫支援的平台，  </p><ul><li>Linux with glibc 2.18+ for x86_64, aarch64 or armhf,  </li><li>MacOS X 10.10+ for x86_64 and 11.0+ for arm64,  </li><li>Windows 10 for x86_64.  </li></ul><p>看起來三大平台都有支援。  </p><p>接著再次 F5 執行 Start Debugging 終於成功了！<br><img src="/vscode-debugging-on-mac/vscode-debugging-5.png" title="vscode lldb debugging">  </p><p>經過這次安裝 CodeLLDB extension 後，之後在新專案要 按 F5 時會有 LLDB 新的選項，可以直接選擇 LLDB，<br><img src="/vscode-debugging-on-mac/vscode-debugging-6.png" title="vscode lldb debugging">  </p><p>選擇 LLDB 後產生的 launch.json 如下，然後記得修改 program 裡的名稱，<br><figure class="highlight"><figcaption><span>.vscode/launch.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // Use IntelliSense to learn about possible attributes.</span><br><span class="line">    // Hover to view descriptions of existing attributes.</span><br><span class="line">    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    "version": "0.2.0",</span><br><span class="line">    "configurations": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"lldb"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Debug"</span>,</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/&lt;your program&gt;"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [],</span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="VS-Code-偵錯前先編譯"><a href="#VS-Code-偵錯前先編譯" class="headerlink" title="VS Code 偵錯前先編譯"></a>VS Code 偵錯前先編譯</h2><p>VS Code 按下 F5 要先編譯再啟動偵錯的話，要在 launch.json 加上 preLaunchTask，如下範例，<br><figure class="highlight"><figcaption><span>.vscode/launch.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // Use IntelliSense to learn about possible attributes.</span><br><span class="line">    // Hover to view descriptions of existing attributes.</span><br><span class="line">    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    "version": "0.2.0",</span><br><span class="line">    "configurations": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"lldb"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Debug"</span>,</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/a.out"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [],</span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span>,</span><br><span class="line">            <span class="attr">"preLaunchTask"</span>: <span class="string">"C/C++: clang++ build"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>launch.json 的 <code>&quot;preLaunchTask&quot;: &quot;C/C++: clang++ build&quot;</code> 是對應到 tasks.json 的 label 名稱，<br><figure class="highlight json"><figcaption><span>.vscode/tasks.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"cppbuild"</span>,</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"C/C++: clang++ build"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"/usr/bin/clang++"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [</span><br><span class="line">                <span class="string">"-fdiagnostics-color=always"</span>,</span><br><span class="line">                <span class="string">"-g"</span>,</span><br><span class="line">                <span class="string">"$&#123;file&#125;"</span>,</span><br><span class="line">                <span class="string">"-o"</span>,</span><br><span class="line">                <span class="string">"$&#123;fileDirname&#125;/a.out"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"options"</span>: &#123;</span><br><span class="line">                <span class="attr">"cwd"</span>: <span class="string">"$&#123;fileDirname&#125;"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"problemMatcher"</span>: [</span><br><span class="line">                <span class="string">"$gcc"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"group"</span>: &#123;</span><br><span class="line">                <span class="attr">"kind"</span>: <span class="string">"build"</span>,</span><br><span class="line">                <span class="attr">"isDefault"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"detail"</span>: <span class="string">"偵錯工具產生的工作。"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>這樣按 F5 啟動偵錯前會先編譯，成功編譯才會啟動偵錯。  </p><p>詳細的 <code>.vscode</code> 設定可以參考 <a href="https://github.com/shengyu7697/vscode-debugging/tree/master/mac-lldb" target="_blank" rel="noopener">https://github.com/shengyu7697/vscode-debugging/tree/master/mac-lldb</a>  </p><p>其他參考<br><a href="https://code.visualstudio.com/docs/cpp/launch-json-reference" target="_blank" rel="noopener">launch.json 參數說明</a><br><a href="https://blog.csdn.net/ZCShouCSDN/article/details/60466707" target="_blank" rel="noopener">Visual Studio Code （VSCode） 之 C/C++ 调试配置详解</a><br><a href="https://ithelp.ithome.com.tw/articles/10190238" target="_blank" rel="noopener">[VSCode] Visual Studio Code 執行 C++ (2) - IntelliSense + Building + Debugging</a>  </p><h2 id="make-專案"><a href="#make-專案" class="headerlink" title="make 專案"></a>make 專案</h2><p>make 專案編譯時會使用 Makefile 來執行裡面的腳本，所以 <code>.vscode/tasks.json</code> 不能在使用 <code>cppbuild</code> type 要換成 <code>shell</code> 來執行 make 這個指令，  </p><p>然後 command 換成 <code>cd ${workspaceFolder}; /usr/bin/make</code>，如下所示，<br><figure class="highlight json"><figcaption><span>.vscode/tasks.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"C/C++: make build"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"cd $&#123;workspaceFolder&#125;; /usr/bin/make"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [],</span><br><span class="line">            <span class="attr">"options"</span>: &#123;</span><br><span class="line">                <span class="attr">"cwd"</span>: <span class="string">"$&#123;fileDirname&#125;"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"problemMatcher"</span>: [</span><br><span class="line">                <span class="string">"$gcc"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"group"</span>: &#123;</span><br><span class="line">                <span class="attr">"kind"</span>: <span class="string">"build"</span>,</span><br><span class="line">                <span class="attr">"isDefault"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"detail"</span>: <span class="string">"偵錯工具產生的工作。"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>這邊也可以參考 <a href="https://stackoverflow.com/questions/57808398/using-visual-studio-code-tasks-to-automate-c-makefiles-in-multiple-folders" target="_blank" rel="noopener">Stack Overflow</a> 跟 <a href="https://gist.github.com/mattmc3/c021236c92c03b61d92c0ff233940643" target="_blank" rel="noopener">github gist</a> 兩篇的其他種做法。  </p><h2 id="cmake-專案"><a href="#cmake-專案" class="headerlink" title="cmake 專案"></a>cmake 專案</h2><p>cmake 專案在 generate 時，要使用 <code>cmake -DCMAKE_BUILD_TYPE=Debug ..</code> 給定編譯 Debug 版本，之後編譯出來的執行檔才有除錯的資訊，或者在 CMakeLists.txt 直接寫死是 Debug 版本，<br><figure class="highlight cmake"><figcaption><span>CMakeLists.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_TYPE <span class="string">"Debug"</span>)</span><br></pre></td></tr></table></figure></p><p><code>.vscode/tasks.json</code> 這邊可以參考<a href="https://blog.csdn.net/u012372584/article/details/123010410" target="_blank" rel="noopener">這篇</a>的寫法，將 cmake generate 與 cmake build 分成兩個 task，再用 C/C++: cmake build 這個 task 將前兩者串起來，<br><figure class="highlight json"><figcaption><span>.vscode/tasks.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"C/C++: cmake build"</span>,</span><br><span class="line">            <span class="attr">"dependsOrder"</span>: <span class="string">"sequence"</span>,</span><br><span class="line">            <span class="attr">"dependsOn"</span>:[<span class="string">"cmake generate"</span>, <span class="string">"cmake build"</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"cmake generate"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"cd $&#123;workspaceFolder&#125;/build; /usr/bin/env cmake .."</span>,</span><br><span class="line">            <span class="attr">"args"</span>: []</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"cmake build"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"cd $&#123;workspaceFolder&#125;/build; /usr/bin/env cmake --build ."</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [],</span><br><span class="line"></span><br><span class="line">            <span class="attr">"problemMatcher"</span>: [</span><br><span class="line">                <span class="string">"$gcc"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"group"</span>: &#123;</span><br><span class="line">                <span class="attr">"kind"</span>: <span class="string">"build"</span>,</span><br><span class="line">                <span class="attr">"isDefault"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"detail"</span>: <span class="string">"偵錯工具產生的工作。"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"options"</span>: &#123;</span><br><span class="line">        <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceRoot&#125;/build"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="VS-Code-錯誤排除"><a href="#VS-Code-錯誤排除" class="headerlink" title="VS Code 錯誤排除"></a>VS Code 錯誤排除</h2><p>如果在除錯的過程中逐步執行發現跳不到原始碼遇到 <code>Could not load source ... &#39;SourceRequest&#39; not supported</code> 這樣的錯誤訊息的話，可能就是找不到原始碼的路徑，可能就是因為執行檔跟原始碼擺放路徑不同，解決方式就是在 launch.json 使用 <code>sourceFileMap</code> 將正確的路徑對應好，再次啟動就可以正確找到了～～  </p><p>以上就是 macOS 使用 VS Code Debugger 除錯介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p>其他參考<br><a href="https://www.youtube.com/watch?v=G9gnSGKYIg4" target="_blank" rel="noopener">Debug a C++ project in VS Code - Youtube</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/vscode-debugging-on-ubuntu/" title="Ubuntu 使用 VS Code Debugger 除錯教學">Ubuntu 使用 VS Code Debugger 除錯教學</a><br><a href="/vscode-shortcuts/" title="Visual Studio Code 常用快捷鍵">Visual Studio Code 常用快捷鍵</a><br><a href="/vscode-add-cpp-include-path/" title="VS Code 新增 C++ 標頭檔路徑">VS Code 新增 C++ 標頭檔路徑</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹在 macOS 使用 Visual Studio Code(VS Code) 設定 C/C++ 除錯的環境，  &lt;/p&gt;
&lt;p&gt;以下 macOS 使用 VS Code 設定除錯環境的內容大概分為  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VS Code 除錯環
      
    
    </summary>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
      <category term="macOS" scheme="https://shengyu7697.github.io/tags/macOS/"/>
    
      <category term="Visual Studio Code" scheme="https://shengyu7697.github.io/tags/Visual-Studio-Code/"/>
    
  </entry>
  
  <entry>
    <title>macOS 2 種安裝 OpenSSL 的方法</title>
    <link href="https://shengyu7697.github.io/mac-openssl/"/>
    <id>https://shengyu7697.github.io/mac-openssl/</id>
    <published>2022-06-02T14:00:00.000Z</published>
    <updated>2022-06-06T13:19:13.541Z</updated>
    
    <content type="html"><![CDATA[<p>本篇紀錄 macOS 下 2 種安裝 OpenSSL 的方法，第一種為使用 homebrew 安裝，第二種為下載 OpenSSL 原始碼編譯安裝。  </p><p>我的使用環境為 macOS 10.13.4，Xcode 9.1。  </p><ul><li>使用 homebrew 安裝 OpenSSL  </li><li>下載 OpenSSL 3 原始碼編譯與安裝 OpenSSL  </li><li>OpenSSL 3 原始碼編譯失敗解決方法  </li><li>下載 OpenSSL 1.1.1 原始碼編譯與安裝 OpenSSL  </li></ul><h2 id="使用-homebrew-安裝-OpenSSL"><a href="#使用-homebrew-安裝-OpenSSL" class="headerlink" title="使用 homebrew 安裝 OpenSSL"></a>使用 homebrew 安裝 OpenSSL</h2><p>以下為 macOS homebrew 安裝 OpenSSL 的指令，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install openssl</span><br></pre></td></tr></table></figure></p><p>或者指定 OpenSSL 安裝的版本，例如：指定安裝 OpenSSL 1.1.1，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install openssl@1.1.1o</span><br></pre></td></tr></table></figure></p><p>或者指定安裝 OpenSSL 3，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install openssl@3</span><br></pre></td></tr></table></figure></p><p>brew 安裝 OpenSSL 3 會編譯失敗的可以參考<a href="https://github.com/openssl/openssl/issues/15937" target="_blank" rel="noopener">這篇</a>，在 <a href="https://github.com/Homebrew/homebrew-core/blob/master/Formula/openssl%403.rb" target="_blank" rel="noopener">openssl@3.rb</a> 的 configure_args 函式裡的 args 新增 no-asm 選項，然後再次安裝 <code>brew install openssl@3</code>，<br><figure class="highlight ruby"><figcaption><span>/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/openssl@3.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">configure_args</span></span></span><br><span class="line">  args = <span class="string">%W[</span></span><br><span class="line"><span class="string">    --prefix=<span class="subst">#&#123;prefix&#125;</span></span></span><br><span class="line"><span class="string">    --openssldir=<span class="subst">#&#123;openssldir&#125;</span></span></span><br><span class="line"><span class="string">    --libdir=<span class="subst">#&#123;lib&#125;</span></span></span><br><span class="line"><span class="string">    no-ssl3</span></span><br><span class="line"><span class="string">    no-ssl3-method</span></span><br><span class="line"><span class="string">    no-zlib</span></span><br><span class="line"><span class="string">    no-asm</span></span><br><span class="line"><span class="string">  ]</span></span><br></pre></td></tr></table></figure></p><p>或者改裝 OpenSSL 1.1.1 的版本。</p><h2 id="下載-OpenSSL-3-原始碼編譯與安裝-OpenSSL"><a href="#下載-OpenSSL-3-原始碼編譯與安裝-OpenSSL" class="headerlink" title="下載 OpenSSL 3 原始碼編譯與安裝 OpenSSL"></a>下載 OpenSSL 3 原始碼編譯與安裝 OpenSSL</h2><p>這邊介紹 OpenSSL 3 的編譯安裝方式，使用下列指令下載 OpenSSL 3.0.3 原始碼並且解壓縮，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.openssl.org/source/openssl-3.0.3.tar.gz</span><br><span class="line">tar xvf openssl-3.0.3.tar.gz</span><br></pre></td></tr></table></figure></p><p>接下來進行編譯與安裝 OpenSSL，zlib 選項非必要，無壓縮需求可以不加，預設安裝在 /usr/local/ssl 目錄下，也可自行指定 <code>--prefix</code> 選項帶入目錄，如果不用 shared 的方式則 <code>./config no-shared</code> 即可，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd openssl-3.0.3</span><br><span class="line">./config shared</span><br><span class="line">#./config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl shared zlib # 指定路徑</span><br><span class="line">make -j4</span><br><span class="line">make test</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><h2 id="OpenSSL-3-原始碼編譯失敗解決方法"><a href="#OpenSSL-3-原始碼編譯失敗解決方法" class="headerlink" title="OpenSSL 3 原始碼編譯失敗解決方法"></a>OpenSSL 3 原始碼編譯失敗解決方法</h2><p>我的 macOS 10.13.4 會出現這樣的編譯錯誤訊息，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">crypto/bn/rsaz-3k-avx512.s:1283:12: error: register %ymm20 is only available with AVX512</span><br><span class="line"> vmovdqu64 %ymm20,320(%rdi)</span><br><span class="line">           ^~~~~~</span><br><span class="line">crypto/bn/rsaz-3k-avx512.s:1284:12: error: register %ymm21 is only available with AVX512</span><br><span class="line"> vmovdqu64 %ymm21,352(%rdi)</span><br><span class="line">           ^~~~~~</span><br><span class="line">crypto/bn/rsaz-3k-avx512.s:1285:12: error: register %ymm22 is only available with AVX512</span><br><span class="line"> vmovdqu64 %ymm22,384(%rdi)</span><br><span class="line">           ^~~~~~</span><br><span class="line">crypto/bn/rsaz-3k-avx512.s:1286:12: error: register %ymm23 is only available with AVX512</span><br><span class="line"> vmovdqu64 %ymm23,416(%rdi)</span><br><span class="line">           ^~~~~~</span><br><span class="line">crypto/bn/rsaz-3k-avx512.s:1287:12: error: register %ymm24 is only available with AVX512</span><br><span class="line"> vmovdqu64 %ymm24,448(%rdi)</span><br><span class="line">           ^~~~~~</span><br><span class="line">crypto/bn/rsaz-3k-avx512.s:1288:12: error: register %ymm25 is only available with AVX512</span><br><span class="line"> vmovdqu64 %ymm25,480(%rdi)</span><br><span class="line">           ^~~~~~</span><br></pre></td></tr></table></figure></p><p>檢查 Xcode 版本，我的是 Xcode 9.1，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ xcodebuild -version</span><br><span class="line">Xcode 9.1</span><br><span class="line">Build version 9B55</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/openssl/openssl/issues/15937" target="_blank" rel="noopener">這篇</a>下面的網友提供了一個解決方法 workaround，<br>就是在 configure 時加入 <code>no-asm</code> 的選項，這樣就可以編譯過了，但是似乎這個方法就沒法得到好的效能，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./config shared no-asm</span><br><span class="line">make -j4</span><br></pre></td></tr></table></figure></p><p>使用 <code>make test</code> 進行測試，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make test</span><br></pre></td></tr></table></figure></p><p>在 <code>make install</code> 安裝到系統之前，使用 <code>openssl version</code> 指令測試執行 openssl 是否成功，出現找不到 libssl.3.dylib 動態函式庫的錯誤訊息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./apps/openssl version</span><br><span class="line">dyld: Library not loaded: /usr/local/lib/libssl.3.dylib</span><br><span class="line">  Referenced from: /Users/sheng/Desktop/github/openssl/./apps/openssl</span><br><span class="line">  Reason: image not found</span><br><span class="line">Abort trap: 6</span><br></pre></td></tr></table></figure></p><p>設定 DYLD_LIBRARY_PATH 要載入動態函式庫的路徑，因為 libssl.3.dylib 在這個編譯的目錄下，所以就設定一下 libssl.3.dylib 目錄的路徑(相對路徑或絕對路徑都可)，這樣就成功執行起來了，macOS 的 DYLD_LIBRARY_PATH 是對應到 linux 的 LD_LIBRARY_PATH，在 macOS 下使用 LD_LIBRARY_PATH 是無效的，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ DYLD_LIBRARY_PATH=&quot;./&quot; ./apps/openssl version</span><br><span class="line"># or</span><br><span class="line">$ DYLD_LIBRARY_PATH=&quot;/Users/shengyu/openssl-3.0.3&quot; ./apps/openssl version</span><br><span class="line">OpenSSL 3.1.0-dev  (Library: OpenSSL 3.1.0-dev )</span><br></pre></td></tr></table></figure></p><h2 id="下載-OpenSSL-1-1-1-原始碼編譯與安裝-OpenSSL"><a href="#下載-OpenSSL-1-1-1-原始碼編譯與安裝-OpenSSL" class="headerlink" title="下載 OpenSSL 1.1.1 原始碼編譯與安裝 OpenSSL"></a>下載 OpenSSL 1.1.1 原始碼編譯與安裝 OpenSSL</h2><p>這邊也順便介紹一下的 OpenSSL 1.1.1x 的編譯安裝方式，基本上跟 OpenSSL 3 沒什麼太大差異，使用下列指令下載 OpenSSL 1.1.1o 原始碼並且解壓縮，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.openssl.org/source/openssl-1.1.1o.tar.gz</span><br><span class="line">tar xvf openssl-1.1.1o.tar.gz</span><br></pre></td></tr></table></figure></p><p>接下來進行編譯與安裝 OpenSSL，zlib 選項非必要，無壓縮需求可以不加，預設安裝在 /usr/local/ssl 目錄下，也可自行指定 <code>--prefix</code> 選項帶入目錄，如果不用 shared 的方式則 <code>./config no-shared</code> 即可，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd openssl-1.1.1o</span><br><span class="line">./config shared</span><br><span class="line">#./config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl shared zlib # 指定路徑</span><br><span class="line">make -j4</span><br><span class="line">make test</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><p>OpenSSL 1.1.1o 我可以順利編譯過沒有遇到 OpenSSL 3 的 AVX512 的問題。  </p><p>其他參考<br>OpenSSL master (and 3.0 branch) won’t build on MacOS 10.11 (El Capitan) · Issue #16670 · openssl/openssl<br><a href="https://github.com/openssl/openssl/issues/16670" target="_blank" rel="noopener">https://github.com/openssl/openssl/issues/16670</a>  </p><p>DYLD_LIBRARY_PATH 的相關討論<br>language agnostic - Is it OK to use DYLD_LIBRARY_PATH on Mac OS X? And, what’s the dynamic library search algorithm with it? - Stack Overflow<br><a href="https://stackoverflow.com/questions/3146274/is-it-ok-to-use-dyld-library-path-on-mac-os-x-and-whats-the-dynamic-library-s" target="_blank" rel="noopener">https://stackoverflow.com/questions/3146274/is-it-ok-to-use-dyld-library-path-on-mac-os-x-and-whats-the-dynamic-library-s</a><br>How do I configure the LD_LIBRARY_PATH on Linux and DYLD_LIBRARY_PATH on MAC OS X to point to MCR?<br><a href="https://www.mathworks.com/matlabcentral/answers/473971-how-do-i-configure-the-ld_library_path-on-linux-and-dyld_library_path-on-mac-os-x-to-point-to-mcr" target="_blank" rel="noopener">https://www.mathworks.com/matlabcentral/answers/473971-how-do-i-configure-the-ld_library_path-on-linux-and-dyld_library_path-on-mac-os-x-to-point-to-mcr</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/ubuntu-openssl/" title="Ubuntu 2 種安裝 OpenSSL 的方法">Ubuntu 2 種安裝 OpenSSL 的方法</a><br><a href="/openssl-aes-encryption/" title="OpenSSL AES encryption 對稱式加密指令用法與範例">OpenSSL AES encryption 對稱式加密指令用法與範例</a><br><a href="/cpp-openssl-aes/" title="C/C++ OpenSSL AES encryption/decryption 加密解密範例">C/C++ OpenSSL AES encryption/decryption 加密解密範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇紀錄 macOS 下 2 種安裝 OpenSSL 的方法，第一種為使用 homebrew 安裝，第二種為下載 OpenSSL 原始碼編譯安裝。  &lt;/p&gt;
&lt;p&gt;我的使用環境為 macOS 10.13.4，Xcode 9.1。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 hom
      
    
    </summary>
    
    
      <category term="macOS" scheme="https://shengyu7697.github.io/tags/macOS/"/>
    
      <category term="openssl" scheme="https://shengyu7697.github.io/tags/openssl/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 安裝 Spotify 的方法</title>
    <link href="https://shengyu7697.github.io/ubuntu-spotify/"/>
    <id>https://shengyu7697.github.io/ubuntu-spotify/</id>
    <published>2022-05-31T14:00:00.000Z</published>
    <updated>2022-06-05T12:17:13.692Z</updated>
    
    <content type="html"><![CDATA[<p>本篇紀錄 Ubuntu 下 安裝 Spotify 的方法，  </p><p>我的使用環境為 Ubuntu 16.04，也適用於 Ubuntu 18.04 跟 Ubuntu 20.04。  </p><h2 id="Ubuntu-安裝-Spotify"><a href="#Ubuntu-安裝-Spotify" class="headerlink" title="Ubuntu 安裝 Spotify"></a>Ubuntu 安裝 Spotify</h2><p>這邊會介紹怎麼使用 apt-get 安裝 Spotify，在使用 apt-get 安裝 Spotify 之前要先設定 Spotify 的 ubuntu/debian 倉儲 (repository)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://download.spotify.com/debian/pubkey_0D811D58.gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure></p><p>加入 repository.spotify.com 到 apt sources list，這樣以後 <code>apt-get update</code> 就會去檢查有無更新，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb http://repository.spotify.com stable non-free&quot; | sudo tee /etc/apt/sources.list.d/spotify.list</span><br></pre></td></tr></table></figure></p><p>然後 <code>apt-get update</code> 成功後就可以安裝 spotify-client<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install spotify-client</span><br></pre></td></tr></table></figure></p><p>安裝 spotify-client 後檢查一下安裝的版本(這步驟非必要)，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ dpkg -l | grep spotify-client</span><br><span class="line">ii  spotify-client            1:1.0.80.480.g51b03ac3-13          amd64    Spotify streaming music client</span><br></pre></td></tr></table></figure></p><p>現在 spotify-client 最新的版本是 1:1.1.84.716.gc5f8b819，但我還沒更新到最新。  </p><p>也可以參考 <a href="https://www.spotify.com/nz/download/linux/" target="_blank" rel="noopener">Spotify 官方的 linux 安裝教學</a>  </p><h2 id="錯誤排除"><a href="#錯誤排除" class="headerlink" title="錯誤排除"></a>錯誤排除</h2><p>如果已經有安裝 Spotify 的人，後來很久後遇到 <code>apt-get update</code> 時會顯示 repository.spotify.com 站點憑證簽署問題而導致 <code>apt-get update</code> 失敗的話，可以參考這個方法，</p><p>我 <code>apt-get update</code> 失敗的訊息如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">...</span><br><span class="line">Hit:10 http://repo.steampowered.com/steam precise InRelease</span><br><span class="line">Err:8 http://repository.spotify.com stable InRelease</span><br><span class="line">  The following signatures couldn&apos;t be verified because the public key is not available: NO_PUBKEY 5E3C45D7B312C643</span><br><span class="line">Hit:11 http://ppa.launchpad.net/mystic-mirage/pycharm/ubuntu xenial InRelease</span><br><span class="line">Hit:12 http://ppa.launchpad.net/openshot.developers/ppa/ubuntu xenial InRelease</span><br><span class="line">Get:13 https://download.01.org/gfx/ubuntu/16.04/main xenial InRelease [3,651 B]</span><br><span class="line">Hit:14 http://ppa.launchpad.net/peek-developers/stable/ubuntu xenial InRelease</span><br><span class="line">Hit:15 http://ppa.launchpad.net/rvm/smplayer/ubuntu xenial InRelease</span><br><span class="line">Hit:16 http://ppa.launchpad.net/umang/indicator-stickynotes/ubuntu xenial InRelease</span><br><span class="line">Fetched 6,967 B in 3s (2,040 B/s)</span><br><span class="line">Reading package lists... Done</span><br><span class="line">W: An error occurred during the signature verification. The repository is not updated and the previous index files will be used. GPG error: http://repository.spotify.com stable InRelease: The following signatures couldn&apos;t be verified because the public key is not available: NO_PUBKEY 5E3C45D7B312C643</span><br><span class="line">W: https://download.01.org/gfx/ubuntu/16.04/main/dists/xenial/InRelease: Signature by key 09D6EF97BFB38E916EF060E756A3DEF863961D39 uses weak digest algorithm (SHA1)</span><br><span class="line">W: Failed to fetch http://repository.spotify.com/dists/stable/InRelease  The following signatures couldn&apos;t be verified because the public key is not available: NO_PUBKEY 5E3C45D7B312C643</span><br><span class="line">W: Some index files failed to download. They have been ignored, or old ones used instead.</span><br></pre></td></tr></table></figure></p><p>解決方法，就是把上面的訊息提到的 5E3C45D7B312C643 PUBKEY 加入，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 5E3C45D7B312C643</span><br></pre></td></tr></table></figure></p><p>然後再 <code>apt-get update</code> 就可以成功了  </p><p>其他參考<br>Can’t install Spotify under Ubuntu. - The Spotify Community<br><a href="https://community.spotify.com/t5/Desktop-Linux/Can-t-install-Spotify-under-Ubuntu/td-p/5258438" target="_blank" rel="noopener">https://community.spotify.com/t5/Desktop-Linux/Can-t-install-Spotify-under-Ubuntu/td-p/5258438</a><br>下方網友 carlgarner 2022-02-22 02:56 PM 回覆目前的 key 是 5E3C45D7B312C643，而我今天 2022-05-31 測試還有效，根據過往經驗可能隔一陣子就會失效。  </p><p><strong>相關文章</strong><br><a href="/ubuntu-protobuf/" title="Ubuntu 安裝 protobuf">Ubuntu 安裝 protobuf</a><br><a href="/ubuntu-gflags/" title="Ubuntu 安裝 gflags">Ubuntu 安裝 gflags</a><br><a href="/ubuntu-libevent/" title="Ubuntu 安裝 libevent">Ubuntu 安裝 libevent</a><br><a href="/ubuntu-glfw/" title="Ubuntu 編譯安裝 GLFW">Ubuntu 編譯安裝 GLFW</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇紀錄 Ubuntu 下 安裝 Spotify 的方法，  &lt;/p&gt;
&lt;p&gt;我的使用環境為 Ubuntu 16.04，也適用於 Ubuntu 18.04 跟 Ubuntu 20.04。  &lt;/p&gt;
&lt;h2 id=&quot;Ubuntu-安裝-Spotify&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shengyu7697.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 2 種安裝 OpenSSL 的方法</title>
    <link href="https://shengyu7697.github.io/ubuntu-openssl/"/>
    <id>https://shengyu7697.github.io/ubuntu-openssl/</id>
    <published>2022-05-26T14:00:00.000Z</published>
    <updated>2022-06-06T13:19:13.540Z</updated>
    
    <content type="html"><![CDATA[<p>本篇紀錄 Ubuntu 下 2 種安裝 OpenSSL 的方法，第一種為使用 apt 安裝，第二種為下載 OpenSSL 原始碼編譯安裝。  </p><p>我的使用環境為 Ubuntu 16.04，也適用於 Ubuntu 18.04 跟 Ubuntu 20.04。  </p><p>以下 Ubuntu 安裝 OpenSSL 的方法內容大概分為這幾部分，  </p><ul><li>方法1. 使用 distribution package 安裝 OpenSSL  </li><li>方法2. 下載 OpenSSL 原始碼編譯與安裝 OpenSSL  </li><li>備份舊版本 OpenSSL  </li></ul><h2 id="方法1-使用-distribution-package-安裝-OpenSSL"><a href="#方法1-使用-distribution-package-安裝-OpenSSL" class="headerlink" title="方法1. 使用 distribution package 安裝 OpenSSL"></a>方法1. 使用 distribution package 安裝 OpenSSL</h2><p>安裝前記得先 <code>apt-get update</code> 一下，以下為 ubuntu apt-get 安裝 OpenSSL 的指令，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install openssl</span><br></pre></td></tr></table></figure></p><p>安裝後可以使用 <code>openssl version</code> 確認一下 openssl 的版本，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ openssl version</span><br><span class="line">OpenSSL 1.0.2g  1 Mar 2016</span><br></pre></td></tr></table></figure></p><h2 id="方法2-下載-OpenSSL-原始碼編譯與安裝-OpenSSL"><a href="#方法2-下載-OpenSSL-原始碼編譯與安裝-OpenSSL" class="headerlink" title="方法2. 下載 OpenSSL 原始碼編譯與安裝 OpenSSL"></a>方法2. 下載 OpenSSL 原始碼編譯與安裝 OpenSSL</h2><p>由於 apt-get 上安裝的 OpenSSL 版本太舊，不符合我的需求，那就只能自己去下載 source code 下來編譯安裝了，使用下列指令下載 OpenSSL 1.1.1o 原始碼並且解壓縮，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src/</span><br><span class="line">sudo wget https://www.openssl.org/source/openssl-1.1.1o.tar.gz</span><br><span class="line">sudo tar xvf openssl-1.1.1o.tar.gz</span><br></pre></td></tr></table></figure></p><p>如果你 wget 下載時會出現憑證問題，可以使用 –no-check-certificate 選項不檢查憑證，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.openssl.org/source/openssl-1.1.1o.tar.gz --no-check-certificate</span><br></pre></td></tr></table></figure></p><p>接下來進行編譯與安裝 OpenSSL，zlib 選項非必要，無壓縮需求可以不加，預設安裝在 /usr/local/ssl 目錄下，也可自行指定 <code>--prefix</code> 選項帶入目錄，如果不用 shared 的方式則 <code>sudo ./config no-shared</code> 即可，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd openssl-1.1.1o</span><br><span class="line">sudo ./config shared</span><br><span class="line">#sudo ./config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl shared zlib # 指定路徑</span><br><span class="line">sudo make -j4</span><br><span class="line">sudo make test</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p><p>在 /etc/ld.so.conf.d/ 目錄下新增一個 openssl-1.1.1o.conf 設定檔，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ld.so.conf.d/openssl-1.1.1o.conf</span><br></pre></td></tr></table></figure></p><p>開啟 openssl-1.1.1o.conf 後加入這一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/ssl/lib</span><br></pre></td></tr></table></figure></p><p>重新載入動態連結，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ldconfig -v</span><br></pre></td></tr></table></figure></p><p>測試 openssl 安裝的版本，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ openssl version</span><br><span class="line">OpenSSL 1.1.1o  3 May 2022</span><br></pre></td></tr></table></figure></p><p>如果要看更詳細的參數的話可以使用 <code>openssl version -a</code></p><h2 id="備份舊版本-OpenSSL"><a href="#備份舊版本-OpenSSL" class="headerlink" title="備份舊版本 OpenSSL"></a>備份舊版本 OpenSSL</h2><p>如果你已經從 apt-get 安裝過 OpenSSL，但又要編譯安裝新版本的 OpenSSL 的話，可以先將舊版本的 OpenSSL 備份起來，<br>把原本的 <code>/usr/bin/openssl</code> 重新命名成 <code>/usr/bin/openssl-1.0.2g</code>，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/bin/openssl /usr/bin/openssl-1.0.2g</span><br></pre></td></tr></table></figure></p><p>建立軟連結，將 <code>/usr/bin/openssl</code> 指向 <code>/usr/local/bin/openssl</code> (1.1.1)，這一步可能不需要，新版本 make install 應該會順便覆蓋 <code>/usr/bin/openssl</code> 的版本，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /usr/local/bin/openssl /usr/bin/openssl</span><br></pre></td></tr></table></figure></p><p><strong>其它相關文章推薦</strong><br><a href="/mac-openssl/" title="macOS 2 種安裝 OpenSSL 的方法">macOS 2 種安裝 OpenSSL 的方法</a><br><a href="/openssl-aes-encryption/" title="OpenSSL AES encryption 對稱式加密指令用法與範例">OpenSSL AES encryption 對稱式加密指令用法與範例</a><br><a href="/cpp-openssl-aes/" title="C/C++ OpenSSL AES encryption/decryption 加密解密範例">C/C++ OpenSSL AES encryption/decryption 加密解密範例</a><br><a href="/ubuntu-protobuf/" title="Ubuntu 安裝 protobuf">Ubuntu 安裝 protobuf</a><br><a href="/ubuntu-gflags/" title="Ubuntu 安裝 gflags">Ubuntu 安裝 gflags</a><br><a href="/ubuntu-libevent/" title="Ubuntu 安裝 libevent">Ubuntu 安裝 libevent</a><br><a href="/ubuntu-glfw/" title="Ubuntu 編譯安裝 GLFW">Ubuntu 編譯安裝 GLFW</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇紀錄 Ubuntu 下 2 種安裝 OpenSSL 的方法，第一種為使用 apt 安裝，第二種為下載 OpenSSL 原始碼編譯安裝。  &lt;/p&gt;
&lt;p&gt;我的使用環境為 Ubuntu 16.04，也適用於 Ubuntu 18.04 跟 Ubuntu 20.04。  &lt;/
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shengyu7697.github.io/tags/Ubuntu/"/>
    
      <category term="openssl" scheme="https://shengyu7697.github.io/tags/openssl/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 休眠指令</title>
    <link href="https://shengyu7697.github.io/ubuntu-suspend-command/"/>
    <id>https://shengyu7697.github.io/ubuntu-suspend-command/</id>
    <published>2022-05-23T14:00:00.000Z</published>
    <updated>2022-06-05T12:17:13.692Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 要介紹在 Ubuntu 下休眠的指令，Ubuntu 裡 Systemd 工具提供了睡眠管理的高階命令，分別有 <code>systemctl suspend</code>、<code>systemctl hibernate</code>、<code>systemctl hybrid-sleep</code></p><h2 id="Suspend-掛起模式"><a href="#Suspend-掛起模式" class="headerlink" title="Suspend 掛起模式"></a>Suspend 掛起模式</h2><p>掛起時系統的執行資料仍然儲存在記憶體，所以會以較低的功耗消耗電量。掛起模式喚醒系統恢復非常快速，<br>Ubuntu 桌面版的選單只有 Suspend 掛起模式，要用其他模式可以用輸入指令的方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl suspend # 需要權限</span><br></pre></td></tr></table></figure></p><p>Suspend 模式使用範例如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl suspend</span><br><span class="line">==== AUTHENTICATING FOR org.freedesktop.login1.set-wall-message ===</span><br><span class="line">Authentication is required to set a wall message</span><br><span class="line">Authenticating as: shengyu,,, (shengyu)</span><br><span class="line">Password: </span><br><span class="line">==== AUTHENTICATION COMPLETE ===</span><br><span class="line">==== AUTHENTICATING FOR org.freedesktop.login1.suspend ===</span><br><span class="line">Authentication is required for suspending the system.</span><br><span class="line">Authenticating as: shengyu,,, (shengyu)</span><br><span class="line">Password: </span><br><span class="line">==== AUTHENTICATION COMPLETE ===</span><br></pre></td></tr></table></figure></p><h2 id="Hibernate-休眠模式"><a href="#Hibernate-休眠模式" class="headerlink" title="Hibernate 休眠模式"></a>Hibernate 休眠模式</h2><p>Hibernate 模式，字面上的意思是休眠，將記憶體內容寫入硬碟後完全關閉電源，等同 Windows 的休眠模式。完全不耗電，恢復速度比掛起慢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl hibernate # 需要權限</span><br></pre></td></tr></table></figure></p><p>Hibernate 模式使用範例如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl hibernate</span><br><span class="line">==== AUTHENTICATING FOR org.freedesktop.login1.set-wall-message ===</span><br><span class="line">Authentication is required to set a wall message</span><br><span class="line">Authenticating as: shengyu,,, (shengyu)</span><br><span class="line">Password: </span><br><span class="line">==== AUTHENTICATION COMPLETE ===</span><br><span class="line">==== AUTHENTICATING FOR org.freedesktop.login1.hibernate ===</span><br><span class="line">Authentication is required for hibernating the system.</span><br><span class="line">Authenticating as: shengyu,,, (shengyu)</span><br><span class="line">Password: </span><br><span class="line">==== AUTHENTICATION COMPLETE ===</span><br></pre></td></tr></table></figure></p><h2 id="Hybird-Sleep-混合睡眠模式"><a href="#Hybird-Sleep-混合睡眠模式" class="headerlink" title="Hybird Sleep 混合睡眠模式"></a>Hybird Sleep 混合睡眠模式</h2><p>Hybird Sleep 模式，混合睡眠，只供應電源給記憶體，其餘零件全部切斷電源供給，等同 Windows 的睡眠模式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl hybrid-sleep # 需要權限</span><br></pre></td></tr></table></figure></p><p>Hybird Sleep 模式使用範例如下，我是桌機安裝 Ubuntu 桌面版，看起來應該沒有啟用 Hybird Sleep 混合睡眠模式而是會去執行 Hibernate 休眠模式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl hybrid-sleep</span><br><span class="line">==== AUTHENTICATING FOR org.freedesktop.login1.set-wall-message ===</span><br><span class="line">Authentication is required to set a wall message</span><br><span class="line">Authenticating as: shengyu,,, (shengyu)</span><br><span class="line">Password: </span><br><span class="line">==== AUTHENTICATION COMPLETE ===</span><br><span class="line">==== AUTHENTICATING FOR org.freedesktop.login1.hibernate ===</span><br><span class="line">Authentication is required for hibernating the system.</span><br><span class="line">Authenticating as: shengyu,,, (shengyu)</span><br><span class="line">Password: </span><br><span class="line">==== AUTHENTICATION COMPLETE ===</span><br></pre></td></tr></table></figure></p><p>以上指令會需要輸入兩次密碼，覺得麻煩可以前面加 sudo，但也不會出現任何提示訊息。  </p><p>其它參考<br><a href="https://caloskao.org/ubuntu-hibernate-and-sleep-mode/" target="_blank" rel="noopener">https://caloskao.org/ubuntu-hibernate-and-sleep-mode/</a><br><a href="https://blog.csdn.net/HermitSun/article/details/113791114" target="_blank" rel="noopener">https://blog.csdn.net/HermitSun/article/details/113791114</a><br><a href="https://www.gushiciku.cn/pl/gvWd/zh-tw" target="_blank" rel="noopener">https://www.gushiciku.cn/pl/gvWd/zh-tw</a><br><a href="https://codertw.com/%E4%BC%BA%E6%9C%8D%E5%99%A8/380170/" target="_blank" rel="noopener">https://codertw.com/%E4%BC%BA%E6%9C%8D%E5%99%A8/380170/</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/windows-joystick-tool/" title="Windows 10 測試搖桿的工具">Windows 10 測試搖桿的工具</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 要介紹在 Ubuntu 下休眠的指令，Ubuntu 裡 Systemd 工具提供了睡眠管理的高階命令，分別有 &lt;code&gt;systemctl suspend&lt;/code&gt;、&lt;code&gt;systemctl hibernate&lt;/code&gt;、&lt;code&gt;s
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shengyu7697.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>macOS 查詢 Xcode 版本的 3 種方法</title>
    <link href="https://shengyu7697.github.io/mac-xocde-version/"/>
    <id>https://shengyu7697.github.io/mac-xocde-version/</id>
    <published>2022-05-19T14:00:00.000Z</published>
    <updated>2022-06-05T12:17:13.689Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 macOS 如何查詢 Xcode 版本的 3 種方法，查詢 Xcode 版本資訊的方法分為以下這幾種方法，  </p><ul><li>Xcode Welcome 視窗查看版本  </li><li>Xcode 選單查看版本  </li><li>用 xcodebuild 指令查看 Xcode 版本  </li></ul><h2 id="Xcode-Welcome-視窗查看版本"><a href="#Xcode-Welcome-視窗查看版本" class="headerlink" title="Xcode Welcome 視窗查看版本"></a>Xcode Welcome 視窗查看版本</h2><p>啟動 Xcode 後，可以看到 Welcome to Xcode 的視窗，下方就有 Xcode 版本資訊囉！<br><img src="/mac-xocde-version/xcode-version-1.png" title="xcode version">  </p><h2 id="Xcode-選單查看版本"><a href="#Xcode-選單查看版本" class="headerlink" title="Xcode 選單查看版本"></a>Xcode 選單查看版本</h2><p>啟動 Xcode 後，如果已經關閉 Welcome to Xcode 視窗的話，還可以從 Xcode 選單裡查看版本資訊，從選單的 <code>Xcode &gt; About Xcode</code> 就可以看到 Xcode 版本資訊視窗囉！  </p><img src="/mac-xocde-version/xcode-version-2.png" title="xcode version">  <p>Xcode 版本資訊視窗<br><img src="/mac-xocde-version/xcode-version-3.png" title="xcode version">  </p><h2 id="用-xcodebuild-指令查看-Xcode-版本"><a href="#用-xcodebuild-指令查看-Xcode-版本" class="headerlink" title="用 xcodebuild 指令查看 Xcode 版本"></a>用 xcodebuild 指令查看 Xcode 版本</h2><p>這邊介紹在命令列下可以使用 <code>xcodebuild</code> 指令查看 Xcode 版本的方法，<code>xcodebuild</code> 指令用法如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ xcodebuild -version</span><br><span class="line">Xcode 9.1</span><br><span class="line">Build version 9B55</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 macOS 如何查詢 Xcode 版本的 3 種方法，查詢 Xcode 版本資訊的方法分為以下這幾種方法，  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Xcode Welcome 視窗查看版本  &lt;/li&gt;
&lt;li&gt;Xcode 選單查看版本  &lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="macOS" scheme="https://shengyu7697.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ strlen 用法與範例</title>
    <link href="https://shengyu7697.github.io/cpp-strlen/"/>
    <id>https://shengyu7697.github.io/cpp-strlen/</id>
    <published>2022-05-05T14:00:00.000Z</published>
    <updated>2022-06-06T13:19:13.572Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ strlen 的用法與範例，C/C++ 可以使用 strlen 來計算字串長度，但不包括結束字元 <code>&#39;\0&#39;</code>。  </p><p>C/C++ 要使用 strlen 的話需要引入的標頭檔 <code>&lt;string.h&gt;</code>，如果要使用 C++ 的標頭檔則是引入 <code>&lt;cstring&gt;</code>，<br>strlen 函式原型為<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> <span class="built_in">strlen</span>(<span class="keyword">const</span> <span class="keyword">char</span> * str);</span><br></pre></td></tr></table></figure></p><p>str：欲計算字串長度的字元陣列  </p><h2 id="C-C-strlen-計算字串長度的基本用法"><a href="#C-C-strlen-計算字串長度的基本用法" class="headerlink" title="C/C++ strlen 計算字串長度的基本用法"></a>C/C++ strlen 計算字串長度的基本用法</h2><p>這邊介紹 C/C++ strlen 來計算字元陣列裡的字串長度，strlen 計算字串長度是不包含結束字元 <code>&#39;\0&#39;</code>，<br><figure class="highlight cpp"><figcaption><span>cpp-strlen.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-strlen.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[] = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Length of string is: %d\n"</span>, (<span class="keyword">int</span>)<span class="built_in">strlen</span>(arr)); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Length of string is: 5</span><br></pre></td></tr></table></figure></p><p>這邊示範另外一種使用情境，字元陣列分別初始化每個字元，並之後計算該字串長度，<br><figure class="highlight cpp"><figcaption><span>cpp-strlen2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-strlen2.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[] = &#123;<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">'\0'</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Length of string is: %d\n"</span>, (<span class="keyword">int</span>)<span class="built_in">strlen</span>(arr)); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出同上。 </p><p>這邊介紹另外一種使用情境，初始化一個 const 字串，並之後計算該字串長度，<br><figure class="highlight cpp"><figcaption><span>cpp-strlen3.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-strlen3.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *arr = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Length of string is: %d\n"</span>, (<span class="keyword">int</span>)<span class="built_in">strlen</span>(arr)); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出同上。  </p><p>這邊介紹另外一種使用情境，使用 malloc 配置一塊指向字元陣列指標，並用 strcpy 複製字串，之後計算該字串長度，<br><figure class="highlight cpp"><figcaption><span>cpp-strlen4.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-strlen4.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *arr = <span class="literal">NULL</span>;</span><br><span class="line">    arr = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">64</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(arr, <span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Length of string is: %d\n"</span>, (<span class="keyword">int</span>)<span class="built_in">strlen</span>(arr)); </span><br><span class="line">    <span class="built_in">free</span>(arr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出同上。  </p><p>這邊介紹另外一種使用情境，取得使用者輸入的字串，並計算該字串長度，使用 gets 取得輸入是不安全的，因為給 gets 一個緩衝區但是卻沒有告訴它這個緩衝區到底有多大，也不知道輸入的字串到底有多大，輸入的字串可能超出緩衝區，而引起程式崩潰，解決方法是使用 fgets 替代，fgets 取得標準輸入時會將換行字元讀取進來，而 strlen 計算字串長度是會包含換行字元的，所以在這邊會將換行字元取代成結束字元。<br><figure class="highlight cpp"><figcaption><span>cpp-strlen5.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-strlen5.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">// gets(arr); // unsafe</span></span><br><span class="line">    fgets(arr, <span class="number">128</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">int</span> len = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(arr);</span><br><span class="line">    <span class="keyword">if</span> (arr[len<span class="number">-1</span>] == <span class="string">'\n'</span>) <span class="comment">// remove '\n'</span></span><br><span class="line">        arr[len<span class="number">-1</span>] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Input: %s\n"</span>, arr); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Length of string is: %d\n"</span>, (<span class="keyword">int</span>)<span class="built_in">strlen</span>(arr)); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>gets 在某些平台下執行程式時會顯示警告訊息，例如在 macOS 平台下會顯示 <code>warning: this program uses gets(), which is unsafe.</code>。  </p><p>以上就是 C/C++ strlen 的用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p>其它參考<br>strlen - C++ Reference<br><a href="https://www.cplusplus.com/reference/cstring/strlen/" target="_blank" rel="noopener">https://www.cplusplus.com/reference/cstring/strlen/</a>  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 C++ 相關技術，可以參考看看下面的文章，<br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-fgets/" title="C/C++ fgets 用法與範例">C/C++ fgets 用法與範例</a><br><a href="/cpp-malloc/" title="C/C++ malloc 用法與範例">C/C++ malloc 用法與範例</a><br><a href="/cpp-strcmp/" title="C/C++ strcmp 用法與範例">C/C++ strcmp 用法與範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ strlen 的用法與範例，C/C++ 可以使用 strlen 來計算字串長度，但不包括結束字元 &lt;code&gt;&amp;#39;\0&amp;#39;&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;C/C++ 要使用 strlen 的話需要引入的標頭檔 &lt;cod
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ snprintf 用法與範例</title>
    <link href="https://shengyu7697.github.io/cpp-snprintf/"/>
    <id>https://shengyu7697.github.io/cpp-snprintf/</id>
    <published>2022-05-02T14:00:00.000Z</published>
    <updated>2022-06-05T12:17:13.660Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ snprintf 的用法與範例，C/C++ 可以使用 snprintf 格式化輸出到 buffer 裡，除此之外還可以指定輸出的字元數。  </p><p>C/C++ 要使用 snprintf 的話需要引入的標頭檔 <code>&lt;stdio.h&gt;</code>，如果要使用 C++ 的標頭檔則是引入 <code>&lt;cstdio&gt;</code>，<br>snprintf 函式原型為<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">snprintf</span><span class="params">(<span class="keyword">char</span> * buffer, <span class="keyword">size_t</span> n, <span class="keyword">const</span> <span class="keyword">char</span> * format, ...)</span></span>;</span><br></pre></td></tr></table></figure></p><p>buffer：指向一塊字元陣列的指標，格式化輸出的結果字串輸出到這裡，該 buffer 需要足夠的空間存放結果。<br>n：指定輸出的最大字元數。<br>format：format 是格式控制字串，format 可被隨後的附加參數中指定的值替換，並按需求進行格式化，跟 printf 的 format 用法一樣。<br>…：可變引數 argument，依序替換 format 中的格式化種類。  </p><h2 id="C-C-snprintf-格式化輸出基本用法"><a href="#C-C-snprintf-格式化輸出基本用法" class="headerlink" title="C/C++ snprintf 格式化輸出基本用法"></a>C/C++ snprintf 格式化輸出基本用法</h2><p>這邊介紹 C/C++ snprintf 格式化輸出的基本用法，snprintf 函式會在中將格式化輸出的一連串字元存到 buffer 裡。隨後的每個引數 argument 是根據 format 中的對應格式進行轉換和輸出。  </p><p>使用 sprintf 的話沒有方法可以限制寫入的字元數，這表示使用 sprintf 撰寫出的程式碼很容易發生緩衝區溢位。跟 sprintf 相比 snprintf 可以指定要寫入 buffer 的字元數。  </p><p>這邊介紹 C/C++ snprintf 格式化輸出，例如將數字格式化輸出成字串到 buffer 裡、將浮點數格式化輸出成字串到 buffer 裡，<br><figure class="highlight cpp"><figcaption><span>cpp-snprintf.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-snprintf.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> str[] = <span class="string">"hello world"</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">float</span> f = <span class="number">5.4321f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="number">128</span>, <span class="string">"string: %s\n"</span>, str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="number">128</span>, <span class="string">"character: %c\n"</span>, c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="number">128</span>, <span class="string">"integer: %d\n"</span>, num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="number">128</span>, <span class="string">"float: %f\n"</span>, f);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string: hello world</span><br><span class="line">character: a</span><br><span class="line">integer: 123</span><br><span class="line">float: 5.432100</span><br></pre></td></tr></table></figure></p><p>這邊再介紹一個範例，有時需要將一些資料格式化輸出並且連接在一起，這時可以使用 snprintf 搭配 strcat，snprintf 將資料格式化輸出到 tmp 後，再使用 strcat 連接 tmp 到 buf 裡，最後再用 printf 輸出結果，詳見下列範例，<br><figure class="highlight cpp"><figcaption><span>cpp-snprintf2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-snprintf2.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> hex[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x1a</span>, <span class="number">0x2b</span>, <span class="number">0x3c</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> tmp[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(hex); i++) &#123;</span><br><span class="line">        <span class="built_in">snprintf</span>(tmp, <span class="keyword">sizeof</span>(tmp), <span class="string">"0x%02x, "</span>, hex[i]);</span><br><span class="line">        <span class="built_in">strcat</span>(buf, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hex : %s\n"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hex : 0x01, 0x02, 0x03, 0x1a, 0x2b, 0x3c,</span><br></pre></td></tr></table></figure></p><p>以上就是 C/C++ snprintf 的用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p>其它參考<br>snprintf - C++ Reference<br><a href="https://www.cplusplus.com/reference/cstdio/snprintf/" target="_blank" rel="noopener">https://www.cplusplus.com/reference/cstdio/snprintf/</a>  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 C++ 相關技術，可以參考看看下面的文章，<br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-sprintf/" title="C/C++ sprintf 用法與範例">C/C++ sprintf 用法與範例</a><br><a href="/cpp-strcat/" title="C/C++ strcat 用法與範例">C/C++ strcat 用法與範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ snprintf 的用法與範例，C/C++ 可以使用 snprintf 格式化輸出到 buffer 裡，除此之外還可以指定輸出的字元數。  &lt;/p&gt;
&lt;p&gt;C/C++ 要使用 snprintf 的話需要引入的標頭檔 &lt;code&gt;&amp;lt
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ sprintf 用法與範例</title>
    <link href="https://shengyu7697.github.io/cpp-sprintf/"/>
    <id>https://shengyu7697.github.io/cpp-sprintf/</id>
    <published>2022-04-28T14:00:00.000Z</published>
    <updated>2022-06-05T12:17:13.659Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ sprintf 的用法與範例，C/C++ 可以使用 sprintf 格式化輸出到 buffer 裡。  </p><p>C/C++ 要使用 sprintf 的話需要引入的標頭檔 <code>&lt;stdio.h&gt;</code>，如果要使用 C++ 的標頭檔則是引入 <code>&lt;cstdio&gt;</code>，<br>sprintf 函式原型為<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sprintf</span><span class="params">(<span class="keyword">char</span> * buffer, <span class="keyword">const</span> <span class="keyword">char</span> * format, ...)</span></span>;</span><br></pre></td></tr></table></figure></p><p>buffer：指向一塊字元陣列的指標，格式化輸出的結果字串輸出到這裡，該 buffer 需要足夠的空間存放結果。<br>format：format 是格式控制字串，format 可被隨後的附加參數中指定的值替換，並按需求進行格式化，跟 printf 的 format 用法一樣。<br>…：可變引數 argument，依序替換 format 中的格式化種類。  </p><h2 id="C-C-sprintf-格式化輸出基本用法"><a href="#C-C-sprintf-格式化輸出基本用法" class="headerlink" title="C/C++ sprintf 格式化輸出基本用法"></a>C/C++ sprintf 格式化輸出基本用法</h2><p>這邊介紹 C/C++ sprintf 格式化輸出的基本用法，sprintf 函式會在中將格式化輸出的一連串字元存到 buffer 裡。隨後的每個引數 argument 是根據 format 中的對應格式進行轉換和輸出。  </p><p>使用 sprintf 的話沒有方法可以限制寫入的字元數，這表示使用 sprintf 撰寫出的程式碼很容易發生緩衝區溢位。如果要指定要寫入 buffer 的字元數請使用 <a href="/cpp-snprintf/" title="snprintf">snprintf</a>，  </p><p>這邊介紹 C/C++ sprintf 格式化輸出，例如將數字格式化輸出成字串到 buffer 裡、將浮點數格式化輸出成字串到 buffer 裡，<br><figure class="highlight cpp"><figcaption><span>cpp-sprintf.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-sprintf.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> str[] = <span class="string">"hello world"</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">float</span> f = <span class="number">5.4321f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">"string: %s\n"</span>, str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">"character: %c\n"</span>, c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">"integer: %d\n"</span>, num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">"float: %f\n"</span>, f);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string: hello world</span><br><span class="line">character: a</span><br><span class="line">integer: 123</span><br><span class="line">float: 5.432100</span><br></pre></td></tr></table></figure></p><p>這邊再介紹一個範例，有時需要將一些資料格式化輸出並且連接在一起，這時可以使用 sprintf 搭配 strcat，sprintf 將資料格式化輸出到 tmp 後，再使用 strcat 連接 tmp 到 buf 裡，最後再用 printf 輸出結果，詳見下列範例，<br><figure class="highlight cpp"><figcaption><span>cpp-sprintf2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-sprintf2.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> hex[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x1a</span>, <span class="number">0x2b</span>, <span class="number">0x3c</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> tmp[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(hex); i++) &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(tmp, <span class="string">"0x%02x, "</span>, hex[i]);</span><br><span class="line">        <span class="built_in">strcat</span>(buf, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hex : %s\n"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hex : 0x01, 0x02, 0x03, 0x1a, 0x2b, 0x3c,</span><br></pre></td></tr></table></figure></p><p>以上就是 C/C++ sprintf 的用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p>其它參考<br>sprintf - C++ Reference<br><a href="https://www.cplusplus.com/reference/cstdio/sprintf/" target="_blank" rel="noopener">https://www.cplusplus.com/reference/cstdio/sprintf/</a>  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 C++ 相關技術，可以參考看看下面的文章，<br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-snprintf/" title="C/C++ snprintf 用法與範例">C/C++ snprintf 用法與範例</a><br><a href="/cpp-strcat/" title="C/C++ strcat 用法與範例">C/C++ strcat 用法與範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ sprintf 的用法與範例，C/C++ 可以使用 sprintf 格式化輸出到 buffer 裡。  &lt;/p&gt;
&lt;p&gt;C/C++ 要使用 sprintf 的話需要引入的標頭檔 &lt;code&gt;&amp;lt;stdio.h&amp;gt;&lt;/code&gt;
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ memcmp 用法與範例</title>
    <link href="https://shengyu7697.github.io/cpp-memcmp/"/>
    <id>https://shengyu7697.github.io/cpp-memcmp/</id>
    <published>2022-04-25T14:00:00.000Z</published>
    <updated>2022-06-04T04:07:35.244Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ memcmp 用法與範例，memcmp 是用來判斷兩段記憶體區塊內容是否相同的函式，以下介紹如何使用 memcmp 函式。  </p><p>C/C++ 要判斷 c-style 字串是否相等可以使用 memcmp，要使用 memcmp 的話需要引入的標頭檔 <code>&lt;string.h&gt;</code>，如果要使用 C++ 的標頭檔則是引入 <code>&lt;cstring&gt;</code>，<br>memcmp 函式原型為<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">memcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * ptr1, <span class="keyword">const</span> <span class="keyword">char</span> * ptr2, <span class="keyword">size_t</span> num)</span></span>;</span><br></pre></td></tr></table></figure></p><p><code>memcmp()</code> 如果判斷兩段記憶體區塊內容相同的話會回傳 0，這必須牢記因為很容易混搖，很多程式 bug 就是這樣產生的，所以 <code>if (memcmp(buffer1, buffer2, sizeof(buffer1)) printf(&quot;not equal\n&quot;);</code> 這樣寫的話結果會是 not equal 唷！來看看下面的 memcmp 用法範例吧！<br><figure class="highlight cpp"><figcaption><span>cpp-memcmp.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-memcmp.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer1[] = <span class="string">"abcde"</span>;</span><br><span class="line">    <span class="keyword">char</span> buffer2[] = <span class="string">"abcde"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ret = <span class="built_in">memcmp</span>(buffer1, buffer2, <span class="keyword">sizeof</span>(buffer1));</span><br><span class="line">    <span class="keyword">if</span> (ret &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"buffer1 is greater than buffer2\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"buffer1 is less than buffer2\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// ret == 0</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"buffer1 is equal to buffer2\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buffer1 is equal to buffer2</span><br></pre></td></tr></table></figure></p><p>再來看看兩段記憶體區塊不相同的例子，memcmp 是大小寫都判斷不同的，<br><figure class="highlight cpp"><figcaption><span>cpp-memcmp2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-memcmp2.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer1[] = <span class="string">"abcde"</span>;</span><br><span class="line">    <span class="keyword">char</span> buffer2[] = <span class="string">"ABCDE"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ret = <span class="built_in">memcmp</span>(buffer1, buffer2, <span class="keyword">sizeof</span>(buffer1));</span><br><span class="line">    <span class="keyword">if</span> (ret &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"buffer1 is greater than buffer2\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"buffer1 is less than buffer2\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// ret == 0</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"buffer1 is equal to buffer2\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buffer1 is greater than buffer2</span><br></pre></td></tr></table></figure></p><p>再來判斷兩段記憶體區塊前 n 個內容是否相等，以下範例是判斷兩段記憶體區塊前 3 個字元是否相同，<br><figure class="highlight cpp"><figcaption><span>cpp-memcmp3.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-memcmp3.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer1[] = <span class="string">"abcde"</span>;</span><br><span class="line">    <span class="keyword">char</span> buffer2[] = <span class="string">"abcDE"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ret = <span class="built_in">memcmp</span>(buffer1, buffer2, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"buffer1 is greater than buffer2\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"buffer1 is less than buffer2\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// ret == 0</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"buffer1 is equal to buffer2\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buffer1 is equal to buffer2</span><br></pre></td></tr></table></figure></p><p>以上就是 C/C++ memcmp 的用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p>其它參考<br>memcmp - C++ Reference<br><a href="https://www.cplusplus.com/reference/cstring/memcmp/" target="_blank" rel="noopener">https://www.cplusplus.com/reference/cstring/memcmp/</a>  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 C++ 相關技術，可以參考看看下面的文章，<br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-string-compare/" title="C/C++ 字串比較的3種方法">C/C++ 字串比較的3種方法</a><br><a href="/cpp-strcmp/" title="C/C++ strcmp 用法與範例">C/C++ strcmp 用法與範例</a><br><a href="/cpp-memcpy/" title="C/C++ memcpy 用法與範例">C/C++ memcpy 用法與範例</a><br><a href="/cpp-memset/" title="C/C++ memset 用法與範例">C/C++ memset 用法與範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ memcmp 用法與範例，memcmp 是用來判斷兩段記憶體區塊內容是否相同的函式，以下介紹如何使用 memcmp 函式。  &lt;/p&gt;
&lt;p&gt;C/C++ 要判斷 c-style 字串是否相等可以使用 memcmp，要使用 memcmp
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
</feed>

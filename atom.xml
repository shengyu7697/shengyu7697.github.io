<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShengYu Talk</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shengyu7697.github.io/"/>
  <updated>2022-05-23T15:29:27.894Z</updated>
  <id>https://shengyu7697.github.io/</id>
  
  <author>
    <name>ShengYu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python OpenCV cv2.medianBlur 中值濾波</title>
    <link href="https://shengyu7697.github.io/python-opencv-medianblur/"/>
    <id>https://shengyu7697.github.io/python-opencv-medianblur/</id>
    <published>2022-03-31T14:00:00.000Z</published>
    <updated>2022-05-23T15:29:27.894Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 將介紹 Python 使用 OpenCV cv2.medianBlur 來作影像平滑模糊化，在寫 Python 影像處理程式時常會用到 OpenCV 圖片平滑模糊化的功能，而中值濾波 Median Filtering 是其中一個方法，接下來介紹怎麼使用中值濾波 cv2.medianBlur 來進行影像平滑模糊化。  </p><h2 id="中值濾波-Median-Filtering"><a href="#中值濾波-Median-Filtering" class="headerlink" title="中值濾波 Median Filtering"></a>中值濾波 Median Filtering</h2><p>這邊我們介紹中值濾波 Median Filtering，使用 cv2.medianBlur 就可以計算 kernel 視窗內所有 pixel 的中位數然後取代 kernel 中間的數值，中值濾波 Median Filtering 這個方法對於去除雜訊很有效，我們這邊示範讀取一個有雜訊 opencv logo 的圖片然後做 cv2.medianBlur，kernel 大小為 5，<br><figure class="highlight python"><figcaption><span>opencv-medianBlur.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'opencv-logo-noise.png'</span>)</span><br><span class="line"></span><br><span class="line">blur = cv2.medianBlur(img, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>), plt.imshow(img), plt.title(<span class="string">'Original'</span>)</span><br><span class="line">plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">122</span>), plt.imshow(blur), plt.title(<span class="string">'Blurred'</span>)</span><br><span class="line">plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>結果如下圖所示：<br><img src="/python-opencv-medianblur/opencv-medianBlur.png" width="640" title="結果圖">  </p><p>cv2.medianBlur 參數的詳細細節請參考<a href="https://docs.opencv.org/2.4/modules/imgproc/doc/filtering.html?highlight=blur#cv2.medianBlur" target="_blank" rel="noopener">這裡</a>  </p><p>參考<br>OpenCV: Smoothing Images<br><a href="https://docs.opencv.org/4.x/d4/d13/tutorial_py_filtering.html" target="_blank" rel="noopener">https://docs.opencv.org/4.x/d4/d13/tutorial_py_filtering.html</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-opencv-blur/" title="Python OpenCV 影像平滑模糊化 blur">Python OpenCV 影像平滑模糊化 blur</a><br><a href="/python-opencv-gaussianblur/" title="Python OpenCV cv2.GaussianBlur 高斯濾波">Python OpenCV cv2.GaussianBlur 高斯濾波</a><br><a href="/python-opencv-threshold/" title="Python OpenCV 影像二值化 Image Thresholding">Python OpenCV 影像二值化 Image Thresholding</a><br><a href="/python-opencv-rgb-to-gray/" title="Python OpenCV 彩色轉灰階(RGB/BGR to GRAY)">Python OpenCV 彩色轉灰階(RGB/BGR to GRAY)</a><br><a href="/python-opencv-rgb-to-hsv/" title="Python OpenCV 彩色轉HSV(RGB/BGR to HSV)">Python OpenCV 彩色轉HSV(RGB/BGR to HSV)</a><br><a href="/python-opencv-rgb-to-ycbcr/" title="Python OpenCV 彩色轉YCbCr(RGB/BGR to YCbCr)">Python OpenCV 彩色轉YCbCr(RGB/BGR to YCbCr)</a><br><a href="/python-opencv-canny/" title="Python OpenCV 影像邊緣偵測 Canny Edge Detection">Python OpenCV 影像邊緣偵測 Canny Edge Detection</a><br><a href="/python-opencv-resize/" title="Python OpenCV resize 圖片縮放">Python OpenCV resize 圖片縮放</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 將介紹 Python 使用 OpenCV cv2.medianBlur 來作影像平滑模糊化，在寫 Python 影像處理程式時常會用到 OpenCV 圖片平滑模糊化的功能，而中值濾波 Median Filtering 是其中一個方法，接下來介紹怎麼使用
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="OpenCV" scheme="https://shengyu7697.github.io/tags/OpenCV/"/>
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python OpenCV cv2.GaussianBlur 高斯濾波</title>
    <link href="https://shengyu7697.github.io/python-opencv-gaussianblur/"/>
    <id>https://shengyu7697.github.io/python-opencv-gaussianblur/</id>
    <published>2022-03-28T14:00:00.000Z</published>
    <updated>2022-05-23T15:29:27.741Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 將介紹 Python 使用 OpenCV cv2.GaussianBlur 來作影像平滑模糊化，在寫 Python 影像處理程式時常會用到 OpenCV 圖片平滑模糊化的功能，而高斯濾波 Gaussian Filtering 是其中一個方法，接下來介紹怎麼使用高斯濾波 cv2.GaussianBlur 來進行影像平滑模糊化。  </p><h2 id="cv2-GaussianBlur-高斯濾波"><a href="#cv2-GaussianBlur-高斯濾波" class="headerlink" title="cv2.GaussianBlur 高斯濾波"></a>cv2.GaussianBlur 高斯濾波</h2><p>這邊我們介紹高斯濾波 Gaussian Filtering，它與平均濾波 Averaging 類似，平均濾波 Averaging 的 kernel 裡的每個 pixel 權重都是1，而高斯濾波給予每個 pixel 不同權重，中心 pixel 的權重最高，越往邊角權重就越低，相較於平均濾波 Averaging 這樣可以讓圖片失真較少，高斯濾波通常去除雜訊也有不錯的效果。  </p><p>以下範例為 kernel size 為 5x5，sigma 為 0，<br><figure class="highlight python"><figcaption><span>opencv-GaussianBlur.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'opencv-logo.png'</span>)</span><br><span class="line"></span><br><span class="line">blur = cv2.GaussianBlur(img, (<span class="number">5</span>, <span class="number">5</span>), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>), plt.imshow(img), plt.title(<span class="string">'Original'</span>)</span><br><span class="line">plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">122</span>), plt.imshow(blur), plt.title(<span class="string">'Blurred'</span>)</span><br><span class="line">plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>結果如下圖所示：<br><img src="/python-opencv-gaussianblur/opencv-GaussianBlur.png" width="640" title="結果圖">  </p><p>cv2.GaussianBlur 參數的詳細細節請參考<a href="https://docs.opencv.org/2.4/modules/imgproc/doc/filtering.html?highlight=blur#cv2.GaussianBlur" target="_blank" rel="noopener">這裡</a>  </p><h2 id="cv2-getGaussianKernel-取得高斯-kernel"><a href="#cv2-getGaussianKernel-取得高斯-kernel" class="headerlink" title="cv2.getGaussianKernel 取得高斯 kernel"></a>cv2.getGaussianKernel 取得高斯 kernel</h2><p>這邊介紹使用 cv2.getGaussianKernel 取得高斯 kernel，<br><figure class="highlight python"><figcaption><span>opencv-GaussianBlur2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">kernel_size = <span class="number">3</span></span><br><span class="line">sigma = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get 1-D Gaussian kernel</span></span><br><span class="line">kernel_1d = cv2.getGaussianKernel(kernel_size, sigma)</span><br><span class="line">print(kernel_1d)</span><br><span class="line">kernel_2d = kernel_1d * kernel_1d.T</span><br><span class="line">print(kernel_2d)</span><br></pre></td></tr></table></figure></p><p>輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[0.25]</span><br><span class="line"> [0.5 ]</span><br><span class="line"> [0.25]]</span><br><span class="line">[[0.0625 0.125  0.0625]</span><br><span class="line"> [0.125  0.25   0.125 ]</span><br><span class="line"> [0.0625 0.125  0.0625]]</span><br></pre></td></tr></table></figure></p><h2 id="使用-cv2-sepFilter2D-做高斯濾波"><a href="#使用-cv2-sepFilter2D-做高斯濾波" class="headerlink" title="使用 cv2.sepFilter2D 做高斯濾波"></a>使用 cv2.sepFilter2D 做高斯濾波</h2><p>這邊介紹使用 cv2.sepFilter2D 來做高斯濾波也能達成 cv2.GaussianBlur 同樣的效果，先使用 cv2.getGaussianKernel 建立一個 1-D 的 kernel，接著使用 cv2.sepFilter2D 且分別將 kernelX 與 kernelY 參數都設定成剛剛建立好的 1-D 的 kernel，這樣的結果跟 cv2.GaussianBlur 結果一樣。<br><figure class="highlight python"><figcaption><span>opencv-GaussianBlur3.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'opencv-logo.png'</span>)</span><br><span class="line"></span><br><span class="line">kernel_size = <span class="number">5</span></span><br><span class="line">sigma = <span class="number">0</span></span><br><span class="line">kernel_1d = cv2.getGaussianKernel(kernel_size, sigma)</span><br><span class="line"></span><br><span class="line">blur = cv2.sepFilter2D(img, <span class="number">-1</span>, kernel_1d, kernel_1d)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>), plt.imshow(img), plt.title(<span class="string">'Original'</span>)</span><br><span class="line">plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">122</span>), plt.imshow(blur), plt.title(<span class="string">'Blurred'</span>)</span><br><span class="line">plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>cv2.sepFilter2D 參數的詳細細節請參考<a href="https://docs.opencv.org/2.4/modules/imgproc/doc/filtering.html?highlight=blur#cv2.sepFilter2D" target="_blank" rel="noopener">這裡</a>  </p><p>參考<br>OpenCV: Smoothing Images<br><a href="https://docs.opencv.org/4.x/d4/d13/tutorial_py_filtering.html" target="_blank" rel="noopener">https://docs.opencv.org/4.x/d4/d13/tutorial_py_filtering.html</a><br>[Python]Gaussian Filter-概念與實作. 實作 Gaussian Filter<br><a href="https://medium.com/@bob800530/python-gaussian-filter-%E6%A6%82%E5%BF%B5%E8%88%87%E5%AF%A6%E4%BD%9C-676aac52ea17" target="_blank" rel="noopener">https://medium.com/@bob800530/python-gaussian-filter-%E6%A6%82%E5%BF%B5%E8%88%87%E5%AF%A6%E4%BD%9C-676aac52ea17</a><br>How Blurs &amp; Filters Work - Computerphile<br><a href="https://youtu.be/C_zFhWdM4ic" target="_blank" rel="noopener">https://youtu.be/C_zFhWdM4ic</a><br>opencv 高斯核是怎么通过参数ksize和sigma计算得到的 cv2.getGaussianKernel()<br><a href="https://blog.csdn.net/weixin_37804469/article/details/113843829" target="_blank" rel="noopener">https://blog.csdn.net/weixin_37804469/article/details/113843829</a><br>Gaussian Blurring | TheAILearner<br><a href="https://theailearner.com/2019/05/06/gaussian-blurring/" target="_blank" rel="noopener">https://theailearner.com/2019/05/06/gaussian-blurring/</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-opencv-blur/" title="Python OpenCV 影像平滑模糊化 blur">Python OpenCV 影像平滑模糊化 blur</a><br><a href="/python-opencv-medianblur/" title="Python OpenCV cv2.medianBlur 中值濾波">Python OpenCV cv2.medianBlur 中值濾波</a><br><a href="/python-opencv-threshold/" title="Python OpenCV 影像二值化 Image Thresholding">Python OpenCV 影像二值化 Image Thresholding</a><br><a href="/python-opencv-rgb-to-gray/" title="Python OpenCV 彩色轉灰階(RGB/BGR to GRAY)">Python OpenCV 彩色轉灰階(RGB/BGR to GRAY)</a><br><a href="/python-opencv-rgb-to-hsv/" title="Python OpenCV 彩色轉HSV(RGB/BGR to HSV)">Python OpenCV 彩色轉HSV(RGB/BGR to HSV)</a><br><a href="/python-opencv-rgb-to-ycbcr/" title="Python OpenCV 彩色轉YCbCr(RGB/BGR to YCbCr)">Python OpenCV 彩色轉YCbCr(RGB/BGR to YCbCr)</a><br><a href="/python-opencv-canny/" title="Python OpenCV 影像邊緣偵測 Canny Edge Detection">Python OpenCV 影像邊緣偵測 Canny Edge Detection</a><br><a href="/python-opencv-resize/" title="Python OpenCV resize 圖片縮放">Python OpenCV resize 圖片縮放</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 將介紹 Python 使用 OpenCV cv2.GaussianBlur 來作影像平滑模糊化，在寫 Python 影像處理程式時常會用到 OpenCV 圖片平滑模糊化的功能，而高斯濾波 Gaussian Filtering 是其中一個方法，接下來介紹
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="OpenCV" scheme="https://shengyu7697.github.io/tags/OpenCV/"/>
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python print numpy array 設定精準度</title>
    <link href="https://shengyu7697.github.io/python-numpy-print-array-precision/"/>
    <id>https://shengyu7697.github.io/python-numpy-print-array-precision/</id>
    <published>2022-03-24T14:00:00.000Z</published>
    <updated>2022-05-21T06:47:39.062Z</updated>
    
    <content type="html"><![CDATA[<p>本篇紀錄如何使用 Python print numpy array 設定精準度。  </p><h2 id="Python-print-numpy-array-設定精準度"><a href="#Python-print-numpy-array-設定精準度" class="headerlink" title="Python print numpy array 設定精準度"></a>Python print numpy array 設定精準度</h2><p>以下範例示範 Python print numpy array 設定精準度，第一個 arr1 是隨機產生 3 個數值，第二個 arr2 是指定各種數值並且有一些是含科學符號的數值，使用 <code>np.printoptions()</code> 設定 precision 參數可以控制印出的精準度，如果不想要影響全域結果可以使用區域的寫法 <code>with np.printoptions(...):</code> (需要 NumPy 1.15.0 或以後的版本)，<br><figure class="highlight python"><figcaption><span>python3-numpy-print-array-precision.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.random.random(<span class="number">3</span>)</span><br><span class="line">print(arr1)</span><br><span class="line"><span class="comment">#np.printoptions(precision=2)</span></span><br><span class="line"><span class="keyword">with</span> np.printoptions(precision=<span class="number">2</span>, suppress=<span class="literal">True</span>):</span><br><span class="line">    print(arr1)</span><br><span class="line">print(arr1)</span><br><span class="line"></span><br><span class="line">arr2 = np.asarray([<span class="number">1.5e-10</span>, <span class="number">1.5</span>, <span class="number">1500</span>])</span><br><span class="line"></span><br><span class="line">print(type(arr2)) <span class="comment"># &lt;class 'numpy.ndarray'&gt;</span></span><br><span class="line">print(arr2)</span><br><span class="line"><span class="comment">#np.printoptions(precision=2)</span></span><br><span class="line"><span class="keyword">with</span> np.printoptions(precision=<span class="number">2</span>, suppress=<span class="literal">True</span>):</span><br><span class="line">    print(arr2)</span><br><span class="line">print(arr2)</span><br></pre></td></tr></table></figure></p><p>輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[0.99005858 0.2245673  0.5895889 ]</span><br><span class="line">[0.99 0.22 0.59]</span><br><span class="line">[0.99005858 0.2245673  0.5895889 ]</span><br><span class="line">&lt;class &apos;numpy.ndarray&apos;&gt;</span><br><span class="line">[1.5e-10 1.5e+00 1.5e+03]</span><br><span class="line">[   0.     1.5 1500. ]</span><br><span class="line">[1.5e-10 1.5e+00 1.5e+03]</span><br></pre></td></tr></table></figure></p><p>其他參考<br>python - How to pretty-print a numpy.array without scientific notation and with given precision? - Stack Overflow<br><a href="https://stackoverflow.com/questions/2891790/how-to-pretty-print-a-numpy-array-without-scientific-notation-and-with-given-pre" target="_blank" rel="noopener">https://stackoverflow.com/questions/2891790/how-to-pretty-print-a-numpy-array-without-scientific-notation-and-with-given-pre</a>  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 Python 相關技術，可以參考看看下面的文章，<br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a><br><a href="/python-str/" title="Python str 字串用法與範例">Python str 字串用法與範例</a><br><a href="/python-list/" title="Python list 串列用法與範例">Python list 串列用法與範例</a><br><a href="/python-set/" title="Python set 集合用法與範例">Python set 集合用法與範例</a><br><a href="/python-dict/" title="Python dict 字典用法與範例">Python dict 字典用法與範例</a><br><a href="/python-tuple/" title="Python tuple 元組用法與範例">Python tuple 元組用法與範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇紀錄如何使用 Python print numpy array 設定精準度。  &lt;/p&gt;
&lt;h2 id=&quot;Python-print-numpy-array-設定精準度&quot;&gt;&lt;a href=&quot;#Python-print-numpy-array-設定精準度&quot; class=&quot;h
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python numpy 寫入 csv</title>
    <link href="https://shengyu7697.github.io/python-numpy-write-csv-file/"/>
    <id>https://shengyu7697.github.io/python-numpy-write-csv-file/</id>
    <published>2022-03-21T14:00:00.000Z</published>
    <updated>2022-05-21T06:47:04.318Z</updated>
    
    <content type="html"><![CDATA[<p>本篇紀錄如何使用 python numpy 的資料寫入 csv。  </p><h2 id="將-numpy-array-用-savetxt-寫入-csv"><a href="#將-numpy-array-用-savetxt-寫入-csv" class="headerlink" title="將 numpy array 用 savetxt 寫入 csv"></a>將 numpy array 用 savetxt 寫入 csv</h2><p>以下範例將 numpy array 寫入 csv，<br><figure class="highlight python"><figcaption><span>python3-numpy-csv-write.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.asarray([</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">  [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">  ])</span><br><span class="line"></span><br><span class="line">print(type(arr)) <span class="comment"># &lt;class 'numpy.ndarray'&gt;</span></span><br><span class="line">np.savetxt(<span class="string">'output_data.csv'</span>, arr, delimiter=<span class="string">','</span>)</span><br><span class="line"><span class="comment">#np.savetxt('output_data.csv', arr, delimiter=',', fmt='%d')</span></span><br><span class="line"><span class="comment">#np.savetxt('output_data.csv', arr, delimiter=',', fmt='%.2f')</span></span><br></pre></td></tr></table></figure></p><p>輸出的 output_data.csv 內容如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.000000000000000000e+00,2.000000000000000000e+00,3.000000000000000000e+00</span><br><span class="line">4.000000000000000000e+00,5.000000000000000000e+00,6.000000000000000000e+00</span><br><span class="line">7.000000000000000000e+00,8.000000000000000000e+00,9.000000000000000000e+00</span><br></pre></td></tr></table></figure></p><p>如果加入 fmt 參數的話可以控制輸出的格式，例如可以控制輸出的精準度 <code>fmt=&#39;%d&#39;</code> 為整數 (預設為 <code>fmt=&#39;%.18e&#39;</code>)，輸出的 output_data.csv 內容如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1,2,3</span><br><span class="line">4,5,6</span><br><span class="line">7,8,9</span><br></pre></td></tr></table></figure></p><p>如果是 <code>fmt=&#39;%.2f&#39;</code> 為小數點第二位，輸出的 output_data.csv 內容如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.00,2.00,3.00</span><br><span class="line">4.00,5.00,6.00</span><br><span class="line">7.00,8.00,9.00</span><br></pre></td></tr></table></figure></p><p>另外如果是使用 <code>arr.tofile(&#39;output_data.csv&#39;, sep=&#39;,&#39;)</code> (numpy.ndarray.tofile) 的方式寫入 csv 是不會換行的。  </p><p>其他參考<br>numpy.savetxt — NumPy Manual<br><a href="https://numpy.org/doc/stable/reference/generated/numpy.savetxt.html" target="_blank" rel="noopener">https://numpy.org/doc/stable/reference/generated/numpy.savetxt.html</a><br>python - Setting the fmt option in numpy.savetxt - Stack Overflow<br><a href="https://stackoverflow.com/questions/17043393/setting-the-fmt-option-in-numpy-savetxt" target="_blank" rel="noopener">https://stackoverflow.com/questions/17043393/setting-the-fmt-option-in-numpy-savetxt</a>  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 Python 相關技術，可以參考看看下面的文章，<br><a href="/python-write-csv-file/" title="Python 寫入 csv 檔案">Python 寫入 csv 檔案</a><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a><br><a href="/python-str/" title="Python str 字串用法與範例">Python str 字串用法與範例</a><br><a href="/python-list/" title="Python list 串列用法與範例">Python list 串列用法與範例</a><br><a href="/python-set/" title="Python set 集合用法與範例">Python set 集合用法與範例</a><br><a href="/python-dict/" title="Python dict 字典用法與範例">Python dict 字典用法與範例</a><br><a href="/python-tuple/" title="Python tuple 元組用法與範例">Python tuple 元組用法與範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇紀錄如何使用 python numpy 的資料寫入 csv。  &lt;/p&gt;
&lt;h2 id=&quot;將-numpy-array-用-savetxt-寫入-csv&quot;&gt;&lt;a href=&quot;#將-numpy-array-用-savetxt-寫入-csv&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>macOS 使用 pip 安裝 opencv</title>
    <link href="https://shengyu7697.github.io/mac-pip-install-opencv/"/>
    <id>https://shengyu7697.github.io/mac-pip-install-opencv/</id>
    <published>2022-03-17T14:00:00.000Z</published>
    <updated>2022-05-21T02:27:24.907Z</updated>
    
    <content type="html"><![CDATA[<p>本篇記錄一下 macOS 使用 pip 安裝 opencv，安裝完後就可以開始用 python 開法 opencv 影像處理程式囉！  </p><p>python pip 安裝 opencv-python 的指令如下，預設是安裝最新版，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install opencv-python</span><br></pre></td></tr></table></figure></p><p>我的 macOS 是 10.13.4，我試過不論是 opencv 4 最新版或 opencv 3 最新版在我的環境下會編譯失敗顯示這個問題，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install opencv-python</span><br><span class="line">...</span><br><span class="line">ERROR: Could not build wheels for opencv-python, which is required to install pyproject.toml-based projects</span><br></pre></td></tr></table></figure></p><p>上網找了一下資料，除了把 macOS 版本更新到最新的方法以外，還可以試試安裝舊版 opencv，所以新版 macOS 應該沒有這個問題，我暫時還不想升級 macOS，中間我試過升級 pip 工具 <code>pip3 install --upgrade pip setuptools wheel</code>，還有安裝 python 3.9 <code>brew install python@3.9</code> (我原本使用的是 python 3.7) 都無法解決這個問題，  </p><p>最後安裝 opencv 舊版本才順利成功，使用 pip 安裝的話大約是 2021/1/4 以後的版本都會抓 source code 下來 build，舊版本才會抓預編譯的 whl 檔，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install opencv-python==3.4.13.47 # opencv 3</span><br><span class="line">pip3 install opencv-python==4.5.1.48 # opencv 4</span><br></pre></td></tr></table></figure></p><p>如果要安裝 contrib 的話則是，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install opencv-contrib-python==3.4.13.47 # opencv 3</span><br><span class="line">pip3 install opencv-contrib-python==4.5.1.48 # opencv 4</span><br></pre></td></tr></table></figure></p><p>參考<br>docker - ERROR: Could not build wheels for opencv-python which use PEP 517 and cannot be installed directly - Stack Overflow<br><a href="https://stackoverflow.com/questions/63732353/error-could-not-build-wheels-for-opencv-python-which-use-pep-517-and-cannot-be" target="_blank" rel="noopener">https://stackoverflow.com/questions/63732353/error-could-not-build-wheels-for-opencv-python-which-use-pep-517-and-cannot-be</a></p><p><strong>其它相關文章推薦</strong><br>如果你想學習 Python 相關技術，可以參考看看下面的文章，<br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a><br><a href="/python-install-opencv/" title="Python 安裝 OpenCV 模組">Python 安裝 OpenCV 模組</a><br><a href="/python-pip-install-specific-version/" title="Python pip install 如何安裝指定版本的套件">Python pip install 如何安裝指定版本的套件</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇記錄一下 macOS 使用 pip 安裝 opencv，安裝完後就可以開始用 python 開法 opencv 影像處理程式囉！  &lt;/p&gt;
&lt;p&gt;python pip 安裝 opencv-python 的指令如下，預設是安裝最新版，&lt;br&gt;&lt;figure class=
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
      <category term="macOS" scheme="https://shengyu7697.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ OpenSSL AES encryption/decryption 加密解密範例</title>
    <link href="https://shengyu7697.github.io/cpp-openssl-aes/"/>
    <id>https://shengyu7697.github.io/cpp-openssl-aes/</id>
    <published>2022-03-16T14:00:00.000Z</published>
    <updated>2022-06-04T02:39:32.351Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ OpenSSL AES 256 CBC encryption/decryption 加密解密範例，AES 是典型的對稱式加密演算法，對稱式加密演算法是可逆的，也就是用一個金鑰加密後可以再用同一個金鑰解密回來，而 AES 全名是 Advanced Encryption Standard 是用來取代原先的 DES (Data Encryption Standard) 演算法，AES 是目前主流的加密演算法，常見對稱式加密演算法的應用像是將檔案壓成壓縮時 (zip/7-zip) 如果要設定密碼加密就會使用到。  </p><h2 id="C-C-OpenSSL-AES-256-CBC"><a href="#C-C-OpenSSL-AES-256-CBC" class="headerlink" title="C/C++ OpenSSL AES-256 CBC"></a>C/C++ OpenSSL AES-256 CBC</h2><p>AES 提供了幾種模式，分別為 ECB、CBC、CFB、CTR、OFB 五種模式，這邊介紹 C/C++ OpenSSL AES 256 CBC encryption/decryption 加密解密範例，在 openssl 可以常看到 encrypt 與 decrypt 關鍵字，encrypt 表示加密，decrypt 表示解密，在本範例中我們會使用 <code>AES_cbc_encrypt()</code> 做加密，解密的話則是使用 <code>aes_cbc_decrypt()</code>。  </p><p>AES 的區塊長度固定為 128 bits (16 bytes)，即多輪且每次對 128 bits 明文區塊作加密，而不是一次對整個明文作加密，明文長度不是 128 bits 的整數倍的話，剩餘不足 128 bits 的區塊會用填充 (Padding) 的方式，填充 (Padding) 的方式有好幾種，最簡單就是用零填充 ZeroBytePadding，常用填充方式為 PKCS5Padding 或 PKCS7Padding，需要注意的是加密用哪一種填充方式，解密時也要同用一種填充方式。  </p><p>key 就是加密過程中會用到的金鑰，AES 的 key 金鑰長度則可以是 128、192 或 256 bits，也就是平常大家說的 AES-128、AES-192 或 AES-256，以安全性來說 AES-256 安全性最高。  </p><p>iv 就是初始向量 (Initialization Vector)，在加密過程中，原本相同明文區塊使用相同金鑰加密後的密文會相同，加入 iv 可讓每次的相同明文區塊使用相同金鑰加密後的密文不同，<br>用來防止同樣的內容產生同樣的加密資料，解密時用的 iv 必須跟加密的 iv 內容一樣，長度必須為 16 bytes (128 bits)，在使用 <code>AES_cbc_encrypt()</code> 加密時會修改 iv 的數值，所以在 <code>aes_cbc_decrypt()</code> 解密時務必確認是用相同的 iv。  </p><p>另外 openssl command 還提供了 salt 的選項，salt 就是加鹽的意思，是個隨機產生的資料，在密碼 password 推導成金鑰 key 時可以使用，使用 salt 的話相同的密碼 password 就不會每次都推導成相同的金鑰 key 了。  </p><p>以下的範例是直接設定金鑰 key 與 iv，沒有使用 salt，<br><figure class="highlight cpp"><figcaption><span>cpp-aes-cbc.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/aes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> plain = from_hex_string(<span class="string">"6B"</span>);</span><br><span class="line">    <span class="keyword">auto</span> key = from_hex_string(<span class="string">"2B7E151628AED2A6ABF7158809CF4F3C"</span>);</span><br><span class="line">    <span class="keyword">auto</span> iv = from_hex_string(<span class="string">"000102030405060708090A0B0C0D0E0F"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> cipher = aes_128_cbc_encrypt(plain, key, iv);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"plain  : "</span> &lt;&lt; to_hex_string(plain) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"cipher : "</span> &lt;&lt; to_hex_string(cipher) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"iv     : "</span> &lt;&lt; to_hex_string(iv) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> decrypt_text = aes_128_cbc_decrypt(cipher, key, iv);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"decrypt: "</span> &lt;&lt; to_hex_string(decrypt_text) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>加密的函式，<br><figure class="highlight cpp"><figcaption><span>cpp-aes-cbc.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; aes_128_cbc_encrypt(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; &amp;plain,</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; &amp;key,</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; &amp;iv) &#123;</span><br><span class="line">    </span><br><span class="line">    AES_KEY aes_enc_ctx;</span><br><span class="line">    AES_set_encrypt_key(key.data(), <span class="number">128</span>, &amp;aes_enc_ctx);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; cipher(<span class="number">16</span>);</span><br><span class="line">    AES_cbc_encrypt(plain.data(), cipher.data(), <span class="number">1</span>, &amp;aes_enc_ctx, iv.data(), AES_ENCRYPT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cipher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解密的函式，<br><figure class="highlight cpp"><figcaption><span>cpp-aes-cbc.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; aes_128_cbc_decrypt(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; &amp;cipher,</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; &amp;key,</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; &amp;iv) &#123;</span><br><span class="line"></span><br><span class="line">    AES_KEY aes_dec_ctx;</span><br><span class="line">    AES_set_decrypt_key(key.data(), <span class="number">128</span>, &amp;aes_dec_ctx);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; decrypt_text(<span class="number">16</span>);</span><br><span class="line">    AES_cbc_encrypt(cipher.data(), decrypt_text.data(), <span class="number">16</span>, &amp;aes_dec_ctx, iv.data(), AES_DECRYPT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decrypt_text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plain  : 6B</span><br><span class="line">cipher : F05F94CA1B1459C236C2C35A4BCA72ED</span><br><span class="line">iv     : F05F94CA1B1459C236C2C35A4BCA72ED</span><br><span class="line">decrypt: 9B5E96C91F115FC53ECBC95147C77CE2</span><br></pre></td></tr></table></figure></p><p>後來 openssl 還有推出了 EVP 的 API，EVP 的 API 提供了所有對稱式加密演算法的統一介面，對開發者來說就可以很輕易的就換成其他演算法，關於 EVP API 的討論可以看看<a href="https://stackoverflow.com/questions/10366950/openssl-using-evp-vs-algorithm-api-for-symmetric-crypto" target="_blank" rel="noopener">這篇</a>，下一篇就介紹怎麼用 EVP API 來寫 AES-256 CBC。  </p><h2 id="C-C-OpenSSL-AES-256-CBC-使用-EVP-API"><a href="#C-C-OpenSSL-AES-256-CBC-使用-EVP-API" class="headerlink" title="C/C++ OpenSSL AES-256 CBC 使用 EVP API"></a>C/C++ OpenSSL AES-256 CBC 使用 EVP API</h2><p>C++ class that interfaces to OpenSSL ciphers – Joe’s Blog<br><a href="https://joelinoff.com/blog/?p=664" target="_blank" rel="noopener">https://joelinoff.com/blog/?p=664</a><br><a href="https://github.com/jlinoff/openssl-aes-cipher" target="_blank" rel="noopener">https://github.com/jlinoff/openssl-aes-cipher</a><br>這個人寫了一個 C++ Cipher class for OpenSSL AES-256-CBC，</p><p>其他參考<br>進階加密標準 - 維基百科，自由的百科全書<br><a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86</a><br>高級加密標准AES的工作模式（ECB、CBC、CFB、OFB）_天天向上99的博客-CSDN博客_aes cfb<br><a href="https://blog.csdn.net/charleslei/article/details/48710293" target="_blank" rel="noopener">https://blog.csdn.net/charleslei/article/details/48710293</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzI1MTIzMzI2MA==&amp;mid=2650561454&amp;idx=1&amp;sn=dd91cdd8f3853fe07e1f2d02f4f126a9&amp;chksm=f1feed2dc689643bc143bc9462cc36315843a96e1babe372216375808148c43258278723749a&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">漫画：什么是 AES 算法？</a><br><a href="https://mp.weixin.qq.com/s/zayzFr1h5HIIcWq9xGefkQ?" target="_blank" rel="noopener">漫画：AES 算法的底层原理</a>  </p><p>填充模式<br>Day 22. 加密演算法要注意的那些毛 (二) - 填充模式 - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天<br><a href="https://ithelp.ithome.com.tw/articles/10250386" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10250386</a><br>(瞭解 PKCS#5 的 PKCS#7 的差別)  </p><p>Salt and IV 的差異<br>encryption - Passphrase, Salt and IV, do I need all of these? - Stack Overflow<br><a href="https://stackoverflow.com/questions/1905112/passphrase-salt-and-iv-do-i-need-all-of-these" target="_blank" rel="noopener">https://stackoverflow.com/questions/1905112/passphrase-salt-and-iv-do-i-need-all-of-these</a><br>encryption - Why would you need a salt for AES-CBS when IV is already randomly generated and stored with the encrypted data? - Information Security Stack Exchange<br><a href="https://security.stackexchange.com/questions/48000/why-would-you-need-a-salt-for-aes-cbs-when-iv-is-already-randomly-generated-and" target="_blank" rel="noopener">https://security.stackexchange.com/questions/48000/why-would-you-need-a-salt-for-aes-cbs-when-iv-is-already-randomly-generated-and</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/openssl-aes-encryption/" title="OpenSSL AES encryption 對稱式加密指令用法與範例">OpenSSL AES encryption 對稱式加密指令用法與範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ OpenSSL AES 256 CBC encryption/decryption 加密解密範例，AES 是典型的對稱式加密演算法，對稱式加密演算法是可逆的，也就是用一個金鑰加密後可以再用同一個金鑰解密回來，而 AES 全名是 Adv
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
      <category term="openssl" scheme="https://shengyu7697.github.io/tags/openssl/"/>
    
  </entry>
  
  <entry>
    <title>OpenSSL AES encryption 對稱式加密指令用法與範例</title>
    <link href="https://shengyu7697.github.io/openssl-aes-encryption/"/>
    <id>https://shengyu7697.github.io/openssl-aes-encryption/</id>
    <published>2022-03-15T14:00:00.000Z</published>
    <updated>2022-06-04T02:39:32.351Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 OpenSSL AES encryption and decryption 對稱式加密解密指令用法與範例，AES 是典型的對稱式加密演算法，對稱式加密演算法是可逆的，也就是用一個金鑰加密後可以再用同一個金鑰解密回來，而 AES 全名是 Advanced Encryption Standard 是用來取代原先的 DES (Data Encryption Standard) 演算法，AES 是目前主流的加密演算法，常見對稱式加密演算法的應用像是將檔案壓成壓縮時 (zip/7-zip) 如果要設定密碼加密就會使用到。  </p><p>以下 OpenSSL AES 加密解密的指令用法介紹將分為這幾部份，  </p><ul><li>檢查 OpenSSL 版本  </li><li>OpenSSL AES encryption 加密/解密檔案  </li><li>OpenSSL AES encryption 加密/解密文字  </li></ul><p>那我們開始吧！  </p><h2 id="檢查-OpenSSL-版本"><a href="#檢查-OpenSSL-版本" class="headerlink" title="檢查 OpenSSL 版本"></a>檢查 OpenSSL 版本</h2><p>在使用 OpenSSL 之前，要先檢查確認 OpenSSL 版本，輸入 <code>openssl version</code> 指令可以顯示 OpenSSL 的版本，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ openssl version</span><br><span class="line">OpenSSL 1.1.1n  15 Mar 2022</span><br></pre></td></tr></table></figure></p><p>目前來說是比較建議使用 OpenSSL 1.1.1 之後的版本，之前的版本有一些安全性 bug 不建議使用，建議要裝有 -pbkdf2 選項的 OpenSSL 版本。<br>有些平台會使用 <a href="https://zh.wikipedia.org/wiki/LibreSSL" target="_blank" rel="noopener">LibreSSL</a>，LibreSSL 是從 OpenSSL 1.0.1g 分支出來的，那麼可能有些選項跟 openssl 不一樣。  </p><h2 id="OpenSSL-AES-encryption-加密-解密檔案"><a href="#OpenSSL-AES-encryption-加密-解密檔案" class="headerlink" title="OpenSSL AES encryption 加密/解密檔案"></a>OpenSSL AES encryption 加密/解密檔案</h2><p>這邊介紹 OpenSSL AES-256 encryption 加密與解密檔案指令的用法，使用 <code>openssl list-cipher-commands</code> 選項可以列出有哪些加密模式可以選擇，在本範例我們使用 aes-256-cbc 選項，AES-256 表示 key 金鑰長度使用 256 bits，目前有 128、192 或 256 bits 可以選擇，而其中以 AES-256 安全性最高，CBC 是 AES 的其中一種模式，</p><p>openssl 對稱式加密有兩種使用方式，一種是直接指定要用的加密演算法，例如直接指定 AES-256 CBC：<code>openssl aes-256-cbc</code> ，另外一種是使用 enc 的方式，在 <code>openssl enc</code> 後面參數再指定要使用的加密演算法，例如：<code>openssl enc -aes-256-cbc</code>，enc 是將 openssl 提供多個對稱式加密演算法集成到一個指令中，而且 enc 可以指定對稱式加密演算法指令沒有提供的選項，所以建議使用 <code>openssl enc</code> 這種方式，openssl AES 解密檔案指令如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ openssl enc -aes-256-cbc -pbkdf2 -<span class="keyword">in</span> plain.txt -out encrypted.txt</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ openssl aes-256-cbc -pbkdf2 -<span class="keyword">in</span> plain.txt -out encrypted.txt</span><br></pre></td></tr></table></figure></p><p><code>openssl enc -aes-256-cbc</code> 常見選項有：<br>-in: 輸入檔案<br>-out: 輸出檔案<br>-e: 加密(預設)<br>-d: 解密<br>-a: 文字格式輸出，base64<br>-md: Openssl 1.1.0 才從 md5 改為 sha-256，目前 sha-256 為預設<br>-pass pass:<password>: 指定加密/解密密碼，否則會顯示提示訊息讓你輸入密碼<br>-salt: 加鹽(預設)，用於 password 推導成 key 的過程中<br>-nosalt: 不加鹽，除非測試才時使用<br>-S salt: 指定鹽<br>-p: 印出 salt, key and IV<br>-P: 印出 salt, key and IV 且立即結束程式，不做任何加解密<br>-pbkdf2: Openssl 1.1.1 才有，建議使用此選項<br>-iter: password 推導成 key 的迭代次數<br>-z: 在加密前壓縮，使用zlib，前提是這個openssl在編譯時有加入zlib選項。  </password></p><p>執行後會要你輸入 password，並且重新輸入 password 一次確認，之後就會進行加密，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ openssl enc -aes-256-cbc -pbkdf2 -<span class="keyword">in</span> plain.txt -out encrypted.txt</span><br><span class="line">enter aes-256-cbc encryption password:</span><br><span class="line">Verifying - enter aes-256-cbc encryption password:</span><br></pre></td></tr></table></figure></p><p>openssl AES 解密檔案的話就使用下列指令，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ openssl enc -aes-256-cbc -pbkdf2 -d -<span class="keyword">in</span> encrypted.txt -out plain.txt</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ openssl aes-256-cbc -pbkdf2 -d -<span class="keyword">in</span> encrypted.txt -out plain.txt</span><br></pre></td></tr></table></figure></p><h2 id="OpenSSL-AES-encryption-加密-解密文字"><a href="#OpenSSL-AES-encryption-加密-解密文字" class="headerlink" title="OpenSSL AES encryption 加密/解密文字"></a>OpenSSL AES encryption 加密/解密文字</h2><p>這邊介紹 OpenSSL AES-256 encryption 加密與解密文字指令的用法，openssl AES 加密文字指令如下，<code>-a</code> 表示以文字格式輸出 (base64格式)，預設不指定 <code>-pass</code> 帶入密碼的話，他會跳出提示訊息讓你輸入密碼，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"Hello World"</span> | openssl aes-256-cbc -pbkdf2 -a</span><br><span class="line">enter aes-256-cbc encryption password:</span><br><span class="line">Verifying - enter aes-256-cbc encryption password:</span><br><span class="line">U2FsdGVkX19X1Q1t2NbuTdc4xjRr21ZGQ0BZ4rYy8qs=</span><br></pre></td></tr></table></figure></p><p>openssl AES 解密文字的話就使用下列指令，加密時有加 <code>-a</code> 選項的話解密也要有 <code>-a</code> 選項，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"U2FsdGVkX19X1Q1t2NbuTdc4xjRr21ZGQ0BZ4rYy8qs="</span> | openssl enc -aes-256-cbc -pbkdf2 -a -d</span><br><span class="line">enter aes-256-cbc decryption password:</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure></p><p>加入 <code>-pass</code> 選項的話可以設定密碼，以下範例密碼為 “shengyutalk”，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"Hello World"</span> | openssl enc -aes-256-cbc -pbkdf2 -a -pass pass:shengyutalk</span><br><span class="line">U2FsdGVkX19M0vfdhjcNiBW0OHrwdQYWMnOUJ6UvOL0=</span><br></pre></td></tr></table></figure></p><p>解密時也可以加入 <code>-pass</code> 參數設定解密密碼，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"U2FsdGVkX19M0vfdhjcNiBW0OHrwdQYWMnOUJ6UvOL0="</span> | openssl enc -aes-256-cbc -pbkdf2 -a -d -pass pass:shengyutalk</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure></p><p>以上就是 OpenSSL AES encryption 對稱式加密指令用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p>其他參考<br><a href="https://www.openssl.org/docs/man1.0.2/man1/openssl-enc.html" target="_blank" rel="noopener">openssl-enc man 1.0.2</a><br><a href="https://www.openssl.org/docs/man1.1.1/man1/openssl-enc.html" target="_blank" rel="noopener">openssl-enc man 1.1.1</a><br><a href="https://www.openssl.org/docs/man3.0/man1/openssl-enc.html" target="_blank" rel="noopener">openssl-enc man 3.0</a><br>encryption - How to use OpenSSL to encrypt/decrypt files? - Stack Overflow<br><a href="https://stackoverflow.com/questions/16056135/how-to-use-openssl-to-encrypt-decrypt-files" target="_blank" rel="noopener">https://stackoverflow.com/questions/16056135/how-to-use-openssl-to-encrypt-decrypt-files</a><br>encryption - OpenSSL 1.1.1b warning: Using -iter or -pbkdf2 would be better while decrypting a file encrypted using OpenSSL 1.1.0g - Unix &amp; Linux Stack Exchange<br><a href="https://unix.stackexchange.com/questions/507131/openssl-1-1-1b-warning-using-iter-or-pbkdf2-would-be-better-while-decrypting" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/507131/openssl-1-1-1b-warning-using-iter-or-pbkdf2-would-be-better-while-decrypting</a><br>(討論 OpenSSL 1.1.1 之前舊版本的 bug，建議要裝有 -pbkdf2 選項的 OpenSSL 版本。)<br>OpenSSL 對稱式、非對稱式加密檔案指令教學與範例<br><a href="https://officeguide.cc/linux-openssl-file-symmetic-asymmetric-encryption-commands-tutorial-examples/" target="_blank" rel="noopener">https://officeguide.cc/linux-openssl-file-symmetic-asymmetric-encryption-commands-tutorial-examples/</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/cpp-openssl-aes/" title="C/C++ OpenSSL AES encryption/decryption 加密解密範例">C/C++ OpenSSL AES encryption/decryption 加密解密範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 OpenSSL AES encryption and decryption 對稱式加密解密指令用法與範例，AES 是典型的對稱式加密演算法，對稱式加密演算法是可逆的，也就是用一個金鑰加密後可以再用同一個金鑰解密回來，而 AES 全名是 Advan
      
    
    </summary>
    
    
      <category term="openssl" scheme="https://shengyu7697.github.io/tags/openssl/"/>
    
  </entry>
  
  <entry>
    <title>Android adb shell input 事件用法</title>
    <link href="https://shengyu7697.github.io/android-adb-shell-input/"/>
    <id>https://shengyu7697.github.io/android-adb-shell-input/</id>
    <published>2022-03-14T14:00:00.000Z</published>
    <updated>2022-05-12T14:37:54.376Z</updated>
    
    <content type="html"><![CDATA[<p>本篇教學介紹如何在 Android 下使用 adb shell input 指令，adb shell input 最常用到 keyevent，可以很方便地模擬按鍵輸入，讓開發除錯或自動化測試上變得方便許多。  </p><p>以下 adb shell input 內容大概分為這幾部分，  </p><ul><li>adb shell input keyevent 模擬按鍵  </li><li>adb shell input keyevent 常用的 keycode 值  </li><li>adb shell input keyevent 完整的 keycode 值  </li><li>adb shell input text 模擬輸入文字  </li><li>adb shell input tap 模擬觸控螢幕  </li><li>adb shell input swipe 模擬滑動螢幕  </li></ul><p>adb 指令的安裝方式可以參考<a href="/android-adb/" title="這篇">這篇</a>。<br>那我們開始吧！  </p><h2 id="adb-shell-input-keyevent-模擬按鍵"><a href="#adb-shell-input-keyevent-模擬按鍵" class="headerlink" title="adb shell input keyevent 模擬按鍵"></a>adb shell input keyevent 模擬按鍵</h2><p>如果要模擬 <code>A</code> 按鍵你可以下這 adb 指令， <code>B</code> 按鍵碼則是 30<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 29</span><br><span class="line">或者</span><br><span class="line">adb shell input keyevent KEYCODE_A</span><br></pre></td></tr></table></figure></p><p>如果要模擬按下 HOME 你可以下這 adb 指令，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 3</span><br><span class="line">或者</span><br><span class="line">adb shell input keyevent KEYCODE_HOME</span><br></pre></td></tr></table></figure></p><p>如果要模擬按下音量鍵變大聲，你可以下這 adb 指令，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">adb shell input keyevent 24</span><br><span class="line">或者</span><br><span class="line">adb shell input keyevent KEYCODE_VOLUME_UP</span><br></pre></td></tr></table></figure></p><h2 id="adb-shell-input-keyevent-常用的-keycode-值"><a href="#adb-shell-input-keyevent-常用的-keycode-值" class="headerlink" title="adb shell input keyevent 常用的 keycode 值"></a>adb shell input keyevent 常用的 keycode 值</h2><p>這邊整理 input keyevent 常用的 keycode 值，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">3  -&gt; // Home 回到主畫面</span><br><span class="line">4  -&gt; // Back 返回</span><br><span class="line">19 -&gt; // Up 上</span><br><span class="line">20 -&gt; // Down 下</span><br><span class="line">21 -&gt; // Left 左</span><br><span class="line">22 -&gt; // Right 右</span><br><span class="line">23 -&gt; // Select/Ok 確定選取</span><br><span class="line">24 -&gt; // Volume Up 音量上</span><br><span class="line">25 -&gt; // Volume Down 音量下</span><br><span class="line">82 -&gt; // Menu 選單</span><br></pre></td></tr></table></figure></p><h2 id="adb-shell-input-keyevent-完整的-keycode-值"><a href="#adb-shell-input-keyevent-完整的-keycode-值" class="headerlink" title="adb shell input keyevent 完整的 keycode 值"></a>adb shell input keyevent 完整的 keycode 值</h2><p>這邊列出所有的 keyevent 跟對應的 key code，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">0  -&gt; &quot;KEYCODE_UNKNOWN&quot;</span><br><span class="line">1  -&gt; &quot;KEYCODE_MENU&quot;</span><br><span class="line">2  -&gt; &quot;KEYCODE_SOFT_RIGHT&quot;</span><br><span class="line">3  -&gt; &quot;KEYCODE_HOME&quot; // 回到主畫面</span><br><span class="line">4  -&gt; &quot;KEYCODE_BACK&quot; // 返回</span><br><span class="line">5  -&gt; &quot;KEYCODE_CALL&quot; // 打電話介面</span><br><span class="line">6  -&gt; &quot;KEYCODE_ENDCALL&quot; // 關閉螢幕</span><br><span class="line">7  -&gt; &quot;KEYCODE_0&quot;</span><br><span class="line">8  -&gt; &quot;KEYCODE_1&quot;</span><br><span class="line">9  -&gt; &quot;KEYCODE_2&quot;</span><br><span class="line">10 -&gt; &quot;KEYCODE_3&quot;</span><br><span class="line">11 -&gt; &quot;KEYCODE_4&quot;</span><br><span class="line">12 -&gt; &quot;KEYCODE_5&quot;</span><br><span class="line">13 -&gt; &quot;KEYCODE_6&quot;</span><br><span class="line">14 -&gt; &quot;KEYCODE_7&quot;</span><br><span class="line">15 -&gt; &quot;KEYCODE_8&quot;</span><br><span class="line">16 -&gt; &quot;KEYCODE_9&quot;</span><br><span class="line">17 -&gt; &quot;KEYCODE_STAR&quot;</span><br><span class="line">18 -&gt; &quot;KEYCODE_POUND&quot;</span><br><span class="line">19 -&gt; &quot;KEYCODE_DPAD_UP&quot; // 上</span><br><span class="line">20 -&gt; &quot;KEYCODE_DPAD_DOWN&quot; // 下</span><br><span class="line">21 -&gt; &quot;KEYCODE_DPAD_LEFT&quot; // 左</span><br><span class="line">22 -&gt; &quot;KEYCODE_DPAD_RIGHT&quot;  // 右</span><br><span class="line">23 -&gt; &quot;KEYCODE_DPAD_CENTER&quot; // 確定選取</span><br><span class="line">24 -&gt; &quot;KEYCODE_VOLUME_UP&quot; // 音量上</span><br><span class="line">25 -&gt; &quot;KEYCODE_VOLUME_DOWN&quot; // 音量下</span><br><span class="line">26 -&gt; &quot;KEYCODE_POWER&quot; // 電源鍵</span><br><span class="line">27 -&gt; &quot;KEYCODE_CAMERA&quot; // 拍照鍵</span><br><span class="line">28 -&gt; &quot;KEYCODE_CLEAR&quot;</span><br><span class="line">29 -&gt; &quot;KEYCODE_A&quot;</span><br><span class="line">30 -&gt; &quot;KEYCODE_B&quot;</span><br><span class="line">31 -&gt; &quot;KEYCODE_C&quot;</span><br><span class="line">32 -&gt; &quot;KEYCODE_D&quot;</span><br><span class="line">33 -&gt; &quot;KEYCODE_E&quot;</span><br><span class="line">34 -&gt; &quot;KEYCODE_F&quot;</span><br><span class="line">35 -&gt; &quot;KEYCODE_G&quot;</span><br><span class="line">36 -&gt; &quot;KEYCODE_H&quot;</span><br><span class="line">37 -&gt; &quot;KEYCODE_I&quot;</span><br><span class="line">38 -&gt; &quot;KEYCODE_J&quot;</span><br><span class="line">39 -&gt; &quot;KEYCODE_K&quot;</span><br><span class="line">40 -&gt; &quot;KEYCODE_L&quot;</span><br><span class="line">41 -&gt; &quot;KEYCODE_M&quot;</span><br><span class="line">42 -&gt; &quot;KEYCODE_N&quot;</span><br><span class="line">43 -&gt; &quot;KEYCODE_O&quot;</span><br><span class="line">44 -&gt; &quot;KEYCODE_P&quot;</span><br><span class="line">45 -&gt; &quot;KEYCODE_Q&quot;</span><br><span class="line">46 -&gt; &quot;KEYCODE_R&quot;</span><br><span class="line">47 -&gt; &quot;KEYCODE_S&quot;</span><br><span class="line">48 -&gt; &quot;KEYCODE_T&quot;</span><br><span class="line">49 -&gt; &quot;KEYCODE_U&quot;</span><br><span class="line">50 -&gt; &quot;KEYCODE_V&quot;</span><br><span class="line">51 -&gt; &quot;KEYCODE_W&quot;</span><br><span class="line">52 -&gt; &quot;KEYCODE_X&quot;</span><br><span class="line">53 -&gt; &quot;KEYCODE_Y&quot;</span><br><span class="line">54 -&gt; &quot;KEYCODE_Z&quot;</span><br><span class="line">55 -&gt; &quot;KEYCODE_COMMA&quot;</span><br><span class="line">56 -&gt; &quot;KEYCODE_PERIOD&quot;</span><br><span class="line">57 -&gt; &quot;KEYCODE_ALT_LEFT&quot;</span><br><span class="line">58 -&gt; &quot;KEYCODE_ALT_RIGHT&quot;</span><br><span class="line">59 -&gt; &quot;KEYCODE_SHIFT_LEFT&quot;</span><br><span class="line">60 -&gt; &quot;KEYCODE_SHIFT_RIGHT&quot;</span><br><span class="line">61 -&gt; &quot;KEYCODE_TAB&quot;</span><br><span class="line">62 -&gt; &quot;KEYCODE_SPACE&quot;</span><br><span class="line">63 -&gt; &quot;KEYCODE_SYM&quot;</span><br><span class="line">64 -&gt; &quot;KEYCODE_EXPLORER&quot;</span><br><span class="line">65 -&gt; &quot;KEYCODE_ENVELOPE&quot;</span><br><span class="line">66 -&gt; &quot;KEYCODE_ENTER&quot;</span><br><span class="line">67 -&gt; &quot;KEYCODE_DEL&quot;</span><br><span class="line">68 -&gt; &quot;KEYCODE_GRAVE&quot;</span><br><span class="line">69 -&gt; &quot;KEYCODE_MINUS&quot;</span><br><span class="line">70 -&gt; &quot;KEYCODE_EQUALS&quot;</span><br><span class="line">71 -&gt; &quot;KEYCODE_LEFT_BRACKET&quot;</span><br><span class="line">72 -&gt; &quot;KEYCODE_RIGHT_BRACKET&quot;</span><br><span class="line">73 -&gt; &quot;KEYCODE_BACKSLASH&quot;</span><br><span class="line">74 -&gt; &quot;KEYCODE_SEMICOLON&quot;</span><br><span class="line">75 -&gt; &quot;KEYCODE_APOSTROPHE&quot;</span><br><span class="line">76 -&gt; &quot;KEYCODE_SLASH&quot;</span><br><span class="line">77 -&gt; &quot;KEYCODE_AT&quot;</span><br><span class="line">78 -&gt; &quot;KEYCODE_NUM&quot;</span><br><span class="line">79 -&gt; &quot;KEYCODE_HEADSETHOOK&quot;</span><br><span class="line">80 -&gt; &quot;KEYCODE_FOCUS&quot; // 拍照對焦鍵</span><br><span class="line">81 -&gt; &quot;KEYCODE_PLUS&quot;</span><br><span class="line">82 -&gt; &quot;KEYCODE_MENU&quot; // 解鎖滑屏/Menu 選單</span><br><span class="line">83 -&gt; &quot;KEYCODE_NOTIFICATION&quot; // 通知鍵</span><br><span class="line">84 -&gt; &quot;KEYCODE_SEARCH&quot; // 搜尋鍵</span><br><span class="line">85 -&gt; &quot;KEYCODE_MEDIA_PLAY_PAUSE&quot; 多媒體鍵 播放/暫停</span><br><span class="line">86 -&gt; &quot;KEYCODE_MEDIA_STOP&quot; // 多媒體鍵 停止</span><br><span class="line">87 -&gt; &quot;KEYCODE_MEDIA_NEXT&quot; // 多媒體鍵 下一首</span><br><span class="line">88 -&gt; &quot;KEYCODE_MEDIA_PREVIOUS&quot; // 多媒體鍵 上一首</span><br><span class="line">89 -&gt; &quot;KEYCODE_MEDIA_REWIND&quot; // 多媒體鍵 快退</span><br><span class="line">90 -&gt; &quot;KEYCODE_MEDIA_FAST_FORWARD&quot; // 多媒體鍵 快進</span><br><span class="line">91 -&gt; &quot;KEYCODE_MUTE&quot; // 靜音</span><br><span class="line">92 -&gt; &quot;KEYCODE_PAGE_UP&quot;</span><br><span class="line">93 -&gt; &quot;KEYCODE_PAGE_DOWN&quot;</span><br><span class="line">94 -&gt; &quot;KEYCODE_PICTSYMBOLS&quot;</span><br><span class="line">...</span><br><span class="line">122 -&gt; &quot;KEYCODE_MOVE_HOME&quot;</span><br><span class="line">123 -&gt; &quot;KEYCODE_MOVE_END&quot;</span><br><span class="line">126 -&gt; &quot;KEYCODE_MEDIA_PLAY&quot; // 多媒體鍵 播放</span><br><span class="line">127 -&gt; &quot;KEYCODE_MEDIA_PAUSE&quot; // 多媒體鍵 暫停</span><br><span class="line">...</span><br><span class="line">187 -&gt; &quot;KEYCODE_APP_SWITCH&quot; // 所有任務視窗</span><br></pre></td></tr></table></figure></p><p>更完整的列表可以查詢 <a href="https://developer.android.com/reference/android/view/KeyEvent.html" target="_blank" rel="noopener">android 開發者網站的 KeyEvent</a>  </p><h2 id="adb-shell-input-text-模擬輸入文字"><a href="#adb-shell-input-text-模擬輸入文字" class="headerlink" title="adb shell input text 模擬輸入文字"></a>adb shell input text 模擬輸入文字</h2><p>這邊介紹 adb shell input text 模擬輸入文字，如果要模擬輸入 <code>android</code> 字串的話，可以下這 adb 指令，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input text &quot;android&quot;</span><br></pre></td></tr></table></figure></p><h2 id="adb-shell-input-tap-模擬觸控螢幕"><a href="#adb-shell-input-tap-模擬觸控螢幕" class="headerlink" title="adb shell input tap 模擬觸控螢幕"></a>adb shell input tap 模擬觸控螢幕</h2><p>這邊介紹 adb shell input tap 模擬觸控螢幕，例如模擬觸控點擊(600,800)位置，其中X座標是600，Y座標是800，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input tap 600 800</span><br></pre></td></tr></table></figure></p><h2 id="adb-shell-input-swipe-模擬滑動螢幕"><a href="#adb-shell-input-swipe-模擬滑動螢幕" class="headerlink" title="adb shell input swipe 模擬滑動螢幕"></a>adb shell input swipe 模擬滑動螢幕</h2><p>這邊介紹 adb shell input swipe 模擬滑動螢幕，例如模擬在螢幕上從(600,800)向左滑動到(300,800)，就會看到畫面右滑動，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input swipe 600 800 300 800</span><br></pre></td></tr></table></figure></p><p>完整的用法為 <code>input swipe &lt;x1&gt; &lt;y1&gt; &lt;x2&gt; &lt;y2&gt; [duration(ms)]</code>。<br>要模擬長按的話，在最後多加一個參數，例如 250 表示長按 250 ms。  </p><p>其他參考<br>android - ADB Shell Input Events - Stack Overflow<br><a href="https://stackoverflow.com/questions/7789826/adb-shell-input-events" target="_blank" rel="noopener">https://stackoverflow.com/questions/7789826/adb-shell-input-events</a><br>[android-developers] Re: correct usage of “adb shell input”<br><a href="https://www.mail-archive.com/android-developers@googlegroups.com/msg14587.html" target="_blank" rel="noopener">https://www.mail-archive.com/android-developers@googlegroups.com/msg14587.html</a><br>adb shell 命令整理 | IT人<br><a href="https://iter01.com/476261.html" target="_blank" rel="noopener">https://iter01.com/476261.html</a><br>adb shell input keyevent 控制按鍵輸入的數值<br><a href="https://www.796t.com/content/1549161557.html" target="_blank" rel="noopener">https://www.796t.com/content/1549161557.html</a>  </p><h2 id="其他技巧推薦"><a href="#其他技巧推薦" class="headerlink" title="其他技巧推薦"></a>其他技巧推薦</h2><p>如果你是常常在Android adb shell下做事情的話，尤其是需要使用到vi，建議安裝<a href="/android-install-busybox/" title="busybox">busybox</a>，使用<a href="/android-install-busybox/" title="busybox附帶的vi">busybox附帶的vi</a>會方便很多，<br>如果還想知道busybox支援哪些指令或busybox基本用法的話請看<a href="/busybox/" title="這篇">這篇</a>。<br>其他的 Android 系列文章可以看<a href="/android-tutorial/" title="這篇">這篇</a>。  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇教學介紹如何在 Android 下使用 adb shell input 指令，adb shell input 最常用到 keyevent，可以很方便地模擬按鍵輸入，讓開發除錯或自動化測試上變得方便許多。  &lt;/p&gt;
&lt;p&gt;以下 adb shell input 內容大概分
      
    
    </summary>
    
    
      <category term="Android" scheme="https://shengyu7697.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Python pip install 如何安裝指定版本的套件</title>
    <link href="https://shengyu7697.github.io/python-pip-install-specific-version/"/>
    <id>https://shengyu7697.github.io/python-pip-install-specific-version/</id>
    <published>2022-03-10T14:00:00.000Z</published>
    <updated>2022-05-21T02:27:24.906Z</updated>
    
    <content type="html"><![CDATA[<p>本篇紀錄 Python 如何使用 pip install 安裝指定版本的套件，pip 安裝套件的話預設它會幫你裝到最新版本，<br>如果使用 pip 安裝該套件最新的版本連帶很多相依套件都要裝到最新的話出了問題，<br>最後只想裝某個指定的版本怎麼辦？  </p><p>pip install 指定版本用法如下：<br><code>pip install [套件名稱]==[版號]</code>  </p><p>例如：pip 安裝 opencv 套件的 3.4.9.33 的版本的話就是這樣使用，<br><code>pip install opencv-python==3.4.9.33</code>  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 Python 相關技術，可以參考看看下面的文章，<br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a><br><a href="/python-install-opencv/" title="Python 安裝 OpenCV 模組">Python 安裝 OpenCV 模組</a><br><a href="/mac-pip-install-opencv/" title="macOS 使用 pip 安裝 opencv">macOS 使用 pip 安裝 opencv</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇紀錄 Python 如何使用 pip install 安裝指定版本的套件，pip 安裝套件的話預設它會幫你裝到最新版本，&lt;br&gt;如果使用 pip 安裝該套件最新的版本連帶很多相依套件都要裝到最新的話出了問題，&lt;br&gt;最後只想裝某個指定的版本怎麼辦？  &lt;/p&gt;
&lt;p&gt;p
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ Linux pthread_detach 用法與範例</title>
    <link href="https://shengyu7697.github.io/cpp-pthread_detach/"/>
    <id>https://shengyu7697.github.io/cpp-pthread_detach/</id>
    <published>2022-03-07T14:00:00.000Z</published>
    <updated>2022-03-31T23:57:33.131Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ Linux/Unix 執行緒 <code>pthread_detach()</code> 用法，<code>pthread_detach()</code> 是標示該執行緒為 detach 狀態。一個 detach 執行緒結束時，他的資源會自動釋放歸還給系統，而不需要另一個執行緒使用 join 的方式來結束該執行緒。  </p><h2 id="pthread-detach-基本用法"><a href="#pthread-detach-基本用法" class="headerlink" title="pthread_detach 基本用法"></a>pthread_detach 基本用法</h2><p>以下簡單示範如何使用 <code>pthread_detach()</code>，當一個執行緒變成 detach 狀態時，它就不能使用 pthread_join() 來 join 或者變成 joinable。</p><p>在 main 主程式中用 <code>pthread_create()</code> 建立執行緒後使用 <code>pthread_detach()</code> 將該執行緒變成 detach 狀態，之後即使主程式要結束退出也會等待該執行緒結束才退出，範例如下，<br><figure class="highlight cpp"><figcaption><span>cpp-pthread_detach.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-pthread_detach.cpp -o a.out -pthread</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">foo</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"foo\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)<span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> t1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pthread_create(&amp;t1, <span class="literal">NULL</span>, foo, <span class="literal">NULL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_create\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pthread_detach(t1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"main end\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main end</span><br><span class="line">foo</span><br></pre></td></tr></table></figure></p><p>其它參考<br>pthread_detach(3) - Linux manual page<br><a href="https://man7.org/linux/man-pages/man3/pthread_detach.3.html" target="_blank" rel="noopener">https://man7.org/linux/man-pages/man3/pthread_detach.3.html</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-pthread_join/" title="C/C++ Linux pthread_join 用法與範例">C/C++ Linux pthread_join 用法與範例</a><br><a href="/cpp-sched_setaffinity/" title="C/C++ Linux/Unix 讓執行緒跑在指定 CPU 的方法 sched_setaffinity">C/C++ Linux/Unix 讓執行緒跑在指定 CPU 的方法 sched_setaffinity</a><br><a href="/cpp-pthread/" title="C/C++ Linux/Unix pthread 建立多執行緒用法與範例">C/C++ Linux/Unix pthread 建立多執行緒用法與範例</a><br><a href="/std-thread/" title="C++ std::thread 建立多執行緒用法與範例">C++ std::thread 建立多執行緒用法與範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ Linux/Unix 執行緒 &lt;code&gt;pthread_detach()&lt;/code&gt; 用法，&lt;code&gt;pthread_detach()&lt;/code&gt; 是標示該執行緒為 detach 狀態。一個 detach 執行緒結束時，他的資
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ Linux pthread_exit 用法與範例</title>
    <link href="https://shengyu7697.github.io/cpp-pthread_exit/"/>
    <id>https://shengyu7697.github.io/cpp-pthread_exit/</id>
    <published>2022-03-03T14:00:00.000Z</published>
    <updated>2022-03-30T23:58:35.060Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ Linux/Unix 執行緒 <code>pthread_exit()</code> 用法，<code>pthread_exit()</code> 是用來結束該執行緒並頭透過 pthread_exit 的 retval 參數來回傳值，該回傳值可被 pthread_join 取得到。</p><h2 id="pthread-exit-基本用法"><a href="#pthread-exit-基本用法" class="headerlink" title="pthread_exit 基本用法"></a>pthread_exit 基本用法</h2><p>以下簡單示範如何使用 <code>pthread_exit()</code>，在 foo 函式裡用 <code>pthread_exit()</code> 並回傳 <code>hello</code> 字串，接著在 main 主程式中用 <code>pthread_join()</code> 接收到這個回傳值並且印出來，<br><figure class="highlight cpp"><figcaption><span>cpp-pthread_exit.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-pthread_exit.cpp -o a.out -pthread</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">foo</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"foo\n"</span>);</span><br><span class="line"></span><br><span class="line">    pthread_exit((<span class="keyword">void</span> *)<span class="string">"hello"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> t1;</span><br><span class="line">    <span class="keyword">void</span> *retval;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pthread_create(&amp;t1, <span class="literal">NULL</span>, foo, <span class="literal">NULL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_create\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pthread_join(t1, &amp;retval) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_join\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (retval != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"retval: %s\n"</span>, retval);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="pthread-exit-使用情境"><a href="#pthread-exit-使用情境" class="headerlink" title="pthread_exit 使用情境"></a>pthread_exit 使用情境</h2><p>另一個使用情境，有時 main 主程式已經執行完畢並結束，那麼建立出來的執行緒就終止了，如下範例，<br><figure class="highlight c++"><figcaption><span>cpp-pthread_exit2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-pthread_exit2.cpp -o a.out -pthread</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">foo</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"foo ++\n"</span>);</span><br><span class="line">    sleep(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"foo --\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"main ++\n"</span>);</span><br><span class="line">    <span class="keyword">pthread_t</span> t1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pthread_create(&amp;t1, <span class="literal">NULL</span>, foo, <span class="literal">NULL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_create\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"main --\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main ++</span><br><span class="line">main --</span><br></pre></td></tr></table></figure></p><p>如果要讓建立出來的執行緒不被 main 主程式的結束退出影響的話可以在主程式結束時呼叫 <code>pthread_exit()</code>，會等到所以所有執行緒結束後 main 才會退出，如下範例，<br><figure class="highlight c++"><figcaption><span>cpp-pthread_exit3.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-pthread_exit3.cpp -o a.out -pthread</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">foo</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"foo ++\n"</span>);</span><br><span class="line">    sleep(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"foo --\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"main ++\n"</span>);</span><br><span class="line">    <span class="keyword">pthread_t</span> t1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pthread_create(&amp;t1, <span class="literal">NULL</span>, foo, <span class="literal">NULL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_create\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"pthread_exit\n"</span>);</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"main --\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而使用 pthread_exit 自然不會執行到後面的 <code>printf(&quot;main --\n&quot;);</code> 與 <code>return 0</code>，輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">main ++</span><br><span class="line">pthread_exit</span><br><span class="line">foo ++</span><br><span class="line">foo --</span><br></pre></td></tr></table></figure></p><p>其它參考<br>pthread_exit(3) - Linux manual page<br><a href="https://man7.org/linux/man-pages/man3/pthread_exit.3.html" target="_blank" rel="noopener">https://man7.org/linux/man-pages/man3/pthread_exit.3.html</a><br>pthread_exit()函數：終止線程<br><a href="http://c.biancheng.net/view/8608.html" target="_blank" rel="noopener">http://c.biancheng.net/view/8608.html</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-pthread_join/" title="C/C++ Linux pthread_join 用法與範例">C/C++ Linux pthread_join 用法與範例</a><br><a href="/cpp-sched_setaffinity/" title="C/C++ Linux/Unix 讓執行緒跑在指定 CPU 的方法 sched_setaffinity">C/C++ Linux/Unix 讓執行緒跑在指定 CPU 的方法 sched_setaffinity</a><br><a href="/cpp-pthread/" title="C/C++ Linux/Unix pthread 建立多執行緒用法與範例">C/C++ Linux/Unix pthread 建立多執行緒用法與範例</a><br><a href="/std-thread/" title="C++ std::thread 建立多執行緒用法與範例">C++ std::thread 建立多執行緒用法與範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ Linux/Unix 執行緒 &lt;code&gt;pthread_exit()&lt;/code&gt; 用法，&lt;code&gt;pthread_exit()&lt;/code&gt; 是用來結束該執行緒並頭透過 pthread_exit 的 retval 參數來回傳值，
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ Linux pthread_join 用法與範例</title>
    <link href="https://shengyu7697.github.io/cpp-pthread_join/"/>
    <id>https://shengyu7697.github.io/cpp-pthread_join/</id>
    <published>2022-02-28T14:00:00.000Z</published>
    <updated>2022-03-30T23:58:35.059Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ Linux/Unix 執行緒 <code>pthread_join()</code> 用法，<code>pthread_join()</code> 是在當前執行緒等待指定的執行緒執行完畢。</p><h2 id="pthread-join-基本用法"><a href="#pthread-join-基本用法" class="headerlink" title="pthread_join 基本用法"></a>pthread_join 基本用法</h2><p>使用 pthread_join 會在當前執行緒阻塞並等待指定的執行緒執行完畢，如果指定的執行緒已經終止那麼 pthread_join 會立即回傳，指定的執行緒必須是 joinable 的。  </p><p>pthread_join 對於 pthread 很重要，不呼叫 pthread_join 可能會造成建立的執行緒沒有執行完畢的問題，以下簡單示範如何使用 <code>pthread_join()</code>，<br><figure class="highlight cpp"><figcaption><span>cpp-pthread_join.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-pthread_join.cpp -o a.out -pthread</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">foo</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"foo\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> t1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pthread_create(&amp;t1, <span class="literal">NULL</span>, foo, <span class="literal">NULL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_create\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pthread_join(t1, <span class="literal">NULL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_join\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="pthread-join-取得回傳值"><a href="#pthread-join-取得回傳值" class="headerlink" title="pthread_join 取得回傳值"></a>pthread_join 取得回傳值</h2><p>這邊示範用 pthread_join 來取得執行緒的回傳值，在 foo 回傳 123 整數，在 main 主程式裡用 pthread_join 等待執行緒執行結束並將 retval 印出來，<br><figure class="highlight c++"><figcaption><span>cpp-pthread_join2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-pthread_join2.cpp -o a.out -pthread</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">foo</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"foo\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)<span class="number">123</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> t1;</span><br><span class="line">    <span class="keyword">void</span> *retval;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pthread_create(&amp;t1, <span class="literal">NULL</span>, foo, <span class="literal">NULL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_create\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pthread_join(t1, &amp;retval) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_join\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (retval != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"retval: %d\n"</span>, retval);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo</span><br><span class="line">retval: 123</span><br></pre></td></tr></table></figure></p><p>這邊示範用 pthread_join 來取得執行緒的回傳值，在 foo 回傳 hello 字串，在 main 主程式裡用 pthread_join 等待執行緒執行結束並將 retval 印出來，<br><figure class="highlight c++"><figcaption><span>cpp-pthread_join3.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-pthread_join3.cpp -o a.out -pthread</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">foo</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"foo\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)<span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> t1;</span><br><span class="line">    <span class="keyword">void</span> *retval;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pthread_create(&amp;t1, <span class="literal">NULL</span>, foo, <span class="literal">NULL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_create\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pthread_join(t1, &amp;retval) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_join\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (retval != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"retval: %s\n"</span>, (<span class="keyword">char</span> *)retval);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo</span><br><span class="line">retval: hello</span><br></pre></td></tr></table></figure></p><p>其它參考<br>pthread_join(3) - Linux manual page<br><a href="https://man7.org/linux/man-pages/man3/pthread_join.3.html" target="_blank" rel="noopener">https://man7.org/linux/man-pages/man3/pthread_join.3.html</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-pthread_exit/" title="C/C++ Linux pthread_exit 用法與範例">C/C++ Linux pthread_exit 用法與範例</a><br><a href="/cpp-sched_setaffinity/" title="C/C++ Linux/Unix 讓執行緒跑在指定 CPU 的方法 sched_setaffinity">C/C++ Linux/Unix 讓執行緒跑在指定 CPU 的方法 sched_setaffinity</a><br><a href="/cpp-pthread/" title="C/C++ Linux/Unix pthread 建立多執行緒用法與範例">C/C++ Linux/Unix pthread 建立多執行緒用法與範例</a><br><a href="/std-thread/" title="C++ std::thread 建立多執行緒用法與範例">C++ std::thread 建立多執行緒用法與範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ Linux/Unix 執行緒 &lt;code&gt;pthread_join()&lt;/code&gt; 用法，&lt;code&gt;pthread_join()&lt;/code&gt; 是在當前執行緒等待指定的執行緒執行完畢。&lt;/p&gt;
&lt;h2 id=&quot;pthread-jo
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ Linux pthread_attr_getstacksize 取得執行緒堆疊大小用法</title>
    <link href="https://shengyu7697.github.io/cpp-pthread_attr_getstacksize/"/>
    <id>https://shengyu7697.github.io/cpp-pthread_attr_getstacksize/</id>
    <published>2022-02-24T14:00:00.000Z</published>
    <updated>2022-03-27T13:42:37.504Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ Linux/Unix 執行緒 <code>pthread_attr_getstacksize()</code> 用法，<code>pthread_attr_getstacksize()</code> 是用來取得該執行緒的堆疊大小。</p><h2 id="pthread-attr-getstacksize-基本用法"><a href="#pthread-attr-getstacksize-基本用法" class="headerlink" title="pthread_attr_getstacksize 基本用法"></a>pthread_attr_getstacksize 基本用法</h2><p>在 <code>pthread_create()</code> 建立執行緒時沒有設定堆疊大小的話會採用 <code>ulimit -s</code> 的預設值，在 shell 下輸入 <code>ulimit -s</code> 就可以看到目前的設定值，單位為 KB，如下所示目前數值為 8192KB，也就是 8M<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ulimit -s</span><br><span class="line">8192</span><br></pre></td></tr></table></figure></p><p>堆疊最小值定義為 PTHREAD_STACK_MIN，也就是 16384bytes。  </p><p>以下簡單示範如何使用 <code>pthread_attr_getstacksize()</code>，<br><figure class="highlight cpp"><figcaption><span>cpp-pthread_attr_getstacksize.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-pthread_attr_getstacksize.cpp -o a.out -pthread</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pthread_attr_t</span> attr;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="keyword">size_t</span> stacksize;</span><br><span class="line"></span><br><span class="line">    ret = pthread_attr_init(&amp;attr);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_attr_init\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = pthread_attr_getstacksize(&amp;attr, &amp;stacksize);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_attr_getstacksize\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stack size: %lu\n"</span>, stacksize);</span><br><span class="line"></span><br><span class="line">    ret = pthread_attr_destroy(&amp;attr);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_attr_destroy\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stack size: 8388608</span><br></pre></td></tr></table></figure></p><h2 id="設定-stack-size-後再取得-stack-size"><a href="#設定-stack-size-後再取得-stack-size" class="headerlink" title="設定 stack size 後再取得 stack size"></a>設定 stack size 後再取得 stack size</h2><p>這邊示範先設定 stack size 後再試著取得 stack size 看看跟設定的是否一致，<br><figure class="highlight c++"><figcaption><span>cpp-pthread_attr_getstacksize2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-pthread_attr_getstacksize2.cpp -o a.out -pthread</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pthread_attr_t</span> attr;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="keyword">size_t</span> stacksize;</span><br><span class="line"></span><br><span class="line">    ret = pthread_attr_init(&amp;attr);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_attr_init\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = pthread_attr_getstacksize(&amp;attr, &amp;stacksize);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_attr_getstacksize\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stack size: %lu\n"</span>, stacksize);</span><br><span class="line"></span><br><span class="line">    ret = pthread_attr_setstacksize(&amp;attr, <span class="number">96</span>*<span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_attr_setstacksize\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = pthread_attr_getstacksize(&amp;attr, &amp;stacksize);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_attr_getstacksize\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"stack size: %lu\n"</span>, stacksize);</span><br><span class="line"></span><br><span class="line">    ret = pthread_attr_destroy(&amp;attr);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_attr_destroy\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stack size: 8388608</span><br><span class="line">stack size: 98304</span><br></pre></td></tr></table></figure></p><p><strong>其它相關文章推薦</strong><br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-pthread_attr_setstacksize/" title="C/C++ Linux pthread_attr_setstacksize 設定執行緒堆疊大小用法">C/C++ Linux pthread_attr_setstacksize 設定執行緒堆疊大小用法</a><br><a href="/cpp-sched_setaffinity/" title="C/C++ Linux/Unix 讓執行緒跑在指定 CPU 的方法 sched_setaffinity">C/C++ Linux/Unix 讓執行緒跑在指定 CPU 的方法 sched_setaffinity</a><br><a href="/cpp-pthread/" title="C/C++ Linux/Unix pthread 建立多執行緒用法與範例">C/C++ Linux/Unix pthread 建立多執行緒用法與範例</a><br><a href="/std-thread/" title="C++ std::thread 建立多執行緒用法與範例">C++ std::thread 建立多執行緒用法與範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ Linux/Unix 執行緒 &lt;code&gt;pthread_attr_getstacksize()&lt;/code&gt; 用法，&lt;code&gt;pthread_attr_getstacksize()&lt;/code&gt; 是用來取得該執行緒的堆疊大小。&lt;/
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ Linux pthread_attr_setstacksize 設定執行緒堆疊大小用法</title>
    <link href="https://shengyu7697.github.io/cpp-pthread_attr_setstacksize/"/>
    <id>https://shengyu7697.github.io/cpp-pthread_attr_setstacksize/</id>
    <published>2022-02-21T14:00:00.000Z</published>
    <updated>2022-03-27T13:42:37.504Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ Linux/Unix 執行緒 <code>pthread_attr_setstacksize()</code> 用法，<code>pthread_attr_setstacksize()</code> 是用來設定該執行緒的堆疊大小。</p><h2 id="pthread-attr-setstacksize-基本用法"><a href="#pthread-attr-setstacksize-基本用法" class="headerlink" title="pthread_attr_setstacksize 基本用法"></a>pthread_attr_setstacksize 基本用法</h2><p>在 <code>pthread_create()</code> 建立執行緒時沒有設定堆疊大小的話會採用 <code>ulimit -s</code> 的預設值，在 shell 下輸入 <code>ulimit -s</code> 就可以看到目前的設定值，單位為 KB，如下所示目前數值為 8192KB，也就是 8M<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ulimit -s</span><br><span class="line">8192</span><br></pre></td></tr></table></figure></p><p>堆疊最小值定義為 PTHREAD_STACK_MIN，也就是 16384bytes，<code>pthread_attr_setstacksize()</code> 設定小於 PTHREAD_STACK_MIN 的話會回傳 0 (表示設定失敗)，  </p><p>以下簡單示範如何使用 <code>pthread_attr_setstacksize()</code>，<br><figure class="highlight cpp"><figcaption><span>cpp-pthread_attr_setstacksize.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-pthread_attr_setstacksize.cpp -o a.out -pthread</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">foo</span><span class="params">(<span class="keyword">void</span> *arg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"foo\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> t1;</span><br><span class="line">    <span class="keyword">pthread_attr_t</span> attr;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="keyword">size_t</span> stacksize = <span class="number">20480</span>;</span><br><span class="line"></span><br><span class="line">    ret = pthread_attr_init(&amp;attr);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_attr_init\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = pthread_attr_setstacksize(&amp;attr, stacksize);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_attr_setstacksize\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ret = pthread_create(&amp;t1, <span class="literal">NULL</span>, foo, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_create\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pthread_join(t1, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    ret = pthread_attr_destroy(&amp;attr);</span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: pthread_attr_destroy\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>補充：若要使用 PTHREAD_STACK_MIN 定義的話，需 <code>include &lt;limits.h&gt;</code>  </p><p>其它參考<br>pthread_attr_setstacksize(3) - Linux manual page<br><a href="https://man7.org/linux/man-pages/man3/pthread_attr_setstacksize.3.html" target="_blank" rel="noopener">https://man7.org/linux/man-pages/man3/pthread_attr_setstacksize.3.html</a><br>线程堆栈大小 pthread_attr_setstacksize 的使用<br><a href="https://blog.csdn.net/godleading/article/details/7997630" target="_blank" rel="noopener">https://blog.csdn.net/godleading/article/details/7997630</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-pthread_attr_getstacksize/" title="C/C++ Linux pthread_attr_getstacksize 取得執行緒堆疊大小用法">C/C++ Linux pthread_attr_getstacksize 取得執行緒堆疊大小用法</a><br><a href="/cpp-sched_setaffinity/" title="C/C++ Linux/Unix 讓執行緒跑在指定 CPU 的方法 sched_setaffinity">C/C++ Linux/Unix 讓執行緒跑在指定 CPU 的方法 sched_setaffinity</a><br><a href="/cpp-pthread/" title="C/C++ Linux/Unix pthread 建立多執行緒用法與範例">C/C++ Linux/Unix pthread 建立多執行緒用法與範例</a><br><a href="/std-thread/" title="C++ std::thread 建立多執行緒用法與範例">C++ std::thread 建立多執行緒用法與範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ Linux/Unix 執行緒 &lt;code&gt;pthread_attr_setstacksize()&lt;/code&gt; 用法，&lt;code&gt;pthread_attr_setstacksize()&lt;/code&gt; 是用來設定該執行緒的堆疊大小。&lt;/
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>mac 雙螢幕延伸模式的 dock 切換方法</title>
    <link href="https://shengyu7697.github.io/mac-move-dock-to-other-screen/"/>
    <id>https://shengyu7697.github.io/mac-move-dock-to-other-screen/</id>
    <published>2022-02-20T14:00:00.000Z</published>
    <updated>2022-02-21T14:20:19.635Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 紀錄 mac 雙螢幕延伸模式的 dock 切換方法，在使用 MacBook Pro 外接螢幕時會發現 dock 在原本的螢幕上，<br>如果想要將 dock 切換到另一個螢幕上的話，<br>可以在另外一個螢幕上，將滑鼠游標移動到螢幕的底部，然後再一直往下滑，<br>這時 dock 就會換到滑鼠那個螢幕裡了！  </p><p>其他參考<br>mac 雙螢幕Dock 切換方式<br><a href="https://mintrabbitplus.com/2021/03/03/mac-%E9%9B%99%E8%9E%A2%E5%B9%95dock-%E5%88%87%E6%8F%9B%E6%96%B9%E5%BC%8F/" target="_blank" rel="noopener">https://mintrabbitplus.com/2021/03/03/mac-%E9%9B%99%E8%9E%A2%E5%B9%95dock-%E5%88%87%E6%8F%9B%E6%96%B9%E5%BC%8F/</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/mac-screen-sharing/" title="macOS Screen Sharing 用指令開啟螢幕分享">macOS Screen Sharing 用指令開啟螢幕分享</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 紀錄 mac 雙螢幕延伸模式的 dock 切換方法，在使用 MacBook Pro 外接螢幕時會發現 dock 在原本的螢幕上，&lt;br&gt;如果想要將 dock 切換到另一個螢幕上的話，&lt;br&gt;可以在另外一個螢幕上，將滑鼠游標移動到螢幕的底部，然後再一直往
      
    
    </summary>
    
    
      <category term="macOS" scheme="https://shengyu7697.github.io/tags/macOS/"/>
    
      <category term="Macbook Pro" scheme="https://shengyu7697.github.io/tags/Macbook-Pro/"/>
    
  </entry>
  
  <entry>
    <title>grep 遇到 binary file (standard input) matches 解決方法</title>
    <link href="https://shengyu7697.github.io/linux-grep-binary-file-standard-input-matches/"/>
    <id>https://shengyu7697.github.io/linux-grep-binary-file-standard-input-matches/</id>
    <published>2022-02-17T14:00:00.000Z</published>
    <updated>2022-04-08T13:55:02.356Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 紀錄使用 grep 遇到 binary file (standard input) matches 的解決方法，某天使用 grep 時出現了 <code>Binary file (standard input) matches</code> 這樣的錯誤訊息，然後之後的 grep 就沒有東西了，看起來這個訊息是說 grep 從標準輸入讀取處理時遇到了 Binary file 二進制檔，但我很確定我是 cat 文字檔給 grep，那怎麼辦？  </p><p>解決方法：<br>grep 使用 <code>-a</code> 選項（<code>--text</code> 選項也可），就是叫 grep 指令遇到 binary 就把它當文字處理，像這樣寫，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -a &apos;pattern&apos;</span><br></pre></td></tr></table></figure></p><p>所以我原本的指令是用 cat 把文字檔印出來再導給 grep 處理，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.txt | grep &apos;pattern&apos;</span><br></pre></td></tr></table></figure></p><p>加了 <code>-a</code> 改寫後變成這樣，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.txt | grep -a &apos;pattern&apos;</span><br></pre></td></tr></table></figure></p><p>這樣就搞定了！  </p><p>其他參考<br>grep returns “Binary file (standard input) matches” when trying to find a string pattern in file - Unix &amp; Linux Stack Exchange<br><a href="https://unix.stackexchange.com/questions/335716/grep-returns-binary-file-standard-input-matches-when-trying-to-find-a-string" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/335716/grep-returns-binary-file-standard-input-matches-when-trying-to-find-a-string</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/linux-tutorial/" title="Linux 常用指令教學懶人包">Linux 常用指令教學懶人包</a><br><a href="/linux-grep-ack-ag/" title="Linux grep/ack/ag 搜尋字串用法與範例">Linux grep/ack/ag 搜尋字串用法與範例</a><br><a href="/linux-ag/" title="Linux ag 搜尋字串用法與範例(比 grep 還快)">Linux ag 搜尋字串用法與範例(比 grep 還快)</a><br><a href="/linux-cut/" title="Linux cut 字串處理用法與範例">Linux cut 字串處理用法與範例</a><br><a href="/linux-sed/" title="Linux sed 字串取代用法與範例">Linux sed 字串取代用法與範例</a><br><a href="/linux-find/" title="Linux find 尋找檔案/尋找資料夾用法與範例">Linux find 尋找檔案/尋找資料夾用法與範例</a><br><a href="/linux-kill-by-name/" title="Linux kill 指令砍掉指定的 process name">Linux kill 指令砍掉指定的 process name</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 紀錄使用 grep 遇到 binary file (standard input) matches 的解決方法，某天使用 grep 時出現了 &lt;code&gt;Binary file (standard input) matches&lt;/code&gt; 這樣的錯誤
      
    
    </summary>
    
    
      <category term="Linux Command" scheme="https://shengyu7697.github.io/tags/Linux-Command/"/>
    
      <category term="Linux" scheme="https://shengyu7697.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Shell Script 判斷檔案是否存在</title>
    <link href="https://shengyu7697.github.io/shell-script-check-if-file-exists/"/>
    <id>https://shengyu7697.github.io/shell-script-check-if-file-exists/</id>
    <published>2022-02-14T14:00:00.000Z</published>
    <updated>2022-02-17T09:34:26.678Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Shell Script 判斷檔案是否存在的用法與範例。  </p><p>以下 Shell Script 判斷檔案是否存在的用法介紹將分為這幾部份，  </p><ul><li>Shell Script 判斷檔案是否存在  </li><li>Shell Script 判斷多個檔案是否存在  </li></ul><p>那我們開始吧！  </p><h2 id="Shell-Script-判斷檔案是否存在"><a href="#Shell-Script-判斷檔案是否存在" class="headerlink" title="Shell Script 判斷檔案是否存在"></a>Shell Script 判斷檔案是否存在</h2><p>這邊示範用 Shell Script 來判斷 xxx.txt 檔案是否存在，判斷檔案要用 <code>-f</code>，判斷目錄/資料夾則是要用 <code>-d</code>，如下範例，要注意 <code>-f</code> 前有個空格，因為使用 if 條件判斷語法 <code>[</code> <code>]</code> 中括號的兩端內側必須要有一個空白字元，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f xxx.txt ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Yes"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"No"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><h2 id="Shell-Script-判斷多個檔案是否存在"><a href="#Shell-Script-判斷多個檔案是否存在" class="headerlink" title="Shell Script 判斷多個檔案是否存在"></a>Shell Script 判斷多個檔案是否存在</h2><p>這邊示範用 Shell Script 來判斷多個檔案是否存在，如果是要判斷兩個檔案都同時存在的話，可以用 <code>&amp;&amp;</code> 連接條件式，範例如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f xxx1.txt ] &amp;&amp; [ -f xxx2.txt ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Yes"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"No"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>如果要用 Shell Script 來判斷兩個檔案任一個檔案存在的話，可以用 <code>||</code> 連接條件式，範例如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f xxx1.txt ] || [ -f xxx2.txt ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Yes"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"No"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>如果要判斷 3 個檔案或 3 個以上的檔案是否同時存在，程式碼通常會比較長，<br>這時適時地換行就會比較好維護程式碼，範例如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -f xxx1.txt ] &amp;&amp; </span><br><span class="line">   [ -f xxx2.txt ] &amp;&amp;</span><br><span class="line">   [ -f xxx3.txt ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"Yes"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"No"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></p><p>以上就是 Shell Script 判斷檔案是否存在的用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 Shell Script 相關技術，可以參考看看下面的文章，<br><a href="/shell-script-tutorial/" title="Shell Script 新手入門教學">Shell Script 新手入門教學</a><br><a href="/shell-script-arithmetic/" title="Shell Script 四則運算，變數相加、相減、相乘、相除">Shell Script 四則運算，變數相加、相減、相乘、相除</a><br><a href="/shell-script-if/" title="Shell Script if 條件判斷">Shell Script if 條件判斷</a><br><a href="/shell-script-for/" title="Shell Script for 迴圈">Shell Script for 迴圈</a><br><a href="/shell-script-while/" title="Shell Script while 迴圈">Shell Script while 迴圈</a><br><a href="/shell-script-read-text-file/" title="Shell Script 讀檔，讀取 txt 文字檔">Shell Script 讀檔，讀取 txt 文字檔</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Shell Script 判斷檔案是否存在的用法與範例。  &lt;/p&gt;
&lt;p&gt;以下 Shell Script 判斷檔案是否存在的用法介紹將分為這幾部份，  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shell Script 判斷檔案是否存在  &lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
      <category term="Shell Script" scheme="https://shengyu7697.github.io/tags/Shell-Script/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ fclose 用法與範例</title>
    <link href="https://shengyu7697.github.io/cpp-fclose/"/>
    <id>https://shengyu7697.github.io/cpp-fclose/</id>
    <published>2022-02-10T14:00:00.000Z</published>
    <updated>2022-02-14T11:48:26.734Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ fclose 的用法與範例，檔案的讀取或寫入都需要先開檔，有開檔就有關檔，fopen 開檔對應的關檔函式就是 fclose 。  </p><p>C/C++ 要使用 fclose 的話需要引入的標頭檔 <code>&lt;stdio.h&gt;</code>，如果要使用 C++ 的標頭檔則是引入 <code>&lt;cstdio&gt;</code>，<br>fclose 函式原型為<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fclose</span><span class="params">(FILE * stream)</span></span>;</span><br></pre></td></tr></table></figure></p><p>stream：指向 FILE 物件的指標  </p><p>以下 C/C++ fclose 的用法介紹將分為這幾部份，  </p><ul><li>C/C++ fclose 的基本用法  </li><li>C/C++ fclose 正確的關檔    </li></ul><p>那我們開始吧！  </p><h2 id="C-C-fclose-的基本用法"><a href="#C-C-fclose-的基本用法" class="headerlink" title="C/C++ fclose 的基本用法"></a>C/C++ fclose 的基本用法</h2><p>這邊介紹 C/C++ fclose 基本用法，fopen 開檔成功回傳不為 NULL，fopen 開檔失敗則會回傳 NULL，開檔成功的話就繼續處理之後的程式邏輯，最後再 fclose 關檔，<br><figure class="highlight cpp"><figcaption><span>cpp-fclose.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-fclose.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line"></span><br><span class="line">    fp = fopen(<span class="string">"output.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fputs</span>(<span class="string">"123"</span>, fp);</span><br><span class="line">        <span class="built_in">fputs</span>(<span class="string">"456"</span>, fp);</span><br><span class="line">        fclose(fp);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"failed to open the file.\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出 output.txt 的內容如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">123</span><br><span class="line">456</span><br></pre></td></tr></table></figure></p><p>那麼為什麼開檔失敗就不用 fclose 關檔呢？詳見下一節。  </p><h2 id="C-C-fclose-正確的關檔"><a href="#C-C-fclose-正確的關檔" class="headerlink" title="C/C++ fclose 正確的關檔"></a>C/C++ fclose 正確的關檔</h2><p>這邊介紹 C/C++ fclose 正確的關檔方式與技巧，實務上有一些情況可能會導致 fp 為 NULL 而讓 fclose 對 NULL 進行關檔，例如開檔失敗，或其它手動賦值為 NULL 等等情形，那 fclose 對 NULL 進行關檔發生什麼事呢？  </p><p>這邊示範 fclose 直接對 NULL 關檔看看會怎麼樣，<br><figure class="highlight cpp"><figcaption><span>cpp-fclose2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-fclose2.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line"></span><br><span class="line">    fp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fputs("123", fp); // crash if fp is NULL</span></span><br><span class="line">    fclose(fp); <span class="comment">// crash if fp is NULL</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果程式會中止，產生 Segmentation fault，輸出如下，另外 fputs 寫入到 NULL 的 FILE * 檔案指標也是同樣的結果，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Segmentation fault (core dumped)</span><br></pre></td></tr></table></figure></p><p>所以在 fclose 關檔時帶入的 FILE * 檔案指標是 NULL 的話就會造成很嚴重的後果，在程式撰寫時要特別小心注意。  </p><p>以上就是 C/C++ fclose 的用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 C++ 相關技術，可以參考看看下面的文章，<br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-fopen/" title="C/C++ fopen 用法與範例">C/C++ fopen 用法與範例</a><br><a href="/cpp-fread/" title="C/C++ fread 用法與範例">C/C++ fread 用法與範例</a><br><a href="/cpp-fgets/" title="C/C++ fgets 用法與範例">C/C++ fgets 用法與範例</a><br><a href="/cpp-fwrite/" title="C/C++ fwrite 用法與範例">C/C++ fwrite 用法與範例</a><br><a href="/cpp-fputs/" title="C/C++ fputs 用法與範例">C/C++ fputs 用法與範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ fclose 的用法與範例，檔案的讀取或寫入都需要先開檔，有開檔就有關檔，fopen 開檔對應的關檔函式就是 fclose 。  &lt;/p&gt;
&lt;p&gt;C/C++ 要使用 fclose 的話需要引入的標頭檔 &lt;code&gt;&amp;lt;stdio.
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ fputs 用法與範例</title>
    <link href="https://shengyu7697.github.io/cpp-fputs/"/>
    <id>https://shengyu7697.github.io/cpp-fputs/</id>
    <published>2022-02-07T14:00:00.000Z</published>
    <updated>2022-02-10T08:08:56.452Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ fputs 的用法與範例，C/C++ 可以使用 fputs 將一行文字寫入到檔案裡，fputs 除了可以將一行文字寫入到檔案裡以外也能將一行文字寫入到標準輸出上，詳見本篇範例。  </p><p>C/C++ 要使用 fputs 的話需要引入的標頭檔 <code>&lt;stdio.h&gt;</code>，如果要使用 C++ 的標頭檔則是引入 <code>&lt;cstdio&gt;</code>，<br>fputs 函式原型為<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fputs</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * str, FILE * stream)</span></span>;</span><br></pre></td></tr></table></figure></p><p>str：存放字元陣列的地方，將會被輸出到 stream<br>stream：指向 FILE 物件的指標  </p><p>以下 C/C++ fputs 的用法介紹將分為這幾部份，  </p><ul><li>C/C++ fputs 寫入一行文字到檔案的基本用法  </li><li>C/C++ fputs 寫入一行文字到標準輸出  </li></ul><p>那我們開始吧！  </p><h2 id="C-C-fputs-寫入一行文字到檔案的基本用法"><a href="#C-C-fputs-寫入一行文字到檔案的基本用法" class="headerlink" title="C/C++ fputs 寫入一行文字到檔案的基本用法"></a>C/C++ fputs 寫入一行文字到檔案的基本用法</h2><p>這邊介紹 C/C++ fputs 寫入文字檔的基本用法，在用 fputs 來寫入文字檔前要先 fopen 開檔成功才能對檔案寫入，fopen 開檔回傳 NULL 表示開檔失敗，如果不是 NULL 表示開檔成功。  </p><p>接著使用 fputs 進行寫入文字，這邊示範寫入一行文字為 <code>&quot;hello world&quot;</code>，寫完後最後 fclose 關檔，<br><figure class="highlight cpp"><figcaption><span>cpp-fputs.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-fputs.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line"></span><br><span class="line">    fp = fopen(<span class="string">"output.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fputs</span>(<span class="string">"hello world"</span>, fp);</span><br><span class="line">        fclose(fp);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"failed to open the file.\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出 output.txt 的內容如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure></p><h2 id="C-C-fputs-寫入一行文字到標準輸出"><a href="#C-C-fputs-寫入一行文字到標準輸出" class="headerlink" title="C/C++ fputs 寫入一行文字到標準輸出"></a>C/C++ fputs 寫入一行文字到標準輸出</h2><p>C/C++ fputs 除了對檔案寫入一行文字以外也可以用來對標準輸出進行寫入一行文字，範例如下，標準輸出為 stdout 就不需要像檔案一樣開檔了，<br><figure class="highlight cpp"><figcaption><span>cpp-fputs2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-fputs2.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">fputs</span>(<span class="string">"hello world\n"</span>, <span class="built_in">stdout</span>);    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"123456\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>標準輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br><span class="line">123456</span><br></pre></td></tr></table></figure></p><p>以上就是 C/C++ fputs 的用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 C++ 相關技術，可以參考看看下面的文章，<br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-fopen/" title="C/C++ fopen 用法與範例">C/C++ fopen 用法與範例</a><br><a href="/cpp-fread/" title="C/C++ fread 用法與範例">C/C++ fread 用法與範例</a><br><a href="/cpp-fgets/" title="C/C++ fgets 用法與範例">C/C++ fgets 用法與範例</a><br><a href="/cpp-fwrite/" title="C/C++ fwrite 用法與範例">C/C++ fwrite 用法與範例</a><br><a href="/cpp-fclose/" title="C/C++ fclose 用法與範例">C/C++ fclose 用法與範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ fputs 的用法與範例，C/C++ 可以使用 fputs 將一行文字寫入到檔案裡，fputs 除了可以將一行文字寫入到檔案裡以外也能將一行文字寫入到標準輸出上，詳見本篇範例。  &lt;/p&gt;
&lt;p&gt;C/C++ 要使用 fputs 的話需
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ fwrite 用法與範例</title>
    <link href="https://shengyu7697.github.io/cpp-fwrite/"/>
    <id>https://shengyu7697.github.io/cpp-fwrite/</id>
    <published>2022-02-03T14:00:00.000Z</published>
    <updated>2022-02-10T08:08:56.452Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ fwrite 的用法與範例，C/C++ 可以使用 fwrite 將文字寫入到檔案裡，在 fwrite 函式的引數裡可以指定要寫入幾個 bytes 字元，fwrite 除了可以將文字寫入到檔案裡以外也能將文字寫入到標準輸出上，詳見本篇範例。  </p><p>C/C++ 要使用 fwrite 的話需要引入的標頭檔 <code>&lt;stdio.h&gt;</code>，如果要使用 C++ 的標頭檔則是引入 <code>&lt;cstdio&gt;</code>，<br>fwrite 函式原型為<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> fwrite(<span class="keyword">const</span> <span class="keyword">void</span> * ptr, <span class="keyword">size_t</span> size, <span class="keyword">size_t</span> count, FILE * stream);</span><br></pre></td></tr></table></figure></p><p>ptr：指向一塊元素陣列的指標，該元素陣列將會被寫入到檔案裡<br>size：要寫入的每一個元素大小(單位為 byte)<br>count：要寫入的元素數量<br>stream：指向 FILE 物件的指標  </p><p>以下 C/C++ fwrite 的用法介紹將分為這幾部份，  </p><ul><li>C/C++ fwrite 將文字寫入到檔案的基本用法  </li><li>C/C++ fwrite 將文字寫入到標準輸出  </li></ul><p>那我們開始吧！  </p><h2 id="C-C-fwrite-將文字寫入到檔案的基本用法"><a href="#C-C-fwrite-將文字寫入到檔案的基本用法" class="headerlink" title="C/C++ fwrite 將文字寫入到檔案的基本用法"></a>C/C++ fwrite 將文字寫入到檔案的基本用法</h2><p>這邊介紹 C/C++ fwrite 寫入文字檔的基本用法，在用 fwrite 來寫入文字檔前要先 fopen 開檔成功才能對檔案寫入，fopen 開檔回傳 NULL 表示開檔失敗，如果不是 NULL 表示開檔成功。  </p><p>接著使用 fwrite 進行寫入文字，我們宣告的 buffer 有 1024 大小，但是裡面只有 24 的字元需要寫入到檔案裡，所以這邊 fwrite 第三個引數填入 24，fwrite 會回傳寫入了多少 bytes，沒有意外的話就是跟我們帶入的大小一樣，也就是 numwritten 預期會是 24，寫完後最後 fclose 關檔，<br><figure class="highlight cpp"><figcaption><span>cpp-fwrite.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-fwrite.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">1024</span>] = <span class="string">"hello world\n123\n456\n789\n"</span>;</span><br><span class="line">    <span class="keyword">size_t</span> numwritten;</span><br><span class="line"></span><br><span class="line">    fp = fopen(<span class="string">"output.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        numwritten = fwrite(buffer, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">24</span>, fp);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"write %zu bytes\n"</span>, numwritten);</span><br><span class="line">        fclose(fp);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"failed to open the file.\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">write 24 bytes</span><br></pre></td></tr></table></figure></p><p>輸出 output.txt 的內容如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br><span class="line">123</span><br><span class="line">456</span><br><span class="line">789</span><br></pre></td></tr></table></figure></p><h2 id="C-C-fwrite-將文字寫入到標準輸出"><a href="#C-C-fwrite-將文字寫入到標準輸出" class="headerlink" title="C/C++ fwrite 將文字寫入到標準輸出"></a>C/C++ fwrite 將文字寫入到標準輸出</h2><p>C/C++ fwrite 除了對檔案寫入文字以外也可以用來對標準輸出進行寫入文字，範例如下，標準輸出為 stdout 就不需要像檔案一樣開檔了，<br><figure class="highlight cpp"><figcaption><span>cpp-fwrite2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-fwrite2.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer[<span class="number">32</span>] = <span class="string">"hello world\n"</span>;</span><br><span class="line">    <span class="keyword">size_t</span> numwritten;</span><br><span class="line">    numwritten = fwrite(buffer, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), <span class="number">12</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"write %zu bytes\n"</span>, numwritten);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>標準輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br><span class="line">write 12 bytes</span><br></pre></td></tr></table></figure></p><p>以上就是 C/C++ fwrite 的用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 C++ 相關技術，可以參考看看下面的文章，<br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-fopen/" title="C/C++ fopen 用法與範例">C/C++ fopen 用法與範例</a><br><a href="/cpp-fread/" title="C/C++ fread 用法與範例">C/C++ fread 用法與範例</a><br><a href="/cpp-fgets/" title="C/C++ fgets 用法與範例">C/C++ fgets 用法與範例</a><br><a href="/cpp-fputs/" title="C/C++ fputs 用法與範例">C/C++ fputs 用法與範例</a><br><a href="/cpp-fclose/" title="C/C++ fclose 用法與範例">C/C++ fclose 用法與範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ fwrite 的用法與範例，C/C++ 可以使用 fwrite 將文字寫入到檔案裡，在 fwrite 函式的引數裡可以指定要寫入幾個 bytes 字元，fwrite 除了可以將文字寫入到檔案裡以外也能將文字寫入到標準輸出上，詳見本篇範
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShengYu Talk</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shengyu7697.github.io/"/>
  <updated>2023-03-26T09:01:02.164Z</updated>
  <id>https://shengyu7697.github.io/</id>
  
  <author>
    <name>ShengYu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python SQLite 資料庫教學與範例</title>
    <link href="https://shengyu7697.github.io/python-sqlite-tutorial/"/>
    <id>https://shengyu7697.github.io/python-sqlite-tutorial/</id>
    <published>2023-02-13T14:00:00.000Z</published>
    <updated>2023-03-26T09:01:02.164Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python SQLite 資料庫教學與範例。  </p><p>以下 Python SQLite 資料庫範例大概分為以下幾部份，  </p><ul><li>Python SQLite CREATE 用法與範例  </li><li>Python SQLite INSERT 用法與範例  </li><li>Python SQLite UPDATE 用法與範例  </li><li>Python SQLite SELECT 用法與範例  </li><li>Python SQLite DELETE 用法與範例  </li></ul><p>這邊先介紹 Python SQLite 最基本的開啟 DB 資料庫與關閉 DB 資料庫。<br>例如我要開啟 tutorial.db 這個 database，<br><figure class="highlight python"><figcaption><span>python3-sqlite3-tutorial-open-db.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">con = sqlite3.connect(<span class="string">"tutorial.db"</span>)</span><br><span class="line">cur = con.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure></p><p>以上就是最簡單的 Python SQLite 範例，接下來我們來看看 Python SQLite 常見的操作範例。  </p><a id="more"></a><h2><span id="python-sqlite-create-用法與範例">Python SQLite CREATE 用法與範例</span></h2><p>以下示範 Python SQLite CREATE 語法新建資料表，<br><figure class="highlight python"><figcaption><span>python3-sqlite3-tutorial-create.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">con = sqlite3.connect(<span class="string">"tutorial.db"</span>)</span><br><span class="line">cur = con.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建資料表</span></span><br><span class="line">cur.execute(<span class="string">"CREATE TABLE movie(title, year, score)"</span>)</span><br><span class="line">con.commit()</span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure></p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-sqlite-insert-用法與範例">Python SQLite INSERT 用法與範例</span></h2><p>以下示範 Python SQLite INSERT 語法新增/插入資料，<br><figure class="highlight python"><figcaption><span>python3-sqlite3-tutorial-insert.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">con = sqlite3.connect(<span class="string">"tutorial.db"</span>)</span><br><span class="line">cur = con.cursor()</span><br><span class="line"></span><br><span class="line">cur.execute(<span class="string">"""</span></span><br><span class="line"><span class="string">    INSERT INTO movie VALUES</span></span><br><span class="line"><span class="string">        ('Monty Python and the Holy Grail', 1975, 8.2),</span></span><br><span class="line"><span class="string">        ('And Now for Something Completely Different', 1971, 7.5)</span></span><br><span class="line"><span class="string">"""</span>)</span><br><span class="line">con.commit() <span class="comment"># Remember to commit the transaction after executing INSERT.</span></span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure></p><p>以下示範 Python SQLite INSERT 語法插入多筆資料，插入多筆資料可使用 cur.executemany()，在 executemany 參數中可以用 <code>?</code> 表示之後會帶入的資料，<br><figure class="highlight python"><figcaption><span>python3-sqlite3-tutorial-insert2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">con = sqlite3.connect(<span class="string">"tutorial.db"</span>)</span><br><span class="line">cur = con.cursor()</span><br><span class="line"></span><br><span class="line">data = [</span><br><span class="line">    (<span class="string">"Monty Python Live at the Hollywood Bowl"</span>, <span class="number">1982</span>, <span class="number">7.9</span>),</span><br><span class="line">    (<span class="string">"Monty Python's The Meaning of Life"</span>, <span class="number">1983</span>, <span class="number">7.5</span>),</span><br><span class="line">    (<span class="string">"Monty Python's Life of Brian"</span>, <span class="number">1979</span>, <span class="number">8.0</span>),</span><br><span class="line">]</span><br><span class="line">cur.executemany(<span class="string">"INSERT INTO movie VALUES(?, ?, ?)"</span>, data)</span><br><span class="line">con.commit() <span class="comment"># Remember to commit the transaction after executing INSERT.</span></span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure></p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-sqlite-update-用法與範例">Python SQLite UPDATE 用法與範例</span></h2><p>以下示範 Python SQLite UPDATE 語法更新資料，<br>如果 movie 資料表找到 score 分數為 8.2 的資料時，更新它們的 title 與 year，<br><figure class="highlight python"><figcaption><span>python3-sqlite3-tutorial-update.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">con = sqlite3.connect(<span class="string">"tutorial.db"</span>)</span><br><span class="line">cur = con.cursor()</span><br><span class="line"></span><br><span class="line">cur.execute(<span class="string">"""UPDATE movie</span></span><br><span class="line"><span class="string">              SET title = ? ,</span></span><br><span class="line"><span class="string">                  year = ?</span></span><br><span class="line"><span class="string">              WHERE score = ?"""</span>, (<span class="string">"12345"</span>, <span class="number">2000</span>, <span class="number">8.2</span>))</span><br><span class="line"></span><br><span class="line">con.commit()</span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure></p><p>如果有多筆符合的話，我自己的測試結果只會更新第一筆。  </p><h2><span id="python-sqlite-select-用法與範例">Python SQLite SELECT 用法與範例</span></h2><p>以下示範 Python SQLite SELECT 語法查詢資料，<br>Python SQLite 如果要查詢 tutorial.db 資料庫裡有什麼資料表的話可以這樣寫，<br><figure class="highlight python"><figcaption><span>python3-sqlite3-tutorial-select.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">con = sqlite3.connect(<span class="string">"tutorial.db"</span>)</span><br><span class="line">cur = con.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查詢資料</span></span><br><span class="line">ret = cur.execute(<span class="string">"SELECT name FROM sqlite_master"</span>)</span><br><span class="line">print(ret.fetchall())</span><br><span class="line"></span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure></p><p>執行結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(&apos;movie&apos;,)]</span><br></pre></td></tr></table></figure></p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>Python SQLite 如果要查詢 movie 資料表裡有什麼資料的話可以這樣寫，<br><figure class="highlight python"><figcaption><span>python3-sqlite3-tutorial-select2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">con = sqlite3.connect(<span class="string">"tutorial.db"</span>)</span><br><span class="line">cur = con.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查詢資料</span></span><br><span class="line">ret = cur.execute(<span class="string">"SELECT score FROM movie"</span>)</span><br><span class="line">print(ret.fetchall())</span><br><span class="line"></span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure></p><p>執行結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[(8.2,), (7.5,), (7.9,), (7.5,), (8.0,)]</span><br></pre></td></tr></table></figure></p><p>上面是示範 fetchall 一次取得所有結果，<br>以下示範另外一種 SELECT 查詢資料寫法，用 for 迴圈來處理 query 每筆結果的資料，<br><figure class="highlight python"><figcaption><span>python3-sqlite3-tutorial-select3.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">con = sqlite3.connect(<span class="string">"tutorial.db"</span>)</span><br><span class="line">cur = con.cursor()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> cur.execute(<span class="string">"SELECT year, title FROM movie ORDER BY year"</span>):</span><br><span class="line">    print(row)</span><br><span class="line"></span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure></p><p>執行結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(1971, &apos;And Now for Something Completely Different&apos;)</span><br><span class="line">(1975, &apos;Monty Python and the Holy Grail&apos;)</span><br><span class="line">(1979, &quot;Monty Python&apos;s Life of Brian&quot;)</span><br><span class="line">(1982, &apos;Monty Python Live at the Hollywood Bowl&apos;)</span><br><span class="line">(1983, &quot;Monty Python&apos;s The Meaning of Life&quot;)</span><br></pre></td></tr></table></figure></p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>以下示範 Python SQLite SELECT 搭配 WHERE 語法查詢特定條件的資料，<br><figure class="highlight python"><figcaption><span>python3-sqlite3-tutorial-select-where.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">con = sqlite3.connect(<span class="string">"tutorial.db"</span>)</span><br><span class="line">cur = con.cursor()</span><br><span class="line"></span><br><span class="line">ret = cur.execute(<span class="string">"SELECT title, year FROM movie WHERE title='Monty Python and the Holy Grail'"</span>)</span><br><span class="line"><span class="comment">#ret = cur.execute("SELECT title, year FROM movie WHERE year=1971")</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(ret.fetchall())</span></span><br><span class="line">ret = ret.fetchone()</span><br><span class="line"><span class="keyword">if</span> ret <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    print(<span class="string">"is None"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(ret)</span><br><span class="line"></span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure></p><p>執行結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&apos;Monty Python and the Holy Grail&apos;, 1975)</span><br></pre></td></tr></table></figure></p><h2><span id="python-sqlite-delete-用法與範例">Python SQLite DELETE 用法與範例</span></h2><p>以下示範 Python SQLite DELETE 語法刪除資料表，<br>Python SQLite 如果要刪除 movie 資料表裡的 score 分數為 8.2 的資料可以這樣寫，<br><figure class="highlight python"><figcaption><span>python3-sqlite3-tutorial-delete.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">con = sqlite3.connect(<span class="string">"tutorial.db"</span>)</span><br><span class="line">cur = con.cursor()</span><br><span class="line"></span><br><span class="line"><span class="comment">#cur.execute("DELETE FROM movie WHERE score=8.2")</span></span><br><span class="line">cur.execute(<span class="string">"DELETE FROM movie WHERE score=?"</span>, (<span class="number">8.2</span>,))</span><br><span class="line"></span><br><span class="line">con.commit()</span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure></p><p>Python SQLite 如果要刪除 movie 資料表裡的所有資料可以這樣寫，<br><figure class="highlight python"><figcaption><span>python3-sqlite3-tutorial-delete2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">con = sqlite3.connect(<span class="string">"tutorial.db"</span>)</span><br><span class="line">cur = con.cursor()</span><br><span class="line"></span><br><span class="line">cur.execute(<span class="string">"DELETE FROM movie"</span>)</span><br><span class="line"></span><br><span class="line">con.commit()</span><br><span class="line">con.close()</span><br></pre></td></tr></table></figure></p><p>以上就是 Java File 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p>其它參考<br><a href="https://docs.python.org/zh-tw/3/library/sqlite3.html" rel="noopener" target="_blank">https://docs.python.org/zh-tw/3/library/sqlite3.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇 ShengYu 介紹 Python SQLite 資料庫教學與範例。  &lt;/p&gt;
&lt;p&gt;以下 Python SQLite 資料庫範例大概分為以下幾部份，  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python SQLite CREATE 用法與範例  &lt;/li&gt;
&lt;li&gt;Python SQLite INSERT 用法與範例  &lt;/li&gt;
&lt;li&gt;Python SQLite UPDATE 用法與範例  &lt;/li&gt;
&lt;li&gt;Python SQLite SELECT 用法與範例  &lt;/li&gt;
&lt;li&gt;Python SQLite DELETE 用法與範例  &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這邊先介紹 Python SQLite 最基本的開啟 DB 資料庫與關閉 DB 資料庫。&lt;br&gt;例如我要開啟 tutorial.db 這個 database，&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;figcaption&gt;&lt;span&gt;python3-sqlite3-tutorial-open-db.py&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!/usr/bin/env python3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -*- coding: utf-8 -*-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sqlite3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;con = sqlite3.connect(&lt;span class=&quot;string&quot;&gt;&quot;tutorial.db&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cur = con.cursor()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;con.close()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以上就是最簡單的 Python SQLite 範例，接下來我們來看看 Python SQLite 常見的操作範例。  &lt;/p&gt;
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu Android Emulator 模擬器的 image 大小</title>
    <link href="https://shengyu7697.github.io/android-emulator-image-size-in-ubuntu/"/>
    <id>https://shengyu7697.github.io/android-emulator-image-size-in-ubuntu/</id>
    <published>2023-02-09T14:00:00.000Z</published>
    <updated>2023-03-22T23:03:40.576Z</updated>
    
    <content type="html"><![CDATA[<p>本篇是我在 Ubuntu 16.04 下 Android 模擬器的 system image 大小紀錄，<br><a id="more"></a><br>Android 5.1, API 22, Size on Disk: 2.5 GB =&gt; 開機後 3.8 GB<br>~/Android/Sdk/system-images/android-22 : 4.3 GB  </p><p>Android 6.0, API 23, Size on Disk: 2.5 GB =&gt; 開機後 3.8 GB (我常使用)<br>~/Android/Sdk/system-images/android-23 : 3.5 GB  </p><p>Android 7.0, API 24, Size on Disk: 1 GB =&gt; 開機後 7.4 GB<br>~/Android/Sdk/system-images/android-23 : 3.3 GB  </p><p>Android 7.1.1, API 25,  </p><p>Android 8.0, API 26, Size on Disk: 1 GB =&gt; 開機後 ? GB  (開不起來)<br>~/Android/Sdk/system-images/android-26 : ? GB  </p><p>Android 8.1, API 27,  </p><p>Android 9.0, API 28, Size on Disk: 513 GB =&gt; 開機後 ? GB (開不起來)<br>~/Android/Sdk/system-images/android-28 : ? GB  </p><p>Android 10.0, API 29, Size on Disk: 513 MB =&gt; 開機後 ? GB (開不起來)<br>~/Android/Sdk/system-images/android-29 : 3.3 GB  </p><p>Android 11.0, API 30, Size on Disk: 513 MB =&gt; 開機後 ? GB (開不起來)<br>~/Android/Sdk/system-images/android-30 : 3.3 GB</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇是我在 Ubuntu 16.04 下 Android 模擬器的 system image 大小紀錄，&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://shengyu7697.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Java File 用法與範例</title>
    <link href="https://shengyu7697.github.io/java-file/"/>
    <id>https://shengyu7697.github.io/java-file/</id>
    <published>2023-02-06T14:00:00.000Z</published>
    <updated>2023-03-22T23:03:40.576Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介紹 Java File 用法與範例，Java File 常見用法是用來判斷路徑的檔案是否存在，或者判斷路徑的資料夾是否存在，還可以取得檔案的長度大小、檔案更動日期等等資訊。<br><a id="more"></a></p><h2><span id="java-fileisfile-範例">Java File.isFile 範例</span></h2><p>以下是一個簡單的 Java File.isFile 範例，用 <code>isFile()</code> 來判斷 <code>~/java</code> 路徑是否是一個檔案，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javac JavaFile.java &amp;&amp; java JavaFile</span></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaFile</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String path = <span class="string">"~/java"</span>;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (file.isFile()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"is file"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"is not file"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其它 Java File 常用的成員函式，<br><code>public boolean exists()</code>：測試路徑的檔案或目錄是否存在<br><code>public boolean isDirectory()</code>：測試路徑是否是一個目錄<br><code>public boolean isFile()</code>：測試路徑是否是一個檔案<br><code>public long lastModified()</code>：回傳路徑檔案最後一次被修改的時間<br><code>public long length()</code>：回傳路徑檔案長度  </p><p>以上就是 Java File 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p>其他參考<br><a href="https://www.runoob.com/java/java-file.html" rel="noopener" target="_blank">https://www.runoob.com/java/java-file.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇介紹 Java File 用法與範例，Java File 常見用法是用來判斷路徑的檔案是否存在，或者判斷路徑的資料夾是否存在，還可以取得檔案的長度大小、檔案更動日期等等資訊。&lt;br&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://shengyu7697.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript onclick event submit form 用法範例</title>
    <link href="https://shengyu7697.github.io/js-submit-form/"/>
    <id>https://shengyu7697.github.io/js-submit-form/</id>
    <published>2023-02-02T14:00:00.000Z</published>
    <updated>2023-03-22T23:03:40.576Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介紹如何在 JavaScript onclick event 事件中用 <code>form.submit()</code> 函式來 submit form 送出表單。  </p><h2><span id="html-基本的-submit-form-用法">HTML 基本的 submit form 用法</span></h2><p>HTML 基本的 submit form 寫法如下，有個 form 標籤，裡面有個 input 標籤 <code>type=&quot;submit&quot;</code>，<br><figure class="highlight html"><figcaption><span>submit-form.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Form Submit Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Include CSS File Here</span></span><br><span class="line"><span class="comment">&lt;link rel="stylesheet" href="css/xxx.css"/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Include JS File Here</span></span><br><span class="line"><span class="comment">&lt;script src="js/xxx.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Form Submit Example<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">name</span>=<span class="string">"form_name"</span> <span class="attr">id</span>=<span class="string">"form_id"</span> <span class="attr">class</span>=<span class="string">"form_class"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Name :<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"Name"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email :<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"Valid Email"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">name</span>=<span class="string">"submit_id"</span> <span class="attr">id</span>=<span class="string">"btn_id"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="javascript-onclick-event-submit-form-用法">JavaScript onclick event submit form 用法</span></h2><p>跟上範例不一樣的是，這次我們要把 input 標籤 <code>type=&quot;submit&quot;</code> 改成 input 標籤 <code>type=&quot;button&quot;</code>，然後再加上 <code>onclick=&quot;submit_func()&quot;</code> 指定某函式來處理 onclick 按鈕點擊事件。  </p><p>如下範例介紹了 4 種 方式，分別為 submit_by_id、submit_by_name、submit_by_class、submit_by_tag 來送出表單，<br><figure class="highlight html"><figcaption><span>submit-form2.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Javascript Form Submit Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Include CSS File Here</span></span><br><span class="line"><span class="comment">&lt;link rel="stylesheet" href="css/xxx.css"/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Include JS File Here</span></span><br><span class="line"><span class="comment">&lt;script src="js/xxx.js"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">submit_by_id</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">"name"</span>).value;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> email = <span class="built_in">document</span>.getElementById(<span class="string">"email"</span>).value;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (validation()) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// Submit form with id function.</span></span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"form_id"</span>).submit(); <span class="comment">// form submission</span></span></span><br><span class="line"><span class="javascript">        alert(<span class="string">"Name : "</span> + name + <span class="string">" \n"</span> +</span></span><br><span class="line"><span class="javascript">            <span class="string">"Email : "</span> + email + <span class="string">" \n"</span> +</span></span><br><span class="line"><span class="javascript">            <span class="string">"Form Id : "</span> + <span class="built_in">document</span>.getElementById(<span class="string">"form_id"</span>).getAttribute(<span class="string">"id"</span>) + <span class="string">"\n\n"</span> +</span></span><br><span class="line"><span class="javascript">            <span class="string">"Form Submitted Successfully"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">submit_by_name</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">"name"</span>).value;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> email = <span class="built_in">document</span>.getElementById(<span class="string">"email"</span>).value;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (validation()) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// Submit form with name function.</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> x = <span class="built_in">document</span>.getElementsByName(<span class="string">'form_name'</span>);</span></span><br><span class="line"><span class="javascript">        x[<span class="number">0</span>].submit(); <span class="comment">// form submission</span></span></span><br><span class="line"><span class="javascript">        alert(<span class="string">" Name : "</span> + name + <span class="string">" \n"</span> +</span></span><br><span class="line"><span class="javascript">            <span class="string">"Email : "</span> + email + <span class="string">" \n"</span> +</span></span><br><span class="line"><span class="javascript">            <span class="string">"Form Name : "</span> + <span class="built_in">document</span>.getElementById(<span class="string">"form_id"</span>).getAttribute(<span class="string">"name"</span>) + <span class="string">"\n\n"</span> +</span></span><br><span class="line"><span class="javascript">            <span class="string">"Form Submitted Successfully"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">submit_by_class</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">"name"</span>).value;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> email = <span class="built_in">document</span>.getElementById(<span class="string">"email"</span>).value;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (validation()) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// Submit form with class function.</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> x = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"form_class"</span>);</span></span><br><span class="line"><span class="javascript">        x[<span class="number">0</span>].submit(); <span class="comment">// form submission</span></span></span><br><span class="line"><span class="javascript">        alert(<span class="string">"Name : "</span> + name + <span class="string">" \n"</span> +</span></span><br><span class="line"><span class="javascript">            <span class="string">"Email : "</span> + email + <span class="string">" \n"</span> +</span></span><br><span class="line"><span class="javascript">            <span class="string">"Form Class : "</span> + <span class="built_in">document</span>.getElementById(<span class="string">"form_id"</span>).getAttribute(<span class="string">"class"</span>) + <span class="string">"\n\n"</span> +</span></span><br><span class="line"><span class="javascript">            <span class="string">"Form Submitted Successfully"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">submit_by_tag</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">"name"</span>).value;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> email = <span class="built_in">document</span>.getElementById(<span class="string">"email"</span>).value;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (validation()) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// Submit form with HTML &lt;form&gt; tag function.</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> x = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"form"</span>);</span></span><br><span class="line"><span class="javascript">        x[<span class="number">0</span>].submit(); <span class="comment">// form submission</span></span></span><br><span class="line"><span class="javascript">        alert(<span class="string">"Name : "</span> + name + <span class="string">" \n"</span> +</span></span><br><span class="line"><span class="javascript">            <span class="string">"Email : "</span> + email + <span class="string">" \n"</span> +</span></span><br><span class="line"><span class="javascript">            <span class="string">"Form Tag : &lt;form&gt;\n\n"</span> +</span></span><br><span class="line"><span class="javascript">            <span class="string">"Form Submitted Successfully"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">validation</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> name = <span class="built_in">document</span>.getElementById(<span class="string">"name"</span>).value;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> email = <span class="built_in">document</span>.getElementById(<span class="string">"email"</span>).value;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (name === <span class="string">""</span> || email === <span class="string">""</span>) &#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">"Please fill all fields...!!!!!!"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Javascript Form Submit Example<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">name</span>=<span class="string">"form_name"</span> <span class="attr">id</span>=<span class="string">"form_id"</span> <span class="attr">class</span>=<span class="string">"form_class"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Name :<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">placeholder</span>=<span class="string">"Name"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>Email :<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"Valid Email"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"submit_id"</span> <span class="attr">id</span>=<span class="string">"btn_id"</span> <span class="attr">value</span>=<span class="string">"Submit by Id"</span> <span class="attr">onclick</span>=<span class="string">"submit_by_id()"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"submit_name"</span> <span class="attr">id</span>=<span class="string">"btn_name"</span> <span class="attr">value</span>=<span class="string">"Submit by Name"</span> <span class="attr">onclick</span>=<span class="string">"submit_by_name()"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"submit_class"</span> <span class="attr">id</span>=<span class="string">"btn_class"</span> <span class="attr">value</span>=<span class="string">"Submit by Class"</span> <span class="attr">onclick</span>=<span class="string">"submit_by_class()"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"submit_tag"</span> <span class="attr">id</span>=<span class="string">"btn_tag"</span> <span class="attr">value</span>=<span class="string">"Submit by Tag"</span> <span class="attr">onclick</span>=<span class="string">"submit_by_tag()"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>JavaScript submit 有兩種寫法，第一種是這樣，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"form_id"</span>).submit();</span><br></pre></td></tr></table></figure></p><p>第二種是這樣，<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="built_in">document</span>.getElementById(<span class="string">'form_id'</span>);</span><br><span class="line">x[<span class="number">0</span>].submit();</span><br></pre></td></tr></table></figure></p><p>以上就是 JavaScript onclick event submit form 用法範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p>其他參考<br>Onclick JavaScript Form Submit<br><a href="https://www.formget.com/javascript-submit-form/" rel="noopener" target="_blank">https://www.formget.com/javascript-submit-form/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇介紹如何在 JavaScript onclick event 事件中用 &lt;code&gt;form.submit()&lt;/code&gt; 函式來 submit form 送出表單。  &lt;/p&gt;
&lt;h2 id=&quot;HTML-基本的-submit-form-用法&quot;&gt;&lt;a href=&quot;#HTML-基本的-submit-form-用法&quot; class=&quot;headerlink&quot; title=&quot;HTML 基本的 submit form 用法&quot;&gt;&lt;/a&gt;HTML 基本的 submit form 用法&lt;/h2&gt;&lt;p&gt;HTML 基本的 submit form 寫法如下，有個 form 標籤，裡面有個 input 標籤 &lt;code&gt;type=&amp;quot;submit&amp;quot;&lt;/code&gt;，&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;figcaption&gt;&lt;span&gt;submit-form.html&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Form Submit Example&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Include CSS File Here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/xxx.css&quot;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- Include JS File Here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;script src=&quot;js/xxx.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;--&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;container&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;main&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;Form Submit Example&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;action&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;#&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;post&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;form_name&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;form_id&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;form_class&quot;&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;Name :&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;placeholder&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Name&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;Email :&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;email&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;email&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;placeholder&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Valid Email&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;submit_id&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;btn_id&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Submit&quot;&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://shengyu7697.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Android Java 取得 build date 當下編譯日期時間</title>
    <link href="https://shengyu7697.github.io/android-java-build-date/"/>
    <id>https://shengyu7697.github.io/android-java-build-date/</id>
    <published>2023-01-30T14:00:00.000Z</published>
    <updated>2023-03-22T23:03:40.576Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Android Java 取得 build date 當下編譯日期時間的寫法，這樣在每次編譯後，都會紀錄當下編譯的時間，在開發或 debug 時可以拿來確認到底有加入你的更動，這招特別方便好用。<br><a id="more"></a><br>在 build.gradle 裡的 defaultConfig 區塊加上 <code>buildConfigField &quot;long&quot;, &quot;BUILD_TIME&quot;, System.currentTimeMillis() + &quot;L&quot;</code> 這一行，如下所示，大意為就是編譯時會讓 BUILD_TIME 設定成 System.currentTimeMillis() 系統當前時間(毫秒)這個數值，<br><figure class="highlight groovy"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        buildConfigField <span class="string">"long"</span>, <span class="string">"BUILD_TIME"</span>, System.currentTimeMillis() + <span class="string">"L"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然後在 java 程式裡產生 Date 物件時帶入這個 <code>BuildConfig.BUILD_TIME</code> 時間戳，這邊簡單示範在 MainActivity.java 裡印出 build date 編譯的日期，<br><figure class="highlight java"><figcaption><span>build-date/MainActivity.java</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myapplication;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        Date buildDate = <span class="keyword">new</span> Date(BuildConfig.BUILD_TIME);</span><br><span class="line">        Log.d(<span class="string">"MainActivity"</span>, <span class="string">"build date: "</span> + buildDate);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>這樣的輸出結果會是這樣，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build date: Fri Jan 13 14:45:44 UTC 2023</span><br></pre></td></tr></table></figure></p><p>那如果想要顯示單純一點的話可以格式化時間，如下，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat sdFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy/MM/dd HH:mm:ss.SSS"</span>);</span><br><span class="line">Log.d(<span class="string">"MainActivity"</span>, <span class="string">"build date: "</span> + sdFormat.format(buildDate));</span><br></pre></td></tr></table></figure></p><p>這樣的輸出結果會是這樣，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">build date: 2023/01/13 14:47:43.563</span><br></pre></td></tr></table></figure></p><p>以上就是 Android Java 取得 build date 當下編譯日期時間介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p>其它參考<br>android - How to write build time stamp into apk - Stack Overflow<br><a href="https://stackoverflow.com/questions/7607165/how-to-write-build-time-stamp-into-apk" rel="noopener" target="_blank">https://stackoverflow.com/questions/7607165/how-to-write-build-time-stamp-into-apk</a><br>How to programmatically read the date when my Android apk was built? - Stack Overflow<br><a href="https://stackoverflow.com/questions/3540739/how-to-programmatically-read-the-date-when-my-android-apk-was-built" rel="noopener" target="_blank">https://stackoverflow.com/questions/3540739/how-to-programmatically-read-the-date-when-my-android-apk-was-built</a><br>金石微開: [Android] 取得Build Date<br><a href="https://boywhy.blogspot.com/2016/04/android-build-date.html" rel="noopener" target="_blank">https://boywhy.blogspot.com/2016/04/android-build-date.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇 ShengYu 介紹 Android Java 取得 build date 當下編譯日期時間的寫法，這樣在每次編譯後，都會紀錄當下編譯的時間，在開發或 debug 時可以拿來確認到底有加入你的更動，這招特別方便好用。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://shengyu7697.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>6 種查詢 SQLite 版本的方法</title>
    <link href="https://shengyu7697.github.io/sqlite-version/"/>
    <id>https://shengyu7697.github.io/sqlite-version/</id>
    <published>2023-01-26T14:00:00.000Z</published>
    <updated>2023-01-27T09:01:27.200Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 6 種查詢 SQLite 版本的方法，分為這幾種方法，  </p><ul><li>sqlite3.h 標頭檔查詢 SQLite 版本  </li><li>C 語言查詢 SQLite 版本  </li><li>Python 查詢 SQLite 版本  </li><li>SQL 語法查詢 SQLite 版本  </li><li>Command 下指令查詢 SQLite 版本  </li><li>從 database 檔案本身查詢 SQLite 版本  </li></ul><h2><span id="sqlite3h-標頭檔查詢-sqlite-版本">sqlite3.h 標頭檔查詢 SQLite 版本</span></h2><p>一種是從 sqlite3.h 標頭檔去看，在 sqlite3.h 搜尋 SQLITE_VERSION 這個定義就可以找到版本號碼了。  </p><figure class="highlight cpp"><figcaption><span>sqlite3.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SQLITE_VERSION        <span class="meta-string">"3.40.1"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SQLITE_VERSION_NUMBER 3040001</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SQLITE_SOURCE_ID      <span class="meta-string">"2022-12-28 14:03:47 df5c253c0b3dd24916e4ec7cf77d3db5294cc9fd45ae7b9c5e82ad8197f38a24"</span></span></span><br></pre></td></tr></table></figure><h2><span id="c-語言查詢-sqlite-版本">C 語言查詢 SQLite 版本</span></h2><p>C 語言的話可呼叫 <code>sqlite3_libversion()</code> API, 有時候系統已經有安裝一份 SQLite 的標頭檔了，但是你想用下載的新版的 SQLite，可能會因為你設置不對造成程式跑去連結系統的那一份，這時用呼叫 <code>sqlite3_libversion()</code> API 來看 SQLite 版本就會比較準確知道你是使用哪一份 SQLite，<br><a id="more"></a><br>include sqlite3.h 標頭檔後，你可以直接印出 sqlite3_version 這個字串，也可以呼叫 <code>sqlite3_libversion()</code> 函式得到版本號碼，兩者是一樣的效果，因為 <code>sqlite3_libversion()</code> 內部實作就是回傳指向 sqlite3_version 的指標，  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"sqlite3_version: %s\n"</span>, sqlite3_version);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"sqlite3_libversion: %s\n"</span>, sqlite3_libversion());</span><br></pre></td></tr></table></figure><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-查詢-sqlite-版本">Python 查詢 SQLite 版本</span></h2><p>Python 查詢 SQLite 版本的方法如下，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">sqlite3.sqlite_version</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">sqlite3.version</span><br></pre></td></tr></table></figure></p><h2><span id="sql-語法查詢-sqlite-版本">SQL 語法查詢 SQLite 版本</span></h2><p>SQL 語法查詢<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sqlite_version();</span><br></pre></td></tr></table></figure></p><h2><span id="command-下指令查詢-sqlite-版本">Command 下指令查詢 SQLite 版本</span></h2><p>Command 下指令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sqlite3 --version</span><br></pre></td></tr></table></figure></p><h2><span id="從-database-檔案本身查詢-sqlite-版本">從 database 檔案本身查詢 SQLite 版本</span></h2><p>你也可以從 database 檔案頭幾個 Magic Header 了解這個 database 是 sqlite 哪個版本，<br>sqlite2 ==&gt; first 48 bytes<br>sqlite3 ==&gt; first 16 bytes<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ head -c 48 file2.db <span class="comment"># This file contains an SQLite 2.1 database</span></span><br><span class="line">$ head -c 16 file3.db <span class="comment"># SQLite format 3</span></span><br></pre></td></tr></table></figure></p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>更簡單的方法是用 file 指令來看這個 database 檔的資訊，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ file file2.db</span><br><span class="line">file2.db: SQLite 2.x database</span><br><span class="line"></span><br><span class="line">$ file file3.db</span><br><span class="line">file3.db: SQLite 3.x database</span><br></pre></td></tr></table></figure></p><p>以上就是 6 種查詢 SQLite 版本的方法介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p>其它參考<br>How to find SQLITE database file version - Stack Overflow<br><a href="https://stackoverflow.com/questions/9646353/how-to-find-sqlite-database-file-version" rel="noopener" target="_blank">https://stackoverflow.com/questions/9646353/how-to-find-sqlite-database-file-version</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇 ShengYu 介紹 6 種查詢 SQLite 版本的方法，分為這幾種方法，  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sqlite3.h 標頭檔查詢 SQLite 版本  &lt;/li&gt;
&lt;li&gt;C 語言查詢 SQLite 版本  &lt;/li&gt;
&lt;li&gt;Python 查詢 SQLite 版本  &lt;/li&gt;
&lt;li&gt;SQL 語法查詢 SQLite 版本  &lt;/li&gt;
&lt;li&gt;Command 下指令查詢 SQLite 版本  &lt;/li&gt;
&lt;li&gt;從 database 檔案本身查詢 SQLite 版本  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;sqlite3-h-標頭檔查詢-SQLite-版本&quot;&gt;&lt;a href=&quot;#sqlite3-h-標頭檔查詢-SQLite-版本&quot; class=&quot;headerlink&quot; title=&quot;sqlite3.h 標頭檔查詢 SQLite 版本&quot;&gt;&lt;/a&gt;sqlite3.h 標頭檔查詢 SQLite 版本&lt;/h2&gt;&lt;p&gt;一種是從 sqlite3.h 標頭檔去看，在 sqlite3.h 搜尋 SQLITE_VERSION 這個定義就可以找到版本號碼了。  &lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;sqlite3.h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; SQLITE_VERSION        &lt;span class=&quot;meta-string&quot;&gt;&quot;3.40.1&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; SQLITE_VERSION_NUMBER 3040001&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;define&lt;/span&gt; SQLITE_SOURCE_ID      &lt;span class=&quot;meta-string&quot;&gt;&quot;2022-12-28 14:03:47 df5c253c0b3dd24916e4ec7cf77d3db5294cc9fd45ae7b9c5e82ad8197f38a24&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;C-語言查詢-SQLite-版本&quot;&gt;&lt;a href=&quot;#C-語言查詢-SQLite-版本&quot; class=&quot;headerlink&quot; title=&quot;C 語言查詢 SQLite 版本&quot;&gt;&lt;/a&gt;C 語言查詢 SQLite 版本&lt;/h2&gt;&lt;p&gt;C 語言的話可呼叫 &lt;code&gt;sqlite3_libversion()&lt;/code&gt; API, 有時候系統已經有安裝一份 SQLite 的標頭檔了，但是你想用下載的新版的 SQLite，可能會因為你設置不對造成程式跑去連結系統的那一份，這時用呼叫 &lt;code&gt;sqlite3_libversion()&lt;/code&gt; API 來看 SQLite 版本就會比較準確知道你是使用哪一份 SQLite，&lt;br&gt;
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ rand 產生亂數用法與範例</title>
    <link href="https://shengyu7697.github.io/cpp-rand/"/>
    <id>https://shengyu7697.github.io/cpp-rand/</id>
    <published>2023-01-23T14:00:00.000Z</published>
    <updated>2023-01-27T08:59:49.764Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ rand 產生亂數用法與範例。  </p><p>C/C++ 要使用 rand 的話需要引入的標頭檔 <code>&lt;stdlib.h&gt;</code>，如果要使用 C++ 的標頭檔則是引入 <code>&lt;cstdlib&gt;</code>，<br>rand 函式原型為<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rand</span> <span class="params">(<span class="keyword">void</span>)</span></span>;</span><br></pre></td></tr></table></figure></p><p><code>rand()</code> 所產生的亂數是一個整數，其值介於 0 到 RAND_MAX 之間，RAND_MAX 的值會是 2147483647，跟 INT_MAX 一樣。  </p><h2><span id="cc-rand-用法">C/C++ rand 用法</span></h2><p>用 <code>rand()</code> 產生 0-9 亂數寫法如下，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-rand.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = rand() % <span class="number">10</span>; <span class="comment">// 產生 0-9 亂數</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"n = %d\n"</span>, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果如下，會發現執行3次的結果亂數都一樣，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./a.out </span><br><span class="line">n = 3</span><br><span class="line">$ ./a.out </span><br><span class="line">n = 3</span><br><span class="line">$ ./a.out </span><br><span class="line">n = 3</span><br></pre></td></tr></table></figure></p><p>這次我們以時間做為亂數種子，再試看看會變成怎麼樣？<br><figure class="highlight cpp"><figcaption><span>cpp-rand-2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-rand-2.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>)); <span class="comment">// 設定時間為亂數種子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = rand() % <span class="number">10</span>; <span class="comment">// 產生 0-9 亂數</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"n = %d\n"</span>, n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>結果如下，會發現執行3次的結果亂數都不一樣了！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./a.out </span><br><span class="line">n = 9</span><br><span class="line">$ ./a.out </span><br><span class="line">n = 7</span><br><span class="line">$ ./a.out </span><br><span class="line">n = 4</span><br></pre></td></tr></table></figure></p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>用 <code>rand()</code> 產生 1-10 亂數寫法如下，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = rand() % <span class="number">10</span> + <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>用 <code>rand()</code> 產生 a-z 亂數字母寫法如下，<br><figure class="highlight cpp"><figcaption><span>cpp-rand-3.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-rand-3.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> letters[<span class="number">27</span>] = <span class="string">"abcdefghijklmnopqrstuvwxyz"</span>;</span><br><span class="line"></span><br><span class="line">    srand(time(<span class="literal">NULL</span>)); <span class="comment">// 設定亂數種子</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> size = (<span class="keyword">int</span>)<span class="keyword">sizeof</span>(letters);</span><br><span class="line">    <span class="keyword">char</span> c = letters[rand() % size]; <span class="comment">// 產生 a-z 亂數字母</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c = %c\n"</span>, c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ ./a.out </span><br><span class="line">c = s</span><br><span class="line">$ ./a.out </span><br><span class="line">c = i</span><br><span class="line">$ ./a.out </span><br><span class="line">c = v</span><br></pre></td></tr></table></figure></p><p>以上就是 C/C++ rand 產生亂數用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 C++ 相關技術，可以參考看看下面的文章，<br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-fopen/" title="C/C++ fopen 用法與範例">C/C++ fopen 用法與範例</a><br><a href="/cpp-fread/" title="C/C++ fread 用法與範例">C/C++ fread 用法與範例</a><br><a href="/cpp-fgets/" title="C/C++ fgets 用法與範例">C/C++ fgets 用法與範例</a><br><a href="/cpp-fputs/" title="C/C++ fputs 用法與範例">C/C++ fputs 用法與範例</a><br><a href="/cpp-fclose/" title="C/C++ fclose 用法與範例">C/C++ fclose 用法與範例</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇 ShengYu 介紹 C/C++ rand 產生亂數用法與範例。  &lt;/p&gt;
&lt;p&gt;C/C++ 要使用 rand 的話需要引入的標頭檔 &lt;code&gt;&amp;lt;stdlib.h&amp;gt;&lt;/code&gt;，如果要使用 C++ 的標頭檔則是引入 &lt;code&gt;&amp;lt;cstdlib&amp;gt;&lt;/code&gt;，&lt;br&gt;rand 函式原型為&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rand&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rand()&lt;/code&gt; 所產生的亂數是一個整數，其值介於 0 到 RAND_MAX 之間，RAND_MAX 的值會是 2147483647，跟 INT_MAX 一樣。  &lt;/p&gt;
&lt;h2 id=&quot;C-C-rand-用法&quot;&gt;&lt;a href=&quot;#C-C-rand-用法&quot; class=&quot;headerlink&quot; title=&quot;C/C++ rand 用法&quot;&gt;&lt;/a&gt;C/C++ rand 用法&lt;/h2&gt;&lt;p&gt;用 &lt;code&gt;rand()&lt;/code&gt; 產生 0-9 亂數寫法如下，&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// g++ cpp-rand.cpp -o a.out&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n = rand() % &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 產生 0-9 亂數&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;n = %d\n&quot;&lt;/span&gt;, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;結果如下，會發現執行3次的結果亂數都一樣，&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ./a.out &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ./a.out &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n = 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ./a.out &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;n = 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;這次我們以時間做為亂數種子，再試看看會變成怎麼樣？&lt;br&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;cpp-rand-2.cpp&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// g++ cpp-rand-2.cpp -o a.out&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    srand(time(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;)); &lt;span class=&quot;comment&quot;&gt;// 設定時間為亂數種子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n = rand() % &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 產生 0-9 亂數&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;n = %d\n&quot;&lt;/span&gt;, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ Linux shared memory 與 mmap 用法範例</title>
    <link href="https://shengyu7697.github.io/cpp-linux-shared-memory-mmap/"/>
    <id>https://shengyu7697.github.io/cpp-linux-shared-memory-mmap/</id>
    <published>2023-01-19T14:00:00.000Z</published>
    <updated>2023-01-27T08:59:49.764Z</updated>
    
    <content type="html"><![CDATA[<p>今天 ShengYu 來介紹 Linux 跨行程通訊 IPC 中的其中一種方式：共享記憶體 Shared Memory 以及  named semaphore，這通常也是 OS (operating system)作業系統或linux系統程式課程中的一部分，以下範例分為生產者 producer 與消費者 consumer，基本上會使用到 mmap 與 shm_open 這幾個函式。  </p><h2><span id="共享記憶體傳遞-string-字串的範例">共享記憶體傳遞 string 字串的範例</span></h2><p>生產者 producer 寫入 string 字串的範例如下，<br>這邊的 shm_open 是使用 <code>O_CREAT | O_RDWR</code> 能建立且能讀取寫入，同樣的 mmap 也使用 <code>PROT_READ | PROT_WRITE</code> 能讀取跟寫入。<br><figure class="highlight c"><figcaption><span>shm-posix-producer-string.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc shm-posix-producer-string.c -o produce -lrt &amp;&amp; ./produce</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">char</span> *prog, <span class="keyword">char</span> *bytes, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"display: %s\n"</span>, prog);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%02x%c"</span>, bytes[i], ((i+<span class="number">1</span>)%<span class="number">16</span>) ? <span class="string">' '</span> : <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">4096</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name = <span class="string">"OS"</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *message0= <span class="string">"Studying "</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *message1= <span class="string">"Operating Systems "</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *message2= <span class="string">"Is Fun!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> shm_fd;</span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* create the shared memory segment */</span></span><br><span class="line">    shm_fd = shm_open(name, O_CREAT | O_RDWR, <span class="number">0666</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* configure the size of the shared memory segment */</span></span><br><span class="line">    ftruncate(shm_fd,SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* now map the shared memory segment in the address space of the process */</span></span><br><span class="line">    ptr = mmap(<span class="number">0</span>,SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ptr == MAP_FAILED) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Map failed\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Now write to the shared memory region.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Note we must increment the value of ptr after each write.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">char</span> *str = (<span class="keyword">char</span> *)ptr;</span><br><span class="line">    <span class="built_in">sprintf</span>(str,<span class="string">"%s"</span>,message0);</span><br><span class="line">    str += <span class="built_in">strlen</span>(message0);</span><br><span class="line">    <span class="built_in">sprintf</span>(str,<span class="string">"%s"</span>,message1);</span><br><span class="line">    str += <span class="built_in">strlen</span>(message1);</span><br><span class="line">    <span class="built_in">sprintf</span>(str,<span class="string">"%s"</span>,message2);</span><br><span class="line">    str += <span class="built_in">strlen</span>(message2);</span><br><span class="line">    display(<span class="string">"prod"</span>, ptr, <span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>producer 輸出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">display: prod</span><br><span class="line">53 74 75 64 79 69 6e 67 20 4f 70 65 72 61 74 69</span><br><span class="line">6e 67 20 53 79 73 74 65 6d 73 20 49 73 20 46 75</span><br><span class="line">6e 21 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br></pre></td></tr></table></figure></p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>消費者 consumer 讀取 string 字串的範例如下，<br>這邊的 shm_open 是使用 <code>O_RDONLY</code> 只能讀取，同樣的 mmap 也使用 <code>PROT_READ</code> 只能讀取。<br><figure class="highlight c"><figcaption><span>shm-posix-consumer-string.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc shm-posix-consumer-string.c -o consume -lrt &amp;&amp; ./consume</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">char</span> *prog, <span class="keyword">char</span> *bytes, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"display: %s\n"</span>, prog);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%02x%c"</span>, bytes[i], ((i+<span class="number">1</span>)%<span class="number">16</span>) ? <span class="string">' '</span> : <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name = <span class="string">"OS"</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">4096</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> shm_fd;</span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* open the shared memory segment */</span></span><br><span class="line">    shm_fd = shm_open(name, O_RDONLY, <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span> (shm_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"shared memory failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* now map the shared memory segment in the address space of the process */</span></span><br><span class="line">    ptr = mmap(<span class="number">0</span>,SIZE, PROT_READ, MAP_SHARED, shm_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ptr == MAP_FAILED) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Map failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* now read from the shared memory region */</span></span><br><span class="line">    display(<span class="string">"cons"</span>, ptr, <span class="number">64</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,(<span class="keyword">char</span> *)ptr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* remove the shared memory segment */</span></span><br><span class="line">    <span class="keyword">if</span> (shm_unlink(name) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error removing %s\n"</span>,name);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>consumer 輸出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">display: cons</span><br><span class="line">53 74 75 64 79 69 6e 67 20 4f 70 65 72 61 74 69</span><br><span class="line">6e 67 20 53 79 73 74 65 6d 73 20 49 73 20 46 75</span><br><span class="line">6e 21 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line"></span><br><span class="line">Studying Operating Systems Is Fun!</span><br></pre></td></tr></table></figure></p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="共享記憶體傳遞-char-字元的範例">共享記憶體傳遞 char 字元的範例</span></h2><p>生產者 producer 寫入 char 字元的範例如下，<br><figure class="highlight c"><figcaption><span>shm-posix-producer-char.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc shm-posix-producer-char.c -o produce -lrt &amp;&amp; ./produce</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">char</span> *prog, <span class="keyword">char</span> *bytes, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"display: %s\n"</span>, prog);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%02x%c"</span>, bytes[i], ((i+<span class="number">1</span>)%<span class="number">16</span>) ? <span class="string">' '</span> : <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">4096</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name = <span class="string">"OS"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> shm_fd;</span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* create the shared memory segment */</span></span><br><span class="line">    shm_fd = shm_open(name, O_CREAT | O_RDWR, <span class="number">0666</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* configure the size of the shared memory segment */</span></span><br><span class="line">    ftruncate(shm_fd,SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* now map the shared memory segment in the address space of the process */</span></span><br><span class="line">    ptr = mmap(<span class="number">0</span>,SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ptr == MAP_FAILED) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Map failed\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Now write to the shared memory region. */</span></span><br><span class="line">    <span class="built_in">sprintf</span>(ptr,<span class="string">"%c"</span>, <span class="string">'A'</span>);</span><br><span class="line">    display(<span class="string">"prod"</span>, ptr, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>producer 輸出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">display: prod</span><br><span class="line">41 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br></pre></td></tr></table></figure></p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>消費者 consumer 讀取 char 字元的範例如下，<br><figure class="highlight c"><figcaption><span>shm-posix-consumer-char.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc shm-posix-consumer-char.c -o consume -lrt &amp;&amp; ./consume</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">char</span> *prog, <span class="keyword">char</span> *bytes, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"display: %s\n"</span>, prog);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%02x%c"</span>, bytes[i], ((i+<span class="number">1</span>)%<span class="number">16</span>) ? <span class="string">' '</span> : <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name = <span class="string">"OS"</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">4096</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> shm_fd;</span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* open the shared memory segment */</span></span><br><span class="line">    shm_fd = shm_open(name, O_RDONLY, <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span> (shm_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"shared memory failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* now map the shared memory segment in the address space of the process */</span></span><br><span class="line">    ptr = mmap(<span class="number">0</span>,SIZE, PROT_READ, MAP_SHARED, shm_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ptr == MAP_FAILED) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Map failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* now read from the shared memory region */</span></span><br><span class="line">    display(<span class="string">"cons"</span>, ptr, <span class="number">32</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c\n"</span>, *(<span class="keyword">char</span> *)ptr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* remove the shared memory segment */</span></span><br><span class="line">    <span class="keyword">if</span> (shm_unlink(name) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error removing %s\n"</span>,name);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>consumer 輸出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">display: cons</span><br><span class="line">41 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line"></span><br><span class="line">A</span><br></pre></td></tr></table></figure></p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="共享記憶體傳遞-int-整數的範例">共享記憶體傳遞 int 整數的範例</span></h2><p>生產者 producer 寫入 int 整數的範例如下，<br><figure class="highlight c"><figcaption><span>shm-posix-producer-int.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc shm-posix-producer-int.c -o produce -lrt &amp;&amp; ./produce</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">char</span> *prog, <span class="keyword">char</span> *bytes, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"display: %s\n"</span>, prog);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%02x%c"</span>, bytes[i] &amp; <span class="number">0xff</span>, ((i+<span class="number">1</span>)%<span class="number">16</span>) ? <span class="string">' '</span> : <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">4096</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name = <span class="string">"OS"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> shm_fd;</span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* create the shared memory segment */</span></span><br><span class="line">    shm_fd = shm_open(name, O_CREAT | O_RDWR, <span class="number">0666</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* configure the size of the shared memory segment */</span></span><br><span class="line">    ftruncate(shm_fd,SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* now map the shared memory segment in the address space of the process */</span></span><br><span class="line">    ptr = mmap(<span class="number">0</span>,SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ptr == MAP_FAILED) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Map failed\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Now write to the shared memory region. */</span></span><br><span class="line">    <span class="keyword">int</span> *num = (<span class="keyword">int</span> *)ptr;</span><br><span class="line">    num[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    num[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    num[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">    num[<span class="number">3</span>] = <span class="number">456</span>;</span><br><span class="line">    display(<span class="string">"prod"</span>, ptr, <span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>producer 輸出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">display: prod</span><br><span class="line">01 00 00 00 02 00 00 00 03 00 00 00 c8 01 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br></pre></td></tr></table></figure></p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>消費者 consumer 讀取 int 整數的範例如下，<br><figure class="highlight c"><figcaption><span>shm-posix-consumer-int.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc shm-posix-consumer-int.c -o consume -lrt &amp;&amp; ./consume</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">char</span> *prog, <span class="keyword">char</span> *bytes, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"display: %s\n"</span>, prog);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%02x%c"</span>, bytes[i] &amp; <span class="number">0xff</span>, ((i+<span class="number">1</span>)%<span class="number">16</span>) ? <span class="string">' '</span> : <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name = <span class="string">"OS"</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">4096</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> shm_fd;</span><br><span class="line">    <span class="keyword">void</span> *ptr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* open the shared memory segment */</span></span><br><span class="line">    shm_fd = shm_open(name, O_RDONLY, <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span> (shm_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"shared memory failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* now map the shared memory segment in the address space of the process */</span></span><br><span class="line">    ptr = mmap(<span class="number">0</span>,SIZE, PROT_READ, MAP_SHARED, shm_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ptr == MAP_FAILED) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Map failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* now read from the shared memory region */</span></span><br><span class="line">    display(<span class="string">"cons"</span>, ptr, <span class="number">32</span>);</span><br><span class="line">    <span class="keyword">int</span> *num = (<span class="keyword">int</span> *)ptr;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num[<span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num[<span class="number">2</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, num[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* remove the shared memory segment */</span></span><br><span class="line">    <span class="keyword">if</span> (shm_unlink(name) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error removing %s\n"</span>,name);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>consumer 輸出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">display: cons</span><br><span class="line">01 00 00 00 02 00 00 00 03 00 00 00 c8 01 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">456</span><br></pre></td></tr></table></figure></p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="共享記憶體傳遞-int-整數陣列的範例">共享記憶體傳遞 int 整數陣列的範例</span></h2><p>剛剛前述的範例都是 producer 單向地寫入資料，consumer 只是 read only 讀取資料，這邊示範 producer 在一個整數陣列中不斷地產生亂數循序放入陣列中，之後 consumer 會從該陣列中循序消耗變數且會將其位置寫回成 -1，其中會用到 semaphore 的 sem_wait 跟 sem_post 技巧。  </p><p>如下 producer 範例程式，producer 函式在一個整數陣列中不斷地產生亂數用 insert_item 循序放入陣列中，直到滿了以後會因為 empty sem_t 是 0 的關係無法減 1 而 block 卡住等待，直到有人用 <code>sem_post(empty)</code> 將 empty sem_t 加 1 以後 <code>sem_wait(empty)</code> 才會繼續往下執行。  </p><p>要注意的是，在一開始 main 函式中 <code>sem_init(empty, 1, BUFFER_SIZE);</code> 的第二個參數是指定這個 semaphore 是不是跨行程的，如果是跨行程要設定成 1，如果只是在同一行程內用的話就設定成 0。  </p><figure class="highlight c"><figcaption><span>shm-posix-producer-int-array.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc shm-posix-producer-int-array.c -o produce -lrt -pthread &amp;&amp; ./produce</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE 5</span></span><br><span class="line"><span class="keyword">int</span> *buffer = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">sem_t</span> *empty;</span><br><span class="line"><span class="keyword">sem_t</span> *full;</span><br><span class="line"><span class="keyword">int</span> insertPointer = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">void</span> *ptr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">char</span> *prog, <span class="keyword">char</span> *bytes, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"display: %s\n"</span>, prog);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%02x%c"</span>, bytes[i] &amp; <span class="number">0xff</span>, ((i+<span class="number">1</span>)%<span class="number">16</span>) ? <span class="string">' '</span> : <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span></span><br><span class="line">    (<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display_int_array</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, arr[i], ((i+<span class="number">1</span>)%<span class="number">16</span>) ? <span class="string">' '</span> : <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert_item</span><span class="params">(<span class="keyword">int</span> item)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* Acquire Empty Semaphore */</span></span><br><span class="line">    sem_wait(empty);</span><br><span class="line"></span><br><span class="line">    buffer[insertPointer++] = item;</span><br><span class="line">    insertPointer = insertPointer % BUFFER_SIZE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Full semaphore */</span></span><br><span class="line">    sem_post(full);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">producer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> random;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//r = rand() % 5;</span></span><br><span class="line">        <span class="comment">//sleep(r);</span></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        random = rand() % <span class="number">20</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (insert_item(random))</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Producer produced %d\n"</span>, random);</span><br><span class="line">        display(<span class="string">"prod"</span>, ptr, <span class="number">64</span>);</span><br><span class="line">        display_int_array(buffer, BUFFER_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">4096</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name = <span class="string">"OS"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> shm_fd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* create the shared memory segment */</span></span><br><span class="line">    shm_fd = shm_open(name, O_CREAT | O_RDWR, <span class="number">0666</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* configure the size of the shared memory segment */</span></span><br><span class="line">    ftruncate(shm_fd,SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* now map the shared memory segment in the address space of the process */</span></span><br><span class="line">    ptr = mmap(<span class="number">0</span>,SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ptr == MAP_FAILED) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Map failed\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* clear ptr and make empty, full and buffer pointer to ptr</span></span><br><span class="line"><span class="comment">     * empty sem_t | full sem_t | buffer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">memset</span>(ptr, <span class="number">0</span>, SIZE);</span><br><span class="line">    empty = (<span class="keyword">sem_t</span> *)ptr;</span><br><span class="line">    full = ptr + <span class="keyword">sizeof</span>(<span class="keyword">sem_t</span>);</span><br><span class="line">    buffer = (<span class="keyword">int</span> *)(ptr + <span class="keyword">sizeof</span>(<span class="keyword">sem_t</span>) + <span class="keyword">sizeof</span>(<span class="keyword">sem_t</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Initialize the synchronization tools */</span></span><br><span class="line">    sem_init(empty, <span class="number">1</span>, BUFFER_SIZE);</span><br><span class="line">    sem_init(full, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Now write to the shared memory region. */</span></span><br><span class="line">    <span class="comment">//buffer[0] = 1;</span></span><br><span class="line">    <span class="comment">//buffer[1] = 2;</span></span><br><span class="line">    <span class="comment">//buffer[2] = 3;</span></span><br><span class="line">    <span class="comment">//insert_item(1);</span></span><br><span class="line">    <span class="comment">//insert_item(2);</span></span><br><span class="line">    <span class="comment">//insert_item(3);</span></span><br><span class="line">    <span class="comment">//insert_item(4);</span></span><br><span class="line">    <span class="comment">//insert_item(5);</span></span><br><span class="line">    <span class="comment">//insert_item(6);</span></span><br><span class="line">    <span class="comment">//insert_item(7);</span></span><br><span class="line">    <span class="comment">//insert_item(123456);</span></span><br><span class="line">    <span class="comment">//insert_item(16);</span></span><br><span class="line">    <span class="comment">//insert_item(-1);</span></span><br><span class="line">    display(<span class="string">"prod"</span>, ptr, <span class="number">64</span>);</span><br><span class="line">    display_int_array(buffer, BUFFER_SIZE);</span><br><span class="line">    </span><br><span class="line">    producer();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>producer 輸出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">./produce</span><br><span class="line">display: prod</span><br><span class="line">05 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line"></span><br><span class="line">0 0 0 0 0 </span><br><span class="line">Producer produced 4</span><br><span class="line">display: prod</span><br><span class="line">04 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">01 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line"></span><br><span class="line">4 0 0 0 0 </span><br><span class="line">Producer produced 7</span><br><span class="line">display: prod</span><br><span class="line">03 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">02 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line"></span><br><span class="line">4 7 0 0 0 </span><br><span class="line">Producer produced 18</span><br><span class="line">display: prod</span><br><span class="line">02 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">03 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line"></span><br><span class="line">4 7 18 0 0 </span><br><span class="line">Producer produced 16</span><br><span class="line">display: prod</span><br><span class="line">01 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">04 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line"></span><br><span class="line">4 7 18 16 0 </span><br><span class="line">Producer produced 14</span><br><span class="line">display: prod</span><br><span class="line">00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">05 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line"></span><br><span class="line">4 7 18 16 14 </span><br><span class="line">Producer produced 16</span><br><span class="line">display: prod</span><br><span class="line">00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">05 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line"></span><br><span class="line">16 7 18 16 14 </span><br><span class="line">Producer produced 7</span><br><span class="line">display: prod</span><br><span class="line">00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">05 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line"></span><br><span class="line">16 7 18 16 14 </span><br><span class="line">Producer produced 13</span><br><span class="line">display: prod</span><br><span class="line">00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">05 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line"></span><br><span class="line">16 7 13 16 14 </span><br><span class="line">Producer produced 10</span><br><span class="line">display: prod</span><br><span class="line">00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">05 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line"></span><br><span class="line">16 7 13 10 14 </span><br><span class="line">Producer produced 2</span><br><span class="line">display: prod</span><br><span class="line">00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">05 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line"></span><br><span class="line">16 7 13 10 2 </span><br><span class="line">Producer produced 3</span><br><span class="line">display: prod</span><br><span class="line">00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line">05 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br><span class="line"></span><br><span class="line">3 7 13 10 2 </span><br><span class="line">^C</span><br></pre></td></tr></table></figure></p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>在下面 consumer 範例程式中，consumer 不斷地用 remove_item 在整數陣列中循序消耗變數，並將其位置寫回成 -1。  </p><p>跟前述的 consumer 程式不同處是 shm_open 要改成 <code>O_RDWR</code>，mmap 要改成 <code>PROT_READ | PROT_WRITE</code> 這樣才能寫入資料。  </p><p>要注意的是 consumer 的 empty 跟 full 指向 mmap 映射後的共享記憶體空間後，就可以存取到 producer 行程中的 empty 與 full 兩個 semaphore 的值了，不用在 sem_init 初始化 empty 跟 full 這兩個 semaphore 了。<br><figure class="highlight c"><figcaption><span>shm-posix-consumer-int-array.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc shm-posix-consumer-int-array.c -o consume -lrt -pthread &amp;&amp; ./consume</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE 5</span></span><br><span class="line"><span class="keyword">int</span> *buffer = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">sem_t</span> *empty;</span><br><span class="line"><span class="keyword">sem_t</span> *full;</span><br><span class="line"><span class="keyword">int</span> removePointer = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">void</span> *ptr;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">char</span> *prog, <span class="keyword">char</span> *bytes, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"display: %s\n"</span>, prog);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%02x%c"</span>, bytes[i] &amp; <span class="number">0xff</span>, ((i+<span class="number">1</span>)%<span class="number">16</span>) ? <span class="string">' '</span> : <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display_int_array</span><span class="params">(<span class="keyword">int</span> *arr, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, arr[i], ((i+<span class="number">1</span>)%<span class="number">16</span>) ? <span class="string">' '</span> : <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">remove_item</span><span class="params">(<span class="keyword">int</span> *item)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* Acquire Full Semaphore */</span></span><br><span class="line">    sem_wait(full);</span><br><span class="line"></span><br><span class="line">    *item = buffer[removePointer];</span><br><span class="line">    buffer[removePointer++] = <span class="number">-1</span>;</span><br><span class="line">    removePointer = removePointer % BUFFER_SIZE;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Empty semaphore */</span></span><br><span class="line">    sem_post(empty);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> random;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">//r = rand() % 5;</span></span><br><span class="line">        <span class="comment">//sleep(r);</span></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (remove_item(&amp;random))</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error Consuming"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Consumer consumed %d\n"</span>, random);</span><br><span class="line">        display_int_array(buffer, BUFFER_SIZE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name = <span class="string">"OS"</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">4096</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> shm_fd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* open the shared memory segment */</span></span><br><span class="line">    shm_fd = shm_open(name, O_RDWR, <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span> (shm_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"shared memory failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* now map the shared memory segment in the address space of the process */</span></span><br><span class="line">    ptr = mmap(<span class="number">0</span>,SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (ptr == MAP_FAILED) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Map failed\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* make empty, full and buffer pointer to ptr</span></span><br><span class="line"><span class="comment">     * empty sem_t | full sem_t | buffer</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    empty = (<span class="keyword">sem_t</span> *)ptr;</span><br><span class="line">    full = ptr + <span class="keyword">sizeof</span>(<span class="keyword">sem_t</span>);</span><br><span class="line">    buffer = (<span class="keyword">int</span> *)(ptr + <span class="keyword">sizeof</span>(<span class="keyword">sem_t</span>) + <span class="keyword">sizeof</span>(<span class="keyword">sem_t</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* now read from the shared memory region */</span></span><br><span class="line">    <span class="comment">/*display("cons", ptr, 96);</span></span><br><span class="line"><span class="comment">    display_int_array(buffer, BUFFER_SIZE);</span></span><br><span class="line"><span class="comment">    for (int i = 0; i &lt; 2;i++) &#123;</span></span><br><span class="line"><span class="comment">        int item;</span></span><br><span class="line"><span class="comment">        remove_item(&amp;item);</span></span><br><span class="line"><span class="comment">        printf("Consumer consumed %d\n", item);</span></span><br><span class="line"><span class="comment">        display("cons", ptr, 96);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    consumer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* remove the shared memory segment */</span></span><br><span class="line">    <span class="keyword">if</span> (shm_unlink(name) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error removing %s\n"</span>,name);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>consumer 輸出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">./consume</span><br><span class="line">Consumer consumed 4</span><br><span class="line">-1 7 18 16 14 </span><br><span class="line">Consumer consumed 7</span><br><span class="line">16 -1 18 16 14 </span><br><span class="line">Consumer consumed 18</span><br><span class="line">16 7 -1 16 14 </span><br><span class="line">Consumer consumed 16</span><br><span class="line">16 7 13 -1 14 </span><br><span class="line">Consumer consumed 14</span><br><span class="line">16 7 13 10 -1 </span><br><span class="line">Consumer consumed 16</span><br><span class="line">-1 7 13 10 2 </span><br><span class="line">Consumer consumed 7</span><br><span class="line">3 -1 13 10 2 </span><br><span class="line">Consumer consumed 13</span><br><span class="line">3 -1 -1 10 2 </span><br><span class="line">Consumer consumed 10</span><br><span class="line">3 -1 -1 -1 2 </span><br><span class="line">Consumer consumed 2</span><br><span class="line">3 -1 -1 -1 -1 </span><br><span class="line">Consumer consumed 3</span><br><span class="line">-1 -1 -1 -1 -1 </span><br><span class="line">^C</span><br></pre></td></tr></table></figure></p><p>以上就是 C/C++ Linux shared-memory mmap 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p>linux 共享内存 <code>shm_open</code>，mmap的正确使用_大飞飞鱼的博客-CSDN博客_shm_open<br><a href="https://blog.csdn.net/ababab12345/article/details/102931841" rel="noopener" target="_blank">https://blog.csdn.net/ababab12345/article/details/102931841</a><br>Semaphores on Linux - sem_init() vs sem_open() - Superpatterns<br><a href="https://blog.superpat.com/semaphores-on-linux-sem_init-vs-sem_open" rel="noopener" target="_blank">https://blog.superpat.com/semaphores-on-linux-sem_init-vs-sem_open</a><br>文中提到用 mmap 映射記憶體來當作 mutex 的作法可以參考看看。  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 C++ 相關技術，可以參考看看下面的文章，<br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-sem_wait/" title="C/C++ Linux sem_wait 與 sem_post 用法範例">C/C++ Linux sem_wait 與 sem_post 用法範例</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天 ShengYu 來介紹 Linux 跨行程通訊 IPC 中的其中一種方式：共享記憶體 Shared Memory 以及  named semaphore，這通常也是 OS (operating system)作業系統或linux系統程式課程中的一部分，以下範例分為生產者 producer 與消費者 consumer，基本上會使用到 mmap 與 shm_open 這幾個函式。  &lt;/p&gt;
&lt;h2 id=&quot;共享記憶體傳遞-string-字串的範例&quot;&gt;&lt;a href=&quot;#共享記憶體傳遞-string-字串的範例&quot; class=&quot;headerlink&quot; title=&quot;共享記憶體傳遞 string 字串的範例&quot;&gt;&lt;/a&gt;共享記憶體傳遞 string 字串的範例&lt;/h2&gt;&lt;p&gt;生產者 producer 寫入 string 字串的範例如下，&lt;br&gt;這邊的 shm_open 是使用 &lt;code&gt;O_CREAT | O_RDWR&lt;/code&gt; 能建立且能讀取寫入，同樣的 mmap 也使用 &lt;code&gt;PROT_READ | PROT_WRITE&lt;/code&gt; 能讀取跟寫入。&lt;br&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;figcaption&gt;&lt;span&gt;shm-posix-producer-string.c&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// gcc shm-posix-producer-string.c -o produce -lrt &amp;amp;&amp;amp; ./produce&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/shm.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/mman.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *prog, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *bytes, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;display: %s\n&quot;&lt;/span&gt;, prog);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%02x%c&quot;&lt;/span&gt;, bytes[i], ((i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)%&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;) ? &lt;span class=&quot;string&quot;&gt;&#39; &#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;\n&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; SIZE = &lt;span class=&quot;number&quot;&gt;4096&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *name = &lt;span class=&quot;string&quot;&gt;&quot;OS&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *message0= &lt;span class=&quot;string&quot;&gt;&quot;Studying &quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *message1= &lt;span class=&quot;string&quot;&gt;&quot;Operating Systems &quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *message2= &lt;span class=&quot;string&quot;&gt;&quot;Is Fun!&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; shm_fd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; *ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* create the shared memory segment */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    shm_fd = shm_open(name, O_CREAT | O_RDWR, &lt;span class=&quot;number&quot;&gt;0666&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* configure the size of the shared memory segment */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ftruncate(shm_fd,SIZE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/* now map the shared memory segment in the address space of the process */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ptr = mmap(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ptr == MAP_FAILED) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Map failed\n&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;/**&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * Now write to the shared memory region.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     *&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     * Note we must increment the value of ptr after each write.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *str = (&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(str,&lt;span class=&quot;string&quot;&gt;&quot;%s&quot;&lt;/span&gt;,message0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    str += &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(message0);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(str,&lt;span class=&quot;string&quot;&gt;&quot;%s&quot;&lt;/span&gt;,message1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    str += &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(message1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(str,&lt;span class=&quot;string&quot;&gt;&quot;%s&quot;&lt;/span&gt;,message2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    str += &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(message2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    display(&lt;span class=&quot;string&quot;&gt;&quot;prod&quot;&lt;/span&gt;, ptr, &lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Windows XAMPP 攜帶版安裝教學</title>
    <link href="https://shengyu7697.github.io/windows-xampp/"/>
    <id>https://shengyu7697.github.io/windows-xampp/</id>
    <published>2023-01-16T14:00:00.000Z</published>
    <updated>2023-01-17T15:02:38.572Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Windows XAMPP 攜帶版安裝教學，以往要安裝 Apache + MySQL + PHP + Perl 這些環境就花費許久時間，所以出現了 XAMPP 讓開發者快速地建置後端環境，以前 XAMPP 是 Apache + MySQL + PHP + Perl 的縮寫。MySQL 為目前市佔率最高的資料庫系統。因為當初 MySQL 被甲骨文公司收購後，開發者擔心會有後患，像是轉為商用等等，於是社群就 clone 出 MariaDB，所以現在 XAMPP 上使用的是 MariaDB 而非 MySQL。但是這兩個系統幾乎完全相同。現在 XAMPP 則是 Apache + MariaDB + PHP 的縮寫。  </p><img src="/windows-xampp/xampp-1.png" title="xampp">  <p>XAMPP 到官網 <a href="https://www.apachefriends.org/zh_tw/download.html" rel="noopener" target="_blank">https://www.apachefriends.org/zh_tw/download.html</a> 或者 <a href="https://sourceforge.net/projects/xampp/files/XAMPP%20Windows/" rel="noopener" target="_blank">sourceforge</a> 下載 xampp portable 隨身攜帶版</p><p>把解壓縮後的 xampp 資料夾放在硬碟或USB隨身(硬)碟的最上層，例如: C:\xampp 或 E:\xampp。  </p><a id="more"></a><p>執行 setup_xampp.bat<br><img src="/windows-xampp/xampp-2.png" title="xampp">  </p><p>啟動 apache 服務 apache_start.bat<br><img src="/windows-xampp/xampp-3.png" title="xampp apache">  </p><p>啟動 mysql 服務 mysql_start.bat<br><img src="/windows-xampp/xampp-4.png" title="xampp mysql">  </p><p>在使用的過程中，apache_start.bat 與 mysql_start.bat 這兩個視窗不要關閉。  </p><p>執行 xampp-control.exe (可選)，一開始會先選擇語系，沒意外選英文就可。<br><img src="/windows-xampp/xampp-5.png" title="xampp control panel">  </p><p>這就是 Xampp Control Panel 的介面。<br><img src="/windows-xampp/xampp-6.png" title="xampp control panel">  </p><p>打開瀏覽器，輸入 <a href="http://localhost" rel="noopener" target="_blank">http://localhost</a> 或 <a href="http://127.0.0.1" rel="noopener" target="_blank">http://127.0.0.1</a> 可以開啟 XAMPP 預先建立的開始頁面。頁面右上方有 phpMyAdmin 的連結。<br><img src="/windows-xampp/xampp-7.png" title="xampp localhost">  </p><p>上一張圖片頁面右上方有 phpMyAdmin 的連結，或者輸入 <a href="http://127.0.0.1/phpmyadmin/" rel="noopener" target="_blank">http://127.0.0.1/phpmyadmin/</a> 就可以進 phpMyAdmin，phpMyAdmin 是個可以管理 MariaDB 資料庫的網頁介面，包含資料庫的新增、匯入、修改、刪除，SQL 語法執行與測試，非常好用。<br><img src="/windows-xampp/xampp-8.png" title="xampp phpmyadmin">  </p><p>XAMPP 的網站資料夾是 htdocs，Apache 的 log 位置在 <code>xampp\apache\logs\</code> 下。<br><img src="/windows-xampp/xampp-9.png" title="xampp htdocs">  </p><p>XAMPP 的 htdocs 資料夾裡有放內建的頁面，基本上沒有特殊需求不用去特地刪除它，只要另新建資料夾放入將你網站檔案即可。<br><img src="/windows-xampp/xampp-10.png" title="xampp htdocs">  </p><p>以上就是 Windows XAMPP 攜帶版安裝教學介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p>其他參考<br><a href="https://joomlaec.com/blog/%E7%B3%BB%E7%B5%B1%E7%AE%A1%E7%90%86/%E4%BD%BF%E7%94%A8xampp%EF%BC%8C%E5%AE%89%E8%A3%9D%E7%B6%B2%E7%AB%99%E9%9A%A8%E8%BA%AB%E5%B8%B6%E8%91%97%E8%B5%B0-usb%E5%AE%89%E8%A3%9D.html" rel="noopener" target="_blank">使用XAMPP，安裝網站隨身帶著走(USB安裝)</a><br><a href="https://ithelp.ithome.com.tw/articles/10197921" rel="noopener" target="_blank">XAMPP安裝與操作初步</a><br><a href="https://hackmd.io/@Heidi-Liu/note-be101-php-and-mysql" rel="noopener" target="_blank">[week 9] 後端基礎 - PHP 語法、資料庫 MySQL - HackMD</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇 ShengYu 介紹 Windows XAMPP 攜帶版安裝教學，以往要安裝 Apache + MySQL + PHP + Perl 這些環境就花費許久時間，所以出現了 XAMPP 讓開發者快速地建置後端環境，以前 XAMPP 是 Apache + MySQL + PHP + Perl 的縮寫。MySQL 為目前市佔率最高的資料庫系統。因為當初 MySQL 被甲骨文公司收購後，開發者擔心會有後患，像是轉為商用等等，於是社群就 clone 出 MariaDB，所以現在 XAMPP 上使用的是 MariaDB 而非 MySQL。但是這兩個系統幾乎完全相同。現在 XAMPP 則是 Apache + MariaDB + PHP 的縮寫。  &lt;/p&gt;
&lt;img src=&quot;/windows-xampp/xampp-1.png&quot; title=&quot;xampp&quot;&gt;  
&lt;p&gt;XAMPP 到官網 &lt;a href=&quot;https://www.apachefriends.org/zh_tw/download.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://www.apachefriends.org/zh_tw/download.html&lt;/a&gt; 或者 &lt;a href=&quot;https://sourceforge.net/projects/xampp/files/XAMPP%20Windows/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;sourceforge&lt;/a&gt; 下載 xampp portable 隨身攜帶版&lt;/p&gt;
&lt;p&gt;把解壓縮後的 xampp 資料夾放在硬碟或USB隨身(硬)碟的最上層，例如: C:\xampp 或 E:\xampp。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="Windows" scheme="https://shengyu7697.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ Linux sem_wait 與 sem_post 用法範例</title>
    <link href="https://shengyu7697.github.io/cpp-sem_wait/"/>
    <id>https://shengyu7697.github.io/cpp-sem_wait/</id>
    <published>2023-01-12T14:00:00.000Z</published>
    <updated>2023-01-14T00:59:45.051Z</updated>
    
    <content type="html"><![CDATA[<p>今天 ShengYu 來介紹 C/C++ Linux sem_wait 與 sem_post 用法範例，Semaphore 跟 Mutex 相比，雖然 Semaphore 同樣可以用來保護 Critical section，不過它更常被用來確保多執行緒的執行順序。在 Semaphore 中是用 sem_wait 減少與 sem_post 增加 Semaphore 號誌，不像是 Mutex 解鎖還需要同一個人解的 owner ship 特性，也就像解鈴還需繫鈴人概念，以下就來看看 sem_wait 與 sem_post 用法範例吧！  </p><p>sem_wait() 函式原型：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_wait</span><span class="params">(<span class="keyword">sem_t</span> *sem)</span></span>;</span><br></pre></td></tr></table></figure></p><p>解釋：若 semaphore 為非 0，則 semaphore 值減 1；若 semaphore 為 0，則呼叫此 function 的 thread 會被 block ，直到 semaphore 值大於 0。  </p><p>sem_post() 函式原型：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_post</span><span class="params">(<span class="keyword">sem_t</span> *sem)</span></span>;</span><br></pre></td></tr></table></figure></p><p>解釋：對 semaphore 值加 1。  </p><h2><span id="同行程內的-sem_wait-跟-sem_post-用法">同行程內的 sem_wait() 跟 sem_post() 用法</span></h2><p>以下範例是在一個行程內使用 sem_wait() 跟 sem_post()，在 main 函式 會產生 producer 執行緒跟 consumer 執行緒，producer 執行緒負責產生 1-20 之間的亂數並呼叫 insert_item 放入 buffer 中，而 consumer 執行緒負責用 remove_item 來消耗這 中的亂數。  </p><p>如果 consumer 都沒有消耗任何變數的情況下，在 producer 會因為 <code>sem_wait(&amp;empty)</code> 從初始值 5 一直減 1 直到 0 不能再減的情況下就會被 block 卡住，直到大於 0 為止才會繼續往下執行。  </p><p>反之，如果 producer 都沒有生產任何變數的情況下，在 consumer 會因為 <code>sem_wait(&amp;full)</code> 從初始值 0 一直減 1 直到 0 不能再減的情況下就會被 block 卡住，直到大於 0 為止才會繼續往下執行。<br><figure class="highlight c"><figcaption><span>linux-sem_wait.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc linux-sem_wait.c -pthread</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFER_SIZE 5</span></span><br><span class="line"><span class="keyword">int</span> buffer[BUFFER_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"><span class="keyword">sem_t</span> empty;</span><br><span class="line"><span class="keyword">sem_t</span> full;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> insertPointer = <span class="number">0</span>, removePointer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">producer</span><span class="params">(<span class="keyword">void</span> *param)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">consumer</span><span class="params">(<span class="keyword">void</span> *param)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display_int_array</span><span class="params">(<span class="keyword">char</span> *prog, <span class="keyword">int</span> *arr, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s: "</span>, prog);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, arr[i], ((i+<span class="number">1</span>)%<span class="number">16</span>) ? <span class="string">' '</span> : <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insert_item</span><span class="params">(<span class="keyword">int</span> item)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* Acquire Empty Semaphore */</span></span><br><span class="line">    sem_wait(&amp;empty);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* Acquire mutex lock to protect buffer */</span></span><br><span class="line">    pthread_mutex_lock(&amp;mutex);</span><br><span class="line"></span><br><span class="line">    buffer[insertPointer++] = item;</span><br><span class="line">    insertPointer = insertPointer % BUFFER_SIZE;</span><br><span class="line">    display_int_array(<span class="string">"prod"</span>, buffer, BUFFER_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Release mutex lock and full semaphore */</span></span><br><span class="line">    pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    sem_post(&amp;full);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">remove_item</span><span class="params">(<span class="keyword">int</span> *item)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* Acquire Full Semaphore */</span></span><br><span class="line">    sem_wait(&amp;full);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Acquire mutex lock to protect buffer */</span></span><br><span class="line">    pthread_mutex_lock(&amp;mutex);</span><br><span class="line"></span><br><span class="line">    *item = buffer[removePointer];</span><br><span class="line">    buffer[removePointer++] = <span class="number">-1</span>;</span><br><span class="line">    removePointer = removePointer % BUFFER_SIZE;</span><br><span class="line">    display_int_array(<span class="string">"cons"</span>, buffer, BUFFER_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Release mutex lock and empty semaphore */</span></span><br><span class="line">    pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">    sem_post(&amp;empty);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sleepTime = <span class="number">10</span>, producerThreads, consumerThreads;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Initialize the synchronization tools */</span></span><br><span class="line">    pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line">    sem_init(&amp;empty, <span class="number">0</span>, BUFFER_SIZE);</span><br><span class="line">    sem_init(&amp;full, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    srand(time(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Create the producer and consumer threads */</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">pthread_t</span> tid;</span><br><span class="line">        <span class="keyword">pthread_attr_t</span> attr;</span><br><span class="line">        pthread_attr_init(&amp;attr);</span><br><span class="line">        pthread_create(&amp;tid, &amp;attr, producer, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">pthread_t</span> tid;</span><br><span class="line">        <span class="keyword">pthread_attr_t</span> attr;</span><br><span class="line">        pthread_attr_init(&amp;attr);</span><br><span class="line">        pthread_create(&amp;tid, &amp;attr, consumer, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Sleep for user specified time */</span></span><br><span class="line">    sleep(sleepTime);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">producer</span><span class="params">(<span class="keyword">void</span> *param)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> random;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        r = rand() % <span class="number">3</span>;</span><br><span class="line">        sleep(r);</span><br><span class="line">        random = rand() % <span class="number">20</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (insert_item(random))</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Producer produced %d \n"</span>, random);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">consumer</span><span class="params">(<span class="keyword">void</span> *param)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> random;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        r = rand() % <span class="number">3</span>;</span><br><span class="line">        sleep(r);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (remove_item(&amp;random))</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error Consuming"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Consumer consumed %d \n"</span>, random);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">prod: 7 0 0 0 0 </span><br><span class="line">Producer produced 7 </span><br><span class="line">cons: -1 0 0 0 0 </span><br><span class="line">Consumer consumed 7 </span><br><span class="line">prod: -1 14 0 0 0 </span><br><span class="line">Producer produced 14 </span><br><span class="line">cons: -1 -1 0 0 0 </span><br><span class="line">Consumer consumed 14 </span><br><span class="line">prod: -1 -1 3 0 0 </span><br><span class="line">Producer produced 3 </span><br><span class="line">cons: -1 -1 -1 0 0 </span><br><span class="line">Consumer consumed 3 </span><br><span class="line">prod: -1 -1 -1 8 0 </span><br><span class="line">Producer produced 8 </span><br><span class="line">cons: -1 -1 -1 -1 0 </span><br><span class="line">Consumer consumed 8 </span><br><span class="line">prod: -1 -1 -1 -1 10 </span><br><span class="line">Producer produced 10 </span><br><span class="line">cons: -1 -1 -1 -1 -1 </span><br><span class="line">Consumer consumed 10 </span><br><span class="line">prod: 10 -1 -1 -1 -1 </span><br><span class="line">Producer produced 10</span><br></pre></td></tr></table></figure></p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="跨行程的-sem_wait-跟-sem_post-用法">跨行程的 sem_wait() 跟 sem_post() 用法</span></h2><p>跨行程的 sem_wait() 跟 sem_post() 用法，用 fork 分離出兩個行程，並在這父行程與子行程兩行程間用共享記憶體傳遞資料，使用 mmap 共享記憶體來當作 mutex，原理跟上述範例類似，只是這是跨行程。  </p><p>shm_open / ftruncate / mmap 跟 sem_open 這兩種方式都可以成功。<br><figure class="highlight c"><figcaption><span>linux-sem_wait-2.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// gcc linux-sem_wait-2.c -lrt -pthread</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;semaphore.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">char</span> *prog, <span class="keyword">char</span> *bytes, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s: "</span>, prog);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%02x%c"</span>, bytes[i], ((i+<span class="number">1</span>)%<span class="number">16</span>) ? <span class="string">' '</span> : <span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd, i, count = <span class="number">0</span>,nloop = <span class="number">2</span>,zero = <span class="number">0</span>, *ptr;</span><br><span class="line">    <span class="keyword">sem_t</span> *mutex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> shm;</span><br><span class="line">    <span class="keyword">if</span> ((shm = shm_open(<span class="string">"myshm"</span>, O_RDWR | O_CREAT, S_IRWXU)) == <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"shm_open"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ftruncate(shm, <span class="keyword">sizeof</span>(<span class="keyword">sem_t</span>)) &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">        perror(<span class="string">"ftruncate"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((mutex = mmap(<span class="literal">NULL</span>, <span class="keyword">sizeof</span>(<span class="keyword">sem_t</span>), PROT_READ | PROT_WRITE,</span><br><span class="line">                      MAP_SHARED, shm, <span class="number">0</span>)) == MAP_FAILED) &#123;</span><br><span class="line">        perror(<span class="string">"mmap"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// open a file and map it into memory</span></span><br><span class="line">    fd = open(<span class="string">"tmp.txt"</span>,O_RDWR | O_CREAT, S_IRWXU);</span><br><span class="line">    write(fd, &amp;zero, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    ptr = mmap(<span class="literal">NULL</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>), PROT_READ | PROT_WRITE, MAP_SHARED, fd, <span class="number">0</span>);</span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*if ((mutex = sem_open("mysemaphore", O_CREAT, 0644, 1)) == SEM_FAILED) &#123;</span></span><br><span class="line"><span class="comment">        perror("semaphore initilization");</span></span><br><span class="line"><span class="comment">        exit(1);</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// create, initialize semaphore</span></span><br><span class="line">    <span class="keyword">if</span> (sem_init(mutex, <span class="number">1</span>, <span class="number">1</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"semaphore initilization"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fork() == <span class="number">0</span>) &#123; <span class="comment">// child process</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nloop; i++) &#123;</span><br><span class="line">            sem_wait(mutex);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"child entered crititical section: %d\n"</span>, (*ptr)++);</span><br><span class="line">            display(<span class="string">"child"</span>, (<span class="keyword">char</span> *)ptr, <span class="number">16</span>);</span><br><span class="line">            sleep(<span class="number">2</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"child leaving critical section\n"</span>);</span><br><span class="line">            sem_post(mutex);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// back to parent process</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nloop; i++) &#123;</span><br><span class="line">        sem_wait(mutex);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"parent entered critical section: %d\n"</span>, (*ptr)++);</span><br><span class="line">        display(<span class="string">"parent"</span>, (<span class="keyword">char</span> *)ptr, <span class="number">16</span>);</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"parent leaving critical section\n"</span>);</span><br><span class="line">        sem_post(mutex);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上就是 C/C++ Linux sem_wait 與 sem_post 用法範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p>其它參考<br>Semaphores on Linux - sem_init() vs sem_open() - Superpatterns<br><a href="https://blog.superpat.com/semaphores-on-linux-sem_init-vs-sem_open" rel="noopener" target="_blank">https://blog.superpat.com/semaphores-on-linux-sem_init-vs-sem_open</a><br>在這篇當中提到 shm_open / ftruncate / mmap 跟 sem_open 這兩種方式  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 C++ 相關技術，可以參考看看下面的文章，<br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-linux-shared-memory-mmap/" title="C/C++ Linux shared memory 與 mmap 用法範例">C/C++ Linux shared memory 與 mmap 用法範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天 ShengYu 來介紹 C/C++ Linux sem_wait 與 sem_post 用法範例，Semaphore 跟 Mutex 相比，雖然 Semaphore 同樣可以用來保護 Critical section，不過它更常被用來確保多執行緒的執行順序。在 Sem
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ Windows Socket (Winsock) TCP Socket Server/Client 網路通訊教學</title>
    <link href="https://shengyu7697.github.io/cpp-windows-tcp-socket/"/>
    <id>https://shengyu7697.github.io/cpp-windows-tcp-socket/</id>
    <published>2023-01-09T14:00:00.000Z</published>
    <updated>2023-01-08T13:24:09.584Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹如何寫 C/C++ Windows Socket TCP Socket Server/Client 網路通訊程式，Windows Socket 簡稱 Winsock，在這個網路盛行的時代，網路通訊已成為基礎，想要精通學習網路通訊必須先了解 TCP/IP 協定，其中又以 TCP 通訊最常被使用，TCP 通訊程式通常分成伺服器端與客戶端的兩部份程式，接下來教學內容將介紹如何使用 socket API 來搭建一個典型的 TCP 通訊程式，甚至可以寫出一個聊天室的程式，或者像 LINE 這樣的通訊程式。  </p><p>以下 C/C++ Winsock TCP 內容將分為幾部分，分別為：  </p><ul><li>常見的 Socket API 函式 Overview 總覽  </li><li>C/C++ Winsock Socket TCP Server/Client 通訊流程  </li><li>C/C++ Winsock TCP Server 伺服器端程式 (Echo Sever)  </li><li>C/C++ Winsock TCP Client 客戶端程式 (傳送使用者的輸入)  </li><li>C/C++ Winsock TCP Client 客戶端程式 (定時傳送資料)  </li><li>C/C++ Winsock TCP 常見問題  </li><li>Winsock 的 ip 字串轉 sockaddr_in  </li><li>Winsock 的 sockaddr_in 轉 ip 字串  </li></ul><h2><span id="常見的-socket-api-函式-overview-總覽">常見的 Socket API 函式 Overview 總覽</span></h2><p>C/C++ Winsock 的 socket 模組它提供了標準的 BSD Socket API，主要的 socket API 函式如下:<br><code>socket()</code>：建立 socket 與設定使用哪種通訊協定<br><code>bind(sock_fd, addr)</code>：將 socket 綁定到地址<br><code>listen(sock_fd, n)</code>：開始監聽 TCP 傳入連接，n 指定在拒絕連線前，操作系統可以掛起的最大連接數，該值最少為1，通常設為5就夠用了<br><code>accept(sock_fd, addr)</code>：等待連線，接受到 TCP 連線後，可以從 addr 得知連線客戶端的地址。<br><code>connect(address)</code>：連線到 address 處的 socket<br><code>recv()</code>：接收 TCP 資料<br><code>send()</code>：發送 TCP 資料<br><code>closesocket()</code>：關閉 socket  </p><h2><span id="cc-winsock-socket-tcp-serverclient-通訊流程">C/C++ Winsock Socket TCP Server/Client 通訊流程</span></h2><p>以下 ShengYu 講解 C/C++ Winsock TCP Server 端與 TCP Client 端的程式流程以及會如何使用這些 socket API，<br>TCP Server 的流程分為以下幾大步驟：  </p><ol><li>建立socket：<code>sock_fd = socket(AF_INET, SOCK_STREAM, 0);</code>，指定 <code>AF_INET</code> (Internet Protocol) family 的通訊協定，類型使用 SOCK_STREAM (Stream Socket) 也就是 TCP 傳輸方式  </li><li>綁定 socket 到本地 IP 與 port：<code>bind(sock_fd, ...)</code>  </li><li>開始監聽：<code>listen(sock_fd, ...)</code>  </li><li>等待與接受客戶端的請求連線：<code>new_fd = accept(sock_fd, ...)</code>  </li><li>接收客戶端傳來的資料：<code>recv(new_fd, ...)</code>  </li><li>傳送給對方發送資料：<code>send(new_fd, ...)</code>  </li><li>傳輸完畢後，關閉 socket：<code>closesocket(new_fd)</code>  </li></ol><p>TCP Client 的流程分為以下幾大步驟：  </p><ol><li>建立 socket：<code>sock_fd = socket(AF_INET, SOCK_STREAM, 0);</code>  </li><li>連線至遠端地址：<code>connect(sock_fd, ...)</code>  </li><li>傳送資料：<code>send(sock_fd, ...)</code>  </li><li>接收資料：<code>recv(sock_fd, ...)</code>  </li><li>傳輸完畢後，關閉 socket：<code>closesocket(sock_fd)</code>  </li></ol><p>以上是 TCP Server/Client 通訊的重點流程，實際的 C/C++ Winsock socket API 用法與範例詳見下列章節，接下來就來看看怎麼寫 TCP Server/Client 通訊程式吧！  </p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="cc-winsock-tcp-server-伺服器端程式-echo-sever">C/C++ Winsock TCP Server 伺服器端程式 (Echo Sever)</span></h2><p>這邊 ShengYu 就開始介紹怎麼寫 C/C++ Winsock TCP Server 程式，下列範例這是一個典型的 Echo Server，Echo Server 就是收到什麼資料就回覆什麼資料，很簡單吧！<br>跟網路上其他範例不同的是此範例建立連線後不是傳輸一次資料就關閉連線，而是使用迴圈可以一直傳輸資料直到客戶端不想傳關閉連線為止，並且伺服器端再次地等待新的客戶端連線來服務。  </p><p>要使用 Winsock 的話要 include winsock2.h 標頭檔，winsock2.h 是用來取代 winsock.h，除非你要使用 Winsock 1.1 否則你應該使用 winsock2.h 標頭檔，winsock.h 要連結的函式庫為 wsock32.lib，而 winsock2.h 要連結為 Ws2_32.lib 函式庫。  </p><p>另外一點要注意的是 windows.h 預設會 include winsock.h，所以如果你在 windows.h 後面在 include winsock2.h 的話會編譯錯誤，原因是因為 winsock.h 跟 winsock2.h 這兩個不應該同時存在，winsock2.h 的設計是用來取代 winsock.h 的而不是擴充的概念，所以正確做法會是 winsock2.h 要在 windows.h 之前被 include。  </p><p>跟 linux socket 相比，winsock 需要在最一開始要呼叫 WSAStartup 函式，以及最後要呼叫 WSACleanup 函式。  </p><p>如下例所示，伺服器端一開始建立 socket，用 <code>bind()</code> 綁定，這裡是使用 <code>0.0.0.0</code>, port 為 <code>7000</code>，<br>使用 <code>listen()</code> 開始監聽，上限連線數為<code>5</code>，之後進入主迴圈，<code>accept()</code> 等待接受客戶端的連線請求，<br>一旦有客戶端連線的話，就會從 <code>accept()</code> 繼續往下執行，<br>之後是另一個迴圈來服務這個連線，不斷地從這個連線 <code>recv</code> 接收資料與 <code>send</code> 傳送資料，<br>如果 <code>recv()</code> 的回傳值為0，表示客戶端已斷開連線，此時我們也關閉這個連線，<br>之後回到 <code>accept()</code> 等待新的客戶端連線，等到新的客戶端連線連上便跟之前的流程一樣，這樣便是一個完整的 C/C++ Winsock TCP 伺服器程式。<br><figure class="highlight cpp"><figcaption><span>cpp-windows-tcp-socket-server.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ws2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Link with ws2_32.lib</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"Ws2_32.lib"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* host = <span class="string">"0.0.0.0"</span>;</span><br><span class="line"><span class="keyword">int</span> port = <span class="number">7000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SOCKET sock, new_sock;</span><br><span class="line">    <span class="keyword">socklen_t</span> addrlen;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">my_addr</span>, <span class="title">client_addr</span>;</span></span><br><span class="line">    <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">char</span> indata[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;, outdata[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> on = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// init winsock</span></span><br><span class="line">    WSADATA wsa = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    WORD wVer = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    WSAStartup(wVer, &amp;wsa);</span><br><span class="line">    <span class="keyword">if</span> (WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsa) != NO_ERROR) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error: init winsock\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a socket</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sock == INVALID_SOCKET) &#123;</span><br><span class="line">        perror(<span class="string">"Socket creation error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for "Address already in use" error message</span></span><br><span class="line">    <span class="keyword">if</span> (setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, (<span class="keyword">char</span> *)&amp;on, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Setsockopt error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// server address</span></span><br><span class="line">    my_addr.sin_family = AF_INET;</span><br><span class="line">    inet_pton(AF_INET, host, &amp;my_addr.sin_addr);</span><br><span class="line">    my_addr.sin_port = htons(port);</span><br><span class="line"></span><br><span class="line">    status = bind(sock, (struct sockaddr *)&amp;my_addr, <span class="keyword">sizeof</span>(my_addr));</span><br><span class="line">    <span class="keyword">if</span> (status == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Binding error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> my_ip[INET_ADDRSTRLEN];</span><br><span class="line">    inet_ntop(AF_INET, &amp;my_addr.sin_addr, my_ip, <span class="keyword">sizeof</span>(my_ip));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"server start at: %s:%d\n"</span>, my_ip, port);</span><br><span class="line"></span><br><span class="line">    status = listen(sock, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (status == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Listening error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"wait for connection...\n"</span>);</span><br><span class="line"></span><br><span class="line">    addrlen = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        new_sock = accept(sock, (struct sockaddr *)&amp;client_addr, &amp;addrlen);</span><br><span class="line">        <span class="keyword">char</span> client_ip[INET_ADDRSTRLEN];</span><br><span class="line">        inet_ntop(AF_INET, &amp;client_addr.sin_addr, client_ip, <span class="keyword">sizeof</span>(client_ip));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"connected by %s:%d\n"</span>, client_ip, ntohs(client_addr.sin_port));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> nbytes = recv(new_sock, indata, <span class="keyword">sizeof</span>(indata), <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (nbytes &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                closesocket(new_sock);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"client closed connection.\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"recv: %s\n"</span>, indata);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">sprintf</span>(outdata, <span class="string">"echo %s"</span>, indata);</span><br><span class="line">            send(new_sock, outdata, <span class="built_in">strlen</span>(outdata), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    closesocket(sock);</span><br><span class="line">    WSACleanup();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果 Server 伺服器端不正常關閉後再次啟動時可能會遇到 <code>Binding error: Address already in use</code> 這種錯誤訊息的話，那麼你可以在 <code>bind()</code> 之前設定 <code>REUSEADDR</code> 可以解決這個問題，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> on = <span class="number">1</span>;</span><br><span class="line">setsockopt(sock_fd, SOL_SOCKET, SO_REUSEADDR, (<span class="keyword">char</span> *)&amp;on, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br></pre></td></tr></table></figure></p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="cc-winsock-tcp-client-客戶端程式-傳送使用者的輸入">C/C++ Winsock TCP Client 客戶端程式 (傳送使用者的輸入)</span></h2><p>先用一個終端機來啟動前述的 TCP 伺服器端的程式，接著再用另一個終端機執行 TCP 客戶端的程式。C/C++ Winsock TCP Client 範例如下，這邊要示範的是傳送使用者的輸入訊息，將使用者的輸入訊息傳送給伺服器端，通常應用於一般聊天軟體上，學習之後就可以寫一個簡單的聊天軟體了。  </p><p>如下例所示，客戶端一開始建立 socket，之後 <code>connect()</code> 連線伺服器主機的 host 與 port，<br>之後進入主迴圈，不斷地傳送使用者的輸入，這邊是使用 <code>gets_s()</code> 取得使用者輸入的資料，也可以使用 <code>scanf()</code> 或 <code>fgets()</code> 等函式，<br>使用者輸入完後按下 Enter 便會將資料發送給伺服器端，接著等待伺服器端傳送資料，接收到來自伺服器端的資料就把它印出來，<br><figure class="highlight cpp"><figcaption><span>cpp-windows-tcp-socket-client.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ws2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Link with ws2_32.lib</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"Ws2_32.lib"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* host = <span class="string">"127.0.0.1"</span>;</span><br><span class="line"><span class="keyword">int</span> port = <span class="number">7000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SOCKET sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_name</span>;</span></span><br><span class="line">    <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">char</span> indata[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;, outdata[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// init winsock</span></span><br><span class="line">    WSADATA wsa = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    WORD wVer = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    WSAStartup(wVer, &amp;wsa);</span><br><span class="line">    <span class="keyword">if</span> (WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsa) != NO_ERROR) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error: init winsock\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a socket</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sock == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Socket creation error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// server address</span></span><br><span class="line">    serv_name.sin_family = AF_INET;</span><br><span class="line">    inet_pton(AF_INET, host, &amp;serv_name.sin_addr);</span><br><span class="line">    serv_name.sin_port = htons(port);</span><br><span class="line"></span><br><span class="line">    status = connect(sock, (struct sockaddr *)&amp;serv_name, <span class="keyword">sizeof</span>(serv_name));</span><br><span class="line">    <span class="keyword">if</span> (status == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Connection error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"please input message: "</span>);</span><br><span class="line">        gets_s(outdata);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"send: %s\n"</span>, outdata);</span><br><span class="line">        send(sock, outdata, <span class="built_in">strlen</span>(outdata), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> nbytes = recv(sock, indata, <span class="keyword">sizeof</span>(indata), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (nbytes &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            closesocket(sock);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"server closed connection.\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"recv: %s\n"</span>, indata);</span><br><span class="line">    &#125;</span><br><span class="line">    WSACleanup();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下示範一下程式的啟動過程，過程中我在客戶端輸入了兩次的訊息，最後按 <code>ctrl+c</code> 結束了程式，<br>客戶端輸出結果如下，<br><figure class="highlight bash"><figcaption><span>client</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; client.exe</span><br><span class="line">please input message: hello</span><br><span class="line">send: hello</span><br><span class="line">recv: <span class="built_in">echo</span> hello</span><br><span class="line">please input message: hello tcp</span><br><span class="line">send: hello tcp</span><br><span class="line">recv: <span class="built_in">echo</span> hello tcp</span><br><span class="line">please input message: send:</span><br><span class="line">^C</span><br></pre></td></tr></table></figure></p><p>伺服器端輸出結果如下，<br><figure class="highlight bash"><figcaption><span>server</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; server.exe</span><br><span class="line">server start at: 0.0.0.0:7000</span><br><span class="line"><span class="built_in">wait</span> <span class="keyword">for</span> connection...</span><br><span class="line">connected by 127.0.0.1:25886</span><br><span class="line">recv: hello</span><br><span class="line">recv: hello tcp</span><br><span class="line">client closed connection.</span><br></pre></td></tr></table></figure></p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="cc-winsock-tcp-client-客戶端程式-定時傳送資料">C/C++ Winsock TCP Client 客戶端程式 (定時傳送資料)</span></h2><p>前一章節示範了 Echo Sever 與 Client 通訊程式，這時可以打鐵趁熱，除了前一章節 TCP Client 使用者手動輸入的情形之外，這邊也介紹另一種客戶端會定時地傳送資料給伺服器端，同時這也適用於各種通訊情形。  </p><p>步驟跟前一章節 TCP Client 幾乎相同，傳輸字串為 <code>&#39;heartbeat&#39;</code>，這邊傳送後使用 <code>Sleep(1000)</code> 來讓程式睡眠1秒，之後再繼續傳送資料，進而達成定時傳送的功能，<br><figure class="highlight cpp"><figcaption><span>cpp-windows-tcp-socket-client-heartbeat.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ws2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Link with ws2_32.lib</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"Ws2_32.lib"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* host = <span class="string">"127.0.0.1"</span>;</span><br><span class="line"><span class="keyword">int</span> port = <span class="number">7000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SOCKET sock;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_name</span>;</span></span><br><span class="line">    <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">char</span> indata[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;, outdata[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// init winsock</span></span><br><span class="line">    WSADATA wsa = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    WORD wVer = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    WSAStartup(wVer, &amp;wsa);</span><br><span class="line">    <span class="keyword">if</span> (WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsa) != NO_ERROR) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Error: init winsock\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a socket</span></span><br><span class="line">    sock = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sock == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Socket creation error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// server address</span></span><br><span class="line">    serv_name.sin_family = AF_INET;</span><br><span class="line">    inet_pton(AF_INET, host, &amp;serv_name.sin_addr);</span><br><span class="line">    serv_name.sin_port = htons(port);</span><br><span class="line"></span><br><span class="line">    status = connect(sock, (struct sockaddr *)&amp;serv_name, <span class="keyword">sizeof</span>(serv_name));</span><br><span class="line">    <span class="keyword">if</span> (status == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Connection error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(outdata, <span class="string">"heartbeat"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"send: %s\n"</span>, outdata);</span><br><span class="line">        send(sock, outdata, <span class="built_in">strlen</span>(outdata), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> nbytes = recv(sock, indata, <span class="keyword">sizeof</span>(indata), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (nbytes &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            closesocket(sock);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"server closed connection.\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"recv: %s\n"</span>, indata);</span><br><span class="line"></span><br><span class="line">        Sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    WSACleanup();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客戶端輸出結果如下，<br><figure class="highlight bash"><figcaption><span>client</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; client.exe</span><br><span class="line">send: heartbeat</span><br><span class="line">recv: <span class="built_in">echo</span> heartbeat</span><br><span class="line">send: heartbeat</span><br><span class="line">recv: <span class="built_in">echo</span> heartbeat</span><br><span class="line">send: heartbeat</span><br><span class="line">recv: <span class="built_in">echo</span> heartbeat</span><br><span class="line">send: heartbeat</span><br><span class="line">recv: <span class="built_in">echo</span> heartbeat</span><br><span class="line">send: heartbeat</span><br><span class="line">recv: <span class="built_in">echo</span> heartbeat</span><br><span class="line">^C</span><br></pre></td></tr></table></figure></p><p>伺服器端輸出結果如下，<br><figure class="highlight bash"><figcaption><span>server</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt; server.exe</span><br><span class="line">server start at: 0.0.0.0:7000</span><br><span class="line"><span class="built_in">wait</span> <span class="keyword">for</span> connection...</span><br><span class="line">connected by 127.0.0.1:25910</span><br><span class="line">recv: heartbeat</span><br><span class="line">recv: heartbeat</span><br><span class="line">recv: heartbeat</span><br><span class="line">recv: heartbeat</span><br><span class="line">recv: heartbeat</span><br><span class="line">client closed connection.</span><br></pre></td></tr></table></figure></p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="cc-winsock-tcp-常見問題">C/C++ Winsock TCP 常見問題</span></h2><p>在 TCP 的傳輸裡，為什麼伺服器還要回傳給客戶端？<br>因為這只是個示範用的通訊程式，讓你了解通訊的過程，就像打電話或者跟別人對話一樣，你一句我一句的來回互動，你可以根據實際的需求而修改程式，你也可以改成一直傳，例如客戶端一直傳送，伺服器一直接收。  </p><p>為什麼 recv 還沒收到資料前會卡住一直等？<br>因為預設是 blocking 非阻塞模式，recv 還沒收到資料前會卡住一直等，沒法做其他事情，直到 recv 接收到資料才會從 recv 函式返回，解決辦法是改用 Non-blocking 非阻塞模式，Non-blocking 模式是這次沒接收到資料就會從 recv 函式返回，接著繼續往下執行；另一個解決方式是另外建立執行緒去做其他事情。  </p><h2><span id="winsock-的-ip-字串轉-sockaddr_in">Winsock 的 ip 字串轉 sockaddr_in</span></h2><p>在 linux 中 ip 字串轉換成 sockaddr_in 結構可用 inet_aton (ipv4 only)跟 inet_pton (ipv4 &amp; ipv6) 兩個 API 達成，但在 windows 中沒有 inet_aton，而是 inet_addr (ipv4) 可用，<br>inet_addr 用法如下，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* host = <span class="string">"0.0.0.0"</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">my_addr</span>;</span></span><br><span class="line">my_addr.sin_addr.s_addr = inet_addr(host);</span><br></pre></td></tr></table></figure></p><p>但現代的 MS 編譯器都出現 C4996 編譯錯誤，內容如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;inet_addr&apos;: Use inet_pton() or InetPton() instead or define _WINSOCK_DEPRECATED_NO_WARNINGS to disable deprecated API warnings</span><br></pre></td></tr></table></figure></p><p>除非你要使用 define _WINSOCK_DEPRECATED_NO_WARNINGS，否則我建議改使用 inet_pton，使用 inet_pton 的話好處就是 windows 跟 linux 都可以通用，跨平台時程式碼修改的比較少，所以基本上在 windows 平台中使用 inet_pton 就對了!<br>inet_pton 使用方法如下，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* host = <span class="string">"0.0.0.0"</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">my_addr</span>;</span></span><br><span class="line">inet_pton(AF_INET, host, &amp;my_addr.sin_addr); <span class="comment">// AF_INET -&gt; ipv4</span></span><br></pre></td></tr></table></figure></p><h2><span id="winsock-的-sockaddr_in-轉-ip-字串">Winsock 的 sockaddr_in 轉 ip 字串</span></h2><p>承上節，在 Winsock 中 要將 sockaddr_in 結構轉換成 ip 字串的話可用 inet_ntop (ipv4 &amp; ipv6) API 達成，<br>inet_ntop 用法如下，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span></span><br><span class="line"><span class="keyword">char</span> ip[INET_ADDRSTRLEN];</span><br><span class="line">inet_ntop(AF_INET, &amp;client_addr.sin_addr, ip, <span class="keyword">sizeof</span>(ip));</span><br></pre></td></tr></table></figure></p><p>以上就是 C/C++ Windows Socket (Winsock) TCP Socket Server/Client 網路通訊教學，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹如何寫 C/C++ Windows Socket TCP Socket Server/Client 網路通訊程式，Windows Socket 簡稱 Winsock，在這個網路盛行的時代，網路通訊已成為基礎，想要精通學習網路通訊必須先了解 TCP/
      
    
    </summary>
    
    
      <category term="Windows" scheme="https://shengyu7697.github.io/tags/Windows/"/>
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Linux su 切換使用者指令用法與範例</title>
    <link href="https://shengyu7697.github.io/linux-su/"/>
    <id>https://shengyu7697.github.io/linux-su/</id>
    <published>2023-01-05T14:00:00.000Z</published>
    <updated>2023-01-08T13:03:34.200Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介紹 Linux su 指令用法與範例，su 指令可以用來切換當前使用者到其他使用者，su 切換使用者時需輸入要切換的帳號跟密碼，切換使用者後可以測試該使用者的執行權限。  </p><p>su 後面接使用者名稱，範例如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切換成 root</span></span><br><span class="line">su root</span><br></pre></td></tr></table></figure></p><p>切換成某 user，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su &lt;user_name&gt;</span><br></pre></td></tr></table></figure></p><p>su -c &lt;指令&gt;：執行完指定的指令後，就恢復原來的使用者。  </p><h2><span id="su-執行檔路徑在哪">su 執行檔路徑在哪</span></h2><p>想知道 su 執行檔路徑在哪的話，可以透過 which su 查詢得知，通常在 在 <code>/bin/</code> 下，macOS 則是在 <code>/usr/bin/su</code>，<br>如果想要知道目前的使用者是誰的話可以使用 whoami，  </p><p>以上就是 Linux su 切換使用者指令範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/linux-tutorial/" title="Linux 常用指令教學懶人包">Linux 常用指令教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇介紹 Linux su 指令用法與範例，su 指令可以用來切換當前使用者到其他使用者，su 切換使用者時需輸入要切換的帳號跟密碼，切換使用者後可以測試該使用者的執行權限。  &lt;/p&gt;
&lt;p&gt;su 後面接使用者名稱，範例如下，&lt;br&gt;&lt;figure class=&quot;high
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shengyu7697.github.io/tags/Ubuntu/"/>
    
      <category term="Linux Command" scheme="https://shengyu7697.github.io/tags/Linux-Command/"/>
    
      <category term="Linux" scheme="https://shengyu7697.github.io/tags/Linux/"/>
    
      <category term="Shell Script" scheme="https://shengyu7697.github.io/tags/Shell-Script/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ Linux TCP Socket Server/Client 網路通訊教學</title>
    <link href="https://shengyu7697.github.io/cpp-linux-tcp-socket/"/>
    <id>https://shengyu7697.github.io/cpp-linux-tcp-socket/</id>
    <published>2023-01-02T14:00:00.000Z</published>
    <updated>2023-01-08T12:57:33.412Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹如何寫 C/C++ Linux TCP Socket Server/Client 網路通訊程式，在這個網路盛行的時代，網路通訊已成為基礎，想要精通學習網路通訊必須先了解 TCP/IP 協定，其中又以 TCP 通訊最常被使用，TCP 通訊程式通常分成伺服器端與客戶端的兩部份程式，接下來教學內容將介紹如何使用 socket API 來搭建一個典型的 TCP 通訊程式，甚至可以寫出一個聊天室的程式，或者像 LINE 這樣的通訊程式。  </p><p>以下 C/C++ Linux TCP 內容將分為幾部分，分別為：  </p><ul><li>常見的 Socket API 函式 Overview 總覽  </li><li>C/C++ Linux Socket TCP Server/Client 通訊流程  </li><li>C/C++ Linux TCP Server 伺服器端程式 (Echo Sever)  </li><li>C/C++ Linux TCP Client 客戶端程式 (傳送使用者的輸入)  </li><li>C/C++ Linux TCP Client 客戶端程式 (定時傳送資料)  </li><li>C/C++ Linux TCP 常見問題  </li><li>Linux sokcet 的 ip 字串轉 sockaddr_in  </li><li>Linux sokcet 的 sockaddr_in 轉 ip 字串  </li></ul><h2><span id="常見的-socket-api-函式-overview-總覽">常見的 Socket API 函式 Overview 總覽</span></h2><p>C/C++ Linux 的 socket 模組它提供了標準的 BSD Socket API，主要的 socket API 函式如下:<br><code>socket()</code>：建立 socket 與設定使用哪種通訊協定<br><code>bind(sock_fd, addr)</code>：將 socket 綁定到地址<br><code>listen(sock_fd, n)</code>：開始監聽 TCP 傳入連接，n 指定在拒絕連線前，操作系統可以掛起的最大連接數，該值最少為1，通常設為5就夠用了<br><code>accept(sock_fd, addr)</code>：等待連線，接受到 TCP 連線後，可以從 addr 得知連線客戶端的地址。<br><code>connect(address)</code>：連線到 address 處的 socket<br><code>recv()</code>：接收 TCP 資料<br><code>send()</code>：發送 TCP 資料<br><code>close()</code>：關閉 socket  </p><h2><span id="cc-linux-socket-tcp-serverclient-通訊流程">C/C++ Linux Socket TCP Server/Client 通訊流程</span></h2><p>以下 ShengYu 講解 C/C++ Linux TCP Server 端與 TCP Client 端的程式流程以及會如何使用這些 socket API，<br>TCP Server 的流程分為以下幾大步驟：  </p><ol><li>建立socket：<code>sock_fd = socket(AF_INET, SOCK_STREAM, 0);</code>，指定 <code>AF_INET</code> (Internet Protocol) family 的通訊協定，類型使用 SOCK_STREAM (Stream Socket) 也就是 TCP 傳輸方式  </li><li>綁定 socket 到本地 IP 與 port：<code>bind(sock_fd, ...)</code>  </li><li>開始監聽：<code>listen(sock_fd, ...)</code>  </li><li>等待與接受客戶端的請求連線：<code>new_fd = accept(sock_fd, ...)</code>  </li><li>接收客戶端傳來的資料：<code>recv(new_fd, ...)</code>  </li><li>傳送給對方發送資料：<code>send(new_fd, ...)</code>  </li><li>傳輸完畢後，關閉 socket：<code>close(new_fd)</code>  </li></ol><p>TCP Client 的流程分為以下幾大步驟：  </p><ol><li>建立 socket：<code>sock_fd = socket(AF_INET, SOCK_STREAM, 0);</code>  </li><li>連線至遠端地址：<code>connect(sock_fd, ...)</code>  </li><li>傳送資料：<code>send(sock_fd, ...)</code>  </li><li>接收資料：<code>recv(sock_fd, ...)</code>  </li><li>傳輸完畢後，關閉 socket：<code>close(sock_fd)</code>  </li></ol><p>以上是 TCP Server/Client 通訊的重點流程，實際的 C/C++ Linux socket API 用法與範例詳見下列章節，接下來就來看看怎麼寫 TCP Server/Client 通訊程式吧！  </p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="cc-linux-tcp-server-伺服器端程式-echo-sever">C/C++ Linux TCP Server 伺服器端程式 (Echo Sever)</span></h2><p>這邊 ShengYu 就開始介紹怎麼寫 C/C++ Linux TCP Server 程式，下列範例這是一個典型的 Echo Server，Echo Server 就是收到什麼資料就回覆什麼資料，很簡單吧！<br>跟網路上其他範例不同的是此範例建立連線後不是傳輸一次資料就關閉連線，而是使用迴圈可以一直傳輸資料直到客戶端不想傳關閉連線為止，並且伺服器端再次地等待新的客戶端連線來服務。  </p><p>如下例所示，伺服器端一開始建立 socket，用 <code>bind()</code> 綁定，這裡是使用 <code>0.0.0.0</code>, port 為 <code>7000</code>，<br>使用 <code>listen()</code> 開始監聽，上限連線數為<code>5</code>，之後進入主迴圈，<code>accept()</code> 等待接受客戶端的連線請求，<br>一旦有客戶端連線的話，就會從 <code>accept()</code> 繼續往下執行，<br>之後是另一個迴圈來服務這個連線，不斷地從這個連線 <code>recv</code> 接收資料與 <code>send</code> 傳送資料，<br>如果 <code>recv()</code> 的回傳值為0，表示客戶端已斷開連線，此時我們也關閉這個連線，<br>之後回到 <code>accept()</code> 等待新的客戶端連線，等到新的客戶端連線連上便跟之前的流程一樣，這樣便是一個完整的 C/C++ Linux TCP 伺服器程式。<br><figure class="highlight cpp"><figcaption><span>cpp-linux-tcp-socket-server.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-linux-tcp-socket-server.cpp -o server</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* host = <span class="string">"0.0.0.0"</span>;</span><br><span class="line"><span class="keyword">int</span> port = <span class="number">7000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sock_fd, new_fd;</span><br><span class="line">    <span class="keyword">socklen_t</span> addrlen;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">my_addr</span>, <span class="title">client_addr</span>;</span></span><br><span class="line">    <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">char</span> indata[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;, outdata[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> on = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a socket</span></span><br><span class="line">    sock_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sock_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Socket creation error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for "Address already in use" error message</span></span><br><span class="line">    <span class="keyword">if</span> (setsockopt(sock_fd, SOL_SOCKET, SO_REUSEADDR, &amp;on, <span class="keyword">sizeof</span>(<span class="keyword">int</span>)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Setsockopt error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// server address</span></span><br><span class="line">    my_addr.sin_family = AF_INET;</span><br><span class="line">    inet_aton(host, &amp;my_addr.sin_addr);</span><br><span class="line">    my_addr.sin_port = htons(port);</span><br><span class="line"></span><br><span class="line">    status = bind(sock_fd, (struct sockaddr *)&amp;my_addr, <span class="keyword">sizeof</span>(my_addr));</span><br><span class="line">    <span class="keyword">if</span> (status == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Binding error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"server start at: %s:%d\n"</span>, inet_ntoa(my_addr.sin_addr), port);</span><br><span class="line"></span><br><span class="line">    status = listen(sock_fd, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (status == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Listening error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"wait for connection...\n"</span>);</span><br><span class="line"></span><br><span class="line">    addrlen = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        new_fd = accept(sock_fd, (struct sockaddr *)&amp;client_addr, &amp;addrlen);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"connected by %s:%d\n"</span>, inet_ntoa(client_addr.sin_addr),</span><br><span class="line">            ntohs(client_addr.sin_port));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> nbytes = recv(new_fd, indata, <span class="keyword">sizeof</span>(indata), <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (nbytes &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                close(new_fd);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"client closed connection.\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"recv: %s\n"</span>, indata);</span><br><span class="line"></span><br><span class="line">            <span class="built_in">sprintf</span>(outdata, <span class="string">"echo %s"</span>, indata);</span><br><span class="line">            send(new_fd, outdata, <span class="built_in">strlen</span>(outdata), <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    close(sock_fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果 Server 伺服器端不正常關閉後再次啟動時可能會遇到 <code>Binding error: Address already in use</code> 這種錯誤訊息的話，那麼你可以在 <code>bind()</code> 之前設定 <code>REUSEADDR</code> 可以解決這個問題，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> on = <span class="number">1</span>;</span><br><span class="line">setsockopt(sock_fd, SOL_SOCKET, SO_REUSEADDR, &amp;on, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br></pre></td></tr></table></figure></p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="cc-linux-tcp-client-客戶端程式-傳送使用者的輸入">C/C++ Linux TCP Client 客戶端程式 (傳送使用者的輸入)</span></h2><p>先用一個終端機來啟動前述的 TCP 伺服器端的程式，接著再用另一個終端機執行 TCP 客戶端的程式。C/C++ Linux TCP Client 範例如下，這邊要示範的是傳送使用者的輸入訊息，將使用者的輸入訊息傳送給伺服器端，通常應用於一般聊天軟體上，學習之後就可以寫一個簡單的聊天軟體了。  </p><p>如下例所示，客戶端一開始建立 socket，之後 <code>connect()</code> 連線伺服器主機的 host 與 port，<br>之後進入主迴圈，不斷地傳送使用者的輸入，這邊是使用 <code>gets()</code> 取得使用者輸入的資料，也可以使用 <code>scanf()</code> 或 <code>fgets()</code> 等函式，<br>使用者輸入完後按下 Enter 便會將資料發送給伺服器端，接著等待伺服器端傳送資料，接收到來自伺服器端的資料就把它印出來，<br><figure class="highlight cpp"><figcaption><span>cpp-linux-tcp-socket-client.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-linux-tcp-socket-client.cpp -o client</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* host = <span class="string">"0.0.0.0"</span>;</span><br><span class="line"><span class="keyword">int</span> port = <span class="number">7000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sock_fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_name</span>;</span></span><br><span class="line">    <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">char</span> indata[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;, outdata[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a socket</span></span><br><span class="line">    sock_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sock_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Socket creation error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// server address</span></span><br><span class="line">    serv_name.sin_family = AF_INET;</span><br><span class="line">    inet_aton(host, &amp;serv_name.sin_addr);</span><br><span class="line">    serv_name.sin_port = htons(port);</span><br><span class="line"></span><br><span class="line">    status = connect(sock_fd, (struct sockaddr *)&amp;serv_name, <span class="keyword">sizeof</span>(serv_name));</span><br><span class="line">    <span class="keyword">if</span> (status == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Connection error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"please input message: "</span>);</span><br><span class="line">        gets(outdata);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"send: %s\n"</span>, outdata);</span><br><span class="line">        send(sock_fd, outdata, <span class="built_in">strlen</span>(outdata), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> nbytes = recv(sock_fd, indata, <span class="keyword">sizeof</span>(indata), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (nbytes &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            close(sock_fd);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"server closed connection.\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"recv: %s\n"</span>, indata);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下示範一下程式的啟動過程，過程中我在客戶端輸入了兩次的訊息，最後按 <code>ctrl+c</code> 結束了程式，<br>客戶端輸出結果如下，<br><figure class="highlight bash"><figcaption><span>client</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ./client</span><br><span class="line">please input message: hello</span><br><span class="line">send: hello</span><br><span class="line">recv: <span class="built_in">echo</span> hello</span><br><span class="line">please input message: hello tcp</span><br><span class="line">send: hello tcp</span><br><span class="line">recv: <span class="built_in">echo</span> hello tcp</span><br><span class="line">please input message: ^C</span><br></pre></td></tr></table></figure></p><p>伺服器端輸出結果如下，<br><figure class="highlight bash"><figcaption><span>server</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ./server</span><br><span class="line">server start at: 0.0.0.0:7000</span><br><span class="line"><span class="built_in">wait</span> <span class="keyword">for</span> connection...</span><br><span class="line">connected by 127.0.0.1:59362</span><br><span class="line">recv: hello</span><br><span class="line">recv: hello tcp</span><br><span class="line">client closed connection.</span><br></pre></td></tr></table></figure></p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="cc-linux-tcp-client-客戶端程式-定時傳送資料">C/C++ Linux TCP Client 客戶端程式 (定時傳送資料)</span></h2><p>前一章節示範了 Echo Sever 與 Client 通訊程式，這時可以打鐵趁熱，除了前一章節 TCP Client 使用者手動輸入的情形之外，這邊也介紹另一種客戶端會定時地傳送資料給伺服器端，同時這也適用於各種通訊情形。  </p><p>步驟跟前一章節 TCP Client 幾乎相同，傳輸字串為 <code>&#39;heartbeat&#39;</code>，這邊傳送後使用 <code>sleep(1)</code> 來讓程式睡眠1秒，之後再繼續傳送資料，進而達成定時傳送的功能，<br><figure class="highlight cpp"><figcaption><span>cpp-linux-tcp-socket-client-heartbeat.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-linux-tcp-socket-client-heartbeat.cpp -o client</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* host = <span class="string">"0.0.0.0"</span>;</span><br><span class="line"><span class="keyword">int</span> port = <span class="number">7000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sock_fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_name</span>;</span></span><br><span class="line">    <span class="keyword">int</span> status;</span><br><span class="line">    <span class="keyword">char</span> indata[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;, outdata[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create a socket</span></span><br><span class="line">    sock_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (sock_fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Socket creation error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// server address</span></span><br><span class="line">    serv_name.sin_family = AF_INET;</span><br><span class="line">    inet_aton(host, &amp;serv_name.sin_addr);</span><br><span class="line">    serv_name.sin_port = htons(port);</span><br><span class="line"></span><br><span class="line">    status = connect(sock_fd, (struct sockaddr *)&amp;serv_name, <span class="keyword">sizeof</span>(serv_name));</span><br><span class="line">    <span class="keyword">if</span> (status == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"Connection error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(outdata, <span class="string">"heartbeat"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"send: %s\n"</span>, outdata);</span><br><span class="line">        send(sock_fd, outdata, <span class="built_in">strlen</span>(outdata), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> nbytes = recv(sock_fd, indata, <span class="keyword">sizeof</span>(indata), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (nbytes &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            close(sock_fd);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"server closed connection.\n"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"recv: %s\n"</span>, indata);</span><br><span class="line"></span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>客戶端輸出結果如下，<br><figure class="highlight bash"><figcaption><span>client</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ./client</span><br><span class="line">send: heartbeat</span><br><span class="line">recv: <span class="built_in">echo</span> heartbeat</span><br><span class="line">send: heartbeat</span><br><span class="line">recv: <span class="built_in">echo</span> heartbeat</span><br><span class="line">send: heartbeat</span><br><span class="line">recv: <span class="built_in">echo</span> heartbeat</span><br><span class="line">send: heartbeat</span><br><span class="line">recv: <span class="built_in">echo</span> heartbeat</span><br><span class="line">send: heartbeat</span><br><span class="line">recv: <span class="built_in">echo</span> heartbeat</span><br><span class="line">^C</span><br></pre></td></tr></table></figure></p><p>伺服器端輸出結果如下，<br><figure class="highlight bash"><figcaption><span>server</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ./server</span><br><span class="line">server start at: 0.0.0.0:7000</span><br><span class="line"><span class="built_in">wait</span> <span class="keyword">for</span> connection...</span><br><span class="line">connected by 127.0.0.1:33862</span><br><span class="line">recv: heartbeat</span><br><span class="line">recv: heartbeat</span><br><span class="line">recv: heartbeat</span><br><span class="line">recv: heartbeat</span><br><span class="line">recv: heartbeat</span><br><span class="line">client closed connection.</span><br></pre></td></tr></table></figure></p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="cc-linux-tcp-常見問題">C/C++ Linux TCP 常見問題</span></h2><p>在 TCP 的傳輸裡，為什麼伺服器還要回傳給客戶端？<br>因為這只是個示範用的通訊程式，讓你了解通訊的過程，就像打電話或者跟別人對話一樣，你一句我一句的來回互動，你可以根據實際的需求而修改程式，你也可以改成一直傳，例如客戶端一直傳送，伺服器一直接收。  </p><p>為什麼 recv 還沒收到資料前會卡住一直等？<br>因為預設是 blocking 非阻塞模式，recv 還沒收到資料前會卡住一直等，沒法做其他事情，直到 recv 接收到資料才會從 recv 函式返回，解決辦法是改用 Non-blocking 非阻塞模式，Non-blocking 模式是這次沒接收到資料就會從 recv 函式返回，接著繼續往下執行；另一個解決方式是另外建立執行緒去做其他事情。  </p><h2><span id="linux-sokcet-的-ip-字串轉-sockaddr_in">Linux sokcet 的 ip 字串轉 sockaddr_in</span></h2><p>在 Linux 中 ip 字串轉換成 sockaddr_in 結構可用 inet_aton (ipv4 only)跟 inet_pton (ipv4 &amp; ipv6) 兩個 API 達成，但在 windows 中沒有 inet_aton，而是 inet_addr (ipv4) 可用，所以用 inet_aton 的缺點是跨平台的話還要在修改這部分的程式碼，  </p><p>inet_aton 用法如下，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* host = <span class="string">"0.0.0.0"</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">my_addr</span>;</span></span><br><span class="line">inet_aton(host, &amp;my_addr.sin_addr);</span><br></pre></td></tr></table></figure></p><p>所以使用 inet_pton 的話，好處就是 linux 跟 windows 都可以通用，所以基本上在 linux 中是建議使用 inet_pton，  </p><p>inet_pton 使用方法如下，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* host = <span class="string">"0.0.0.0"</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">my_addr</span>;</span></span><br><span class="line">inet_pton(AF_INET, host, &amp;my_addr.sin_addr); <span class="comment">// AF_INET -&gt; ipv4</span></span><br></pre></td></tr></table></figure></p><h2><span id="linux-sokcet-的-sockaddr_in-轉-ip-字串">Linux sokcet 的 sockaddr_in 轉 ip 字串</span></h2><p>在 Linux 中 要將 sockaddr_in 結構轉換成 ip 字串的話可用 inet_ntoa (ipv4 only)跟 inet_ntop (ipv4 &amp; ipv6) 兩個 API 達成，  </p><p>inet_ntoa 用法如下，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span></span><br><span class="line"><span class="keyword">char</span> *ip;</span><br><span class="line">ip = inet_ntoa(client_addr.sin_addr)</span><br></pre></td></tr></table></figure></p><p>inet_ntop 用法如下，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span></span><br><span class="line"><span class="keyword">char</span> ip[INET_ADDRSTRLEN];</span><br><span class="line">inet_ntop(AF_INET, &amp;client_addr.sin_addr, ip, <span class="keyword">sizeof</span>(ip));</span><br></pre></td></tr></table></figure></p><p>以上就是 C/C++ Linux TCP Socket Server/Client 網路通訊教學，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹如何寫 C/C++ Linux TCP Socket Server/Client 網路通訊程式，在這個網路盛行的時代，網路通訊已成為基礎，想要精通學習網路通訊必須先了解 TCP/IP 協定，其中又以 TCP 通訊最常被使用，TCP 通訊程式通常分成
      
    
    </summary>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
      <category term="Linux" scheme="https://shengyu7697.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux hexdiff 比較二進制檔案差異用法與範例</title>
    <link href="https://shengyu7697.github.io/linux-hexdiff/"/>
    <id>https://shengyu7697.github.io/linux-hexdiff/</id>
    <published>2022-12-29T14:00:00.000Z</published>
    <updated>2023-01-02T08:32:07.556Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介紹 Linux hexdiff 比較二進制檔案差異用法與範例。  </p><p>在 Ubuntu 下安裝 hexdiff 的方式為：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install hexdiff</span><br></pre></td></tr></table></figure></p><p>Linux hexdiff 指令用法範例如下，用 hexdiff 來比較 a.bin 跟 b.bin 兩個二進制檔案內容的差異，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexdiff a.bin b.bin</span><br></pre></td></tr></table></figure></p><p>結果如下圖，<br><img src="/linux-hexdiff/linux-hexdiff.png" title="linux hexdiff">  </p><p>除了 hexdiff 以外，還可以用其他指令來達成同樣的目的，例如：xxd 搭配 diff<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ xxd a.bin &gt; a.hex <span class="comment"># 用 xxd 轉為十六進位碼</span></span><br><span class="line">$ xxd b.bin &gt; b.hex <span class="comment"># 用 xxd 轉為十六進位碼</span></span><br><span class="line">$ diff a.hex b.hex <span class="comment"># 用 diff 比較差異</span></span><br></pre></td></tr></table></figure></p><p>結果如下圖，<br><img src="/linux-hexdiff/linux-diff.png" title="linux diff">  </p><p>以上就是 Linux hexdiff 比較二進制檔案差異用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/linux-tutorial/" title="Linux 常用指令教學懶人包">Linux 常用指令教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇介紹 Linux hexdiff 比較二進制檔案差異用法與範例。  &lt;/p&gt;
&lt;p&gt;在 Ubuntu 下安裝 hexdiff 的方式為：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shengyu7697.github.io/tags/Ubuntu/"/>
    
      <category term="Linux Command" scheme="https://shengyu7697.github.io/tags/Linux-Command/"/>
    
      <category term="Linux" scheme="https://shengyu7697.github.io/tags/Linux/"/>
    
      <category term="Shell Script" scheme="https://shengyu7697.github.io/tags/Shell-Script/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ fseek 用法與範例</title>
    <link href="https://shengyu7697.github.io/cpp-fseek/"/>
    <id>https://shengyu7697.github.io/cpp-fseek/</id>
    <published>2022-12-26T14:00:00.000Z</published>
    <updated>2023-01-02T08:32:07.556Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ fseek 的用法與範例，C/C++ 可以使用 fseek 移動檔案指標到某個位置，例如在讀檔想要跳至某個位置讀取時就會用到 fseek，fseek 用法詳見本篇範例。  </p><p>C/C++ 要使用 fseek 的話需要引入的標頭檔 <code>&lt;stdio.h&gt;</code>，如果要使用 C++ 的標頭檔則是引入 <code>&lt;cstdio&gt;</code>，<br>fseek 函式原型為<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fseek</span><span class="params">(FILE * stream, <span class="keyword">long</span> offset, <span class="keyword">int</span> origin)</span></span>;</span><br></pre></td></tr></table></figure></p><p>stream：指向 FILE 物件的指標<br>offset：從 origin 開始位移，以 byte 為單位<br>origin：可以是 SEEK_SET, SEEK_CUR, SEEK_END 其中一個  </p><p>以下 C/C++ fseek 的用法介紹將分為這幾部份，  </p><ul><li>C/C++ fseek 基本用法  </li><li>C/C++ fseek 計算檔案大小  </li><li>C/C++ fseek 計算檔案全部文字再 malloc 配置記憶體  </li></ul><p>那我們開始吧！  </p><h2><span id="cc-fseek-基本用法">C/C++ fseek 基本用法</span></h2><p>這邊介紹 C/C++ fseek 基本用法，以下為 fseek 搭配 ftell 移動檔案指標的各種情況範例，了解這些情況更能幫助了解怎麼使用 fseek，剛開完檔後使用 ftell 會回傳 0，使用 fseek 與 SEEK_SET 參數移動 5 個 bytes 再用 tellg 會回傳 5，再次使用 fseek 與 SEEK_SET 參數移動 5 個 bytes 再用 tellg 還是會回傳 5，說明 SEEK_SET 參數這是移動到一個從檔頭開始的絕對位置而不是前一次的相對位置，移動相對位置的話則要 fseek 搭配 SEEK_CUR 參數就會以當前的位置再開始移動，最後兩個範例分別是移到檔尾跟移到檔頭，<br><figure class="highlight cpp"><figcaption><span>cpp-fseek.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-fseek.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FILE *fp = fopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"failed to open the file.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// EXIT_FAILURE</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> pos = ftell(fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"position: %ld\n"</span>, pos);</span><br><span class="line"></span><br><span class="line">    fseek(fp, <span class="number">5</span>, SEEK_SET);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"position: %ld\n"</span>, ftell(fp));</span><br><span class="line"></span><br><span class="line">    fseek(fp, <span class="number">5</span>, SEEK_SET);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"position: %ld\n"</span>, ftell(fp));</span><br><span class="line"></span><br><span class="line">    fseek(fp, <span class="number">5</span>, SEEK_CUR);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"position: %ld\n"</span>, ftell(fp));</span><br><span class="line"></span><br><span class="line">    fseek(fp, <span class="number">0</span>, SEEK_END); <span class="comment">// 移到檔尾</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"position: %ld\n"</span>, ftell(fp));</span><br><span class="line"></span><br><span class="line">    fseek(fp, <span class="number">0</span>, SEEK_SET); <span class="comment">// 移到檔頭</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"position: %ld\n"</span>, ftell(fp));</span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>假設我的 input.txt 檔案大小是 44 bytes，程式執行結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">position: 0</span><br><span class="line">position: 5</span><br><span class="line">position: 5</span><br><span class="line">position: 10</span><br><span class="line">position: 44</span><br><span class="line">position: 0</span><br></pre></td></tr></table></figure></p><h2><span id="cc-fseek-計算檔案大小">C/C++ fseek 計算檔案大小</span></h2><p>這邊介紹一下如何利用 fseek 來計算檔案大小，我們可以藉由 fseek 移動檔案指標到檔尾，然後 ftell 取得 size，藉此來知道檔案大小，這種情形通常是在使用 new 或 malloc 動態配置記憶體時需要知道總大小是多少的情況會使用到，<br><figure class="highlight cpp"><figcaption><span>cpp-fseek2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-fseek2.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FILE *fp = fopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"failed to open the file.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// EXIT_FAILURE</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fseek(fp, <span class="number">0</span>, SEEK_END); <span class="comment">// 移到檔尾</span></span><br><span class="line">    <span class="keyword">long</span> fsize = ftell(fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"file size: %ld\n"</span>, fsize);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file size: 44</span><br></pre></td></tr></table></figure></p><h2><span id="cc-fseek-計算檔案全部文字再-malloc-配置記憶體">C/C++ fseek 計算檔案全部文字再 malloc 配置記憶體</span></h2><p>以下示範 C/C++ fseek 移動檔案指標到檔尾，然後計算檔案全部文字後 malloc 配置記憶體，再讀取檔案內容到預先配置好的 buffer 裡，<br><figure class="highlight cpp"><figcaption><span>cpp-fseek3.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-fseek3.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FILE *fp = fopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"failed to open the file.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// EXIT_FAILURE</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fseek(fp, <span class="number">0</span>, SEEK_END); <span class="comment">// 移到檔尾</span></span><br><span class="line">    <span class="keyword">long</span> size = ftell(fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"size: %ld\n"</span>, size);</span><br><span class="line">    fseek(fp, <span class="number">0</span>, SEEK_SET); <span class="comment">// 移到檔頭</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *buffer = (<span class="keyword">char</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * size);</span><br><span class="line"></span><br><span class="line">    fread(buffer, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), size, fp);</span><br><span class="line">    fclose(fp);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, buffer);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(buffer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上就是 C/C++ fseek 的用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 C++ 相關技術，可以參考看看下面的文章，<br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-fopen/" title="C/C++ fopen 用法與範例">C/C++ fopen 用法與範例</a><br><a href="/cpp-fread/" title="C/C++ fread 用法與範例">C/C++ fread 用法與範例</a><br><a href="/cpp-fgets/" title="C/C++ fgets 用法與範例">C/C++ fgets 用法與範例</a><br><a href="/cpp-fputs/" title="C/C++ fputs 用法與範例">C/C++ fputs 用法與範例</a><br><a href="/cpp-fclose/" title="C/C++ fclose 用法與範例">C/C++ fclose 用法與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ fseek 的用法與範例，C/C++ 可以使用 fseek 移動檔案指標到某個位置，例如在讀檔想要跳至某個位置讀取時就會用到 fseek，fseek 用法詳見本篇範例。  &lt;/p&gt;
&lt;p&gt;C/C++ 要使用 fseek 的話需要引入的
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Linux 比較二進制檔案差異的工具</title>
    <link href="https://shengyu7697.github.io/linux-diff-binary-file/"/>
    <id>https://shengyu7697.github.io/linux-diff-binary-file/</id>
    <published>2022-12-22T14:00:00.000Z</published>
    <updated>2023-01-02T08:32:07.552Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介紹 Linux 比較二進制檔案差異的工具，Linux 比較二進制檔案差異的工具分為這幾部份：  </p><ul><li>xxd 搭配 diff  </li><li>vimdiff  </li><li>hexdump 搭配 diff  </li><li>hexdiff  </li><li>dhex  </li></ul><h2><span id="xxd-搭配-diff">xxd 搭配 diff</span></h2><p>假如我們要以二進制格式比較兩個 a.bin 和 b.bin 檔案的差異，簡單的方法是先使用 <code>xxd</code> 指令將 bin 檔案轉換為文字格式，這裡示範為 .hex 檔案，實際上原理就是用 <code>printf(&quot;%02x&quot;)</code> 將二進制檔案按 byte 輸出為可讀的資料，接著再使用<code>diff</code> 指令這兩個 hex 檔案的差異，<code>diff</code> 指令只會印出兩個檔案不同之處的數值，xxd 搭配 diff 用法範例如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xxd a.bin &gt; a.hex</span><br><span class="line">xxd b.bin &gt; b.hex</span><br><span class="line">diff a.hex b.hex</span><br></pre></td></tr></table></figure></p><p>結果如下圖，<br><img src="/linux-diff-binary-file/linux-diff.png" title="linux diff">  </p><p>不想另外建立兩個檔的話，可以使用下列一行指令，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff &lt;(xxd a.bin) &lt;(xxd b.bin)</span><br></pre></td></tr></table></figure></p><h2><span id="vimdiff">vimdiff</span></h2><p>承上例，這邊介紹使用 vimdiff 比對 xxd 的輸出結果，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vimdiff &lt;(xxd a.bin) &lt;(xxd b.bin)</span><br></pre></td></tr></table></figure></p><p>結果如下圖，<br><img src="/linux-diff-binary-file/linux-vimdiff.png" title="linux vimdiff">  </p><p>當然你也可以使用 gvimdiff。  </p><h2><span id="hexdump-搭配-diff">hexdump 搭配 diff</span></h2><p>hexdump 也是將檔案 dump 出來的工具，hexdump 搭配 diff 用法如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexdump -C -v a.bin &gt; a.txt</span><br><span class="line">hexdump -C -v b.bin &gt; b.txt</span><br><span class="line">diff a.txt b.txt</span><br></pre></td></tr></table></figure></p><p>不想另外建立兩個檔的話，可以使用下列一行指令，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff &lt;(hexdump -C -v a.bin) &lt;(hexdump -C -v b.bin)</span><br></pre></td></tr></table></figure></p><p>結果如下圖，<br><img src="/linux-diff-binary-file/linux-hexdump-diff.png" title="linux hexdump diff">  </p><h2><span id="hexdiff">hexdiff</span></h2><p>在 Ubuntu 下安裝 hexdiff 的方式為：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install hexdiff</span><br></pre></td></tr></table></figure></p><p>hexdiff 用法範例如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexdiff a.bin b.bin</span><br></pre></td></tr></table></figure></p><p>結果如下圖，<br><img src="/linux-diff-binary-file/linux-hexdiff.png" title="linux hexdiff">  </p><h2><span id="dhex">dhex</span></h2><p>在 Ubuntu 下安裝 dhex 的方式為：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install dhex</span><br></pre></td></tr></table></figure></p><p>dhex 用法範例如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dhex a.bin b.bin</span><br></pre></td></tr></table></figure></p><p>結果如下圖，<br><img src="/linux-diff-binary-file/linux-dhex.png" title="linux dhex">  </p><p>以上就是 Linux 比較二進制檔案差異的工具介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/linux-tutorial/" title="Linux 常用指令教學懶人包">Linux 常用指令教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇介紹 Linux 比較二進制檔案差異的工具，Linux 比較二進制檔案差異的工具分為這幾部份：  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;xxd 搭配 diff  &lt;/li&gt;
&lt;li&gt;vimdiff  &lt;/li&gt;
&lt;li&gt;hexdump 搭配 diff  &lt;/li&gt;
&lt;li&gt;hex
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shengyu7697.github.io/tags/Ubuntu/"/>
    
      <category term="Linux Command" scheme="https://shengyu7697.github.io/tags/Linux-Command/"/>
    
      <category term="Linux" scheme="https://shengyu7697.github.io/tags/Linux/"/>
    
      <category term="Shell Script" scheme="https://shengyu7697.github.io/tags/Shell-Script/"/>
    
  </entry>
  
  <entry>
    <title>GIMP 馬賽克處理</title>
    <link href="https://shengyu7697.github.io/gimp-pixelate/"/>
    <id>https://shengyu7697.github.io/gimp-pixelate/</id>
    <published>2022-12-19T14:00:00.000Z</published>
    <updated>2022-12-22T13:32:45.404Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介紹 GIMP 馬賽克處理，GIMP 功能太多，馬賽克處理也是蠻實用的功能，每次都會忘記在選單的哪個位置，這次決定紀錄起來！  </p><p>開啟要處理的圖片，點選工具箱中的<code>矩形選取工具</code>。<br><img src="/gimp-pixelate/gimp-pixelate-1.png" title="gimp pixelate">  </p><p>選取要馬賽克的範圍，<br><img src="/gimp-pixelate/gimp-pixelate-2.png" title="gimp pixelate">  </p><p>再點選選單中的<code>濾鏡</code>&gt;<code>模糊化</code>&gt;<code>馬賽克處理</code>，<br><img src="/gimp-pixelate/gimp-pixelate-3.png" title="gimp pixelate">  </p><p>然後會出現<code>馬賽克處理</code>的小視窗，你可以調整賽克格子的像素寬度和像素高度，同時他會出現預覽圖，之後按<code>確定</code>，<br><img src="/gimp-pixelate/gimp-pixelate-4.png" title="gimp pixelate">  </p><p>確定後就可以看到主視窗選取的範圍已經做完了馬賽克處理，<br><img src="/gimp-pixelate/gimp-pixelate-5.png" title="gimp pixelate">  </p><p>之後如果要再做一樣的馬賽克處理的話，一樣是選取要馬賽克的範圍後，按選單中的<code>濾鏡</code>&gt;<code>重複&quot;馬賽克處理&quot;</code>即可。<br><img src="/gimp-pixelate/gimp-pixelate-6.png" title="gimp pixelate">  </p><p>以上就是 GIMP 馬賽克處理介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/gimp-crop/" title="GIMP 圖片裁切">GIMP 圖片裁切</a><br><a href="/gimp-remove-background/" title="GIMP 去背/去除背景">GIMP 去背/去除背景</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇介紹 GIMP 馬賽克處理，GIMP 功能太多，馬賽克處理也是蠻實用的功能，每次都會忘記在選單的哪個位置，這次決定紀錄起來！  &lt;/p&gt;
&lt;p&gt;開啟要處理的圖片，點選工具箱中的&lt;code&gt;矩形選取工具&lt;/code&gt;。&lt;br&gt;&lt;img src=&quot;/gimp-pixelat
      
    
    </summary>
    
    
      <category term="Software" scheme="https://shengyu7697.github.io/tags/Software/"/>
    
      <category term="GIMP" scheme="https://shengyu7697.github.io/tags/GIMP/"/>
    
  </entry>
  
  <entry>
    <title>webp 轉換 jpg 的 command line 指令</title>
    <link href="https://shengyu7697.github.io/convert-webp-to-jpg/"/>
    <id>https://shengyu7697.github.io/convert-webp-to-jpg/</id>
    <published>2022-12-17T14:00:00.000Z</published>
    <updated>2022-12-22T13:32:45.404Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 webp 轉換 jpg 的 command line 指令用法與範例。  </p><p>使用 convert 指令將 webp 轉 jpg，因為 convert 依賴 ImageMagick，適用於 ImageMagick v6，Linux 與 macOS 都適用，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">covert input.webp output.jpg</span><br></pre></td></tr></table></figure></p><p>使用 magick 指令將 webp 轉 jpg，適用於 ImageMagick v7，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">magick input.webp output.jpg</span><br></pre></td></tr></table></figure></p><p>使用 ffmpeg 指令將 webp 轉 jpg，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i input.webp output.png</span><br></pre></td></tr></table></figure></p><p>使用 dwebp 指令將 webp 轉 jpg，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dwebp input.webp -o output.png</span><br></pre></td></tr></table></figure></p><p>使用 cwebp 指令將 webp 轉 jpg，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cwebp input.png -o output.webp</span><br></pre></td></tr></table></figure></p><p>以上就是 webp 轉換 jpg 的 command line 指令介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p>其它參考<br>jpeg - CLI command to convert Webp image(s) to JPG? - Stack Overflow<br><a href="https://stackoverflow.com/questions/49591274/cli-command-to-convert-webp-images-to-jpg" rel="noopener" target="_blank">https://stackoverflow.com/questions/49591274/cli-command-to-convert-webp-images-to-jpg</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 webp 轉換 jpg 的 command line 指令用法與範例。  &lt;/p&gt;
&lt;p&gt;使用 convert 指令將 webp 轉 jpg，因為 convert 依賴 ImageMagick，適用於 ImageMagick v6，Linux 與
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shengyu7697.github.io/tags/Ubuntu/"/>
    
      <category term="Linux Command" scheme="https://shengyu7697.github.io/tags/Linux-Command/"/>
    
      <category term="macOS" scheme="https://shengyu7697.github.io/tags/macOS/"/>
    
      <category term="Linux" scheme="https://shengyu7697.github.io/tags/Linux/"/>
    
      <category term="Shell Script" scheme="https://shengyu7697.github.io/tags/Shell-Script/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ ftell 用法與範例</title>
    <link href="https://shengyu7697.github.io/cpp-ftell/"/>
    <id>https://shengyu7697.github.io/cpp-ftell/</id>
    <published>2022-12-15T14:00:00.000Z</published>
    <updated>2022-12-17T02:39:33.724Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ ftell 的用法與範例，C/C++ 可以使用 ftell 回傳從檔案頭到當前位置的 byte 數，例如在讀檔時想知道這個檔案裡面有多少個文字時就可以使用 ftell，ftell 用法詳見本篇範例。  </p><p>C/C++ 要使用 ftell 的話需要引入的標頭檔 <code>&lt;stdio.h&gt;</code>，如果要使用 C++ 的標頭檔則是引入 <code>&lt;cstdio&gt;</code>，<br>ftell 函式原型為<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">ftell</span><span class="params">(FILE * stream)</span></span>;</span><br></pre></td></tr></table></figure></p><p>stream：指向 FILE 物件的指標  </p><p>以下 C/C++ ftell 的用法介紹將分為這幾部份，  </p><ul><li>C/C++ ftell 基本用法  </li><li>C/C++ ftell 計算檔案大小  </li><li>C/C++ ftell 計算檔案全部文字再 malloc 配置記憶體  </li></ul><p>那我們開始吧！  </p><h2><span id="cc-ftell-基本用法">C/C++ ftell 基本用法</span></h2><p>這邊介紹 C/C++ ftell 基本用法，以下為 ftell 搭配 fseek 移動檔案指標的各種情況範例，了解這些情況更能幫助了解怎麼使用 ftell，剛開完檔後使用 ftell 會回傳 0，使用 fseek 與 SEEK_SET 參數移動 5 個 bytes 再用 ftell 會回傳 5，再次使用 fseek 與 SEEK_SET 參數移動 5 個 bytes 再用 ftell 還是會回傳 5，說明 SEEK_SET 參數這是移動到一個從檔頭開始的絕對位置而不是前一次的相對位置，移動相對位置的話則要 fseek 搭配 SEEK_CUR 參數就會以當前的位置再開始移動，最後兩個範例分別是移到檔尾跟移到檔頭，<br><figure class="highlight cpp"><figcaption><span>cpp-ftell.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-ftell.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FILE *fp = fopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"failed to open the file.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// EXIT_FAILURE</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> pos = ftell(fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"position: %ld\n"</span>, pos);</span><br><span class="line"></span><br><span class="line">    fseek(fp, <span class="number">5</span>, SEEK_SET);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"position: %ld\n"</span>, ftell(fp));</span><br><span class="line"></span><br><span class="line">    fseek(fp, <span class="number">5</span>, SEEK_SET);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"position: %ld\n"</span>, ftell(fp));</span><br><span class="line"></span><br><span class="line">    fseek(fp, <span class="number">5</span>, SEEK_CUR);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"position: %ld\n"</span>, ftell(fp));</span><br><span class="line"></span><br><span class="line">    fseek(fp, <span class="number">0</span>, SEEK_END); <span class="comment">// 移到檔尾</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"position: %ld\n"</span>, ftell(fp));</span><br><span class="line"></span><br><span class="line">    fseek(fp, <span class="number">0</span>, SEEK_SET); <span class="comment">// 移到檔頭</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"position: %ld\n"</span>, ftell(fp));</span><br><span class="line"></span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>假設我的 input.txt 檔案大小是 44 bytes，程式執行結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">position: 0</span><br><span class="line">position: 5</span><br><span class="line">position: 5</span><br><span class="line">position: 10</span><br><span class="line">position: 44</span><br><span class="line">position: 0</span><br></pre></td></tr></table></figure></p><h2><span id="cc-ftell-計算檔案大小">C/C++ ftell 計算檔案大小</span></h2><p>這邊介紹一下如何利用 ftell 來計算檔案大小，我們可以藉由 fseek 移動檔案指標到檔尾，然後 ftell 取得 size，藉此來知道檔案大小，這種情形通常是在使用 new 或 malloc 動態配置記憶體時需要知道總大小是多少的情況會使用到，<br><figure class="highlight cpp"><figcaption><span>cpp-ftell2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-ftell2.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FILE *fp = fopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"failed to open the file.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// EXIT_FAILURE</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fseek(fp, <span class="number">0</span>, SEEK_END); <span class="comment">// 移到檔尾</span></span><br><span class="line">    <span class="keyword">long</span> fsize = ftell(fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"file size: %ld\n"</span>, fsize);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file size: 44</span><br></pre></td></tr></table></figure></p><h2><span id="cc-ftell-計算檔案全部文字再-malloc-配置記憶體">C/C++ ftell 計算檔案全部文字再 malloc 配置記憶體</span></h2><p>以下示範 C/C++ ftell 計算檔案全部文字後再 malloc 配置記憶體，<br><figure class="highlight cpp"><figcaption><span>cpp-ftell3.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-ftell3.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FILE *fp = fopen(<span class="string">"input.txt"</span>, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"failed to open the file.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// EXIT_FAILURE</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fseek(fp, <span class="number">0</span>, SEEK_END); <span class="comment">// 移到檔尾</span></span><br><span class="line">    <span class="keyword">long</span> size = ftell(fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"size: %ld\n"</span>, size);</span><br><span class="line">    fseek(fp, <span class="number">0</span>, SEEK_SET); <span class="comment">// 移到檔頭</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> *buffer = (<span class="keyword">char</span> *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * size);</span><br><span class="line"></span><br><span class="line">    fread(buffer, <span class="keyword">sizeof</span>(<span class="keyword">char</span>), size, fp);</span><br><span class="line">    fclose(fp);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, buffer);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(buffer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上就是 C/C++ ftell 的用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 C++ 相關技術，可以參考看看下面的文章，<br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-fopen/" title="C/C++ fopen 用法與範例">C/C++ fopen 用法與範例</a><br><a href="/cpp-fread/" title="C/C++ fread 用法與範例">C/C++ fread 用法與範例</a><br><a href="/cpp-fgets/" title="C/C++ fgets 用法與範例">C/C++ fgets 用法與範例</a><br><a href="/cpp-fputs/" title="C/C++ fputs 用法與範例">C/C++ fputs 用法與範例</a><br><a href="/cpp-fclose/" title="C/C++ fclose 用法與範例">C/C++ fclose 用法與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ ftell 的用法與範例，C/C++ 可以使用 ftell 回傳從檔案頭到當前位置的 byte 數，例如在讀檔時想知道這個檔案裡面有多少個文字時就可以使用 ftell，ftell 用法詳見本篇範例。  &lt;/p&gt;
&lt;p&gt;C/C++ 要使
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Google Sheet 用替代顏色來幫表格隔行上色/奇偶上色</title>
    <link href="https://shengyu7697.github.io/google-sheet-add-alternating-colors/"/>
    <id>https://shengyu7697.github.io/google-sheet-add-alternating-colors/</id>
    <published>2022-12-12T14:00:00.000Z</published>
    <updated>2022-12-17T02:39:33.720Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Google Sheet 用替代顏色來幫表格隔行上色/奇偶上色的方法教學。  </p><p>以下 Google Sheet 用替代顏色來幫表格隔行上色的介紹分為這幾部分，  </p><ul><li>Google Sheet 用替代顏色來幫表格隔行上色  </li><li>Google Sheet 調整上色的顏色樣式  </li><li>Google Sheet 調整上色的頁首或頁尾樣式  </li></ul><p>那我們開始吧！  </p><h2><span id="google-sheet-用替代顏色來幫表格隔行上色">Google Sheet 用替代顏色來幫表格隔行上色</span></h2><p>首先先選擇好要上色的表格範圍，<br><img src="/google-sheet-add-alternating-colors/google-sheet-add-alternating-colors-1.png" title="google sheet add alternating colors">  </p><p>接著點選功能選單的<code>格式</code> &gt; <code>替代顏色</code>，英文介面的話則是 <code>Format</code> &gt; <code>Alternating colors</code>，<br><img src="/google-sheet-add-alternating-colors/google-sheet-add-alternating-colors-2.png" title="google sheet add alternating colors">  </p><p>這樣就完成表格上色了！是不是很快速！然後畫面右側會出現<code>替代顏色</code>的其他選項，<br><img src="/google-sheet-add-alternating-colors/google-sheet-add-alternating-colors-3.png" title="google sheet add alternating colors">  </p><h2><span id="google-sheet-調整上色的顏色樣式">Google Sheet 調整上色的顏色樣式</span></h2><p>我們可以透過右側<code>替代顏色</code>的選項更改表格的顏色樣式，點選下去即可馬上看到效果，<br><img src="/google-sheet-add-alternating-colors/google-sheet-add-alternating-colors-4.png" title="google sheet add alternating colors">  </p><h2><span id="google-sheet-調整上色的頁首或頁尾樣式">Google Sheet 調整上色的頁首或頁尾樣式</span></h2><p>如果要有頁尾的樣式可以勾選右側<code>替代顏色</code>的<code>頁尾</code>選項，要取消頁首的樣式也一樣從右側<code>替代顏色</code>的<code>頁首</code>選項做取消勾選，<br><img src="/google-sheet-add-alternating-colors/google-sheet-add-alternating-colors-5.png" title="google sheet add alternating colors">  </p><p>除了預設的顏色樣式以外，你也可以透過<code>自訂樣式</code>來決定每一列的顏色，<br><img src="/google-sheet-add-alternating-colors/google-sheet-add-alternating-colors-6.png" width="250" title="google sheet add alternating colors">  </p><p>以上就是 Google Sheet 用替代顏色來幫表格隔行上色/奇偶上色介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Google Sheet 用替代顏色來幫表格隔行上色/奇偶上色的方法教學。  &lt;/p&gt;
&lt;p&gt;以下 Google Sheet 用替代顏色來幫表格隔行上色的介紹分為這幾部分，  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Google Sheet 用替代顏色來幫表
      
    
    </summary>
    
    
      <category term="Google Sheet" scheme="https://shengyu7697.github.io/tags/Google-Sheet/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShengYu Talk</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shengyu7697.github.io/"/>
  <updated>2022-01-05T00:00:20.312Z</updated>
  <id>https://shengyu7697.github.io/</id>
  
  <author>
    <name>ShengYu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python 寫入二進制檔</title>
    <link href="https://shengyu7697.github.io/python-write-binary-file/"/>
    <id>https://shengyu7697.github.io/python-write-binary-file/</id>
    <published>2022-01-04T14:00:00.000Z</published>
    <updated>2022-01-05T00:00:20.312Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介紹 Python 寫入二進制檔的方法，  </p><p>以下 Python 寫入 binary 檔的方法將分為這幾部份，  </p><ul><li>Python 寫入二進制檔的基本用法  </li><li>Python 使用 <code>struct.pack()</code> 寫入 str 字串到二進制檔  </li><li>Python 使用 <code>struct.pack()</code> 寫入 int 整數到二進制檔  </li><li>Python 使用 <code>struct.pack()</code> 寫入多種資料到二進制檔  </li></ul><h2><span id="python-寫入二進制檔的基本用法">Python 寫入二進制檔的基本用法</span></h2><p>這邊介紹 Python 寫入二進制檔的基本用法，Python 寫二進制檔時 <code>open()</code> 開檔要使用 <code>&#39;wb&#39;</code>，這邊示範寫入一個 hello 字串到二進制檔裡，<code>write()</code> 只接受 bytes 類別不接收 str 類別，所以需要將字串先轉成 bytes，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.bin'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">b'hello'</span>)</span><br></pre></td></tr></table></figure></p><p>Ubuntu 下看二進制檔的 hex 的話可以使用 dhex 工具，使用 <code>sudo apt install dhex</code> 安裝即可使用，dhex 使用畫面如下圖所示，  </p><img src="/python-write-binary-file/dhex.png" title="dhex">  <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-使用-structpack-寫入-str-字串到二進制檔">Python 使用 <code>struct.pack()</code> 寫入 str 字串到二進制檔</span></h2><p>這邊介紹 Python 使用 <code>struct.pack()</code> 寫入 str 到二進制檔，Python 只提供 read 與 write 函式寫入，並沒有提供對二進制讀取與寫入的函式，但是可以透過 struct 模組來達成這件事，這邊使用 <code>struct.pack()</code> 將資料打包成 bytes 物件的形式然後透過 <code>write()</code> 寫入二進制檔，例如將 <code>hello world</code> 寫到二進制檔裡，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">s = <span class="string">b'hello world'</span></span><br><span class="line">bytes_str = struct.pack(<span class="string">'11s'</span>, s)</span><br><span class="line">print(type(bytes_str))</span><br><span class="line">print(bytes_str)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.bin'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(bytes_str)</span><br></pre></td></tr></table></figure></p><p>如果要讀取的話可以看<a href="/python-read-binary-file/" title="這篇">這篇</a>。  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-使用-structpack-寫入-int-整數到二進制檔">Python 使用 <code>struct.pack()</code> 寫入 int 整數到二進制檔</span></h2><p>這邊介紹 Python 使用 <code>struct.pack()</code> 寫入 int 到二進制檔，例如將 <code>123</code> 寫到二進制檔裡，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">num = <span class="number">123</span></span><br><span class="line">bytes_str = struct.pack(<span class="string">'i'</span>, num)</span><br><span class="line">print(type(bytes_str))</span><br><span class="line">print(bytes_str)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.bin'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(bytes_str)</span><br></pre></td></tr></table></figure></p><p>結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;bytes&apos;&gt;</span><br><span class="line">b&apos;&#123;\x00\x00\x00&apos;</span><br></pre></td></tr></table></figure></p><p>如果要讀取的話可以看<a href="/python-read-binary-file/" title="這篇">這篇</a>。  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-使用-structpack-寫入多種資料到二進制檔">Python 使用 <code>struct.pack()</code> 寫入多種資料到二進制檔</span></h2><p>這邊介紹 Python 使用 <code>struct.pack()</code> 寫入多種資料到二進制檔，如果我們要 Python 使用 <code>struct.pack()</code> 寫入多種資料型態的話，可以這樣寫，假設我要寫入一個整數 123、一個浮點數 45.67，一個短整數 89，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct.pack(<span class="string">'ifh'</span>, <span class="number">123</span>, <span class="number">45.67</span>, <span class="number">89</span>)</span><br></pre></td></tr></table></figure></p><p>那麼將這些多種類型資料利用 <code>struct.pack()</code> 寫入二進制，就會是像這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.bin'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(struct.pack(<span class="string">'ifh'</span>, <span class="number">123</span>, <span class="number">45.67</span>, <span class="number">89</span>))</span><br></pre></td></tr></table></figure></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>剛剛是數字混合類型的範例，這次我們加入字串會是怎樣寫呢？<br>假設我要寫入一個字串 <code>hello</code>、一個整數 12、一個浮點數 34.56、一個字串 <code>python</code>，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct.pack(<span class="string">'5sif6s'</span>, <span class="string">'hello'</span>, <span class="number">12</span>, <span class="number">34.56</span>, <span class="string">'python'</span>)</span><br></pre></td></tr></table></figure></p><p>那麼將這些多種類型資料利用 <code>struct.pack()</code> 寫入二進制，就會像下範例這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">bytes_str = struct.pack(<span class="string">'5sif6s'</span>, <span class="string">b'hello'</span>, <span class="number">12</span>, <span class="number">34.56</span>, <span class="string">b'python'</span>)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.bin'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(bytes_str)</span><br></pre></td></tr></table></figure></p><p>如果要讀取的話可以看<a href="/python-read-binary-file/" title="這篇">這篇</a>。  </p><p>以上就是 Python 寫入二進制檔介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p>其他參考<br>Python how to write to a binary file? - Stack Overflow<br><a href="https://stackoverflow.com/questions/18367007/python-how-to-write-to-a-binary-file" rel="noopener" target="_blank">https://stackoverflow.com/questions/18367007/python-how-to-write-to-a-binary-file</a>    </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇介紹 Python 寫入二進制檔的方法，  &lt;/p&gt;
&lt;p&gt;以下 Python 寫入 binary 檔的方法將分為這幾部份，  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 寫入二進制檔的基本用法  &lt;/li&gt;
&lt;li&gt;Python 使用 &lt;code&gt;struct.pack
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 讀取二進制檔</title>
    <link href="https://shengyu7697.github.io/python-read-binary-file/"/>
    <id>https://shengyu7697.github.io/python-read-binary-file/</id>
    <published>2022-01-03T14:00:00.000Z</published>
    <updated>2022-01-05T00:00:20.312Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介紹 Python 讀取二進制檔的方法，  </p><p>以下 Python 讀取 binary 檔的方法將分為這幾部份，  </p><ul><li>Python 讀取二進制檔的基本用法  </li><li>Python 使用 <code>struct.unpack()</code> 讀取二進制檔的 str 字串  </li><li>Python 使用 <code>struct.unpack()</code> 讀取二進制檔的 int 整數  </li><li>Python 使用 <code>struct.unpack()</code> 讀取二進制檔的多種資料  </li></ul><h2><span id="python-讀取二進制檔的基本用法">Python 讀取二進制檔的基本用法</span></h2><p>在 Python 3 讀取二進制的範例如下，讀二進制檔時 <code>open()</code> 開檔模式要使用 <code>&#39;rb&#39;</code>，跟 Python 2 不同的是 Python 3 讀進來的是 bytes 類別，而 Python 2 讀進來的是字元，以下示範Python 讀取 binary 檔的寫法，假設這個 binary 檔叫做 <code>xxx.bin</code>，binary 檔案名稱你可以取任何名字，但通常我們不使用 <code>.txt</code> 作為副檔名，以免混淆，<br><figure class="highlight python"><figcaption><span>python3-bin-read.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.bin'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line">print(type(data))</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure></p><p>讀取一個內容為 hello 的二進制檔的結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;bytes&apos;&gt;</span><br><span class="line">b&apos;hello&apos;</span><br></pre></td></tr></table></figure></p><p>怎麼寫入可以看<a href="/python-write-binary-file/" title="這篇">這篇</a>。  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>我們可以將上述範例改寫成用十六進制方式印出來，<br><figure class="highlight python"><figcaption><span>python3-bin-read2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.bin'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(data)):</span><br><span class="line">    print(hex(data[i]) + <span class="string">' '</span>, end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure></p><p>讀取一個內容為 <code>hello</code> 的二進制檔的結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x68 0x65 0x6c 0x6c 0x6f</span><br></pre></td></tr></table></figure></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-使用-structunpack-讀取二進制檔的-str-字串">Python 使用 <code>struct.unpack()</code> 讀取二進制檔的 str 字串</span></h2><p>這邊介紹 Python 使用 <code>struct.unpack()</code> 讀取二進制檔的 str 字串，Python 只提供 read 與 write 函式寫入，並沒有提供對二進制讀取與寫入的函式，但是可以透過 struct 模組來達成這件事，以下範例是從二進制檔讀取長度 11 的字串，要注意的是 <code>struct.unpack()</code> 回傳的變數類型是 tuple，<br><figure class="highlight python"><figcaption><span>python-bin-read3.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.bin'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">    b, = struct.unpack(<span class="string">'11s'</span>, data)</span><br><span class="line">print(type(b))</span><br><span class="line">print(b)</span><br><span class="line">print(b.decode())</span><br></pre></td></tr></table></figure></p><p>讀取一個內容為 <code>hello world</code> 的二進制檔的結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;class &apos;bytes&apos;&gt;</span><br><span class="line">b&apos;hello world&apos;</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure></p><p>因為 <code>struct.unpack()</code> 回傳的變數類型是 tuple，所以回傳變數只有一個的話需要這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(b,) = struct.unpack(<span class="string">'11s'</span>, f.read())</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">b, = struct.unpack(<span class="string">'11s'</span>, f.read())</span><br></pre></td></tr></table></figure></p><p><code>struct.unpack()</code> 回傳多個變數的用法的話可以這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.bin'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">    b1,b2 = struct.unpack(<span class="string">'5s6s'</span>, data)</span><br><span class="line"></span><br><span class="line">print(b1.decode())</span><br><span class="line">print(b2.decode())</span><br></pre></td></tr></table></figure></p><p>結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line"> world</span><br></pre></td></tr></table></figure></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-使用-structunpack-讀取二進制檔的-int-整數">Python 使用 <code>struct.unpack()</code> 讀取二進制檔的 int 整數</span></h2><p>這邊介紹 Python 使用 <code>struct.unpack()</code> 讀取二進制檔的 int 整數，從二進制檔裡讀取 int，要注意的是 <code>struct.unpack()</code> 回傳的變數類型是 tuple，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.bin'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">    (num,) = struct.unpack(<span class="string">'i'</span>, data)</span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure></p><p>讀取一個內容為 <code>123</code> 的二進制檔的結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123</span><br></pre></td></tr></table></figure></p><p>因為 <code>struct.unpack()</code> 回傳的變數類型是 tuple，所以回傳變數只有一個的話需要這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(num,) = struct.unpack(<span class="string">'i'</span>, f.read())</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">num, = struct.unpack(<span class="string">'i'</span>, f.read())</span><br></pre></td></tr></table></figure></p><p>怎麼寫入可以看<a href="/python-write-binary-file/" title="這篇">這篇</a>。  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-使用-structunpack-讀取二進制檔的多種資料">Python 使用 <code>struct.unpack()</code> 讀取二進制檔的多種資料</span></h2><p>這邊介紹 Python 使用 <code>struct.unpack()</code> 讀取二進制檔的多種資料，如果我們要 Python 使用 <code>struct.unpack()</code> 讀取多種資料型態的話，可以這樣寫，假設我要讀取一個整數 123、一個浮點數 45.67，一個短整數 89，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(a,b,c) = struct.unpack(<span class="string">'ifh'</span>, f.read())</span><br></pre></td></tr></table></figure></p><p>那麼將這些多種類型資料利用 <code>struct.unpack()</code> 從二進制檔讀取，就會是像這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.bin'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    (a,b,c) = struct.unpack(<span class="string">'ifh'</span>, f.read())</span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure></p><p>結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">123</span><br><span class="line">45.66999816894531</span><br><span class="line">89</span><br></pre></td></tr></table></figure></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>剛剛是數字混合類型的範例，這次我們加入字串會是怎樣寫呢？<br>假設我要讀取一個字串 <code>hello</code>、一個整數 12、一個浮點數 34.56、一個字串 <code>python</code>，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(a,b,c,d) = struct.unpack(<span class="string">'5sif6s'</span>, f.read())</span><br></pre></td></tr></table></figure></p><p>那麼將這些多種類型資料利用 <code>struct.unpack()</code> 從二進制檔讀取，就會像下範例這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.bin'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    (a,b,c,d) = struct.unpack(<span class="string">'5sif6s'</span>, f.read())</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># print(a.decode('utf-8'))</span></span><br><span class="line">print(b)</span><br><span class="line">print(c)</span><br><span class="line">print(d)</span><br><span class="line"><span class="comment"># print(d.decode('utf-8'))</span></span><br></pre></td></tr></table></figure></p><p>結果輸出如下，要將 bytes 轉換成字串的話可以用 <code>decode()</code>，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">b&apos;hello&apos;</span><br><span class="line">12</span><br><span class="line">34.560001373291016</span><br><span class="line">b&apos;python&apos;</span><br></pre></td></tr></table></figure></p><p>怎麼寫入可以看<a href="/python-write-binary-file/" title="這篇">這篇</a>。  </p><p>以上就是 Python 讀取二進制檔介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p>其他參考<br>python - Reading binary file and looping over each byte - Stack Overflow<br><a href="https://stackoverflow.com/questions/1035340/reading-binary-file-and-looping-over-each-byte" rel="noopener" target="_blank">https://stackoverflow.com/questions/1035340/reading-binary-file-and-looping-over-each-byte</a><br><a href="https://www.delftstack.com/zh-tw/howto/python/read-binary-files-in-python/" rel="noopener" target="_blank">https://www.delftstack.com/zh-tw/howto/python/read-binary-files-in-python/</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇介紹 Python 讀取二進制檔的方法，  &lt;/p&gt;
&lt;p&gt;以下 Python 讀取 binary 檔的方法將分為這幾部份，  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 讀取二進制檔的基本用法  &lt;/li&gt;
&lt;li&gt;Python 使用 &lt;code&gt;struct.unpa
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python bytes 轉 string 的 2 種方法</title>
    <link href="https://shengyu7697.github.io/python-bytes-to-string/"/>
    <id>https://shengyu7697.github.io/python-bytes-to-string/</id>
    <published>2021-12-29T14:00:00.000Z</published>
    <updated>2022-01-02T13:45:41.236Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python bytes 轉 string 的 2 種方法，  </p><p>以下 Python bytes 轉字串的方法將分為這幾種，  </p><ul><li>Python str 類別建構子  </li><li>Python <code>bytes.decode()</code> 成員函式  </li></ul><p>那我們開始吧！  </p><h2><span id="python-str-類別建構子">Python str 類別建構子</span></h2><p>Python 3 可以使用 str 類別的建構子來轉換 bytes，在 str 類別的建構子中帶入 bytes 就會將 bytes 轉成 字串，預設編碼為 <code>None</code>，需要指定編碼否則不會轉換出正確的字串，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">b = <span class="string">b'hello'</span></span><br><span class="line">print(str(b, encoding=<span class="string">'utf-8'</span>))</span><br><span class="line">print(type(str(b, encoding=<span class="string">'utf-8'</span>)))</span><br></pre></td></tr></table></figure></p><p>結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">&lt;class &apos;str&apos;&gt;</span><br></pre></td></tr></table></figure></p><h2><span id="python-bytesdecode-成員函式">Python <code>bytes.decode()</code> 成員函式</span></h2><p>Python 3 使用 <code>bytes.decode()</code> 成員函式也可以將該 bytes 轉成字串，<code>decode()</code> 預設編碼就是 <code>&#39;utf-8&#39;</code>，有其它需求也可以指定其它編碼，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">b = <span class="string">b'hello'</span></span><br><span class="line">print(b.decode())</span><br><span class="line">print(type(b.decode()))</span><br><span class="line">print(b.decode(encoding=<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure></p><p>結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello</span><br><span class="line">&lt;class &apos;str&apos;&gt;</span><br><span class="line">hello</span><br></pre></td></tr></table></figure></p><p>以上就是 Python bytes 轉 string 的 2 種方法介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python bytes 轉 string 的 2 種方法，  &lt;/p&gt;
&lt;p&gt;以下 Python bytes 轉字串的方法將分為這幾種，  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python str 類別建構子  &lt;/li&gt;
&lt;li&gt;Python &lt;co
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 判斷 OS 作業系統的 3 種方法</title>
    <link href="https://shengyu7697.github.io/python-detect-os/"/>
    <id>https://shengyu7697.github.io/python-detect-os/</id>
    <published>2021-12-28T14:00:00.000Z</published>
    <updated>2022-01-03T23:54:44.544Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python 判斷 OS 作業系統的 3 種方法，以下的 Python 判斷 OS 作業系統的方法將分為這幾部分，  </p><ul><li>Python os.name  </li><li>Python sys.platform  </li><li>Python platform.system()</li></ul><p>那我們開始吧！  </p><h2><span id="python-osname">Python os.name</span></h2><p>Python 判斷 OS 作業系統的方法可以使用 <a href="https://docs.python.org/3/library/os.html#os.name" rel="noopener" target="_blank">os.name</a>，這邊以 Python 3 為例，os.name 會回傳 <code>posix</code>、<code>nt</code>、<code>java</code> 這幾種結果，使用前要先 <code>import os</code>，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">print(os.name)</span><br></pre></td></tr></table></figure></p><p>Ubuntu 16.04 的輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">posix</span><br></pre></td></tr></table></figure></p><p>MacOS 10.15.7 的輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">posix</span><br></pre></td></tr></table></figure></p><p>Windows 10 的輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nt</span><br></pre></td></tr></table></figure></p><p>在 os 模組下還有另一個 <a href="https://docs.python.org/3/library/os.html#os.uname" rel="noopener" target="_blank">uname()</a> 函式可以使用，uname() 會回傳作業系統相關的版本資訊，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">print(os.uname())</span><br></pre></td></tr></table></figure></p><p>Ubuntu 16.04 的輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">posix.uname_result(sysname=&apos;Linux&apos;, nodename=&apos;shengyu&apos;, release=&apos;4.10.0-40-generic&apos;, version=&apos;#44~16.04.1-Ubuntu SMP Thu Nov 9 15:37:44 UTC 2017&apos;, machine=&apos;x86_64&apos;)</span><br></pre></td></tr></table></figure></p><p>MacOS 10.15.7 的輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">posix.uname_result(sysname=&apos;Darwin&apos;, nodename=&apos;shengyudeMacBook-Pro.local&apos;, release=&apos;19.6.0&apos;, version=&apos;Darwin Kernel Version 19.6.0: Thu Sep 16 20:58:47 PDT 2021; root:xnu-6153.141.40.1~1/RELEASE_X86_64&apos;, machine=&apos;x86_64&apos;)</span><br></pre></td></tr></table></figure></p><p>Windows 下沒有 <code>os.uname()</code>，  </p><p>sys.platform 有更細的分類，下一節會介紹。  </p><h2><span id="python-sysplatform">Python sys.platform</span></h2><p>Python 判斷 OS 作業系統的方法可以使用 <a href="https://docs.python.org/3/library/sys.html#sys.platform" rel="noopener" target="_blank">sys.platform</a>，sys.platform 回傳的結果有 <code>aix</code>、<code>linux</code>、<code>win32</code>、<code>cygwin</code>、<code>darwin</code> 這幾種，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">print(sys.platform)</span><br></pre></td></tr></table></figure></p><p>Ubuntu 16.04 的輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">linux</span><br></pre></td></tr></table></figure></p><p>MacOS 10.15.7 的輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">darwin</span><br></pre></td></tr></table></figure></p><p>Windows 10 的輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">win32</span><br></pre></td></tr></table></figure></p><p>sys.platform 回傳的種類情況分為這幾種，  </p><table><thead><tr><th>系統種類</th><th>回傳值</th></tr></thead><tbody><tr><td>AIX</td><td><code>&#39;aix&#39;</code></td></tr><tr><td>Linux</td><td><code>&#39;linux&#39;</code></td></tr><tr><td>Windows</td><td><code>&#39;win32&#39;</code></td></tr><tr><td>Windows/Cygwin</td><td><code>&#39;cygwin&#39;</code></td></tr><tr><td>macOS</td><td><code>&#39;darwin&#39;</code></td></tr></tbody></table><p>Python 如果要用 sys.platform 判斷 OS 作業系統的話可以使用 <code>startswith()</code>，像 linux 與 linux2 的情況就可以被包含在以 linux 開頭的字串，寫在同一個條件式裡，<br><figure class="highlight python"><figcaption><span>python3-detect-os.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.platform.startswith(<span class="string">'linux'</span>): <span class="comment"># 包含 linux 與 linux2 的情況</span></span><br><span class="line">    print(<span class="string">'Linux'</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.platform.startswith(<span class="string">'darwin'</span>):</span><br><span class="line">    print(<span class="string">'macOS'</span>)</span><br><span class="line"><span class="keyword">elif</span> sys.platform.startswith(<span class="string">'win32'</span>):</span><br><span class="line">    print(<span class="string">'Windows'</span>)</span><br></pre></td></tr></table></figure></p><h2><span id="python-platformsystem">Python platform.system()</span></h2><p>Python 判斷 OS 作業系統的方法可以使用 <a href="https://docs.python.org/3/library/platform.html#platform.system" rel="noopener" target="_blank">platform.system()</a> 函式，platform.system() 會回傳作業系統的名稱，例如：<code>Linux</code>、<code>Darwin</code>、<code>Java</code>、<code>Windows</code> 這幾種，如果無法判別作業系統的話會回傳空字串，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line">print(platform.system())</span><br><span class="line">print(platform.release())</span><br></pre></td></tr></table></figure></p><p>Ubuntu 16.04 的輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Linux</span><br><span class="line">4.10.0-40-generic</span><br></pre></td></tr></table></figure></p><p>MacOS 10.15.7 的輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Darwin</span><br><span class="line">19.6.0</span><br></pre></td></tr></table></figure></p><p>Windows 10 的輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Windows</span><br><span class="line">10</span><br></pre></td></tr></table></figure></p><p>以上就是 Python 判斷 OS 作業系統的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p>其它參考<br>When to use os.name, sys.platform, or platform.system?<br><a href="https://stackoverflow.com/questions/4553129/when-to-use-os-name-sys-platform-or-platform-system" rel="noopener" target="_blank">https://stackoverflow.com/questions/4553129/when-to-use-os-name-sys-platform-or-platform-system</a><br>cross platform - Python: What OS am I running on? - Stack Overflow<br><a href="https://stackoverflow.com/questions/1854/python-what-os-am-i-running-on" rel="noopener" target="_blank">https://stackoverflow.com/questions/1854/python-what-os-am-i-running-on</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python 判斷 OS 作業系統的 3 種方法，以下的 Python 判斷 OS 作業系統的方法將分為這幾部分，  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python os.name  &lt;/li&gt;
&lt;li&gt;Python sys.platform  &lt;/l
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python open with 用法與範例</title>
    <link href="https://shengyu7697.github.io/python-with-open/"/>
    <id>https://shengyu7697.github.io/python-with-open/</id>
    <published>2021-12-27T14:00:00.000Z</published>
    <updated>2022-01-02T13:45:41.236Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python open with 用法與範例，  </p><p>以下 Python open with 用法與範例將分為這幾部份，  </p><ul><li>Python open with 開檔讀取文字檔  </li><li>Python open with 指定讀取檔案的編碼格式  </li><li>Python open with 開檔寫入文字檔  </li><li>Python open with 開檔讀取二進制檔</li><li>Python open with 開檔寫入二進制檔  </li></ul><p>那我們開始吧！  </p><h2><span id="python-open-with-開檔讀取文字檔">Python open with 開檔讀取文字檔</span></h2><p>Python 要讀取一個文字檔會先用 open 來開檔，在 <code>open()</code> 函式裡的第一個引數放入檔案路徑名稱，第二個引數為開檔模式，有讀檔模式、寫入模式或讀寫模式等等，讀檔模式就用 <code>&#39;r&#39;</code>，像這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'xxx.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">text = f.read()</span><br><span class="line">print(text)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></p><p>如果開檔有問題，例如要開啟的檔案不存在，<code>open()</code> 函式就會拋出一個 IOError 的錯誤，並且給出錯誤碼和詳細的資訊告訴你檔案不存在，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">FileNotFoundError: [Errno 2] No such file or directory: &apos;xxx.txt&apos;</span><br></pre></td></tr></table></figure></p><p>如果開檔成功的話，那麼接下來可以使用 <code>read()</code> 一次讀取該檔案的全部內容，或者使用 <code>readlines()</code> 搭配迴圈一次讀取一行文字，最後當檔案使用完畢時需要使用 <code>close()</code> 函式來關閉檔案，在檔案的開檔與讀取過程中都有可能會產生 IOError 例外錯誤，一旦出現例外錯誤，後面的 <code>f.close()</code> 函式就執行不到了，所以為了保證無論過程中有無出錯都要能正確地關閉檔案，我們可以使用 try… finially 來達成，像下述範例這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'xxx.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">    text = f.read()</span><br><span class="line">    print(text)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    print(<span class="string">'error'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure></p><p>但這樣寫太繁瑣了，每次讀檔或寫檔都樣寫這樣的程式碼的話顯得很冗長。  </p><p>好在 Python 提供了 with open 語句來解決這個問題，使用 Python with open 語句可以自動地幫我們呼叫 <code>close()</code> 關檔的動作，即使在 Python with open 語句裡發生例外也是一樣，而且這也是官方建議使用的方式，我們來看看 Python with open 語句怎麼寫，將上述範例改用 Python with open 語句後如下列範例所示，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    text = f.read()</span><br><span class="line">    print(text)</span><br></pre></td></tr></table></figure></p><p>這寫法跟前述範例的 try… finially 寫法效果是一樣的，但是 Python with open 語句的程式碼明顯地更精簡更少，而且還不用呼叫 <code>close()</code> 函式關檔。  </p><p>在某些情況下用 <code>f.read()</code> 是比較快速的選擇，例如檔案內容大小很小時，但有時可能不會採用一次全部讀取的方式，例如檔案內容超大無法一次讀取到記憶體，或者想要分批每次一行處理，如果是想每次處理一行的話可以使用 <code>readlines()</code> 搭配迴圈像這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        print(line)</span><br></pre></td></tr></table></figure></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-open-with-指定讀取檔案的編碼格式">Python open with 指定讀取檔案的編碼格式</span></h2><p>Python open with 要指定讀取檔案的編碼格式，在 <code>open()</code> 設定 <code>encoding</code> 編碼格式即可，例如 Big-5 就這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'Big5'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">f = open(<span class="string">'xxx.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'Big5'</span>)</span><br></pre></td></tr></table></figure></p><p>UTF-8 就這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">f = open(<span class="string">'xxx.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>)</span><br></pre></td></tr></table></figure></p><p>為了解決各種編碼問題，例如簡體中文與繁體中文，通常我們都會把編碼統一都轉成萬國碼 unicode。  </p><p>如果遇到編碼錯誤，例如 UnicodeDecodeError，這可能是檔案中包含的未定義的編碼字元，遇到這種狀況如果要忽略的話，可以這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'Big5'</span>, errors=<span class="string">'ignore'</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">f = open(<span class="string">'xxx.txt'</span>, <span class="string">'r'</span>, encoding=<span class="string">'Big5'</span>, errors=<span class="string">'ignore'</span>)</span><br></pre></td></tr></table></figure></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-open-with-開檔寫入文字檔">Python open with 開檔寫入文字檔</span></h2><p>這邊介紹 Python open with 開檔寫入文字檔的範例，根據前述讀取文字檔介紹的差不多，在寫入文字檔時 <code>open()</code> 開檔要用 <code>w</code> 模式，  </p><p>原本的開檔寫入文字檔的寫法為這樣，用 <code>write()</code> 將文字寫入檔案裡，在作業系統裡會有一個緩衝區，直到緩衝區滿了才會真正寫入硬碟裡，除非使用 flush() 強制將緩衝區寫入硬碟了，或者 close() 也會將緩衝區剩下的資料寫入硬碟裡，所以沒有正確 close() 關閉檔案的文字檔很容易看到檔案尾巴是資料不完整的狀況，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'xxx.txt'</span>, <span class="string">'w'</span>)</span><br><span class="line">f.write(<span class="string">'apple\n'</span>)</span><br><span class="line">f.write(<span class="string">'banana\n'</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></p><p>所以這時要碼要用 try… finially 寫法來正確的處理例外以及關檔，或者可以使用 Python open with 的寫法，如下所示，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'apple\n'</span>)</span><br><span class="line">    f.write(<span class="string">'banana\n'</span>)</span><br></pre></td></tr></table></figure></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-open-with-開檔讀取二進制檔">Python open with 開檔讀取二進制檔</span></h2><p>上述範例都是介紹文字檔的讀取與寫入，這邊要介紹二進制檔案的讀取，Python open with 讀取二進制檔案就需要在開檔模式裡加上 <code>&#39;b&#39;</code> 表示 binary 二進制模式，例如：二進制讀檔就要用 <code>&#39;rb&#39;</code>，在上傳圖片、影片或其它檔案時就會用二進制開檔讀取，</p><p>原本的開檔讀取二進制檔寫法為這樣，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'xxx.bin'</span>, <span class="string">'rb'</span>)</span><br><span class="line"><span class="comment"># f.read()</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure></p><p>改成 Python open with 來開檔讀取二進制檔案的寫法就會是這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.bin'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># f.read()</span></span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-open-with-開檔寫入二進制檔">Python open with 開檔寫入二進制檔</span></h2><p>這一節介紹 Python open with 寫入二進制檔案，跟上一節概念相似，  </p><p>原本的開檔寫入二進制檔寫法為這樣，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'xxx.bin'</span>, <span class="string">'wb'</span>)</span><br><span class="line"><span class="comment"># f.write()</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure></p><p>改成 Python open with 來開檔寫入二進制檔案的寫法就會是這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'xxx.bin'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="comment"># f.write()</span></span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure></p><p>以上就是 Python open with 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python open with 用法與範例，  &lt;/p&gt;
&lt;p&gt;以下 Python open with 用法與範例將分為這幾部份，  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python open with 開檔讀取文字檔  &lt;/li&gt;
&lt;li&gt;Pytho
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python string 轉 bytes 的 3 種方法</title>
    <link href="https://shengyu7697.github.io/python-string-to-bytes/"/>
    <id>https://shengyu7697.github.io/python-string-to-bytes/</id>
    <published>2021-12-24T14:00:00.000Z</published>
    <updated>2022-01-02T13:45:41.236Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python string 轉 bytes 的 3 種方法，  </p><p>以下 Python 字串轉 bytes 的方法將分為這幾種，  </p><ul><li>Python 在字串前面加上 <code>b</code>  </li><li>Python bytes 類別建構子  </li><li>Python <code>str.encode()</code> 成員函式  </li></ul><p>那我們開始吧！  </p><h2><span id="python-在字串前面加上-b">Python 在字串前面加上 <code>b</code></span></h2><p>在 Python 3 中在字串前面加上 <code>b</code> 表示這是 bytes，就會將這個字串轉成 bytes，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">b'hello'</span>)</span><br><span class="line">print(type(<span class="string">b'hello'</span>))</span><br></pre></td></tr></table></figure></p><p>結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b&apos;hello&apos;</span><br><span class="line">&lt;class &apos;bytes&apos;&gt;</span><br></pre></td></tr></table></figure></p><h2><span id="python-bytes-類別建構子">Python bytes 類別建構子</span></h2><p>Python 3 也可以使用 bytes 類別的建構子來轉換字串，在 bytes 類別的建構子中帶入字串就會將字串轉成 bytes，預設編碼為 <code>None</code>，需要指定編碼否則會出現 TypeError 錯誤，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">print(bytes(<span class="string">'hello'</span>, <span class="string">'utf-8'</span>))</span><br><span class="line">print(type(bytes(<span class="string">'hello'</span>, <span class="string">'utf-8'</span>)))</span><br></pre></td></tr></table></figure></p><p>結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b&apos;hello&apos;</span><br><span class="line">&lt;class &apos;bytes&apos;&gt;</span><br></pre></td></tr></table></figure></p><h2><span id="python-strencode-成員函式">Python <code>str.encode()</code> 成員函式</span></h2><p>Python 3 使用 <code>str.encode()</code> 成員函式也可以將該字串轉成 bytes，<code>encode()</code> 預設編碼就是 <code>&#39;utf-8&#39;</code>，有其它需求也可以指定其它編碼，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'hello'</span>.encode())</span><br><span class="line">print(type(<span class="string">'hello'</span>.encode()))</span><br><span class="line">print(<span class="string">'hello'</span>.encode(encoding=<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure></p><p>結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">b&apos;hello&apos;</span><br><span class="line">&lt;class &apos;bytes&apos;&gt;</span><br><span class="line">b&apos;hello&apos;</span><br></pre></td></tr></table></figure></p><p>以上就是 Python string 轉 bytes 的 3 種方法介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python string 轉 bytes 的 3 種方法，  &lt;/p&gt;
&lt;p&gt;以下 Python 字串轉 bytes 的方法將分為這幾種，  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 在字串前面加上 &lt;code&gt;b&lt;/code&gt;  &lt;/li&gt;

      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python PyQt5 新手入門教學</title>
    <link href="https://shengyu7697.github.io/python-pyqt-tutorial/"/>
    <id>https://shengyu7697.github.io/python-pyqt-tutorial/</id>
    <published>2021-12-23T14:00:00.000Z</published>
    <updated>2021-12-28T13:17:31.121Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 Python PyQt5 視窗程式新手入門教學彙整了 ShengYu 過往學習 PyQt5 的知識，在此整理成 PyQt5 教學目錄以便日後的查詢與新手入門學習，在本篇 Python PyQt5 教學裡你可以快速地學習 PyQt5 GUI 圖形介面視窗程式設計。  </p><p>以下 Python PyQt5 教學目錄將分為這幾部分，  </p><ul><li>Python PyQt5 基本視窗  </li><li>Python PyQt5 QLabel 標籤  </li><li>Python PyQt5 QPushButton 按鈕  </li><li>Python PyQt5 QLineEdit 文字輸入框  </li><li>Python PyQt5 QComboBox 下拉式選單  </li><li>Python PyQt5 QRadioButton 單選框  </li><li>Python PyQt5 QCheckBox 複選框  </li><li>Python PyQt5 QMessageBox 訊息框  </li></ul><p>那我們開始吧！  </p><h2><span id="python-pyqt5-基本視窗">Python PyQt5 基本視窗</span></h2><p>在 Python 中要使用 PyQt5 需要先安裝 PyQt5 模組，使用 pip 安裝 PyQt5 模組的指令如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install PyQt5</span><br></pre></td></tr></table></figure></p><p>確認有安裝 PyQt5 模組後，我們便可以開始來寫一個 PyQt5 基本視窗的程式了，以下我們示範建立一個 PyQt5 的基本視窗，一開始需要建立一個 PyQt5 應用程式所需要的 QApplication，QApplication 用來管理 Qt GUI 應用程式的控制流程與主要設定，之後建立一個 QWidget 的子類，如下例中 MyWidget 繼承 QWidget，不熟悉繼承的話可以參考 <a href="/python-inheritance/" title="Python 繼承 inheritance 的用法">Python 繼承 inheritance 的用法</a>這篇，在 MyWidget 的 <code>initUI()</code> 成員函式裡使用 <code>setWindowTitle()</code> 讓視窗名稱上顯示 <code>hello world</code> 字樣，使用 <code>setGeometry()</code> 將視窗設定在螢幕視窗座標位置  (50, 50) 上且視窗為 寬200x高150 的大小，之後使用 show() 便會將我們的視窗顯示出來，最後要使用 <code>QApplication.exec_()</code> 來進入 PyQt5 的主事件循環 (Event Loop)，<br><figure class="highlight python"><figcaption><span>python-pyqt-hello-world.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'hello world'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>下圖為 PyQt5 基本視窗的呈現結果，<br><img src="/python-pyqt-tutorial/pyqt-hello-world.png" title="pyqt hello world">  </p><p>延伸閱讀：<a href="/python-inheritance/" title="Python 物件導向：繼承 inheritance 的用法">Python 物件導向：繼承 inheritance 的用法</a><br>這樣我們就完成的一個基本的 PyQt5 視窗程式囉！接著我們就來學習一下 PyQt5 裡常見的 UI 元件吧！  </p><h2><span id="python-pyqt5-qlabel-標籤">Python PyQt5 QLabel 標籤</span></h2><p>QLabel 標籤是很基本的 UI 元件，主要是用來顯示文字的，也常常用來跟其它 UI 元件搭配，以下為 Python PyQt5 QLabel 按鈕的範例程式，<br><figure class="highlight python"><figcaption><span>python-pyqt-qlabel2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QLabel)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QFont</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        self.mylabel = QLabel(<span class="string">'hello world'</span>, self)</span><br><span class="line">        self.mylabel.move(<span class="number">40</span>, <span class="number">50</span>)</span><br><span class="line">        self.mylabel.setFont(QFont(<span class="string">'Arial'</span>, <span class="number">18</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>下圖為 PyQt5 QLabel 標籤的呈現結果，<br><img src="/python-pyqt-tutorial/pyqt-qlabel-2.png" title="pyqt qlabel">  </p><p>詳細的 PyQt5 QLabel 教學可以看 <a href="/python-pyqt-qlabel/" title="PyQt5 QLabel 標籤用法與範例">PyQt5 QLabel 標籤用法與範例</a> 這篇。  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-pyqt5-qpushbutton-按鈕">Python PyQt5 QPushButton 按鈕</span></h2><p>QPushButton 按鈕與按鈕事件是視窗程式設計的學習必學的 UI 元件，以下為 Python PyQt5 QPushButton 按鈕的範例程式，<br><figure class="highlight python"><figcaption><span>python-pyqt-qpushbutton2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QPushButton)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        self.mybutton = QPushButton(<span class="string">'button'</span>, self)</span><br><span class="line">        self.mybutton.move(<span class="number">60</span>, <span class="number">50</span>)</span><br><span class="line">        self.mybutton.clicked.connect(self.onButtonClick)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onButtonClick</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.mybutton.setText(<span class="string">'hello wolrd'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>下圖為 PyQt5 QPushButton 按鈕的呈現結果，<br><img src="/python-pyqt-tutorial/pyqt-qpushbutton-2.png" title="pyqt qpushbutton">  </p><p>詳細的 PyQt5 QPushButton 教學可以看 <a href="/python-pyqt-qpushbutton/" title="PyQt5 QPushButton 按鈕用法與範例">PyQt5 QPushButton 按鈕用法與範例</a> 這篇。  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-pyqt5-qlineedit-文字輸入框">Python PyQt5 QLineEdit 文字輸入框</span></h2><p>要取得使用者的輸入就需要使用 QLineEdit 文字輸入框這個 UI 元件，以下為 Python PyQt5 QLineEdit 按鈕的範例程式，<br><figure class="highlight python"><figcaption><span>python-pyqt-qlineedit5.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QGridLayout, QLineEdit,</span><br><span class="line">                             QLabel)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">240</span>, <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">        gridlayout = QGridLayout()</span><br><span class="line">        self.setLayout(gridlayout)</span><br><span class="line"></span><br><span class="line">        self.mylabel = QLabel(<span class="string">'Name:'</span>, self)</span><br><span class="line">        gridlayout.addWidget(self.mylabel, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.mylineedit = QLineEdit(self)</span><br><span class="line">        gridlayout.addWidget(self.mylineedit, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.mylabel2 = QLabel(<span class="string">'Password:'</span>, self)</span><br><span class="line">        gridlayout.addWidget(self.mylabel2, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        self.mylineedit2 = QLineEdit(self)</span><br><span class="line">        self.mylineedit2.setEchoMode(QLineEdit.Password)</span><br><span class="line">        gridlayout.addWidget(self.mylineedit2, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>下圖為 PyQt5 QLineEdit 文字輸入框的呈現結果，<br><img src="/python-pyqt-tutorial/pyqt-qlineedit-5.png" title="pyqt qlineedit">  </p><p>詳細的 PyQt5 QLineEdit 教學可以看 <a href="/python-pyqt-qlineedit/" title="PyQt5 QLineEdit 文字輸入框用法與範例">PyQt5 QLineEdit 文字輸入框用法與範例</a> 這篇。  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-pyqt5-qcombobox-下拉式選單">Python PyQt5 QComboBox 下拉式選單</span></h2><p>QComboBox 提供下拉式選單給使用者選取選項，跟 QListBox 相比 QComboBox 可以節省很多版面的空間，也讓使用者清楚知道目前的選取的項目，以下為 Python PyQt5 QComboBox 下拉式選單的範例程式，<br><figure class="highlight python"><figcaption><span>python-pyqt-qcombobox2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QComboBox)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        self.mycombobox = QComboBox(self)</span><br><span class="line">        self.mycombobox.addItems([<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'orange'</span>, <span class="string">'lemon'</span>, <span class="string">'tomato'</span>])</span><br><span class="line">        self.mycombobox.setCurrentIndex(<span class="number">1</span>)</span><br><span class="line">        <span class="comment">#self.mycombobox.setCurrentText('banana')</span></span><br><span class="line">        self.mycombobox.move(<span class="number">60</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>下圖為 PyQt5 QComboBox 下拉式選單的呈現結果，<br><img src="/python-pyqt-tutorial/pyqt-qcombobox-2.png" title="pyqt qcombobox">  </p><p>詳細的 PyQt5 QComboBox 教學可以看 <a href="/python-pyqt-qcombobox/" title="PyQt5 QComboBox 下拉式選單用法與範例">PyQt5 QComboBox 下拉式選單用法與範例</a> 這篇。  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-pyqt5-qradiobutton-單選框">Python PyQt5 QRadioButton 單選框</span></h2><p>QRadioButton 單選框提供多選一的操作方式給使用者選取選項，以下為 Python PyQt5 QRadioButton 單選框的範例程式，<br><figure class="highlight python"><figcaption><span>python-pyqt-qradiobutton.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QVBoxLayout,</span><br><span class="line">                             QRadioButton)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.myradiobutton1 = QRadioButton(<span class="string">'apple'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton1)</span><br><span class="line">        self.myradiobutton2 = QRadioButton(<span class="string">'banana'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton2)</span><br><span class="line">        self.myradiobutton3 = QRadioButton(<span class="string">'orange'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>下圖為 PyQt5 QRadioButton 單選框的呈現結果，<br><img src="/python-pyqt-tutorial/pyqt-qradiobutton-1.png" title="pyqt qradiobutton">  </p><p>詳細的 PyQt5 QRadioButton 教學可以看 <a href="/python-pyqt-qradiobutton/" title="PyQt5 QRadioButton 單選框用法與範例">PyQt5 QRadioButton 單選框用法與範例</a> 這篇。<br><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  </p><h2><span id="python-pyqt5-qcheckbox-複選框">Python PyQt5 QCheckBox 複選框</span></h2><p>QCheckBox 複選框提供多選項選取的操作方式給使用者選取選項，以下為 Python PyQt5 QCheckBox 複選框的範例程式，<br><figure class="highlight python"><figcaption><span>python-pyqt-qcheckbox3.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QVBoxLayout, QCheckBox)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.checkbox1 = QCheckBox(<span class="string">'apple'</span>, self)</span><br><span class="line">        layout.addWidget(self.checkbox1)</span><br><span class="line"></span><br><span class="line">        self.checkbox2 = QCheckBox(<span class="string">'banana'</span>, self)</span><br><span class="line">        self.checkbox2.toggle()</span><br><span class="line">        layout.addWidget(self.checkbox2)</span><br><span class="line"></span><br><span class="line">        self.checkbox3 = QCheckBox(<span class="string">'orange'</span>, self)</span><br><span class="line">        self.checkbox3.setChecked(<span class="literal">False</span>)</span><br><span class="line">        layout.addWidget(self.checkbox3)</span><br><span class="line"></span><br><span class="line">        self.checkbox4 = QCheckBox(<span class="string">'tomato'</span>, self)</span><br><span class="line">        self.checkbox4.setChecked(<span class="literal">True</span>)</span><br><span class="line">        layout.addWidget(self.checkbox4)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>下圖為 PyQt5 QCheckBox 複選框的呈現結果，<br><img src="/python-pyqt-tutorial/pyqt-qcheckbox-3.png" title="pyqt qcheckbox">  </p><p>詳細的 PyQt5 QCheckBox 教學可以看 <a href="/python-pyqt-qcheckbox/" title="PyQt5 QCheckBox 複選框用法與範例">PyQt5 QCheckBox 複選框用法與範例</a> 這篇。  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-pyqt5-qmessagebox-訊息框">Python PyQt5 QMessageBox 訊息框</span></h2><p>QMessageBox 訊息框是蠻常見的 UI 元件，經常被使用來顯示提示訊息給使用者，以下為 Python PyQt5 QMessageBox 訊息框的範例程式，<br><figure class="highlight python"><figcaption><span>python-pyqt-qmessagebox.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QMessageBox)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    QMessageBox.information(<span class="literal">None</span>, <span class="string">'my messagebox'</span>, <span class="string">'hello world'</span>)</span><br></pre></td></tr></table></figure></p><p>下圖為 PyQt5 QMessageBox 訊息框的呈現結果，<br><img src="/python-pyqt-tutorial/pyqt-qmessagebox-1.png" title="pyqt qmessagebox">  </p><p>詳細的 QMessageBox 訊息框教學可以看 <a href="/python-pyqt-qmessagebox/" title="PyQt5 QMessageBox 用法與範例">PyQt5 QMessageBox 用法與範例</a> 這篇。  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>以上就是 Python PyQt5 新手入門教學介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 Python PyQt5 視窗程式新手入門教學彙整了 ShengYu 過往學習 PyQt5 的知識，在此整理成 PyQt5 教學目錄以便日後的查詢與新手入門學習，在本篇 Python PyQt5 教學裡你可以快速地學習 PyQt5 GUI 圖形介面視窗程式設計。  &lt;
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
      <category term="PyQt" scheme="https://shengyu7697.github.io/tags/PyQt/"/>
    
  </entry>
  
  <entry>
    <title>Python tkinter 新手入門教學</title>
    <link href="https://shengyu7697.github.io/python-tkinter-tutorial/"/>
    <id>https://shengyu7697.github.io/python-tkinter-tutorial/</id>
    <published>2021-12-22T14:00:00.000Z</published>
    <updated>2021-12-28T13:17:31.121Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 Python tkinter 視窗程式新手入門教學彙整了 ShengYu 過往學習 tkinter 的知識，在此整理成 tkinter 教學目錄以便日後的查詢與新手入門學習，在本篇 Python tkinter 教學裡你可以快速地學習 tkinter GUI 圖形介面視窗程式設計。  </p><p>以下 Python tkinter 教學目錄將分為這幾部分，  </p><ul><li>Python tkinter 基本視窗  </li><li>Python tkinter Label 標籤  </li><li>Python tkinter Button 按鈕  </li><li>Python tkinter Entry 文字輸入框  </li><li>Python tkinter Combobox 下拉式選單  </li><li>Python tkinter messagebox 訊息框</li></ul><p>那我們開始吧！  </p><h2><span id="python-tkinter-基本視窗">Python tkinter 基本視窗</span></h2><p>Python3 預設內建已經提供了 tkinter 模組，所以不需額外安裝什麼模組就可以開始寫成 tkinter 視窗程式囉！  </p><p>接下來我們要先學習一下 tkinter 基本的視窗程式，一開始先使用 <code>tk.Tk()</code> 建立主視窗，之後用 <code>title()</code> 設定這個視窗的名稱，如果要改變視窗大小的話可以使用 <code>geometry()</code> 函式，例如下例中將視窗設定成 寬200x高150 的大小，最後呼叫 mainloop() 進入 tkinter 的主事件循環 (Event Loop)，<br><figure class="highlight python"><figcaption><span>python3-hello-world.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'hello world'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x150'</span>)</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>下圖為 tkinter 基本視窗的呈現結果，<br><img src="/python-tkinter-tutorial/tkinter-hello-world.png" title="tkinter hello world">  </p><p>如果要寫成 class 類別的話可以這樣寫，如下範例所示，建立一個 MyApp 類別繼承 tk.Tk，不熟悉繼承的話可以參考 <a href="/python-inheritance/" title="Python 繼承 inheritance 的用法">Python 繼承 inheritance 的用法</a>這篇，之後在 MyApp 的 <code>initUI()</code> 成員函式裡使用 <code>title()</code> 讓視窗名稱上顯示 <code>hello world</code> 字樣，使用 <code>geometry()</code> 將視窗設定為 寬200x高150 的大小，最後要使用 <code>mainloop()</code> 來進入 tkinter 的主事件循環 (Event Loop)，<br><figure class="highlight python"><figcaption><span>python3-hello-world2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span><span class="params">(tk.Tk)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.title(<span class="string">'hello world'</span>)</span><br><span class="line">        self.geometry(<span class="string">'200x150'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = MyApp()</span><br><span class="line">    app.mainloop()</span><br></pre></td></tr></table></figure></p><p>延伸閱讀：<a href="/python-inheritance/" title="Python 物件導向：繼承 inheritance 的用法">Python 物件導向：繼承 inheritance 的用法</a><br>這樣我們就完成的一個基本的 tkinter 視窗程式囉！接著我們就來學習一下 tkinter 裡常見的 UI 元件吧！  </p><h2><span id="python-tkinter-label-標籤">Python tkinter Label 標籤</span></h2><p>Label 標籤是很基本的 UI 元件，主要是用來顯示文字的，也常常用來跟其它 UI 元件搭配，以下為 Python tkinter Label 按鈕的範例程式，使用 <code>tk.Label</code> 建立一個標籤並給這個標籤一個顯示的文字 <code>hello world</code>，同時也可以設定該標籤的字型跟字型大小，<br><figure class="highlight python"><figcaption><span>python3-label2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x150'</span>)</span><br><span class="line"></span><br><span class="line">mylabel = tk.Label(root, text=<span class="string">'hello world'</span>, font=(<span class="string">'Arial'</span>, <span class="number">18</span>))</span><br><span class="line">mylabel.pack()</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>下圖為 tkinter Label 標籤的呈現結果，<br><img src="/python-tkinter-tutorial/tkinter-label-2.png" title="tkinter label">  </p><p>詳細的 tkinter Label 教學可以看 <a href="/python-tkinter-label/" title="tkinter label 標籤用法與範例">tkinter label 標籤用法與範例</a> 這篇。  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-tkinter-button-按鈕">Python tkinter Button 按鈕</span></h2><p>Button 按鈕與按鈕事件是視窗程式設計的學習必學的 UI 元件，以下為 Python tkinter Button 按鈕的範例程式，使用 <code>tk.Button</code> 建立一個按鈕後並指定 <code>command=button_event</code> 事件處理函式，而按鈕事件發生時就會呼叫到 button_event 以便處理按下該按鈕時要處理的邏輯，這個範例是按下按鈕時會把按鈕的文字改成 <code>hello world</code>，<br><figure class="highlight python"><figcaption><span>python3-button2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x150'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">button_event</span><span class="params">()</span>:</span></span><br><span class="line">    mybutton[<span class="string">'text'</span>] = <span class="string">'hello world'</span></span><br><span class="line"></span><br><span class="line">mybutton = tk.Button(root, text=<span class="string">'button'</span>, command=button_event)</span><br><span class="line">mybutton.pack()</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>下圖為 tkinter Button 按鈕按下後觸發事件的呈現結果，<br><img src="/python-tkinter-tutorial/tkinter-button-2.png" title="tkinter button">  </p><p>詳細的 tkinter Button 教學可以看 <a href="/python-tkinter-button/" title="tkinter button 按鈕用法與範例">tkinter button 按鈕用法與範例</a> 這篇。  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-tkinter-entry-文字輸入框">Python tkinter Entry 文字輸入框</span></h2><p>要取得使用者的輸入就需要使用 Entry 文字輸入框這個 UI 元件，以下為 Python tkinter Entry 按鈕的範例程式，<br><figure class="highlight python"><figcaption><span>python3-entry5.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line"></span><br><span class="line">mylabel = tk.Label(root, text=<span class="string">'Name:'</span>)</span><br><span class="line">mylabel.grid(row=<span class="number">0</span>, column=<span class="number">0</span>)</span><br><span class="line">myentry = tk.Entry(root)</span><br><span class="line">myentry.grid(row=<span class="number">0</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">mylabel2 = tk.Label(root, text=<span class="string">'Password:'</span>)</span><br><span class="line">mylabel2.grid(row=<span class="number">1</span>, column=<span class="number">0</span>)</span><br><span class="line">myentry2 = tk.Entry(root, show=<span class="string">'*'</span>)</span><br><span class="line">myentry2.grid(row=<span class="number">1</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">mybutton = tk.Button(root, text=<span class="string">'Login'</span>)</span><br><span class="line">mybutton.grid(row=<span class="number">2</span>, column=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>下圖為 tkinter Entry 文字輸入框的呈現結果，<br><img src="/python-tkinter-tutorial/tkinter-entry-5.png" title="tkinter entry">  </p><p>詳細的 tkinter Entry 教學可以看 <a href="/python-tkinter-entry/" title="tkinter Entry 文字輸入框用法與範例">tkinter Entry 文字輸入框用法與範例</a> 這篇。  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-tkinter-combobox-下拉式選單">Python tkinter Combobox 下拉式選單</span></h2><p>Combobox 提供下拉式選單給使用者選取選項，跟 QListBox 相比 Combobox 可以節省很多版面的空間，也讓使用者清楚知道目前的選取的項目，以下為 Python tkinter Combobox 下拉式選單的範例程式，<br><figure class="highlight python"><figcaption><span>python3-combobox2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">import</span> tkinter.ttk <span class="keyword">as</span> ttk</span><br><span class="line"> </span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x150'</span>)</span><br><span class="line"></span><br><span class="line">mycombobox = ttk.Combobox(root)</span><br><span class="line">mycombobox[<span class="string">'values'</span>] = [<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'orange'</span>,<span class="string">'lemon'</span>,<span class="string">'tomato'</span>]</span><br><span class="line">mycombobox.pack(pady=<span class="number">10</span>)</span><br><span class="line">mycombobox.current(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>下圖為 tkinter Combobox 下拉式選單的呈現結果，<br><img src="/python-tkinter-tutorial/tkinter-combobox-2.png" title="tkinter combobox">  </p><p>詳細的 tkinter Combobox 教學可以看 <a href="/python-tkinter-combobox/" title="tkinter Combobox 用法與範例">tkinter Combobox 用法與範例</a> 這篇。  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-tkinter-messagebox-訊息框">Python tkinter messagebox 訊息框</span></h2><p>messagebox 訊息框是蠻常見的 UI 元件，經常被使用來顯示提示訊息給使用者，以下為 Python tkinter messagebox 訊息框的範例程式，<br><figure class="highlight python"><figcaption><span>python3-messagebox.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.withdraw()</span><br><span class="line">messagebox.showinfo(<span class="string">'my messagebox'</span>, <span class="string">'hello world'</span>)</span><br></pre></td></tr></table></figure></p><p>下圖為 tkinter messagebox 訊息框的呈現結果，<br><img src="/python-tkinter-tutorial/tkinter-messagebox-1.png" title="tkinter messagebox">  </p><p>詳細的 QMessageBox 訊息框教學可以看 <a href="/python-tkinter-messagebox/" title="tkinter messagebox 用法與範例">tkinter messagebox 用法與範例</a> 這篇。  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>以上就是 Python tkinter 新手入門教學介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 Python tkinter 視窗程式新手入門教學彙整了 ShengYu 過往學習 tkinter 的知識，在此整理成 tkinter 教學目錄以便日後的查詢與新手入門學習，在本篇 Python tkinter 教學裡你可以快速地學習 tkinter GUI 圖形介面
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
      <category term="tkinter" scheme="https://shengyu7697.github.io/tags/tkinter/"/>
    
  </entry>
  
  <entry>
    <title>C++ std::floor 無條件捨去用法與範例</title>
    <link href="https://shengyu7697.github.io/std-floor/"/>
    <id>https://shengyu7697.github.io/std-floor/</id>
    <published>2021-12-21T14:00:00.000Z</published>
    <updated>2021-12-28T13:17:31.069Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C++ 的 std::floor 用法與範例，C++ <code>std::floor()</code> 是用來無條件捨去或者也可以說向下取整的函式，  </p><p>以下的 C++ std::floor 用法與範例將分為這幾部分，  </p><ul><li>C++ std::floor 基本用法  </li><li>C++ std::floor 負數範例  </li><li>C floor 用法  </li></ul><p>那我們開始吧！  </p><h2><span id="c-stdfloor-基本用法">C++ std::floor 基本用法</span></h2><p>這邊介紹 C++ std::floor 無條件進位或者向上取整的用法，使用前要引用 <code>&lt;cmath&gt;</code> 標頭檔，在 <code>std::floor()</code> 傳入任何一個浮點數，都會回傳無條件進位的結果，例如：<code>std::floor()</code> 傳入 4.2 會回傳 4，<code>std::floor()</code> 傳入 6.1 會回傳 6。<br><figure class="highlight cpp"><figcaption><span>std-floor.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ std-floor.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">floor</span>(<span class="number">4.2</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">floor</span>(<span class="number">4.4</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">floor</span>(<span class="number">4.6</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">floor</span>(<span class="number">4.8</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>C++ <code>std::floor()</code> 結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">4</span><br></pre></td></tr></table></figure></p><p>那 C++ <code>std::floor()</code> 如果傳入 4.0 會回傳多少呢？答案是 4。  </p><p>如果使用 float 或 double 變數帶入 <code>std::floor()</code> 的範例如下，<br><figure class="highlight cpp"><figcaption><span>std-floor2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ std-floor2.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> f = <span class="number">6.5f</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">floor</span>(f) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">6.5</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">floor</span>(d) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>C++ <code>std::floor()</code> 結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">6</span><br></pre></td></tr></table></figure></p><h2><span id="c-stdfloor-負數範例">C++ std::floor 負數範例</span></h2><p>這邊介紹 C++ std::floor 負數範例，<br><figure class="highlight cpp"><figcaption><span>std-floor3.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ std-floor3.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">floor</span>(<span class="number">-42.2</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">floor</span>(<span class="number">-42.4</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">floor</span>(<span class="number">-42.6</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">floor</span>(<span class="number">-42.8</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>C++ <code>std::floor()</code> 負數結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-43</span><br><span class="line">-43</span><br><span class="line">-43</span><br><span class="line">-43</span><br></pre></td></tr></table></figure></p><h2><span id="c-floor-用法">C floor 用法</span></h2><p>在 C 語言中也有 floor 函式可以使用，使用前要引用 <math.h> 標頭檔，使用方法如下，<code>floor()</code> 可以傳入 double 也可以傳入 float，<br><figure class="highlight cpp"><figcaption><span>cpp-floor.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-floor.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>, <span class="built_in">floor</span>(<span class="number">4.2</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>, <span class="built_in">floor</span>(<span class="number">4.4</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>, <span class="built_in">floor</span>(<span class="number">4.6f</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>, <span class="built_in">floor</span>(<span class="number">4.8f</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></math.h></p><p>floor 輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">4.000000</span><br><span class="line">4.000000</span><br><span class="line">4.000000</span><br><span class="line">4.000000</span><br></pre></td></tr></table></figure></p><p>以上就是 C++ std::floor 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C++ 的 std::floor 用法與範例，C++ &lt;code&gt;std::floor()&lt;/code&gt; 是用來無條件捨去或者也可以說向下取整的函式，  &lt;/p&gt;
&lt;p&gt;以下的 C++ std::floor 用法與範例將分為這幾部分，  &lt;/p&gt;
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Python tkinter Checkbutton 複選框用法與範例</title>
    <link href="https://shengyu7697.github.io/python-tkinter-checkbutton/"/>
    <id>https://shengyu7697.github.io/python-tkinter-checkbutton/</id>
    <published>2021-12-20T14:00:00.000Z</published>
    <updated>2022-01-06T00:09:45.309Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 將介紹 Python tkinter Checkbutton 複選框用法與範例，Checkbutton 可以作一些多選項的確認功能，例如代辦清單這種應用。  </p><p>以下的 Python tkinter Checkbutton 用法與範例將分為這幾部分，  </p><ul><li>tkinter Checkbutton 基本用法  </li><li>tkinter 設定 Checkbutton 選取或取消選取  </li><li>tkinter Checkbutton 綁定事件  </li></ul><p>那我們開始吧！  </p><h2><span id="tkinter-checkbutton-基本用法">tkinter Checkbutton 基本用法</span></h2><p>tkinter 建立 Checkbutton 的基本用法如下，在建立 <code>tk.Checkbutton</code> 的同時設定 <code>text</code> 屬性，<code>text</code> 屬性就是複選框的顯示文字，設定 <code>variable</code> 或 <code>var</code> 屬性是可以綁定該 Checkbutton 的勾選狀態，例如 mycheckbutton1 綁定這個 var1 變數後，之後 <code>var1.set(True)</code> 就是將 mycheckbutton1 勾選，反之 <code>var1.set(False)</code> 就是將 mycheckbutton1 取消勾選，<br><figure class="highlight python"><figcaption><span>python3-checkbutton.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x150'</span>)</span><br><span class="line"></span><br><span class="line">var1 = tk.BooleanVar()</span><br><span class="line">var2 = tk.BooleanVar()</span><br><span class="line">var3 = tk.BooleanVar()</span><br><span class="line"></span><br><span class="line">mycheckbutton1 = tk.Checkbutton(root, text=<span class="string">'apple'</span>,</span><br><span class="line">                                var=var1)</span><br><span class="line">mycheckbutton1.pack()</span><br><span class="line">mycheckbutton2 = tk.Checkbutton(root, text=<span class="string">'banana'</span>,</span><br><span class="line">                                var=var2)</span><br><span class="line">mycheckbutton2.pack()</span><br><span class="line">mycheckbutton3 = tk.Checkbutton(root, text=<span class="string">'orange'</span>,</span><br><span class="line">                                var=var3)</span><br><span class="line">mycheckbutton3.pack()</span><br><span class="line"></span><br><span class="line">var1.set(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-tkinter-checkbutton/tkinter-checkbutton-1.png" title="tkinter checkbutton">  </p><p>如果覺得 Checkbutton 上下間距太小的話，你可以透過設定 <code>tk.Checkbutton</code> 的 <code>height</code> 屬性來調整，例如：調整 Checkbutton 高度為 2，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mycheckbutton1 = tk.Checkbutton(root, text=<span class="string">'apple'</span>,</span><br><span class="line">                                variable=var1,</span><br><span class="line">                                height=<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><h2><span id="tkinter-設定-checkbutton-選取或取消選取">tkinter 設定 Checkbutton 選取或取消選取</span></h2><p>這邊介紹 tkinter 設定 Checkbutton 選取或取消選取的方法，也可以用來設定 Checkbutton 預設的選擇，建立 Checkbutton 後預設是不選取的狀態，有三種方式可以改變這個狀態，  </p><p>第一種是使用 <code>Checkbutton.select()</code> 與 <code>Checkbutton.deselect()</code>，<code>select()</code> 就是勾選，<code>select()</code> 就是取消勾選，  </p><p>第二種是使用 <code>Checkbutton.toggle()</code>，<code>toggle()</code> 就是原本勾選的會變成不勾選，再使用一次 <code>toggle()</code> 的話原本不勾選的會變成勾選，範例如下，<br><figure class="highlight python"><figcaption><span>python3-checkbutton2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x150'</span>)</span><br><span class="line"></span><br><span class="line">var1 = tk.IntVar()</span><br><span class="line">var2 = tk.IntVar()</span><br><span class="line">var3 = tk.IntVar()</span><br><span class="line"></span><br><span class="line">mycheckbutton1 = tk.Checkbutton(root, text=<span class="string">'apple'</span>,</span><br><span class="line">                                variable=var1,</span><br><span class="line">                                onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>)</span><br><span class="line">mycheckbutton1.pack()</span><br><span class="line">mycheckbutton2 = tk.Checkbutton(root, text=<span class="string">'banana'</span>,</span><br><span class="line">                                variable=var2,</span><br><span class="line">                                onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>)</span><br><span class="line">mycheckbutton2.pack()</span><br><span class="line">mycheckbutton3 = tk.Checkbutton(root, text=<span class="string">'orange'</span>,</span><br><span class="line">                                variable=var3,</span><br><span class="line">                                onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>)</span><br><span class="line">mycheckbutton3.pack()</span><br><span class="line"></span><br><span class="line">mycheckbutton1.select()</span><br><span class="line">mycheckbutton1.deselect()</span><br><span class="line">mycheckbutton2.select()</span><br><span class="line">mycheckbutton3.toggle()</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-tkinter-checkbutton/tkinter-checkbutton-2.png" title="tkinter checkbutton">  </p><p>第三種是在建立 <code>tk.Checkbutton</code> 時設定 <code>variable</code> 或 <code>var</code> 屬性，如下例中的 var1 ~ var3，使用 <code>IntVar.set()</code> 設定數值，然後 var1 ~ var3 變數的數值決定會不會勾選該 Checkbutton，範例如下，<br><figure class="highlight python"><figcaption><span>python3-checkbutton3.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x150'</span>)</span><br><span class="line"></span><br><span class="line">var1 = tk.IntVar()</span><br><span class="line">var2 = tk.IntVar()</span><br><span class="line">var3 = tk.IntVar()</span><br><span class="line"></span><br><span class="line">mycheckbutton1 = tk.Checkbutton(root, text=<span class="string">'apple'</span>,</span><br><span class="line">                                variable=var1,</span><br><span class="line">                                onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>)</span><br><span class="line">mycheckbutton1.pack()</span><br><span class="line">mycheckbutton2 = tk.Checkbutton(root, text=<span class="string">'banana'</span>,</span><br><span class="line">                                variable=var2,</span><br><span class="line">                                onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>)</span><br><span class="line">mycheckbutton2.pack()</span><br><span class="line">mycheckbutton3 = tk.Checkbutton(root, text=<span class="string">'orange'</span>,</span><br><span class="line">                                variable=var3,</span><br><span class="line">                                onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>)</span><br><span class="line">mycheckbutton3.pack()</span><br><span class="line"></span><br><span class="line">var2.set(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>例如 <code>var2.set(1)</code> 就是勾選 mycheckbutton2，<br><img src="/python-tkinter-checkbutton/tkinter-checkbutton-3.png" title="tkinter checkbutton">  </p><h2><span id="tkinter-checkbutton-綁定事件">tkinter Checkbutton 綁定事件</span></h2><p>這邊介紹 tkinter Checkbutton 綁定事件函式，你可以將不同的 Checkbutton 分別綁訂不同的事件處理函式，你也可以將不同的 Checkbutton 全部綁訂同一個事件處理函式，如下例所示，在 <code>checkbutton_event()</code> 處理函式裡透過用 <code>IntVar.get()</code> 去取得該 Checkbutton 的勾選狀態，勾選的話會得到 1，沒勾選的話會得到 0，這是當初在建立 <code>tk.Checkbutton</code> 所設定的 <code>onvalue</code> 與 <code>offvalue</code> 屬性的值，<br><figure class="highlight python"><figcaption><span>python3-checkbutton4.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkbutton_event</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'checkbutton_event: '</span> + str(var1.get()) + <span class="string">' '</span></span><br><span class="line">          + str(var2.get()) + <span class="string">' '</span> + str(var3.get()))</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x150'</span>)</span><br><span class="line"></span><br><span class="line">var1 = tk.IntVar()</span><br><span class="line">var2 = tk.IntVar()</span><br><span class="line">var3 = tk.IntVar()</span><br><span class="line"></span><br><span class="line">mycheckbutton1 = tk.Checkbutton(root, text=<span class="string">'apple'</span>,</span><br><span class="line">                                variable=var1,</span><br><span class="line">                                onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>,</span><br><span class="line">                                command=checkbutton_event)</span><br><span class="line">mycheckbutton1.pack()</span><br><span class="line">mycheckbutton2 = tk.Checkbutton(root, text=<span class="string">'banana'</span>,</span><br><span class="line">                                variable=var2,</span><br><span class="line">                                onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>,</span><br><span class="line">                                command=checkbutton_event)</span><br><span class="line">mycheckbutton2.pack()</span><br><span class="line">mycheckbutton3 = tk.Checkbutton(root, text=<span class="string">'orange'</span>,</span><br><span class="line">                                variable=var3,</span><br><span class="line">                                onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>,</span><br><span class="line">                                command=checkbutton_event)</span><br><span class="line">mycheckbutton3.pack()</span><br><span class="line"></span><br><span class="line">var1.set(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>程式啟動後，取消勾選 apple，之後又勾選了 banana、orange、apple，程式輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">checkbutton_event: 0 0 0</span><br><span class="line">checkbutton_event: 0 1 0</span><br><span class="line">checkbutton_event: 0 1 1</span><br><span class="line">checkbutton_event: 1 1 1</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-tkinter-checkbutton/tkinter-checkbutton-4.png" title="tkinter checkbutton">  </p><p>在事件處理函式裡除了了解如何取得 Checkbutton 有無勾選外，有時也想要取得該 Checkbutton 顯示的文字，如下例所示，在 Checkbutton 綁訂事件函式時使用 lambda 運算式，將原本的 Checkbutton 變數傳遞進去，這樣我們在事件處理函式裡就可以取得該 Checkbutton 的 <code>text</code> 屬性了，<br><figure class="highlight python"><figcaption><span>python3-checkbutton5.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkbutton_event</span><span class="params">(widget)</span>:</span></span><br><span class="line">    print(<span class="string">'checkbutton_event: '</span> + widget[<span class="string">'text'</span>])</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x150'</span>)</span><br><span class="line"></span><br><span class="line">var1 = tk.IntVar()</span><br><span class="line">var2 = tk.IntVar()</span><br><span class="line">var3 = tk.IntVar()</span><br><span class="line"></span><br><span class="line">mycheckbutton1 = tk.Checkbutton(root, text=<span class="string">'apple'</span>,</span><br><span class="line">                                variable=var1,</span><br><span class="line">                                onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>,</span><br><span class="line">                                command=<span class="keyword">lambda</span>: checkbutton_event(mycheckbutton1))</span><br><span class="line">mycheckbutton1.pack()</span><br><span class="line">mycheckbutton2 = tk.Checkbutton(root, text=<span class="string">'banana'</span>,</span><br><span class="line">                                variable=var2,</span><br><span class="line">                                onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>,</span><br><span class="line">                                command=<span class="keyword">lambda</span>: checkbutton_event(mycheckbutton2))</span><br><span class="line">mycheckbutton2.pack()</span><br><span class="line">mycheckbutton3 = tk.Checkbutton(root, text=<span class="string">'orange'</span>,</span><br><span class="line">                                variable=var3,</span><br><span class="line">                                onvalue=<span class="number">1</span>, offvalue=<span class="number">0</span>,</span><br><span class="line">                                command=<span class="keyword">lambda</span>: checkbutton_event(mycheckbutton3))</span><br><span class="line">mycheckbutton3.pack()</span><br><span class="line"></span><br><span class="line">var1.set(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-tkinter-checkbutton/tkinter-checkbutton-5.png" title="tkinter checkbutton">  </p><p>程式輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">checkbutton_event: banana</span><br></pre></td></tr></table></figure></p><p>以上就是 Python tkinter Checkbutton 複選框用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a><br><a href="/python-tkinter-tutorial/" title="Python tkinter 新手入門教學">Python tkinter 新手入門教學</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 將介紹 Python tkinter Checkbutton 複選框用法與範例，Checkbutton 可以作一些多選項的確認功能，例如代辦清單這種應用。  &lt;/p&gt;
&lt;p&gt;以下的 Python tkinter Checkbutton 用法與範例將分為
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
      <category term="tkinter" scheme="https://shengyu7697.github.io/tags/tkinter/"/>
    
  </entry>
  
  <entry>
    <title>Python 求最小值的 3 個方法</title>
    <link href="https://shengyu7697.github.io/python-find-min-value/"/>
    <id>https://shengyu7697.github.io/python-find-min-value/</id>
    <published>2021-12-17T14:00:00.000Z</published>
    <updated>2021-12-28T13:17:31.069Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python 求最小值的 3 個方法，Python 求最小值可使用內建 min 函式，Python min 函式可以求兩數最小值以外，Python min 函式也可以拿來計算 list 多組數字的最小值，最後也會順便介紹 Python numpy 的 argmin 函式來求最小值，  </p><p>以下的 Python 求最小值的 3 個方法將分為這幾種，  </p><ul><li>Python 兩數求最小值的方法  </li><li>Python list 求最小值的方法  </li><li>Python numpy 求最小值的方法  </li></ul><h2><span id="python-兩數求最小值的方法">Python 兩數求最小值的方法</span></h2><p>以下為 Python 兩數中求最小值的方法，要自己寫一個 min 函式也不是不行，只是如果想快速開發的話，使用 Python 內建提供的 <code>min()</code> 函式會方便快速些，<br><figure class="highlight python"><figcaption><span>python3-min-1.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">print(min(<span class="number">2</span>, <span class="number">4</span>))</span><br><span class="line">print(min(<span class="number">9</span>, <span class="number">5</span>))</span><br><span class="line">print(min(<span class="number">14.6</span>, <span class="number">16.1</span>))</span><br></pre></td></tr></table></figure></p><p>Python min 輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">5</span><br><span class="line">14.6</span><br></pre></td></tr></table></figure></p><h2><span id="python-list-求最小值的方法">Python list 求最小值的方法</span></h2><p>這邊介紹 Python list 求最小值的方法，同時耶適用於三數求最小值，或者更多組數字以上求最小值，<br>python 內建提供的 <code>min()</code> 函式可以支援 list 作為輸入，所以這邊很快速地沿用上個範例的經驗，直接將 python 內建 <code>min()</code> 函式拿來用，<br><figure class="highlight python"><figcaption><span>python3-min-2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">mylist = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">-7</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line">print(min(mylist))</span><br></pre></td></tr></table></figure></p><p>Python min 輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-7</span><br></pre></td></tr></table></figure></p><p>或者是自己用 for 迴圈自己寫一個求最小值的函式，<br><figure class="highlight python"><figcaption><span>python3-min-3.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">mylist = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">-7</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">2</span>]</span><br><span class="line">min_val = mylist[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(mylist)):</span><br><span class="line">    <span class="keyword">if</span> mylist[i] &lt; min_val:</span><br><span class="line">        min_val = mylist[i]</span><br><span class="line">print(min_val)</span><br></pre></td></tr></table></figure></p><p>輸出結果同上，  </p><h2><span id="python-numpy-求最小值的方法">Python numpy 求最小值的方法</span></h2><p>這邊介紹 Python numpy 求最小值的方法，numpy 有個 <code>numpy.argmin()</code> 函式可以求最小值的索引值，所以要得到最小值的話就可以藉由最小值的索引值去取得，如下範例程式，<br><figure class="highlight python"><figcaption><span>python3-min-4.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.array([<span class="number">3</span>,<span class="number">1</span>,<span class="number">-7</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">2</span>])</span><br><span class="line">print(arr)</span><br><span class="line"></span><br><span class="line">min_index = np.argmin(arr)</span><br><span class="line">print(min_index)</span><br><span class="line"></span><br><span class="line">min_value = arr[min_index]</span><br><span class="line">print(min_value)</span><br></pre></td></tr></table></figure></p><p>numpy argmin 輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ 3  1 -7  4  0  2]</span><br><span class="line">2</span><br><span class="line">-7</span><br></pre></td></tr></table></figure></p><p>以上就是 Python 求最小值的 3 個方法的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python 求最小值的 3 個方法，Python 求最小值可使用內建 min 函式，Python min 函式可以求兩數最小值以外，Python min 函式也可以拿來計算 list 多組數字的最小值，最後也會順便介紹 Python numpy
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python floor 向下取整用法與範例</title>
    <link href="https://shengyu7697.github.io/python-math-floor/"/>
    <id>https://shengyu7697.github.io/python-math-floor/</id>
    <published>2021-12-16T14:00:00.000Z</published>
    <updated>2021-12-28T13:17:31.069Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python floor 向下取整用法與範例，Python floor 也是無條件捨去的意思，Python 使用 <code>math.floor()</code> 前要 <code>import math</code>。  </p><p>以下的 Python floor 用法與範例將分為這幾部分，  </p><ul><li>Python <code>math.floor()</code> 基本範例    </li><li>Python <code>math.floor()</code> 負數範例  </li></ul><p>那我們開始吧！  </p><h2><span id="python-mathfloor-基本範例">Python <code>math.floor()</code> 基本範例</span></h2><p>這邊介紹 Python <code>math.floor()</code> 無條件捨去或者向下取整的用法，在 <code>math.floor()</code> 傳入任何一個浮點數，都會回傳無條件捨去的結果，例如傳入 3.2 會回傳 3，傳入 31.1 會回傳 31。<br><figure class="highlight python"><figcaption><span>python3-math-floor.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">3.2</span></span><br><span class="line">n2 = <span class="number">3.4</span></span><br><span class="line">n3 = <span class="number">3.6</span></span><br><span class="line">n4 = <span class="number">3.8</span></span><br><span class="line">print(math.floor(n1))</span><br><span class="line">print(math.floor(n2))</span><br><span class="line">print(math.floor(n3))</span><br><span class="line">print(math.floor(n4))</span><br></pre></td></tr></table></figure></p><p>結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">3</span><br></pre></td></tr></table></figure></p><p>那 <code>math.floor()</code> 如果傳入 3.0 會回傳多少呢？答案是 3。  </p><h2><span id="python-mathfloor-負數範例">Python <code>math.floor()</code> 負數範例</span></h2><p>這邊示範 Python <code>math.floor()</code> 負數的範例，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">-31.2</span></span><br><span class="line">n2 = <span class="number">-31.4</span></span><br><span class="line">n3 = <span class="number">-31.6</span></span><br><span class="line">n4 = <span class="number">-31.8</span></span><br><span class="line">print(math.floor(n1))</span><br><span class="line">print(math.floor(n2))</span><br><span class="line">print(math.floor(n3))</span><br><span class="line">print(math.floor(n4))</span><br></pre></td></tr></table></figure></p><p>Python floor 負數結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-32</span><br><span class="line">-32</span><br><span class="line">-32</span><br><span class="line">-32</span><br></pre></td></tr></table></figure></p><p>以上就是 Python math.floor 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python floor 向下取整用法與範例，Python floor 也是無條件捨去的意思，Python 使用 &lt;code&gt;math.floor()&lt;/code&gt; 前要 &lt;code&gt;import math&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;以下
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python tkinter Radiobutton 單選框用法與範例</title>
    <link href="https://shengyu7697.github.io/python-tkinter-radiobutton/"/>
    <id>https://shengyu7697.github.io/python-tkinter-radiobutton/</id>
    <published>2021-12-15T14:00:00.000Z</published>
    <updated>2022-01-06T00:09:45.309Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python tkinter Radiobutton 單選框用法與範例，Radiobutton 可以作一些多選項擇一的選取功能，例如性別選取、葷素食選取等等。  </p><p>以下的 Python tkinter Radiobutton 用法與範例將分為這幾部分，  </p><ul><li>tkinter Radiobutton 基本用法  </li><li>tkinter Radiobutton 多組選取  </li><li>tkinter 設定 Radiobutton 選取選項或取消選取選項  </li><li>tkinter Radiobutton 綁定事件  </li></ul><p>那我們開始吧！  </p><h2><span id="tkinter-radiobutton-基本用法">tkinter Radiobutton 基本用法</span></h2><p>這邊介紹 tkinter 建立 Radiobutton 的基本用法，Radiobutton 基本上也是個按鈕，在建構 Radiobutton 時帶入顯示的文字，多個 Radiobutton 在同一個父類視窗下是互斥的，也就是在同一個父類視窗下的多個 Radiobutton 只能一個選取一個，如果選取另一個 Radiobutton 的話，先前選取的 Radiobutton 則會被取消，Radiobutton 搭配 <code>variable</code> 屬性使用的話則可以實做出多群組 Radiobutton 的互斥選取，稍後會介紹到。  </p><p>以下示範三個 Radiobutton 的建立以及使用 <code>select()</code> 來選取預設選項，<br><figure class="highlight python"><figcaption><span>python3-radiobutton.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x150'</span>)</span><br><span class="line"></span><br><span class="line">myradiobutton1 = tk.Radiobutton(root, text=<span class="string">'apple'</span>, value=<span class="number">1</span>)</span><br><span class="line">myradiobutton1.select()</span><br><span class="line">myradiobutton1.pack()</span><br><span class="line">myradiobutton2 = tk.Radiobutton(root, text=<span class="string">'banana'</span>, value=<span class="number">2</span>)</span><br><span class="line">myradiobutton2.pack()</span><br><span class="line">myradiobutton3 = tk.Radiobutton(root, text=<span class="string">'orange'</span>, value=<span class="number">3</span>)</span><br><span class="line">myradiobutton3.pack()</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>結果圖如下，所以實際操作時可以發現同一群裡的 Radiobutton 單選框是互斥的，只能選擇其中一個 Radiobutton，<br><img src="/python-tkinter-radiobutton/tkinter-radiobutton-1.png" title="tkinter radiobutton">  </p><p>那如果想要實作 Radiobutton 多組選取呢？在下節範例馬上為你介紹。  </p><h2><span id="tkinter-radiobutton-多組選取">tkinter Radiobutton 多組選取</span></h2><p>tkinter 如果想要做出 Radiobutton 多組選取要怎麼實作呢？  </p><p>這時候可以使用 <code>tk.Radiobutton</code> 的 <code>variable</code> 或 <code>var</code> 屬性，這邊示範兩群組 Radiobutton 選取，將二個群組 Radiobutton 的 <code>variable</code> 屬性各設定成二個 <code>tk.StringVar</code>，這邊我們建立二個 <code>tk.StringVar</code> 分別為 var1 跟 var2，把 myradiobutton1 ~ myradiobutton3 設定成 <code>variable=var1</code>，把 myradiobutton4 ~ myradiobutton6 設定成 <code>variable=var2</code>，同時也把 layout 改成 grid，左邊為第一群，右邊為第二群，方便示範說明，<br><figure class="highlight python"><figcaption><span>python3-radiobutton2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x150'</span>)</span><br><span class="line"></span><br><span class="line">var1 = tk.StringVar()</span><br><span class="line">var2 = tk.StringVar()</span><br><span class="line">var1.set(<span class="number">1</span>)</span><br><span class="line">var2.set(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">myradiobutton1 = tk.Radiobutton(root, text=<span class="string">'apple'</span>,</span><br><span class="line">                                var=var1, value=<span class="number">1</span>)</span><br><span class="line">myradiobutton1.grid(column=<span class="number">0</span>, row=<span class="number">0</span>)</span><br><span class="line">myradiobutton2 = tk.Radiobutton(root, text=<span class="string">'banana'</span>,</span><br><span class="line">                                var=var1, value=<span class="number">2</span>)</span><br><span class="line">myradiobutton2.grid(column=<span class="number">0</span>, row=<span class="number">1</span>)</span><br><span class="line">myradiobutton3 = tk.Radiobutton(root, text=<span class="string">'orange'</span>,</span><br><span class="line">                                var=var1, value=<span class="number">3</span>)</span><br><span class="line">myradiobutton3.grid(column=<span class="number">0</span>, row=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">myradiobutton4 = tk.Radiobutton(root, text=<span class="string">'lemon'</span>,</span><br><span class="line">                                var=var2, value=<span class="number">4</span>)</span><br><span class="line">myradiobutton4.grid(column=<span class="number">1</span>, row=<span class="number">0</span>)</span><br><span class="line">myradiobutton5 = tk.Radiobutton(root, text=<span class="string">'strawberry'</span>,</span><br><span class="line">                                var=var2, value=<span class="number">5</span>)</span><br><span class="line">myradiobutton5.grid(column=<span class="number">1</span>, row=<span class="number">1</span>)</span><br><span class="line">myradiobutton6 = tk.Radiobutton(root, text=<span class="string">'tomato'</span>,</span><br><span class="line">                                var=var2, value=<span class="number">6</span>)</span><br><span class="line">myradiobutton6.grid(column=<span class="number">1</span>, row=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>程式啟動後，選取了 apple 與 strawberry，結果圖如下，第一群跟第二群的選取是互相不影響的，<br><img src="/python-tkinter-radiobutton/tkinter-radiobutton-2.png" title="tkinter radiobutton">  </p><p>這樣就學會 tkinter Radiobutton 多組選取了  </p><h2><span id="tkinter-設定-radiobutton-選取選項或取消選取選項">tkinter 設定 Radiobutton 選取選項或取消選取選項</span></h2><p>這邊介紹 tkinter 設定 Radiobutton 選取選項或取消選取選項的方法，也可以用來設定 Radiobutton 預設的選項，建立 Radiobutton 後預設是不勾選的狀態，tkinter 有兩種方式可以改變這個狀態，<br>第一種方法是使用 <code>Radiobutton.select()</code> 函式，<code>Radiobutton.select()</code> 就是選擇當前的 Radiobutton，原本同組的 Radiobutton 的選取會被取消，也可以使用來 <code>Radiobutton.deselect()</code> 取消選擇，範例如下，<br><figure class="highlight python"><figcaption><span>python3-radiobutton3.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x150'</span>)</span><br><span class="line"></span><br><span class="line">myradiobutton1 = tk.Radiobutton(root, text=<span class="string">'apple'</span>, value=<span class="number">1</span>)</span><br><span class="line">myradiobutton1.pack()</span><br><span class="line">myradiobutton2 = tk.Radiobutton(root, text=<span class="string">'banana'</span>, value=<span class="number">2</span>)</span><br><span class="line">myradiobutton2.pack()</span><br><span class="line">myradiobutton3 = tk.Radiobutton(root, text=<span class="string">'orange'</span>, value=<span class="number">3</span>)</span><br><span class="line">myradiobutton3.pack()</span><br><span class="line"></span><br><span class="line">myradiobutton1.deselect()</span><br><span class="line">myradiobutton2.select()</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>上述範例最後會看到被 myradiobutton2 選取，myradiobutton1 則是不會被選取，如下圖所示，<br><img src="/python-tkinter-radiobutton/tkinter-radiobutton-3.png" title="tkinter radiobutton">  </p><p>第二種方法是在建立 <code>tk.Radiobutton</code> 時設定 <code>variable</code> 或 <code>var</code> 屬性，如下例中的 var，使用 <code>StringVar.set()</code> 設定數值，然後 var 變數的數值決定選取哪個選項，範例如下，<br><figure class="highlight python"><figcaption><span>python3-radiobutton4.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x150'</span>)</span><br><span class="line"></span><br><span class="line">var = tk.StringVar()</span><br><span class="line"></span><br><span class="line">myradiobutton1 = tk.Radiobutton(root, text=<span class="string">'apple'</span>,</span><br><span class="line">                                variable=var, value=<span class="number">1</span>)</span><br><span class="line">myradiobutton1.pack()</span><br><span class="line">myradiobutton2 = tk.Radiobutton(root, text=<span class="string">'banana'</span>,</span><br><span class="line">                                variable=var, value=<span class="number">2</span>)</span><br><span class="line">myradiobutton2.pack()</span><br><span class="line">myradiobutton3 = tk.Radiobutton(root, text=<span class="string">'orange'</span>,</span><br><span class="line">                                variable=var, value=<span class="number">3</span>)</span><br><span class="line">myradiobutton3.pack()</span><br><span class="line"></span><br><span class="line">var.set(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>上述範例使用 <code>var.set(3)</code> 就是選取 myradiobutton3，如下圖所示，<br><img src="/python-tkinter-radiobutton/tkinter-radiobutton-4.png" title="tkinter radiobutton">  </p><h2><span id="tkinter-radiobutton-綁定事件">tkinter Radiobutton 綁定事件</span></h2><p>這邊介紹 tkinter Radiobutton 如何綁定事件，這邊我們將第一群 Radiobutton 連結至 <code>radiobutton_event()</code>，第二群 Radiobutton 連結至 <code>radiobutton_event2()</code>，然後一個 Button 的事件連結至 <code>button_event()</code>，當每個群的 Radiobutton 被選取時就會在事件函式裡去紀錄當時選擇的水果名稱，最後按下 Button 時會印出這兩群的選取各是什麼水果，範例如下，<br><figure class="highlight python"><figcaption><span>python3-radiobutton5.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">radiobutton_event</span><span class="params">(widget)</span>:</span></span><br><span class="line">    print(<span class="string">'radiobutton_event: '</span> + var1.get() + <span class="string">' checked'</span>)</span><br><span class="line">    <span class="keyword">global</span> fruit1</span><br><span class="line">    fruit1 = widget[<span class="string">'text'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">radiobutton_event2</span><span class="params">(widget)</span>:</span></span><br><span class="line">    print(<span class="string">'radiobutton_event2: '</span> + var2.get() + <span class="string">' checked'</span>)</span><br><span class="line">    <span class="keyword">global</span> fruit2</span><br><span class="line">    fruit2 = widget[<span class="string">'text'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">button_event</span><span class="params">()</span>:</span></span><br><span class="line">    print(var1.get() + <span class="string">' + '</span> + var2.get())</span><br><span class="line">    print(fruit1 + <span class="string">' + '</span> + fruit2)</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x150'</span>)</span><br><span class="line"></span><br><span class="line">fruit1 = <span class="string">''</span></span><br><span class="line">fruit2 = <span class="string">''</span></span><br><span class="line">var1 = tk.StringVar()</span><br><span class="line">var2 = tk.StringVar()</span><br><span class="line"></span><br><span class="line">myradiobutton1 = tk.Radiobutton(root, text=<span class="string">'apple'</span>,</span><br><span class="line">                                variable=var1, value=<span class="number">1</span>,</span><br><span class="line">                                command=<span class="keyword">lambda</span>: radiobutton_event(myradiobutton1))</span><br><span class="line">myradiobutton1.grid(column=<span class="number">0</span>, row=<span class="number">0</span>)</span><br><span class="line">myradiobutton2 = tk.Radiobutton(root, text=<span class="string">'banana'</span>,</span><br><span class="line">                                variable=var1, value=<span class="number">2</span>,</span><br><span class="line">                                command=<span class="keyword">lambda</span>: radiobutton_event(myradiobutton2))</span><br><span class="line">myradiobutton2.grid(column=<span class="number">0</span>, row=<span class="number">1</span>)</span><br><span class="line">myradiobutton3 = tk.Radiobutton(root, text=<span class="string">'orange'</span>,</span><br><span class="line">                                variable=var1, value=<span class="number">3</span>,</span><br><span class="line">                                command=<span class="keyword">lambda</span>: radiobutton_event(myradiobutton3))</span><br><span class="line">myradiobutton3.grid(column=<span class="number">0</span>, row=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">myradiobutton4 = tk.Radiobutton(root, text=<span class="string">'lemon'</span>,</span><br><span class="line">                                variable=var2, value=<span class="number">4</span>,</span><br><span class="line">                                command=<span class="keyword">lambda</span>: radiobutton_event2(myradiobutton4))</span><br><span class="line">myradiobutton4.grid(column=<span class="number">1</span>, row=<span class="number">0</span>)</span><br><span class="line">myradiobutton5 = tk.Radiobutton(root, text=<span class="string">'strawberry'</span>,</span><br><span class="line">                                variable=var2, value=<span class="number">5</span>,</span><br><span class="line">                                command=<span class="keyword">lambda</span>: radiobutton_event2(myradiobutton5))</span><br><span class="line">myradiobutton5.grid(column=<span class="number">1</span>, row=<span class="number">1</span>)</span><br><span class="line">myradiobutton6 = tk.Radiobutton(root, text=<span class="string">'tomato'</span>,</span><br><span class="line">                                variable=var2, value=<span class="number">6</span>,</span><br><span class="line">                                command=<span class="keyword">lambda</span>: radiobutton_event2(myradiobutton6))</span><br><span class="line">myradiobutton6.grid(column=<span class="number">1</span>, row=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">mybutton = tk.Button(root, text=<span class="string">'button'</span>, command=button_event)</span><br><span class="line">mybutton.grid(column=<span class="number">1</span>, row=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">var1.set(<span class="number">1</span>)</span><br><span class="line">var2.set(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-tkinter-radiobutton/tkinter-radiobutton-5.png" title="tkinter radiobutton">  </p><p>程式輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">radiobutton_event: 2 checked</span><br><span class="line">radiobutton_event2: 6 checked</span><br><span class="line">2 + 6</span><br><span class="line">banana + tomato</span><br></pre></td></tr></table></figure></p><p>在這範例中我們已經學習到在事件函式裡如何取得 Radiobutton 設定的值 (value) 以及取得 Radiobutton 設定的文字 (text)，  </p><p>以上就是 Python tkinter Radiobutton 單選框用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p>其它參考<br>python - Event triggered by Listbox and Radiobutton in Tkinter - Stack Overflow<br><a href="https://stackoverflow.com/questions/26333769/event-triggered-by-listbox-and-radiobutton-in-tkinter" rel="noopener" target="_blank">https://stackoverflow.com/questions/26333769/event-triggered-by-listbox-and-radiobutton-in-tkinter</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a><br><a href="/python-tkinter-tutorial/" title="Python tkinter 新手入門教學">Python tkinter 新手入門教學</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python tkinter Radiobutton 單選框用法與範例，Radiobutton 可以作一些多選項擇一的選取功能，例如性別選取、葷素食選取等等。  &lt;/p&gt;
&lt;p&gt;以下的 Python tkinter Radiobutton 用法與
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
      <category term="tkinter" scheme="https://shengyu7697.github.io/tags/tkinter/"/>
    
  </entry>
  
  <entry>
    <title>C++ std::ceil 無條件進位用法與範例</title>
    <link href="https://shengyu7697.github.io/std-ceil/"/>
    <id>https://shengyu7697.github.io/std-ceil/</id>
    <published>2021-12-14T14:00:00.000Z</published>
    <updated>2021-12-29T13:44:31.889Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C++ 的 std::ceil 用法與範例，C++ <code>std::ceil()</code> 是用來無條件進位或者也可以說向上取整的函式。  </p><p>以下的 C++ std::ceil 用法與範例將分為這幾部分，  </p><ul><li>C++ std::ceil 基本用法  </li><li>C++ std::ceil 負數範例  </li><li>C ceil 用法  </li></ul><p>那我們開始吧！  </p><h2><span id="c-stdceil-基本用法">C++ std::ceil 基本用法</span></h2><p>這邊介紹 C++ std::ceil 無條件進位或者向上取整的用法，使用前要引用 <code>&lt;cmath&gt;</code> 標頭檔，在 <code>std::ceil()</code> 傳入任何一個浮點數，都會回傳無條件進位的結果，例如：<code>std::ceil()</code> 傳入 2.2 會回傳 3，<code>std::ceil()</code> 傳入 4.1 會回傳 5。<br><figure class="highlight cpp"><figcaption><span>std-ceil.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ std-ceil.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">ceil</span>(<span class="number">2.2</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">ceil</span>(<span class="number">2.4</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">ceil</span>(<span class="number">2.6</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">ceil</span>(<span class="number">2.8</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>C++ <code>std::ceil()</code> 結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">3</span><br></pre></td></tr></table></figure></p><p>那 C++ <code>std::ceil()</code> 如果傳入 2.0 會回傳多少呢？答案是 2。  </p><p>如果使用 float 或 double 變數帶入 <code>std::ceil()</code> 的範例如下，<br><figure class="highlight cpp"><figcaption><span>std-ceil2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ std-ceil2.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> f = <span class="number">4.5f</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">ceil</span>(f) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">4.5</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">ceil</span>(d) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>C++ <code>std::ceil()</code> 結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">5</span><br></pre></td></tr></table></figure></p><h2><span id="c-stdceil-負數範例">C++ std::ceil 負數範例</span></h2><p>這邊介紹 C++ std::ceil 負數範例，<br><figure class="highlight cpp"><figcaption><span>std-ceil3.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ std-ceil3.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">ceil</span>(<span class="number">-22.2</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">ceil</span>(<span class="number">-22.4</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">ceil</span>(<span class="number">-22.6</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">ceil</span>(<span class="number">-22.8</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>C++ <code>std::ceil()</code> 負數結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-22</span><br><span class="line">-22</span><br><span class="line">-22</span><br><span class="line">-22</span><br></pre></td></tr></table></figure></p><h2><span id="c-ceil-用法">C ceil 用法</span></h2><p>在 C 語言中也有 ceil 函式可以使用，使用前要引用 <code>&lt;math.h&gt;</code> 標頭檔，使用方法如下，<code>ceil()</code> 可以傳入 double 也可以傳入 float，<br><figure class="highlight cpp"><figcaption><span>cpp-ceil.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-ceil.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>, <span class="built_in">ceil</span>(<span class="number">2.2</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>, <span class="built_in">ceil</span>(<span class="number">2.4</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>, <span class="built_in">ceil</span>(<span class="number">2.6f</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>, <span class="built_in">ceil</span>(<span class="number">2.8f</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ceil 輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3.000000</span><br><span class="line">3.000000</span><br><span class="line">3.000000</span><br><span class="line">3.000000</span><br></pre></td></tr></table></figure></p><p>以上就是 C++ std::ceil 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C++ 的 std::ceil 用法與範例，C++ &lt;code&gt;std::ceil()&lt;/code&gt; 是用來無條件進位或者也可以說向上取整的函式。  &lt;/p&gt;
&lt;p&gt;以下的 C++ std::ceil 用法與範例將分為這幾部分，  &lt;/p&gt;
&lt;u
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Python tkinter Listbox 用法與範例</title>
    <link href="https://shengyu7697.github.io/python-tkinter-listbox/"/>
    <id>https://shengyu7697.github.io/python-tkinter-listbox/</id>
    <published>2021-12-13T14:00:00.000Z</published>
    <updated>2022-01-06T00:09:45.309Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python tkinter Listbox 列表框用法與範例，Listbox 列表框是可以顯示一些選項的 UI Widget，這些選項可以讓使用者單選的方式選取也可以複選的方式選取。  </p><p>以下的 Python tkinter Listbox 用法與範例將分為這幾部分，  </p><ul><li>tkinter Listbox 基本用法  </li><li>tkinter Listbox 新增/插入選項  </li><li>tkinter Listbox 刪除選項  </li><li>tkinter Listbox 單選與複選模式  </li><li>tkinter 取得目前 Listbox 的選項  </li><li>tkinter Listbox 綁定事件  </li></ul><p>那我們開始吧！  </p><h2><span id="tkinter-listbox-基本用法">tkinter Listbox 基本用法</span></h2><p>這邊示範 tkinter Listbox 基本用法，建立一個基本的 Listbox 後，我們就來新增 Listbox 裡的選項，這邊是使用 <code>Listbox.insert()</code> 來插入選項，<code>tk.END</code> 是指向尾端插入，要向頭端插入的話就改成 0，<br><figure class="highlight python"><figcaption><span>python3-listbox.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"> </span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x180'</span>)</span><br><span class="line"></span><br><span class="line">mylistbox = tk.Listbox(root)</span><br><span class="line">mylistbox.insert(tk.END, <span class="string">'apple'</span>)</span><br><span class="line">mylistbox.insert(tk.END, <span class="string">'banana'</span>)</span><br><span class="line">mylistbox.insert(tk.END, <span class="string">'orange'</span>)</span><br><span class="line">mylistbox.insert(tk.END, <span class="string">'lemon'</span>)</span><br><span class="line">mylistbox.insert(tk.END, <span class="string">'tomato'</span>)</span><br><span class="line">mylistbox.pack()</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-tkinter-listbox/tkinter-listbox-1.png" title="tkinter listbox">  </p><h2><span id="tkinter-listbox-新增插入選項">tkinter Listbox 新增/插入選項</span></h2><p>上述範例已經介紹了 tkinter Listbox 基本用法以及插入選項的用法了，插入選項除了上述範例的寫法外，你也可以在 <code>Listbox.insert()</code> 裡一次把要插入的選項都放進去，像這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mylistbox = tk.Listbox(root)</span><br><span class="line">mylistbox.insert(tk.END, <span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'orange'</span>,<span class="string">'lemon'</span>,<span class="string">'tomato'</span>)</span><br><span class="line">mylistbox.pack()</span><br></pre></td></tr></table></figure></p><p>如果要從 list 裡來初始化的話，可以搭配 for 迴圈來 insert 像這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mylistbox = tk.Listbox(root)</span><br><span class="line">mylist = [<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'orange'</span>,<span class="string">'lemon'</span>,<span class="string">'tomato'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mylist:</span><br><span class="line">    mylistbox.insert(tk.END, i)</span><br><span class="line">mylistbox.pack()</span><br></pre></td></tr></table></figure></p><p>要按下按鈕就新增/插入一個選項的話，可以在按鈕事件裡寫 <code>Listbox.insert()</code> 要插入什麼選項，這邊示範按下按鈕就插入一個 1-100 隨機的數字，<br><figure class="highlight python"><figcaption><span>python3-listbox2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">button_event</span><span class="params">()</span>:</span></span><br><span class="line">    mylistbox.insert(tk.END, str(randint(<span class="number">1</span>, <span class="number">100</span>)))</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x180'</span>)</span><br><span class="line"></span><br><span class="line">mylistbox = tk.Listbox(root)</span><br><span class="line">mylistbox.insert(tk.END, <span class="string">'hello world'</span>)</span><br><span class="line">mylistbox.pack()</span><br><span class="line">tk.Button(root, text=<span class="string">'insert'</span>, command=button_event).pack()</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-tkinter-listbox/tkinter-listbox-2.png" title="tkinter listbox">  </p><p>tkinter Listbox 插入元素時預設不會自動滾到底，如果想要 Listbox 插入元素自動滾動到底的話需要搭配 Scrollbar，這部份以後有機會再來作介紹。  </p><h2><span id="tkinter-listbox-刪除選項">tkinter Listbox 刪除選項</span></h2><p>tkinter Listbox 要刪除選項的話是使用 <code>Listbox.delete()</code> 函式，在 <code>Listbox.delete()</code> 函式裡放入要刪除選項的索引值，以下示範按下按鈕時如果 Listbox 裡還有選項就刪除第一個選項，<br><figure class="highlight python"><figcaption><span>python3-listbox3.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">button_event</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> mylistbox.size() &gt; <span class="number">0</span>:</span><br><span class="line">        mylistbox.delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x180'</span>)</span><br><span class="line"></span><br><span class="line">mylistbox = tk.Listbox(root)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'orange'</span>,<span class="string">'lemon'</span>,<span class="string">'tomato'</span>]:</span><br><span class="line">    mylistbox.insert(tk.END, i)</span><br><span class="line">mylistbox.pack()</span><br><span class="line">tk.Button(root, text=<span class="string">'delete'</span>, command=button_event).pack()</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>如果要刪除使用者選取的選項時，可以透過 <code>Listbox.curselection()</code> 函式取得目前 Listbox 的選項再刪除該選項即可，取得目前 Listbox 的選項這部份在後面會介紹到。  </p><h2><span id="tkinter-listbox-單選與複選模式">tkinter Listbox 單選與複選模式</span></h2><p>tkinter Listbox 預設是單選模式，單選模式有兩種，分別為 <code>tk.BROWSE</code> 跟 <code>tk.SINGLE</code>，預設是使用 <code>tk.BROWSE</code>，在 selectmode 裡指定 <code>tk.BROWSE</code> 即可，使用下面兩種寫法是一樣的效果，<code>tk.BROWSE</code> 在滑鼠拖曳時會改變單選的選項，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mylistbox = tk.Listbox(root)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">mylistbox = tk.Listbox(root, selectmode=tk.BROWSE)</span><br></pre></td></tr></table></figure></p><p>tkinter Listbox 另一種單選模式 <code>tk.SINGLE</code> 是滑鼠拖曳時會不會改變單選選項，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mylistbox = tk.Listbox(root, selectmode=tk.SINGLE)</span><br></pre></td></tr></table></figure></p><p>tkinter Listbox 複選的話有兩種，一種是滑鼠單擊選項就會複選，這種為 <code>tk.MULTIPLE</code>，寫法如下，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mylistbox = tk.Listbox(root, selectmode=tk.MULTIPLE)</span><br></pre></td></tr></table></figure></p><p>tkinter Listbox 另一種複選模式是滑鼠單擊選項是單選，滑鼠拖曳選項才會是複選，這種為 <code>tk.EXTENDED</code>，這也是我們比較熟悉的複選模式，寫法如下，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mylistbox = tk.Listbox(root, selectmode=tk.EXTENDED)</span><br></pre></td></tr></table></figure></p><h2><span id="tkinter-取得目前-listbox-的選項">tkinter 取得目前 Listbox 的選項</span></h2><p>tkinter 要取得目前 Listbox 的選項的話，可以用 <code>Listbox.curselection()</code> 函式來取得使用者目前在 Listbox 中選擇的選項索引值 index，而 <code>Listbox.curselection()</code> 回傳的變數型態是 tuple，例如：如果選擇了第一個選項會得到 <code>(0,)</code>，選擇了第二個選項會得到 <code>(1,)</code>，依此類推，如果都沒有選擇的話會得到一個空的 tuple <code>()</code>，以下範例是按下按鈕時印出 Listbox 目前的選項，<br><figure class="highlight python"><figcaption><span>python3-listbox4.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">button_event</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># print(type(mylistbox.curselection()))</span></span><br><span class="line">    print(mylistbox.curselection())</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x180'</span>)</span><br><span class="line"></span><br><span class="line">mylistbox = tk.Listbox(root)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'orange'</span>,<span class="string">'lemon'</span>,<span class="string">'tomato'</span>]:</span><br><span class="line">    mylistbox.insert(tk.END, i)</span><br><span class="line">mylistbox.pack()</span><br><span class="line">tk.Button(root, text=<span class="string">'get current selection'</span>, command=button_event).pack()</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(2,)</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-tkinter-listbox/tkinter-listbox-3.png" title="tkinter listbox">  </p><p>Listbox 如果是複選的話 <code>Listbox.curselection()</code> 會回傳複選的 tuple，例如：如果選擇了第一個選項跟第二個選項會得到 <code>(0, 1)</code>，如果選擇了第一個選項跟第三個選項跟第五個選項會得到 <code>(0, 2, 4)</code>，以此類推，這也就是 <code>Listbox.curselection()</code> 為什麼回傳的變數型態是 tuple 的原因，複選模式在建立 Listbox 時就可以指定 <code>selectmode=tk.EXTENDED</code> 或 <code>selectmode=tk.MULTIPLE</code> 選項，<br><figure class="highlight python"><figcaption><span>python3-listbox5.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">button_event</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># print(type(mylistbox.curselection()))</span></span><br><span class="line">    print(mylistbox.curselection())</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x180'</span>)</span><br><span class="line"></span><br><span class="line">mylistbox = tk.Listbox(root, selectmode=tk.EXTENDED)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'orange'</span>,<span class="string">'lemon'</span>,<span class="string">'tomato'</span>]:</span><br><span class="line">    mylistbox.insert(tk.END, i)</span><br><span class="line">mylistbox.pack()</span><br><span class="line">tk.Button(root, text=<span class="string">'get current selection'</span>, command=button_event).pack()</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(0, 2, 4)</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-tkinter-listbox/tkinter-listbox-4.png" title="tkinter listbox">  </p><p>tkinter Listbox 如果要取得選項的文字的話，可以使用 <code>Listbox.get(index)</code> 帶入索引值，例如：<code>Listbox.get(0)</code> 是取得 Listbox 第一個選項文字，如果 <code>Listbox.get()</code> 不帶入任何索引值的話就會取得所有選項的文字列表 list，以下範例示範按下按鈕取得 Listbox 目前所有複選選項的文字並印出來，<br><figure class="highlight python"><figcaption><span>python3-listbox6.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">button_event</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># print(type(mylistbox.curselection()))</span></span><br><span class="line">    print(mylistbox.curselection())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> mylistbox.curselection():</span><br><span class="line">        print(mylistbox.get(i))</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x180'</span>)</span><br><span class="line"></span><br><span class="line">mylistbox = tk.Listbox(root, selectmode=tk.EXTENDED)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'orange'</span>,<span class="string">'lemon'</span>,<span class="string">'tomato'</span>]:</span><br><span class="line">    mylistbox.insert(tk.END, i)</span><br><span class="line">mylistbox.pack()</span><br><span class="line">tk.Button(root, text=<span class="string">'get current selection'</span>, command=button_event).pack()</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><h2><span id="tkinter-listbox-綁定事件">tkinter Listbox 綁定事件</span></h2><p>如果希望 tkinter Listbox 改變選擇選項時獲得通知的話就需要 Listbox 綁定事件，使用 <code>Listbox.bind()</code> 設定 <code>&lt;&lt;ListboxSelect&gt;&gt;</code> 事件對應的事件處理函式即可，如下範例中的 <code>listbox_event()</code> 函式，當改變 Listbox 選項時就可以在 <code>listbox_event()</code> 函式裡取得事件的 widget 也就是 Listbox，再將該選項的文字設定到 Label 上，完整範例如下，<br><figure class="highlight python"><figcaption><span>python3-listbox7.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listbox_event</span><span class="params">(event)</span>:</span></span><br><span class="line">    object = event.widget</span><br><span class="line">    <span class="comment"># print(type(object.curselection()))</span></span><br><span class="line">    print(object.curselection())</span><br><span class="line">    index = object.curselection()</span><br><span class="line">    mylabel.configure(text=object.get(index))</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x180'</span>)</span><br><span class="line"></span><br><span class="line">mylabel = tk.Label(root)</span><br><span class="line">mylabel.pack()</span><br><span class="line"></span><br><span class="line">mylistbox = tk.Listbox(root)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'orange'</span>,<span class="string">'lemon'</span>,<span class="string">'tomato'</span>]:</span><br><span class="line">    mylistbox.insert(tk.END, i)</span><br><span class="line">mylistbox.bind(<span class="string">"&lt;&lt;ListboxSelect&gt;&gt;"</span>, listbox_event)</span><br><span class="line">mylistbox.pack()</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-tkinter-listbox/tkinter-listbox-5.png" title="tkinter listbox">  </p><p>在 <code>listbox_event()</code> 裡不從 event.widget 裡取得 Listbox 的話，直接改用我們例子中的 mylistbox 來操作也是可以的，如下範例所示，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listbox_event</span><span class="params">(event)</span>:</span></span><br><span class="line">    print(mylistbox.curselection())</span><br><span class="line">    index = mylistbox.curselection()</span><br><span class="line">    mylabel.configure(text=mylistbox.get(index))</span><br></pre></td></tr></table></figure></p><p>以上就是 Python tkinter Listbox 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a><br><a href="/python-tkinter-tutorial/" title="Python tkinter 新手入門教學">Python tkinter 新手入門教學</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python tkinter Listbox 列表框用法與範例，Listbox 列表框是可以顯示一些選項的 UI Widget，這些選項可以讓使用者單選的方式選取也可以複選的方式選取。  &lt;/p&gt;
&lt;p&gt;以下的 Python tkinter Li
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
      <category term="tkinter" scheme="https://shengyu7697.github.io/tags/tkinter/"/>
    
  </entry>
  
  <entry>
    <title>Python base64 編碼用法與範例</title>
    <link href="https://shengyu7697.github.io/python-base64/"/>
    <id>https://shengyu7697.github.io/python-base64/</id>
    <published>2021-12-10T14:00:00.000Z</published>
    <updated>2022-01-06T00:09:34.861Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python base64 編碼用法與範例，  </p><p>以下的 Python base64 用法與範例將分為這幾部分，  </p><ul><li>Python base64 encode 編碼用法  </li><li>Python base64 decode 解碼用法  </li><li>為什麼 python base64 跟 linux base64 的結果輸出不一樣？  </li></ul><p>那我們開始吧！  </p><h2><span id="python-base64-encode-編碼用法">Python base64 encode 編碼用法</span></h2><p>Python base64 編碼要使用 <code>base64.b64encode()</code>，<code>base64.b64encode()</code> 是傳入 bytes object，所以輸入是字串的話會需要先透過 <code>encode(&#39;UTF-8&#39;)</code> 轉成 bytes object，<code>base64.b64encode()</code> 回傳的結果是 bytes object，範例如下，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">s = <span class="string">'Hello World'</span></span><br><span class="line">b = s.encode(<span class="string">'UTF-8'</span>)</span><br><span class="line">bytes_encode = base64.b64encode(b)</span><br><span class="line">print(bytes_encode)</span><br></pre></td></tr></table></figure></p><p>Python base64 編碼後輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b&apos;SGVsbG8gV29ybGQ=&apos;</span><br></pre></td></tr></table></figure></p><p>上述範例你也可以簡化成這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(base64.b64encode(<span class="string">'Hello World'</span>.encode(<span class="string">'UTF-8'</span>)))</span><br></pre></td></tr></table></figure></p><p>如果資料來源已經是 bytes object 不是 str，就可以直接傳入 <code>base64.b64encode()</code> 使用，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(base64.b64encode(<span class="string">b'Hello World'</span>))</span><br></pre></td></tr></table></figure></p><p>編碼後輸出同上。  </p><p>如果要將編碼後的 <code>b&#39;SGVsbG8gV29ybGQ=&#39;</code> byte 轉換成 ASCII 字串的話可以用 <code>decode(&#39;UTF-8&#39;)</code> 像這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(bytes_encode.decode(<span class="string">'UTF-8'</span>))</span><br></pre></td></tr></table></figure></p><p>將 byte 轉換成 ASCII 字串的輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SGVsbG8gV29ybGQ=</span><br></pre></td></tr></table></figure></p><h2><span id="python-base64-decode-解碼用法">Python base64 decode 解碼用法</span></h2><p>Python base64 解碼的話要使用 <code>base64.b64decode()</code>，<code>base64.b64decode()</code> 可以傳入 bytes object 也可以傳入 ASCII string，回傳的結果都是 bytes object，所以會需要透過 <code>decode(&#39;UTF-8&#39;)</code> 轉成字串，這邊我們將上述範例編碼後的輸出當成本範例的輸入，範例如下，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">print(base64.b64decode(<span class="string">b'SGVsbG8gV29ybGQK'</span>).decode(<span class="string">'UTF-8'</span>))</span><br><span class="line">print(base64.b64decode(<span class="string">'SGVsbG8gV29ybGQK'</span>).decode(<span class="string">'UTF-8'</span>))</span><br></pre></td></tr></table></figure></p><p>Python base64 解碼後輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure></p><h2><span id="為什麼-python-base64-跟-linux-base64-的結果輸出不一樣">為什麼 python base64 跟 linux base64 的結果輸出不一樣？</span></h2><p>在 <a href="https://stackoverflow.com/questions/51658184/base-64-gnu-linux-vs-python" rel="noopener" target="_blank">stackoverflow 這篇</a>有在討論為什麼 python base64 指令跟 linux base64 的輸出不一樣，理論上用不同工具做 base64 轉換應該要得到相同結果，結果發現是在用 echo 指令時會加上換行符號 <code>\n</code>，解決方式就是用 <code>echo -n</code> 不要加上換行符號。  </p><p>以上就是 Python base64 編碼用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python base64 編碼用法與範例，  &lt;/p&gt;
&lt;p&gt;以下的 Python base64 用法與範例將分為這幾部分，  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python base64 encode 編碼用法  &lt;/li&gt;
&lt;li&gt;Python 
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python ceil 向上取整用法與範例</title>
    <link href="https://shengyu7697.github.io/python-math-ceil/"/>
    <id>https://shengyu7697.github.io/python-math-ceil/</id>
    <published>2021-12-09T14:00:00.000Z</published>
    <updated>2021-12-29T13:44:31.933Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python ceil 向上取整用法與範例，Python ceil 也是無條件進位的意思，Python 使用 <code>math.ceil()</code> 前要 <code>import math</code>。  </p><p>以下的 Python ceil 用法與範例將分為這幾部分，  </p><ul><li>Python <code>math.ceil()</code> 基本範例  </li><li>Python <code>math.ceil()</code> 負數範例  </li></ul><p>那我們開始吧！  </p><h2><span id="python-mathceil-基本範例">Python <code>math.ceil()</code> 基本範例</span></h2><p>這邊介紹 Python <code>math.ceil()</code> 無條件進位或者向上取整的用法，在 <code>math.ceil()</code> 傳入任何一個浮點數，都會回傳無條件進位的結果，例如傳入 1.2 會回傳 2，傳入 11.1 會回傳 12。<br><figure class="highlight python"><figcaption><span>python3-math-ceil.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">1.2</span></span><br><span class="line">n2 = <span class="number">1.4</span></span><br><span class="line">n3 = <span class="number">1.6</span></span><br><span class="line">n4 = <span class="number">1.8</span></span><br><span class="line">print(math.ceil(n1))</span><br><span class="line">print(math.ceil(n2))</span><br><span class="line">print(math.ceil(n3))</span><br><span class="line">print(math.ceil(n4))</span><br></pre></td></tr></table></figure></p><p>Python ceil 結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">2</span><br></pre></td></tr></table></figure></p><p>那 <code>math.ceil()</code> 如果傳入 1.0 會回傳多少呢？答案是 1。  </p><h2><span id="python-mathceil-負數範例">Python <code>math.ceil()</code> 負數範例</span></h2><p>這邊示範 Python <code>math.ceil()</code> 負數的範例，<br><figure class="highlight python"><figcaption><span>python3-math-ceil2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">-11.2</span></span><br><span class="line">n2 = <span class="number">-11.4</span></span><br><span class="line">n3 = <span class="number">-11.6</span></span><br><span class="line">n4 = <span class="number">-11.8</span></span><br><span class="line">print(math.ceil(n1))</span><br><span class="line">print(math.ceil(n2))</span><br><span class="line">print(math.ceil(n3))</span><br><span class="line">print(math.ceil(n4))</span><br></pre></td></tr></table></figure></p><p>Python ceil 負數結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-11</span><br><span class="line">-11</span><br><span class="line">-11</span><br><span class="line">-11</span><br></pre></td></tr></table></figure></p><p>以上就是 Python math.ceil 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python ceil 向上取整用法與範例，Python ceil 也是無條件進位的意思，Python 使用 &lt;code&gt;math.ceil()&lt;/code&gt; 前要 &lt;code&gt;import math&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;以下的 P
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Windows findstr 用法與範例</title>
    <link href="https://shengyu7697.github.io/windows-findstr/"/>
    <id>https://shengyu7697.github.io/windows-findstr/</id>
    <published>2021-12-08T14:00:00.000Z</published>
    <updated>2021-12-29T13:40:42.852Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Windows findstr 搜尋字串指令，findstr 通常用來搭配其它指令來搜尋字串，例如 findstr 搭配 cat 來搜尋檔案裡的特定字串，findstr 算是 Windows DOS 必學指令，學會這招讓工作更快速輕鬆。  </p><h2><span id="findstr-搜尋特定字串">findstr 搜尋特定字串</span></h2><p>Windows 基本的 findstr 搜尋特定字串用法如下，假設我要在 xxx.txt 檔案裡搜尋 pattern 字串，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.txt | findstr &quot;pattern&quot;</span><br></pre></td></tr></table></figure></p><h2><span id="findstr-搜尋多個字串">findstr 搜尋多個字串</span></h2><p>findstr 要搜尋多個字串的話，可以用空格隔開，例如 findstr 搜尋兩個字串的話就這樣寫，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.txt | findstr &quot;pattern1 pattern2&quot;</span><br></pre></td></tr></table></figure></p><p>findstr 搜尋三個字串的話就這樣寫，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.txt | findstr &quot;pattern1 pattern2 pattern2&quot;</span><br></pre></td></tr></table></figure></p><p>以上就是 Windows findstr 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Windows findstr 搜尋字串指令，findstr 通常用來搭配其它指令來搜尋字串，例如 findstr 搭配 cat 來搜尋檔案裡的特定字串，findstr 算是 Windows DOS 必學指令，學會這招讓工作更快速輕鬆。  &lt;/p
      
    
    </summary>
    
    
      <category term="Windows" scheme="https://shengyu7697.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Python PyQt5 QPainter 用法與範例</title>
    <link href="https://shengyu7697.github.io/python-pyqt-qpainter/"/>
    <id>https://shengyu7697.github.io/python-pyqt-qpainter/</id>
    <published>2021-12-07T14:00:00.000Z</published>
    <updated>2022-01-06T00:09:45.353Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python PyQt5 QPainter 用法與範例。  </p><p>以下的 Python PyQt5 QPainter 用法與範例將分為這幾部分，  </p><ul><li>建立 PyQt5 QPainter  </li><li>PyQt5 QPainter drawText 繪製文字  </li><li>PyQt5 QPainter drawLine 繪製直線  </li><li>PyQt5 QPainter drawRect 繪製矩形  </li><li>PyQt5 QPainter drawEllipse 繪製橢圓  </li><li>PyQt5 QPainter drawArc 繪製圓弧、圓形  </li><li>PyQt5 QPainter drawPolygon 繪製多邊形  </li><li>PyQt5 QPainter drawImage 繪製影像  </li></ul><p>那我們開始吧！  </p><h2><span id="建立-pyqt5-qpainter">建立 PyQt5 QPainter</span></h2><p>PyQt5 簡單建立 QPainter 的用法如下，繪製的操作會在 <code>QWidget.paintEvent()</code> 函式裡完成，並且繪製的函式必須放在 <code>QPainter.begin()</code> 與 <code>QPainter.end()</code> 之間，這些繪圖函式稍後會介紹，<br><figure class="highlight python"><figcaption><span>python-pyqt-qpainter.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        qpainter = QPainter()</span><br><span class="line">        qpainter.begin(self)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># paint ...</span></span><br><span class="line"></span><br><span class="line">        qpainter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qpainter/pyqt-qpainter-1.png" title="pyqt qpainter">  </p><p>如果要改變背景顏色的話可以使用 palette，例如將背景調整成白色或黑色，<br><figure class="highlight python"><figcaption><span>python-pyqt-qpainter2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        self.setAutoFillBackground(<span class="literal">True</span>)</span><br><span class="line">        palette = self.palette()</span><br><span class="line">        palette.setColor(self.backgroundRole(), Qt.white)</span><br><span class="line">        <span class="comment"># palette.setColor(self.backgroundRole(), Qt.black)</span></span><br><span class="line">        self.setPalette(palette)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        qpainter = QPainter()</span><br><span class="line">        qpainter.begin(self)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># paint ...</span></span><br><span class="line"></span><br><span class="line">        qpainter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qpainter/pyqt-qpainter-2.png" title="pyqt qpainter">  </p><h2><span id="pyqt5-qpainter-drawtext-繪製文字">PyQt5 QPainter drawText 繪製文字</span></h2><p>PyQt5 QPainter 繪製文字 drawText 函式，在使用之前先設定一下畫筆與字型，<code>QPainter.setPen()</code> 可以設定畫筆顏色，你可以透過 QColor 來指定 RGB 的顏色，或者使用 PyQt5 內建提供的常用顏色，例如：Qt.black 黑色、Qt.white 白色、Qt.red 紅色、Qt.green 綠色、Qt.blue 藍色等等，<code>QPainter.setFont()</code> 是設定字型，第二個參數為字型大小，  </p><p><code>QPainter.drawText()</code> 繪製文字時是使用傳入的 (x, y) 座標作為文字的左上角座標，而不是文字中心的座標，<code>QPainter.drawText()</code> 繪製文字也可以傳入 QRect 的方式 x, y 分別為文字的左上角座標與 w, h 寬度跟高度，<br><figure class="highlight python"><figcaption><span>python-pyqt-qpainter-drawtext.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter, QColor, QFont</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, QPoint, QRect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        qpainter = QPainter()</span><br><span class="line">        qpainter.begin(self)</span><br><span class="line"></span><br><span class="line">        qpainter.setPen(QColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">        qpainter.setFont(QFont(<span class="string">'Arial'</span>, <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">        qpainter.drawText(QPoint(<span class="number">10</span>, <span class="number">30</span>), <span class="string">'PyQt5'</span>)</span><br><span class="line">        <span class="comment"># qpainter.drawText(10, 30, 'PyQt5')</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># qpainter.drawText(QRect(10, 30, 100, 30), Qt.AlignLeft, 'PyQt5')</span></span><br><span class="line">        <span class="comment"># qpainter.drawText(10, 30, 100, 30, Qt.AlignLeft, 'PyQt5')</span></span><br><span class="line"></span><br><span class="line">        qpainter.drawText(event.rect(), Qt.AlignCenter, <span class="string">'hello world'</span>)</span><br><span class="line"></span><br><span class="line">        qpainter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qpainter/pyqt-qpainter-3.png" title="pyqt qpainter">  </p><h2><span id="pyqt5-qpainter-drawline-繪製直線">PyQt5 QPainter drawLine 繪製直線</span></h2><p>PyQt5 QPainter drawLine 繪製直線時需要傳入兩組座標 (x1, y1) 與 (x2, y2)，繪製直線之前先設定畫筆，建立 <code>QPen()</code> 分別傳入線條顏色，線條寬度，線條樣式，如下例中的 <code>QPen(Qt.black, 2, Qt.SolidLine)</code>，線條樣式有 <code>Qt.SolidLine</code>、<code>Qt.DashLine</code>、<code>Qt.DashDotLine</code>、<code>Qt.DashDotDotLine</code> 可選，另外還有 <code>Qt.CustomDashLine</code> 選項可以客製化，這邊先不介紹，線條樣式也可以透過 <code>QPen.setStyle()</code> 來改變，改變後記得使用 <code>QPen.setPen()</code> 重新設定一下，<br><figure class="highlight python"><figcaption><span>python-pyqt-qpainter-drawline.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter, QPen</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        qpainter = QPainter()</span><br><span class="line">        qpainter.begin(self)</span><br><span class="line"></span><br><span class="line">        qpen = QPen(Qt.black, <span class="number">2</span>, Qt.SolidLine)</span><br><span class="line">        qpainter.setPen(qpen)</span><br><span class="line">        qpainter.drawLine(<span class="number">20</span>, <span class="number">40</span>, <span class="number">180</span>, <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">        qpen.setStyle(Qt.DashLine)</span><br><span class="line">        qpainter.setPen(qpen)</span><br><span class="line">        qpainter.drawLine(<span class="number">20</span>, <span class="number">60</span>, <span class="number">180</span>, <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">        qpen.setStyle(Qt.DashDotLine)</span><br><span class="line">        qpainter.setPen(qpen)</span><br><span class="line">        qpainter.drawLine(<span class="number">20</span>, <span class="number">80</span>, <span class="number">180</span>, <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">        qpen.setStyle(Qt.DashDotDotLine)</span><br><span class="line">        qpainter.setPen(qpen)</span><br><span class="line">        qpainter.drawLine(<span class="number">20</span>, <span class="number">100</span>, <span class="number">180</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">        qpainter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qpainter/pyqt-qpainter-4.png" title="pyqt qpainter">  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="pyqt5-qpainter-drawrect-繪製矩形">PyQt5 QPainter drawRect 繪製矩形</span></h2><p>PyQt5 QPainter drawRect 繪製矩形時是帶入 QRect，x, y 為矩形的左上角座標 w, h 為矩形的寬度與高度，矩形的顏色可以透過 <code>QPainter.setPen()</code> 來更換，<br><figure class="highlight python"><figcaption><span>python-pyqt-qpainter-drawrect.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, QRect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        qpainter = QPainter()</span><br><span class="line">        qpainter.begin(self)</span><br><span class="line"></span><br><span class="line">        qpainter.setPen(Qt.black)</span><br><span class="line">        qpainter.drawRect(QRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">80</span>, <span class="number">80</span>))</span><br><span class="line"></span><br><span class="line">        qpainter.setPen(Qt.green)</span><br><span class="line">        qpainter.drawRect(<span class="number">100</span>, <span class="number">10</span>, <span class="number">80</span>, <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">        qpainter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qpainter/pyqt-qpainter-5.png" title="pyqt qpainter">  </p><h2><span id="pyqt5-qpainter-drawellipse-繪製橢圓">PyQt5 QPainter drawEllipse 繪製橢圓</span></h2><p>PyQt5 QPainter 繪製橢圓時是使用 drawEllipse 函式，也可以用來繪製圓形，傳入 QRect 的 x, y 分別為橢圓外圍/圓形的矩形的左上角座標與 w, h 寬度跟高度，<br><figure class="highlight python"><figcaption><span>python-pyqt-qpainter-drawellipse.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter, QPen</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, QRect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        qpainter = QPainter()</span><br><span class="line">        qpainter.begin(self)</span><br><span class="line"></span><br><span class="line">        qpen = QPen(Qt.black)</span><br><span class="line">        qpainter.setPen(qpen)</span><br><span class="line"></span><br><span class="line">        qpainter.drawEllipse(QRect(<span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">80</span>))</span><br><span class="line">        qpainter.drawEllipse(QRect(<span class="number">60</span>, <span class="number">30</span>, <span class="number">80</span>, <span class="number">40</span>))</span><br><span class="line">        qpainter.drawEllipse(QRect(<span class="number">150</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">40</span>))</span><br><span class="line"></span><br><span class="line">        qpainter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qpainter/pyqt-qpainter-6.png" title="pyqt qpainter">  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="pyqt5-qpainter-drawarc-繪製圓弧-圓形">PyQt5 QPainter drawArc 繪製圓弧、圓形</span></h2><p>PyQt5 QPainter 繪製圓弧是使用 drawArc 函式，傳入 QRect 的 x, y 分別為矩形的左上角座標與 w, h 寬度跟高度，第二個參數為起始的角度，第二個參數為結束的角度，這兩個角度需要乘 16，因爲單位爲 alen，一度等於 16 alen，<br><figure class="highlight python"><figcaption><span>python-pyqt-qpainter-drawarc.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter, QPen</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, QRect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        qpainter = QPainter()</span><br><span class="line">        qpainter.begin(self)</span><br><span class="line"></span><br><span class="line">        qpen = QPen(Qt.black)</span><br><span class="line">        qpainter.setPen(qpen)</span><br><span class="line"></span><br><span class="line">        qpainter.drawArc(QRect(<span class="number">20</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>), <span class="number">0</span>, <span class="number">90</span>*<span class="number">16</span>)</span><br><span class="line">        qpainter.drawArc(QRect(<span class="number">100</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>), <span class="number">0</span>, <span class="number">180</span>*<span class="number">16</span>)</span><br><span class="line">        qpainter.drawArc(QRect(<span class="number">20</span>, <span class="number">80</span>, <span class="number">50</span>, <span class="number">50</span>), <span class="number">90</span>*<span class="number">16</span>, <span class="number">180</span>*<span class="number">16</span>)</span><br><span class="line">        qpainter.drawArc(QRect(<span class="number">100</span>, <span class="number">80</span>, <span class="number">50</span>, <span class="number">50</span>), <span class="number">0</span>, <span class="number">360</span>*<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">        qpainter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qpainter/pyqt-qpainter-7.png" title="pyqt qpainter">  </p><h2><span id="pyqt5-qpainter-drawpolygon-繪製多邊形">PyQt5 QPainter drawPolygon 繪製多邊形</span></h2><p>PyQt5 QPainter 繪製多邊形是使用 drawPolygon 函式，需要傳入一組座標以上 (x1, y1) 與 (x2, y2) … (xn, yn)，可以直接將點群傳入 <code>QPainter.drawPolygon()</code> 函式裡，也可以先建構 <code>QPolygon()</code> 傳入 QPoint list，再把 QPolygon 傳入 <code>QPainter.drawPolygon()</code> 裡，<br><figure class="highlight python"><figcaption><span>python-pyqt-qpainter-drawpolygon.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter, QPen, QPolygon</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, QPoint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        qpainter = QPainter()</span><br><span class="line">        qpainter.begin(self)</span><br><span class="line"></span><br><span class="line">        qpen = QPen(Qt.black)</span><br><span class="line">        qpainter.setPen(qpen)</span><br><span class="line">        p1 = QPoint(<span class="number">40</span>, <span class="number">40</span>)</span><br><span class="line">        p2 = QPoint(<span class="number">60</span>, <span class="number">20</span>)</span><br><span class="line">        p3 = QPoint(<span class="number">80</span>, <span class="number">40</span>)</span><br><span class="line">        p4 = QPoint(<span class="number">80</span>, <span class="number">80</span>)</span><br><span class="line">        p5 = QPoint(<span class="number">40</span>, <span class="number">80</span>)</span><br><span class="line">        qpainter.drawPolygon(p1, p2, p3, p4, p5)</span><br><span class="line"></span><br><span class="line">        qpen = QPen(Qt.red)</span><br><span class="line">        qpainter.setPen(qpen)</span><br><span class="line">        p1 = QPoint(<span class="number">100</span>, <span class="number">40</span>)</span><br><span class="line">        p2 = QPoint(<span class="number">120</span>, <span class="number">20</span>)</span><br><span class="line">        p3 = QPoint(<span class="number">140</span>, <span class="number">40</span>)</span><br><span class="line">        p4 = QPoint(<span class="number">140</span>, <span class="number">80</span>)</span><br><span class="line">        p5 = QPoint(<span class="number">100</span>, <span class="number">80</span>)</span><br><span class="line">        qpolygon = QPolygon([p1, p2, p3, p4, p5])</span><br><span class="line">        qpainter.drawPolygon(qpolygon)</span><br><span class="line"></span><br><span class="line">        qpainter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qpainter/pyqt-qpainter-8.png" title="pyqt qpainter">  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="pyqt5-qpainter-drawimage-繪製影像">PyQt5 QPainter drawImage 繪製影像</span></h2><p>PyQt5 使用 drawImage 來繪製影像，drawImage 第一個參數為 QRect 繪製的區域 x, y 分別為矩形的左上角座標與 w, h 寬度與高度，第二個參數為影像，在這範例中這影像是在 initUI 時就已經先將影像讀取就緒了，在 paintEvent 裡就直接繪製該影像，<br><figure class="highlight python"><figcaption><span>python-pyqt-qpainter-drawimage.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter, QPen, QImage</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, QRect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        self.qimage = QImage(<span class="string">'lena.jpg'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        qpainter = QPainter()</span><br><span class="line">        qpainter.begin(self)</span><br><span class="line"></span><br><span class="line">        qpainter.drawImage(QRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">120</span>, <span class="number">120</span>), self.qimage)</span><br><span class="line"></span><br><span class="line">        qpainter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qpainter/pyqt-qpainter-9.png" title="pyqt qpainter">  </p><p>以上就是 Python PyQt5 QPainter 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a><br><a href="/python-pyqt-tutorial/" title="Python PyQt5 新手入門教學">Python PyQt5 新手入門教學</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python PyQt5 QPainter 用法與範例。  &lt;/p&gt;
&lt;p&gt;以下的 Python PyQt5 QPainter 用法與範例將分為這幾部分，  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立 PyQt5 QPainter  &lt;/li&gt;
&lt;li&gt;P
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
      <category term="PyQt" scheme="https://shengyu7697.github.io/tags/PyQt/"/>
    
  </entry>
  
  <entry>
    <title>Python PyQt5 QThread 用法與範例</title>
    <link href="https://shengyu7697.github.io/python-pyqt-qthread/"/>
    <id>https://shengyu7697.github.io/python-pyqt-qthread/</id>
    <published>2021-12-06T14:00:00.000Z</published>
    <updated>2022-01-06T00:09:45.353Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python PyQt5 QThread 用法與範例，在 GUI 程式中，如果你想要讓程式做一件很耗時的工作，例如：下載檔案、I/O 存取等等，在 UI thread 做這些事的話會讓整個 UI 卡住，出現 UI 無回應的狀態，這時你可以將這些耗時的工作另外開執行緒去做，以避免 UI thread 卡住，在 PyQT 中我們可以使用 QThread 來完成這件事，接下來就介紹如何在 PyQT5 中使用 QThread。  </p><p>以下的 Python PyQt5 QHBoxLayout 用法與範例將分為這幾部分，  </p><ul><li>PyQt5 QThread 的基本用法  </li><li>PyQt5 錯誤使用執行緒讓畫面卡住  </li><li>PyQt5 在 QWidget 裡使用 QThread  </li></ul><p>那我們開始吧！  </p><h2><span id="pyqt5-qthread-的基本用法">PyQt5 QThread 的基本用法</span></h2><p>PyQt5 要使用 QThread 建立一個執行緒的話，需要新增 QThread 的一個子類，然後覆寫 <code>QThread.run()</code> 函式，就像下例子中的 WorkerThread 類別繼承 QThread 並且覆寫了 run 成員函式，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkerThread</span><span class="params">(QThread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># do something</span></span><br></pre></td></tr></table></figure></p><p>接下來就可以使用 <code>QThread.start()</code> 來啟動執行緒，我們先來看一個小例子，在建構完 WorkerThread 還不會去執行 run 函式，直到呼叫 <code>QThread.start()</code> 才會開始去執行 run 函式，另外如果主執行緒要等待這兩個執行緒執行完畢才繼續往下執行的話可以使用 <code>QThread.wait()</code>，<code>QThread.wait()</code> 會等待該執行緒執行完成才會返回，如果該執行緒裡寫了一個無窮迴圈的話，那麼執行 <code>QThread.wait()</code> 就會進入無限等待，等到天荒地老了，<br><figure class="highlight python"><figcaption><span>python-pyqt-qthread.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QThread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkerThread</span><span class="params">(QThread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            print(<span class="string">'WorkerThread::run '</span> + str(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    print(<span class="string">'main'</span>)</span><br><span class="line"></span><br><span class="line">    work1 = WorkerThread()</span><br><span class="line">    work2 = WorkerThread()</span><br><span class="line">    work1.start()</span><br><span class="line">    work2.start()</span><br><span class="line">    work1.wait()</span><br><span class="line">    work2.wait()</span><br><span class="line">    print(<span class="string">'end of main'</span>)</span><br><span class="line">    <span class="comment"># sys.exit(app.exec_())</span></span><br></pre></td></tr></table></figure></p><p>在這個 run 函式裡有個 for 迴圈執行 3 次迴圈，並且每次 sleep 1 秒就輸出一個訊息，以便我們了解執行迴圈到第幾次了，以下為輸出的結果，可以發現主執行緒是等到兩個 WorkerThread 都執行完畢了以後才輸出了 <code>end of main</code> 訊息，證明了使用 <code>QThread.wait()</code> 是有效的，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">main</span><br><span class="line">WorkerThread::run 0</span><br><span class="line">WorkerThread::run 0</span><br><span class="line">WorkerThread::run 1</span><br><span class="line">WorkerThread::run 1</span><br><span class="line">WorkerThread::run 2</span><br><span class="line">WorkerThread::run 2</span><br><span class="line">end of main</span><br></pre></td></tr></table></figure></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>接下來讓我們來修改 WorkerThread 類別，讓輸出的訊息能夠更好地分辨是哪個執行緒，在 WorkerThread 建構時帶入一個名稱，還有 sleep 的秒數，<br><figure class="highlight python"><figcaption><span>python-pyqt-qthread2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QThread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkerThread</span><span class="params">(QThread)</span>:</span></span><br><span class="line">    thread_name = <span class="string">'unknown'</span></span><br><span class="line">    sleep_seconds = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, thread_name, sleep_seconds)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.thread_name = thread_name</span><br><span class="line">        self.sleep_seconds = sleep_seconds</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            time.sleep(self.sleep_seconds)</span><br><span class="line">            print(self.thread_name + <span class="string">' '</span> + str(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    print(<span class="string">'main'</span>)</span><br><span class="line"></span><br><span class="line">    work1 = WorkerThread(<span class="string">'work 1'</span>, <span class="number">2</span>)</span><br><span class="line">    work2 = WorkerThread(<span class="string">'work 2'</span>, <span class="number">1</span>)</span><br><span class="line">    work1.start()</span><br><span class="line">    work2.start()</span><br><span class="line">    work1.wait()</span><br><span class="line">    work2.wait()</span><br><span class="line">    print(<span class="string">'end of main'</span>)</span><br><span class="line">    <span class="comment"># sys.exit(app.exec_())</span></span><br></pre></td></tr></table></figure></p><p>跟上例不同的次這次我們帶入不同的 sleep 秒數，來觀察看看是不是 work1 執行緒跟我們的預期一樣應該要比 work2 晚完成，以下為輸出的結果，果然 work1 因為 sleep 得比較久的關係所以比 work2 執行緒晚完成，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">main</span><br><span class="line">work 2 0</span><br><span class="line">work 2 1</span><br><span class="line">work 1 0</span><br><span class="line">work 2 2</span><br><span class="line">work 1 1</span><br><span class="line">work 1 2</span><br><span class="line">end of main</span><br></pre></td></tr></table></figure></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="pyqt5-錯誤使用執行緒讓畫面卡住">PyQt5 錯誤使用執行緒讓畫面卡住</span></h2><p>新手在 PyQt5 開發過程中容易錯誤地使用執行緒導致讓畫面卡住或者畫面變黑，以一個下載檔案的程式為例，按下按鈕會去作約 10 秒的工作，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QVBoxLayout,</span><br><span class="line">                             QLabel, QPushButton)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.mylabel = QLabel(<span class="string">'press button to start download'</span>, self)</span><br><span class="line">        layout.addWidget(self.mylabel)</span><br><span class="line"></span><br><span class="line">        self.mybutton = QPushButton(<span class="string">'start'</span>, self)</span><br><span class="line">        self.mybutton.clicked.connect(self.onButtonClick)</span><br><span class="line">        layout.addWidget(self.mybutton)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onButtonClick</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.mybutton.setDisabled(<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        self.mylabel.setText(<span class="string">'finish'</span>)</span><br><span class="line">        self.mybutton.setDisabled(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>在執行的過程中按下按鈕後會發現整個 GUI 程式就無法再做其它 UI 操作，之後整個畫面卡住或者畫面變黑，如下圖所示，<br><img src="/python-pyqt-qthread/pyqt-qthread-1.png" title="pyqt qthread"><br>這就是錯誤地使用 UI 執行緒，要如何解決這個問題呢？下一章節馬上給你介紹。  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="pyqt5-在-qwidget-裡使用-qthread">PyQt5 在 QWidget 裡使用 QThread</span></h2><p>在 PyQT 程式中，主執行緒就是我們說的 UI 執行緒，UI 執行緒會處理所有 widget 的事務，所以如果有一耗時的工作要執行的話我們通常不會寫在 UI 執行緒裡，因為那樣會無法讓其它 widget 進行更新，導致畫面卡住或程式無回應的現象，解決的方法是另外建立一個執行緒在處理這些耗時的工作，  </p><p>我們在 WorkerThread 裡新增了兩個 signal，分別為 trigger 與 finished，finished 就是完成後的訊號，而 trigger 就是我們執行過程中會發送的訊號，而要客製化 signal 訊號時使用 pysingal 來定義要發射到目標函式的函式原型，例如下例中的 <code>trigger = pyqtSignal(str)</code>，  </p><p>整個程式就是按下按鈕後，會開啟另一個執行緒，每一秒都會更新一次秒數到 label 上，透過 <code>self.trigger.emit(str(i+1))</code> 來發射訊號並且傳送第幾秒參數，第 5 秒會結束這個執行緒，然後 <code>self.finished.emit()</code> 發射結束訊號，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QVBoxLayout,</span><br><span class="line">                             QLabel, QPushButton)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QThread, pyqtSignal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkerThread</span><span class="params">(QThread)</span>:</span></span><br><span class="line">    trigger = pyqtSignal(str)</span><br><span class="line">    finished = pyqtSignal()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            self.trigger.emit(str(i+<span class="number">1</span>))</span><br><span class="line">            print(<span class="string">'WorkerThread::run '</span> + str(i))</span><br><span class="line">        self.finished.emit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.mylabel = QLabel(<span class="string">'press button to start thread'</span>, self)</span><br><span class="line">        layout.addWidget(self.mylabel)</span><br><span class="line"></span><br><span class="line">        self.mybutton = QPushButton(<span class="string">'start'</span>, self)</span><br><span class="line">        self.mybutton.clicked.connect(self.startThread)</span><br><span class="line">        layout.addWidget(self.mybutton)</span><br><span class="line"></span><br><span class="line">        self.work = WorkerThread()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startThread</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.mybutton.setDisabled(<span class="literal">True</span>)</span><br><span class="line">        self.work.start()</span><br><span class="line">        self.work.trigger.connect(self.updateLabel)</span><br><span class="line">        self.work.finished.connect(self.threadFinished)</span><br><span class="line">        self.updateLabel(str(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threadFinished</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.mybutton.setDisabled(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">updateLabel</span><span class="params">(self, text)</span>:</span></span><br><span class="line">        self.mylabel.setText(text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qthread/pyqt-qthread-2.png" title="pyqt qthread">  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>如果不想要 threadFinished 函式裡僅僅地只是一行程式碼的話，想去除 threadFinished 函式的話可以改成 lambda 的寫法，如下範例所示，將 <code>self.mybutton.setDisabled(False)</code> 操作寫在 <code>self.work.finished.connect()</code> 裡的 lambda 運算式裡，更多詳細的 Python lambda 用法可以參考<a href="/python-lambda/" title="這篇">這篇</a>，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">startThread</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.mybutton.setDisabled(<span class="literal">True</span>)</span><br><span class="line">    self.work.start()</span><br><span class="line">    self.work.trigger.connect(self.updateLabel)</span><br><span class="line">    <span class="comment"># self.work.finished.connect(self.threadFinished)</span></span><br><span class="line">    self.work.finished.connect(<span class="keyword">lambda</span>: self.mybutton.setDisabled(<span class="literal">False</span>))</span><br><span class="line">    self.updateLabel(str(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># def threadFinished(self):</span></span><br><span class="line"><span class="comment">#    self.mybutton.setDisabled(False)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateLabel</span><span class="params">(self, text)</span>:</span></span><br><span class="line">    self.mylabel.setText(text)</span><br></pre></td></tr></table></figure></p><p>以上就是 Python PyQt5 QThread 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a><br><a href="/python-pyqt-tutorial/" title="Python PyQt5 新手入門教學">Python PyQt5 新手入門教學</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python PyQt5 QThread 用法與範例，在 GUI 程式中，如果你想要讓程式做一件很耗時的工作，例如：下載檔案、I/O 存取等等，在 UI thread 做這些事的話會讓整個 UI 卡住，出現 UI 無回應的狀態，這時你可以將這些耗
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
      <category term="PyQt" scheme="https://shengyu7697.github.io/tags/PyQt/"/>
    
  </entry>
  
</feed>

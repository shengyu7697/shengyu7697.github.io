<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShengYu Talk</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shengyu7697.github.io/"/>
  <updated>2021-12-23T13:24:46.888Z</updated>
  <id>https://shengyu7697.github.io/</id>
  
  <author>
    <name>ShengYu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++ std::ceil 無條件進位用法與範例</title>
    <link href="https://shengyu7697.github.io/std-ceil/"/>
    <id>https://shengyu7697.github.io/std-ceil/</id>
    <published>2021-12-14T14:00:00.000Z</published>
    <updated>2021-12-23T13:24:46.888Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C++ 的 std::ceil 用法與範例，C++ <code>std::ceil()</code> 是用來無條件進位或者也可以說向上取整的函式。  </p><p>以下的 C++ std::ceil 用法與範例將分為這幾部分，  </p><ul><li>C++ std::ceil 基本用法  </li><li>C++ std::ceil 負數範例  </li></ul><p>那我們開始吧！  </p><h2><span id="c-stdceil-基本用法">C++ std::ceil 基本用法</span></h2><p>這邊介紹 C++ std::ceil 無條件進位或者向上取整的用法，在 <code>std::ceil()</code> 傳入任何一個浮點數，都會回傳無條件進位的結果，例如：<code>std::ceil()</code> 傳入 2.2 會回傳 3，<code>std::ceil()</code> 傳入 8.1 會回傳 9。<br><figure class="highlight cpp"><figcaption><span>std-ceil.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ std-ceil.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">ceil</span>(<span class="number">2.2</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">ceil</span>(<span class="number">2.4</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">ceil</span>(<span class="number">2.6</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">ceil</span>(<span class="number">2.8</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>C++ <code>std::ceil()</code> 結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">3</span><br></pre></td></tr></table></figure></p><p>那 C++ <code>std::ceil()</code> 如果傳入 2.0 會回傳多少呢？答案是 2。  </p><p>如果使用 float 或 double 變數帶入 <code>std::ceil()</code> 的範例如下，<br><figure class="highlight cpp"><figcaption><span>std-ceil2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ std-ceil2.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> f = <span class="number">4.5f</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">ceil</span>(f) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> d = <span class="number">4.5</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">ceil</span>(d) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>C++ <code>std::ceil()</code> 結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">5</span><br></pre></td></tr></table></figure></p><h2><span id="c-stdceil-負數範例">C++ std::ceil 負數範例</span></h2><p>這邊介紹 C++ std::ceil 負數範例，<br><figure class="highlight cpp"><figcaption><span>std-ceil3.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ std-ceil3.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">ceil</span>(<span class="number">-22.2</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">ceil</span>(<span class="number">-22.4</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">ceil</span>(<span class="number">-22.6</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">ceil</span>(<span class="number">-22.8</span>) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>C++ <code>std::ceil()</code> 負數結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-22</span><br><span class="line">-22</span><br><span class="line">-22</span><br><span class="line">-22</span><br></pre></td></tr></table></figure></p><p>以上就是 C++ std::ceil 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C++ 的 std::ceil 用法與範例，C++ &lt;code&gt;std::ceil()&lt;/code&gt; 是用來無條件進位或者也可以說向上取整的函式。  &lt;/p&gt;
&lt;p&gt;以下的 C++ std::ceil 用法與範例將分為這幾部分，  &lt;/p&gt;
&lt;u
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Python tkinter Listbox 用法與範例</title>
    <link href="https://shengyu7697.github.io/python-tkinter-listbox/"/>
    <id>https://shengyu7697.github.io/python-tkinter-listbox/</id>
    <published>2021-12-13T14:00:00.000Z</published>
    <updated>2021-12-23T13:24:46.888Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python tkinter Listbox 列表框用法與範例，Listbox 列表框是可以顯示一些選項的 UI Widget，這些選項可以讓使用者單選的方式選取也可以複選的方式選取。  </p><p>以下的 Python tkinter Listbox 用法與範例將分為這幾部分，  </p><ul><li>tkinter Listbox 基本用法  </li><li>tkinter Listbox 新增/插入選項  </li><li>tkinter Listbox 刪除選項  </li><li>tkinter Listbox 單選與複選模式  </li><li>tkinter 取得目前 Listbox 的選項  </li><li>tkinter Listbox 綁定事件  </li></ul><p>那我們開始吧！  </p><h2><span id="tkinter-listbox-基本用法">tkinter Listbox 基本用法</span></h2><p>這邊示範 tkinter Listbox 基本用法，建立一個基本的 Listbox 後，我們就來新增 Listbox 裡的選項，這邊是使用 <code>Listbox.insert()</code> 來插入選項，<code>tk.END</code> 是指向尾端插入，要向頭端插入的話就改成 0，<br><figure class="highlight python"><figcaption><span>python3-listbox.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"> </span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x180'</span>)</span><br><span class="line"></span><br><span class="line">mylistbox = tk.Listbox(root)</span><br><span class="line">mylistbox.insert(tk.END, <span class="string">'apple'</span>)</span><br><span class="line">mylistbox.insert(tk.END, <span class="string">'banana'</span>)</span><br><span class="line">mylistbox.insert(tk.END, <span class="string">'orange'</span>)</span><br><span class="line">mylistbox.insert(tk.END, <span class="string">'lemon'</span>)</span><br><span class="line">mylistbox.insert(tk.END, <span class="string">'tomato'</span>)</span><br><span class="line">mylistbox.pack()</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-tkinter-listbox/tkinter-listbox-1.png" title="tkinter listbox">  </p><h2><span id="tkinter-listbox-新增插入選項">tkinter Listbox 新增/插入選項</span></h2><p>上述範例已經介紹了 tkinter Listbox 基本用法以及插入選項的用法了，插入選項除了上述範例的寫法外，你也可以在 <code>Listbox.insert()</code> 裡一次把要插入的選項都放進去，像這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mylistbox = tk.Listbox(root)</span><br><span class="line">mylistbox.insert(tk.END, <span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'orange'</span>,<span class="string">'lemon'</span>,<span class="string">'tomato'</span>)</span><br><span class="line">mylistbox.pack()</span><br></pre></td></tr></table></figure></p><p>如果要從 list 裡來初始化的話，可以搭配 for 迴圈來 insert 像這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mylistbox = tk.Listbox(root)</span><br><span class="line">mylist = [<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'orange'</span>,<span class="string">'lemon'</span>,<span class="string">'tomato'</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> mylist:</span><br><span class="line">    mylistbox.insert(tk.END, i)</span><br><span class="line">mylistbox.pack()</span><br></pre></td></tr></table></figure></p><p>要按下按鈕就新增/插入一個選項的話，可以在按鈕事件裡寫 <code>Listbox.insert()</code> 要插入什麼選項，這邊示範按下按鈕就插入一個 1-100 隨機的數字，<br><figure class="highlight python"><figcaption><span>python3-listbox2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">button_event</span><span class="params">()</span>:</span></span><br><span class="line">    mylistbox.insert(tk.END, str(randint(<span class="number">1</span>, <span class="number">100</span>)))</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x180'</span>)</span><br><span class="line"></span><br><span class="line">mylistbox = tk.Listbox(root)</span><br><span class="line">mylistbox.insert(tk.END, <span class="string">'hello world'</span>)</span><br><span class="line">mylistbox.pack()</span><br><span class="line">tk.Button(root, text=<span class="string">'insert'</span>, command=button_event).pack()</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-tkinter-listbox/tkinter-listbox-2.png" title="tkinter listbox">  </p><p>tkinter Listbox 插入元素時預設不會自動滾到底，如果想要 Listbox 插入元素自動滾動到底的話需要搭配 Scrollbar，這部份以後有機會再來作介紹。  </p><h2><span id="tkinter-listbox-刪除選項">tkinter Listbox 刪除選項</span></h2><p>tkinter Listbox 要刪除選項的話是使用 <code>Listbox.delete()</code> 函式，在 <code>Listbox.delete()</code> 函式裡放入要刪除選項的索引值，以下示範按下按鈕時如果 Listbox 裡還有選項就刪除第一個選項，<br><figure class="highlight python"><figcaption><span>python3-listbox3.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">button_event</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">if</span> mylistbox.size() &gt; <span class="number">0</span>:</span><br><span class="line">        mylistbox.delete(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x180'</span>)</span><br><span class="line"></span><br><span class="line">mylistbox = tk.Listbox(root)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'orange'</span>,<span class="string">'lemon'</span>,<span class="string">'tomato'</span>]:</span><br><span class="line">    mylistbox.insert(tk.END, i)</span><br><span class="line">mylistbox.pack()</span><br><span class="line">tk.Button(root, text=<span class="string">'delete'</span>, command=button_event).pack()</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>如果要刪除使用者選取的選項時，可以透過 <code>Listbox.curselection()</code> 函式取得目前 Listbox 的選項再刪除該選項即可，取得目前 Listbox 的選項這部份在後面會介紹到。  </p><h2><span id="tkinter-listbox-單選與複選模式">tkinter Listbox 單選與複選模式</span></h2><p>tkinter Listbox 預設是單選模式，單選模式有兩種，分別為 <code>tk.BROWSE</code> 跟 <code>tk.SINGLE</code>，預設是使用 <code>tk.BROWSE</code>，在 selectmode 裡指定 <code>tk.BROWSE</code> 即可，使用下面兩種寫法是一樣的效果，<code>tk.BROWSE</code> 在滑鼠拖曳時會改變單選的選項，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mylistbox = tk.Listbox(root)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">mylistbox = tk.Listbox(root, selectmode=tk.BROWSE)</span><br></pre></td></tr></table></figure></p><p>tkinter Listbox 另一種單選模式 <code>tk.SINGLE</code> 是滑鼠拖曳時會不會改變單選選項，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mylistbox = tk.Listbox(root, selectmode=tk.SINGLE)</span><br></pre></td></tr></table></figure></p><p>tkinter Listbox 複選的話有兩種，一種是滑鼠單擊選項就會複選，這種為 <code>tk.MULTIPLE</code>，寫法如下，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mylistbox = tk.Listbox(root, selectmode=tk.MULTIPLE)</span><br></pre></td></tr></table></figure></p><p>tkinter Listbox 另一種複選模式是滑鼠單擊選項是單選，滑鼠拖曳選項才會是複選，這種為 <code>tk.EXTENDED</code>，這也是我們比較熟悉的複選模式，寫法如下，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mylistbox = tk.Listbox(root, selectmode=tk.EXTENDED)</span><br></pre></td></tr></table></figure></p><h2><span id="tkinter-取得目前-listbox-的選項">tkinter 取得目前 Listbox 的選項</span></h2><p>tkinter 要取得目前 Listbox 的選項的話，可以用 <code>Listbox.curselection()</code> 函式來取得使用者目前在 Listbox 中選擇的選項索引值 index，而 <code>Listbox.curselection()</code> 回傳的變數型態是 tuple，例如：如果選擇了第一個選項會得到 <code>(0,)</code>，選擇了第二個選項會得到 <code>(1,)</code>，依此類推，如果都沒有選擇的話會得到一個空的 tuple <code>()</code>，以下範例是按下按鈕時印出 Listbox 目前的選項，<br><figure class="highlight python"><figcaption><span>python3-listbox4.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">button_event</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># print(type(mylistbox.curselection()))</span></span><br><span class="line">    print(mylistbox.curselection())</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x180'</span>)</span><br><span class="line"></span><br><span class="line">mylistbox = tk.Listbox(root)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'orange'</span>,<span class="string">'lemon'</span>,<span class="string">'tomato'</span>]:</span><br><span class="line">    mylistbox.insert(tk.END, i)</span><br><span class="line">mylistbox.pack()</span><br><span class="line">tk.Button(root, text=<span class="string">'get current selection'</span>, command=button_event).pack()</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(2,)</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-tkinter-listbox/tkinter-listbox-3.png" title="tkinter listbox">  </p><p>Listbox 如果是複選的話 <code>Listbox.curselection()</code> 會回傳複選的 tuple，例如：如果選擇了第一個選項跟第二個選項會得到 <code>(0, 1)</code>，如果選擇了第一個選項跟第三個選項跟第五個選項會得到 <code>(0, 2, 4)</code>，以此類推，這也就是 <code>Listbox.curselection()</code> 為什麼回傳的變數型態是 tuple 的原因，複選模式在建立 Listbox 時就可以指定 <code>selectmode=tk.EXTENDED</code> 或 <code>selectmode=tk.MULTIPLE</code> 選項，<br><figure class="highlight python"><figcaption><span>python3-listbox5.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">button_event</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># print(type(mylistbox.curselection()))</span></span><br><span class="line">    print(mylistbox.curselection())</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x180'</span>)</span><br><span class="line"></span><br><span class="line">mylistbox = tk.Listbox(root, selectmode=tk.EXTENDED)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'orange'</span>,<span class="string">'lemon'</span>,<span class="string">'tomato'</span>]:</span><br><span class="line">    mylistbox.insert(tk.END, i)</span><br><span class="line">mylistbox.pack()</span><br><span class="line">tk.Button(root, text=<span class="string">'get current selection'</span>, command=button_event).pack()</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(0, 2, 4)</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-tkinter-listbox/tkinter-listbox-4.png" title="tkinter listbox">  </p><p>tkinter Listbox 如果要取得選項的文字的話，可以使用 <code>Listbox.get(index)</code> 帶入索引值，例如：<code>Listbox.get(0)</code> 是取得 Listbox 第一個選項文字，如果 <code>Listbox.get()</code> 不帶入任何索引值的話就會取得所有選項的文字列表 list，以下範例示範按下按鈕取得 Listbox 目前所有複選選項的文字並印出來，<br><figure class="highlight python"><figcaption><span>python3-listbox6.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">button_event</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># print(type(mylistbox.curselection()))</span></span><br><span class="line">    print(mylistbox.curselection())</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> mylistbox.curselection():</span><br><span class="line">        print(mylistbox.get(i))</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x180'</span>)</span><br><span class="line"></span><br><span class="line">mylistbox = tk.Listbox(root, selectmode=tk.EXTENDED)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'orange'</span>,<span class="string">'lemon'</span>,<span class="string">'tomato'</span>]:</span><br><span class="line">    mylistbox.insert(tk.END, i)</span><br><span class="line">mylistbox.pack()</span><br><span class="line">tk.Button(root, text=<span class="string">'get current selection'</span>, command=button_event).pack()</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><h2><span id="tkinter-listbox-綁定事件">tkinter Listbox 綁定事件</span></h2><p>如果希望 tkinter Listbox 改變選擇選項時獲得通知的話就需要 Listbox 綁定事件，使用 <code>Listbox.bind()</code> 設定 <code>&lt;&lt;ListboxSelect&gt;&gt;</code> 事件對應的事件處理函式即可，如下範例中的 <code>listbox_event()</code> 函式，當改變 Listbox 選項時就可以在 <code>listbox_event()</code> 函式裡取得事件的 widget 也就是 Listbox，再將該選項的文字設定到 Label 上，完整範例如下，<br><figure class="highlight python"><figcaption><span>python3-listbox7.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listbox_event</span><span class="params">(event)</span>:</span></span><br><span class="line">    object = event.widget</span><br><span class="line">    <span class="comment"># print(type(object.curselection()))</span></span><br><span class="line">    print(object.curselection())</span><br><span class="line">    index = object.curselection()</span><br><span class="line">    mylabel.configure(text=object.get(index))</span><br><span class="line"></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.title(<span class="string">'my window'</span>)</span><br><span class="line">root.geometry(<span class="string">'200x180'</span>)</span><br><span class="line"></span><br><span class="line">mylabel = tk.Label(root)</span><br><span class="line">mylabel.pack()</span><br><span class="line"></span><br><span class="line">mylistbox = tk.Listbox(root)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'orange'</span>,<span class="string">'lemon'</span>,<span class="string">'tomato'</span>]:</span><br><span class="line">    mylistbox.insert(tk.END, i)</span><br><span class="line">mylistbox.bind(<span class="string">"&lt;&lt;ListboxSelect&gt;&gt;"</span>, listbox_event)</span><br><span class="line">mylistbox.pack()</span><br><span class="line"></span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-tkinter-listbox/tkinter-listbox-5.png" title="tkinter listbox">  </p><p>在 <code>listbox_event()</code> 裡不從 event.widget 裡取得 Listbox 的話，直接改用我們例子中的 mylistbox 來操作也是可以的，如下範例所示，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listbox_event</span><span class="params">(event)</span>:</span></span><br><span class="line">    print(mylistbox.curselection())</span><br><span class="line">    index = mylistbox.curselection()</span><br><span class="line">    mylabel.configure(text=mylistbox.get(index))</span><br></pre></td></tr></table></figure></p><p>以上就是 Python tkinter Listbox 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python tkinter Listbox 列表框用法與範例，Listbox 列表框是可以顯示一些選項的 UI Widget，這些選項可以讓使用者單選的方式選取也可以複選的方式選取。  &lt;/p&gt;
&lt;p&gt;以下的 Python tkinter Li
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
      <category term="tkinter" scheme="https://shengyu7697.github.io/tags/tkinter/"/>
    
  </entry>
  
  <entry>
    <title>Python base64 編碼用法與範例</title>
    <link href="https://shengyu7697.github.io/python-base64/"/>
    <id>https://shengyu7697.github.io/python-base64/</id>
    <published>2021-12-10T14:00:00.000Z</published>
    <updated>2021-12-23T13:24:46.888Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python base64 編碼用法與範例，  </p><p>以下的 Python base64 用法與範例將分為這幾部分，  </p><ul><li>Python base64 編碼用法  </li><li>Python base64 解碼用法  </li><li>為什麼 python base64 跟 linux base64 的結果輸出不一樣？  </li></ul><p>那我們開始吧！  </p><h2><span id="python-base64-編碼用法">Python base64 編碼用法</span></h2><p>Python base64 編碼要使用 <code>base64.b64encode()</code>，<code>base64.b64encode()</code> 是傳入 bytes object，所以輸入是字串的話會需要先透過 <code>encode(&#39;UTF-8&#39;)</code> 轉成 bytes object，<code>base64.b64encode()</code> 回傳的結果是 bytes object，範例如下，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">s = <span class="string">'Hello World'</span></span><br><span class="line">b = s.encode(<span class="string">'UTF-8'</span>)</span><br><span class="line">bytes_encode = base64.b64encode(b)</span><br><span class="line">print(bytes_encode)</span><br></pre></td></tr></table></figure></p><p>Python base64 編碼後輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">b&apos;SGVsbG8gV29ybGQ=&apos;</span><br></pre></td></tr></table></figure></p><p>上述範例你也可以簡化成這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(base64.b64encode(<span class="string">'Hello World'</span>.encode(<span class="string">'UTF-8'</span>)))</span><br></pre></td></tr></table></figure></p><p>如果資料來源已經是 bytes object 不是 str，就可以直接傳入 <code>base64.b64encode()</code> 使用，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(base64.b64encode(<span class="string">b'Hello World'</span>))</span><br></pre></td></tr></table></figure></p><p>編碼後輸出同上。  </p><p>如果要將編碼後的 <code>b&#39;SGVsbG8gV29ybGQ=&#39;</code> byte 轉換成 ASCII 字串的話可以用 <code>decode(&#39;UTF-8&#39;)</code> 像這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(bytes_encode.decode(<span class="string">'UTF-8'</span>))</span><br></pre></td></tr></table></figure></p><p>將 byte 轉換成 ASCII 字串的輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SGVsbG8gV29ybGQ=</span><br></pre></td></tr></table></figure></p><h2><span id="python-base64-解碼用法">Python base64 解碼用法</span></h2><p>Python base64 解碼的話要使用 <code>base64.b64decode()</code>，<code>base64.b64decode()</code> 可以傳入 bytes object 也可以傳入 ASCII string，回傳的結果都是 bytes object，所以會需要透過 <code>decode(&#39;UTF-8&#39;)</code> 轉成字串，這邊我們將上述範例編碼後的輸出當成本範例的輸入，範例如下，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">print(base64.b64decode(<span class="string">b'SGVsbG8gV29ybGQK'</span>).decode(<span class="string">'UTF-8'</span>))</span><br><span class="line">print(base64.b64decode(<span class="string">'SGVsbG8gV29ybGQK'</span>).decode(<span class="string">'UTF-8'</span>))</span><br></pre></td></tr></table></figure></p><p>Python base64 解碼後輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello World</span><br></pre></td></tr></table></figure></p><h2><span id="為什麼-python-base64-跟-linux-base64-的結果輸出不一樣">為什麼 python base64 跟 linux base64 的結果輸出不一樣？</span></h2><p>在 <a href="https://stackoverflow.com/questions/51658184/base-64-gnu-linux-vs-python" rel="noopener" target="_blank">stackoverflow 這篇</a>有在討論為什麼 python base64 指令跟 linux base64 的輸出不一樣，理論上用不同工具做 base64 轉換應該要得到相同結果，結果發現是在用 echo 指令時會加上換行符號 <code>\n</code>，解決方式就是用 <code>echo -n</code> 不要加上換行符號。  </p><p>以上就是 Python base64 編碼用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python base64 編碼用法與範例，  &lt;/p&gt;
&lt;p&gt;以下的 Python base64 用法與範例將分為這幾部分，  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python base64 編碼用法  &lt;/li&gt;
&lt;li&gt;Python base64 
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python ceil 向上取整用法與範例</title>
    <link href="https://shengyu7697.github.io/python-math-ceil/"/>
    <id>https://shengyu7697.github.io/python-math-ceil/</id>
    <published>2021-12-09T14:00:00.000Z</published>
    <updated>2021-12-23T13:24:46.888Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python ceil 向上取整用法與範例，Python ceil 也是無條件進位的意思，Python 使用 <code>math.ceil()</code> 前要 <code>import math</code>。  </p><p>以下的 Python ceil 用法與範例將分為這幾部分，  </p><ul><li>Python <code>math.ceil()</code> 基本範例  </li><li>Python <code>math.ceil()</code> 負數範例</li></ul><p>那我們開始吧！  </p><h2><span id="python-mathceil-基本範例">Python <code>math.ceil()</code> 基本範例</span></h2><p>這邊介紹 Python <code>math.ceil()</code> 無條件進位或者向上取整的用法，在 <code>math.ceil()</code> 傳入任何一個浮點數，都會回傳無條件進位的結果，例如傳入 1.2 會回傳 2，傳入 9.1 會回傳 10。<br><figure class="highlight python"><figcaption><span>python3-math-ceil.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">1.2</span></span><br><span class="line">n2 = <span class="number">1.4</span></span><br><span class="line">n3 = <span class="number">1.6</span></span><br><span class="line">n4 = <span class="number">1.8</span></span><br><span class="line">print(math.ceil(n1))</span><br><span class="line">print(math.ceil(n2))</span><br><span class="line">print(math.ceil(n3))</span><br><span class="line">print(math.ceil(n4))</span><br></pre></td></tr></table></figure></p><p>Python ceil 結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">2</span><br></pre></td></tr></table></figure></p><p>那 <code>math.ceil()</code> 如果傳入 1.0 會回傳多少呢？答案是 1。  </p><h2><span id="python-mathceil-負數範例">Python <code>math.ceil()</code> 負數範例</span></h2><p>這邊示範 Python <code>math.ceil()</code> 負數的範例，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">n1 = <span class="number">-11.2</span></span><br><span class="line">n2 = <span class="number">-11.4</span></span><br><span class="line">n3 = <span class="number">-11.6</span></span><br><span class="line">n4 = <span class="number">-11.8</span></span><br><span class="line">print(math.ceil(n1))</span><br><span class="line">print(math.ceil(n2))</span><br><span class="line">print(math.ceil(n3))</span><br><span class="line">print(math.ceil(n4))</span><br></pre></td></tr></table></figure></p><p>Python ceil 負數結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-11</span><br><span class="line">-11</span><br><span class="line">-11</span><br><span class="line">-11</span><br></pre></td></tr></table></figure></p><p>以上就是 Python math.ceil 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python ceil 向上取整用法與範例，Python ceil 也是無條件進位的意思，Python 使用 &lt;code&gt;math.ceil()&lt;/code&gt; 前要 &lt;code&gt;import math&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;以下的 P
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>findstr 用法與範例</title>
    <link href="https://shengyu7697.github.io/windows-findstr/"/>
    <id>https://shengyu7697.github.io/windows-findstr/</id>
    <published>2021-12-08T14:00:00.000Z</published>
    <updated>2021-12-19T23:47:55.691Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Windows findstr 搜尋字串指令，findstr 通常用來搭配其它指令來搜尋字串，例如 findstr 搭配 cat 來搜尋檔案裡的特定字串，findstr 算是 Windows DOS 必學指令，學會這招讓工作更快速輕鬆。  </p><h2><span id="findstr-搜尋特定字串">findstr 搜尋特定字串</span></h2><p>Windows 基本的 findstr 搜尋特定字串用法如下，假設我要在 xxx.txt 檔案裡搜尋 pattern 字串，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.txt | findstr &quot;pattern&quot;</span><br></pre></td></tr></table></figure></p><h2><span id="findstr-搜尋多個字串">findstr 搜尋多個字串</span></h2><p>findstr 要搜尋多個字串的話，可以用空格隔開，例如 findstr 搜尋兩個字串的話就這樣寫，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.txt | findstr &quot;pattern1 pattern2&quot;</span><br></pre></td></tr></table></figure></p><p>findstr 搜尋三個字串的話就這樣寫，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat xxx.txt | findstr &quot;pattern1 pattern2 pattern2&quot;</span><br></pre></td></tr></table></figure></p><p>以上就是 Windows findstr 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Windows findstr 搜尋字串指令，findstr 通常用來搭配其它指令來搜尋字串，例如 findstr 搭配 cat 來搜尋檔案裡的特定字串，findstr 算是 Windows DOS 必學指令，學會這招讓工作更快速輕鬆。  &lt;/p
      
    
    </summary>
    
    
      <category term="Windows" scheme="https://shengyu7697.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Python PyQt5 QPainter 用法與範例</title>
    <link href="https://shengyu7697.github.io/python-pyqt-qpainter/"/>
    <id>https://shengyu7697.github.io/python-pyqt-qpainter/</id>
    <published>2021-12-07T14:00:00.000Z</published>
    <updated>2021-12-13T11:55:53.442Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python PyQt5 QPainter 用法與範例。  </p><p>以下的 Python PyQt5 QPainter 用法與範例將分為這幾部分，  </p><ul><li>建立 PyQt5 QPainter  </li><li>PyQt5 QPainter drawText 繪製文字  </li><li>PyQt5 QPainter drawLine 繪製直線  </li><li>PyQt5 QPainter drawRect 繪製矩形  </li><li>PyQt5 QPainter drawEllipse 繪製橢圓  </li><li>PyQt5 QPainter drawArc 繪製圓弧、圓形  </li><li>PyQt5 QPainter drawPolygon 繪製多邊形  </li><li>PyQt5 QPainter drawImage 繪製影像  </li></ul><p>那我們開始吧！  </p><h2><span id="建立-pyqt5-qpainter">建立 PyQt5 QPainter</span></h2><p>PyQt5 簡單建立 QPainter 的用法如下，繪製的操作會在 <code>QWidget.paintEvent()</code> 函式裡完成，並且繪製的函式必須放在 <code>QPainter.begin()</code> 與 <code>QPainter.end()</code> 之間，這些繪圖函式稍後會介紹，<br><figure class="highlight python"><figcaption><span>python-pyqt-qpainter.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        qpainter = QPainter()</span><br><span class="line">        qpainter.begin(self)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># paint ...</span></span><br><span class="line"></span><br><span class="line">        qpainter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qpainter/pyqt-qpainter-1.png" title="pyqt qpainter">  </p><p>如果要改變背景顏色的話可以使用 palette，例如將背景調整成白色或黑色，<br><figure class="highlight python"><figcaption><span>python-pyqt-qpainter2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        self.setAutoFillBackground(<span class="literal">True</span>)</span><br><span class="line">        palette = self.palette()</span><br><span class="line">        palette.setColor(self.backgroundRole(), Qt.white)</span><br><span class="line">        <span class="comment"># palette.setColor(self.backgroundRole(), Qt.black)</span></span><br><span class="line">        self.setPalette(palette)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        qpainter = QPainter()</span><br><span class="line">        qpainter.begin(self)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># paint ...</span></span><br><span class="line"></span><br><span class="line">        qpainter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qpainter/pyqt-qpainter-2.png" title="pyqt qpainter">  </p><h2><span id="pyqt5-qpainter-drawtext-繪製文字">PyQt5 QPainter drawText 繪製文字</span></h2><p>PyQt5 QPainter 繪製文字 drawText 函式，在使用之前先設定一下畫筆與字型，<code>QPainter.setPen()</code> 可以設定畫筆顏色，你可以透過 QColor 來指定 RGB 的顏色，或者使用 PyQt5 內建提供的常用顏色，例如：Qt.black 黑色、Qt.white 白色、Qt.red 紅色、Qt.green 綠色、Qt.blue 藍色等等，<code>QPainter.setFont()</code> 是設定字型，第二個參數為字型大小，  </p><p><code>QPainter.drawText()</code> 繪製文字時是使用傳入的 (x, y) 座標作為文字的左上角座標，而不是文字中心的座標，<code>QPainter.drawText()</code> 繪製文字也可以傳入 QRect 的方式 x, y 分別為文字的左上角座標與 w, h 寬度跟高度，<br><figure class="highlight python"><figcaption><span>python-pyqt-qpainter-drawtext.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter, QColor, QFont</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, QPoint, QRect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        qpainter = QPainter()</span><br><span class="line">        qpainter.begin(self)</span><br><span class="line"></span><br><span class="line">        qpainter.setPen(QColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">        qpainter.setFont(QFont(<span class="string">'Arial'</span>, <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line">        qpainter.drawText(QPoint(<span class="number">10</span>, <span class="number">30</span>), <span class="string">'PyQt5'</span>)</span><br><span class="line">        <span class="comment"># qpainter.drawText(10, 30, 'PyQt5')</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># qpainter.drawText(QRect(10, 30, 100, 30), Qt.AlignLeft, 'PyQt5')</span></span><br><span class="line">        <span class="comment"># qpainter.drawText(10, 30, 100, 30, Qt.AlignLeft, 'PyQt5')</span></span><br><span class="line"></span><br><span class="line">        qpainter.drawText(event.rect(), Qt.AlignCenter, <span class="string">'hello world'</span>)</span><br><span class="line"></span><br><span class="line">        qpainter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qpainter/pyqt-qpainter-3.png" title="pyqt qpainter">  </p><h2><span id="pyqt5-qpainter-drawline-繪製直線">PyQt5 QPainter drawLine 繪製直線</span></h2><p>PyQt5 QPainter drawLine 繪製直線時需要傳入兩組座標 (x1, y1) 與 (x2, y2)，繪製直線之前先設定畫筆，建立 <code>QPen()</code> 分別傳入線條顏色，線條寬度，線條樣式，如下例中的 <code>QPen(Qt.black, 2, Qt.SolidLine)</code>，線條樣式有 <code>Qt.SolidLine</code>、<code>Qt.DashLine</code>、<code>Qt.DashDotLine</code>、<code>Qt.DashDotDotLine</code> 可選，另外還有 <code>Qt.CustomDashLine</code> 選項可以客製化，這邊先不介紹，線條樣式也可以透過 <code>QPen.setStyle()</code> 來改變，改變後記得使用 <code>QPen.setPen()</code> 重新設定一下，<br><figure class="highlight python"><figcaption><span>python-pyqt-qpainter-drawline.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter, QPen</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        qpainter = QPainter()</span><br><span class="line">        qpainter.begin(self)</span><br><span class="line"></span><br><span class="line">        qpen = QPen(Qt.black, <span class="number">2</span>, Qt.SolidLine)</span><br><span class="line">        qpainter.setPen(qpen)</span><br><span class="line">        qpainter.drawLine(<span class="number">20</span>, <span class="number">40</span>, <span class="number">180</span>, <span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">        qpen.setStyle(Qt.DashLine)</span><br><span class="line">        qpainter.setPen(qpen)</span><br><span class="line">        qpainter.drawLine(<span class="number">20</span>, <span class="number">60</span>, <span class="number">180</span>, <span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">        qpen.setStyle(Qt.DashDotLine)</span><br><span class="line">        qpainter.setPen(qpen)</span><br><span class="line">        qpainter.drawLine(<span class="number">20</span>, <span class="number">80</span>, <span class="number">180</span>, <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">        qpen.setStyle(Qt.DashDotDotLine)</span><br><span class="line">        qpainter.setPen(qpen)</span><br><span class="line">        qpainter.drawLine(<span class="number">20</span>, <span class="number">100</span>, <span class="number">180</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">        qpainter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qpainter/pyqt-qpainter-4.png" title="pyqt qpainter">  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="pyqt5-qpainter-drawrect-繪製矩形">PyQt5 QPainter drawRect 繪製矩形</span></h2><p>PyQt5 QPainter drawRect 繪製矩形時是帶入 QRect，x, y 為矩形的左上角座標 w, h 為矩形的寬度與高度，矩形的顏色可以透過 <code>QPainter.setPen()</code> 來更換，<br><figure class="highlight python"><figcaption><span>python-pyqt-qpainter-drawrect.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, QRect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        qpainter = QPainter()</span><br><span class="line">        qpainter.begin(self)</span><br><span class="line"></span><br><span class="line">        qpainter.setPen(Qt.black)</span><br><span class="line">        qpainter.drawRect(QRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">80</span>, <span class="number">80</span>))</span><br><span class="line"></span><br><span class="line">        qpainter.setPen(Qt.green)</span><br><span class="line">        qpainter.drawRect(<span class="number">100</span>, <span class="number">10</span>, <span class="number">80</span>, <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">        qpainter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qpainter/pyqt-qpainter-5.png" title="pyqt qpainter">  </p><h2><span id="pyqt5-qpainter-drawellipse-繪製橢圓">PyQt5 QPainter drawEllipse 繪製橢圓</span></h2><p>PyQt5 QPainter 繪製橢圓時是使用 drawEllipse 函式，也可以用來繪製圓形，傳入 QRect 的 x, y 分別為橢圓外圍/圓形的矩形的左上角座標與 w, h 寬度跟高度，<br><figure class="highlight python"><figcaption><span>python-pyqt-qpainter-drawellipse.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter, QPen</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, QRect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        qpainter = QPainter()</span><br><span class="line">        qpainter.begin(self)</span><br><span class="line"></span><br><span class="line">        qpen = QPen(Qt.black)</span><br><span class="line">        qpainter.setPen(qpen)</span><br><span class="line"></span><br><span class="line">        qpainter.drawEllipse(QRect(<span class="number">10</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">80</span>))</span><br><span class="line">        qpainter.drawEllipse(QRect(<span class="number">60</span>, <span class="number">30</span>, <span class="number">80</span>, <span class="number">40</span>))</span><br><span class="line">        qpainter.drawEllipse(QRect(<span class="number">150</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">40</span>))</span><br><span class="line"></span><br><span class="line">        qpainter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qpainter/pyqt-qpainter-6.png" title="pyqt qpainter">  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="pyqt5-qpainter-drawarc-繪製圓弧-圓形">PyQt5 QPainter drawArc 繪製圓弧、圓形</span></h2><p>PyQt5 QPainter 繪製圓弧是使用 drawArc 函式，傳入 QRect 的 x, y 分別為矩形的左上角座標與 w, h 寬度跟高度，第二個參數為起始的角度，第二個參數為結束的角度，這兩個角度需要乘 16，因爲單位爲 alen，一度等於 16 alen，<br><figure class="highlight python"><figcaption><span>python-pyqt-qpainter-drawarc.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter, QPen</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, QRect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        qpainter = QPainter()</span><br><span class="line">        qpainter.begin(self)</span><br><span class="line"></span><br><span class="line">        qpen = QPen(Qt.black)</span><br><span class="line">        qpainter.setPen(qpen)</span><br><span class="line"></span><br><span class="line">        qpainter.drawArc(QRect(<span class="number">20</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>), <span class="number">0</span>, <span class="number">90</span>*<span class="number">16</span>)</span><br><span class="line">        qpainter.drawArc(QRect(<span class="number">100</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">50</span>), <span class="number">0</span>, <span class="number">180</span>*<span class="number">16</span>)</span><br><span class="line">        qpainter.drawArc(QRect(<span class="number">20</span>, <span class="number">80</span>, <span class="number">50</span>, <span class="number">50</span>), <span class="number">90</span>*<span class="number">16</span>, <span class="number">180</span>*<span class="number">16</span>)</span><br><span class="line">        qpainter.drawArc(QRect(<span class="number">100</span>, <span class="number">80</span>, <span class="number">50</span>, <span class="number">50</span>), <span class="number">0</span>, <span class="number">360</span>*<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">        qpainter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qpainter/pyqt-qpainter-7.png" title="pyqt qpainter">  </p><h2><span id="pyqt5-qpainter-drawpolygon-繪製多邊形">PyQt5 QPainter drawPolygon 繪製多邊形</span></h2><p>PyQt5 QPainter 繪製多邊形是使用 drawPolygon 函式，需要傳入一組座標以上 (x1, y1) 與 (x2, y2) … (xn, yn)，可以直接將點群傳入 <code>QPainter.drawPolygon()</code> 函式裡，也可以先建構 <code>QPolygon()</code> 傳入 QPoint list，再把 QPolygon 傳入 <code>QPainter.drawPolygon()</code> 裡，<br><figure class="highlight python"><figcaption><span>python-pyqt-qpainter-drawpolygon.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter, QPen, QPolygon</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, QPoint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        qpainter = QPainter()</span><br><span class="line">        qpainter.begin(self)</span><br><span class="line"></span><br><span class="line">        qpen = QPen(Qt.black)</span><br><span class="line">        qpainter.setPen(qpen)</span><br><span class="line">        p1 = QPoint(<span class="number">40</span>, <span class="number">40</span>)</span><br><span class="line">        p2 = QPoint(<span class="number">60</span>, <span class="number">20</span>)</span><br><span class="line">        p3 = QPoint(<span class="number">80</span>, <span class="number">40</span>)</span><br><span class="line">        p4 = QPoint(<span class="number">80</span>, <span class="number">80</span>)</span><br><span class="line">        p5 = QPoint(<span class="number">40</span>, <span class="number">80</span>)</span><br><span class="line">        qpainter.drawPolygon(p1, p2, p3, p4, p5)</span><br><span class="line"></span><br><span class="line">        qpen = QPen(Qt.red)</span><br><span class="line">        qpainter.setPen(qpen)</span><br><span class="line">        p1 = QPoint(<span class="number">100</span>, <span class="number">40</span>)</span><br><span class="line">        p2 = QPoint(<span class="number">120</span>, <span class="number">20</span>)</span><br><span class="line">        p3 = QPoint(<span class="number">140</span>, <span class="number">40</span>)</span><br><span class="line">        p4 = QPoint(<span class="number">140</span>, <span class="number">80</span>)</span><br><span class="line">        p5 = QPoint(<span class="number">100</span>, <span class="number">80</span>)</span><br><span class="line">        qpolygon = QPolygon([p1, p2, p3, p4, p5])</span><br><span class="line">        qpainter.drawPolygon(qpolygon)</span><br><span class="line"></span><br><span class="line">        qpainter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qpainter/pyqt-qpainter-8.png" title="pyqt qpainter">  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="pyqt5-qpainter-drawimage-繪製影像">PyQt5 QPainter drawImage 繪製影像</span></h2><p>PyQt5 使用 drawImage 來繪製影像，drawImage 第一個參數為 QRect 繪製的區域 x, y 分別為矩形的左上角座標與 w, h 寬度與高度，第二個參數為影像，在這範例中這影像是在 initUI 時就已經先將影像讀取就緒了，在 paintEvent 裡就直接繪製該影像，<br><figure class="highlight python"><figcaption><span>python-pyqt-qpainter-drawimage.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter, QPen, QImage</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, QRect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        self.qimage = QImage(<span class="string">'lena.jpg'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">paintEvent</span><span class="params">(self, event)</span>:</span></span><br><span class="line">        qpainter = QPainter()</span><br><span class="line">        qpainter.begin(self)</span><br><span class="line"></span><br><span class="line">        qpainter.drawImage(QRect(<span class="number">10</span>, <span class="number">10</span>, <span class="number">120</span>, <span class="number">120</span>), self.qimage)</span><br><span class="line"></span><br><span class="line">        qpainter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qpainter/pyqt-qpainter-9.png" title="pyqt qpainter">  </p><p>以上就是 Python PyQt5 QPainter 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python PyQt5 QPainter 用法與範例。  &lt;/p&gt;
&lt;p&gt;以下的 Python PyQt5 QPainter 用法與範例將分為這幾部分，  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立 PyQt5 QPainter  &lt;/li&gt;
&lt;li&gt;P
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
      <category term="PyQt" scheme="https://shengyu7697.github.io/tags/PyQt/"/>
    
  </entry>
  
  <entry>
    <title>Python PyQt5 QThread 用法與範例</title>
    <link href="https://shengyu7697.github.io/python-pyqt-qthread/"/>
    <id>https://shengyu7697.github.io/python-pyqt-qthread/</id>
    <published>2021-12-06T14:00:00.000Z</published>
    <updated>2021-12-10T00:13:28.345Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python PyQt5 QThread 用法與範例，在 GUI 程式中，如果你想要讓程式做一件很耗時的工作，例如：下載檔案、I/O 存取等等，在 UI thread 做這些事的話會讓整個 UI 卡住，出現 UI 無回應的狀態，這時你可以將這些耗時的工作另外開執行緒去做，以避免 UI thread 卡住，在 PyQT 中我們可以使用 QThread 來完成這件事，接下來就介紹如何在 PyQT5 中使用 QThread。  </p><p>以下的 Python PyQt5 QHBoxLayout 用法與範例將分為這幾部分，  </p><ul><li>PyQt5 QThread 的基本用法  </li><li>PyQt5 錯誤使用執行緒讓畫面卡住  </li><li>PyQt5 在 QWidget 裡使用 QThread  </li></ul><p>那我們開始吧！  </p><h2><span id="pyqt5-qthread-的基本用法">PyQt5 QThread 的基本用法</span></h2><p>PyQt5 要使用 QThread 建立一個執行緒的話，需要新增 QThread 的一個子類，然後覆寫 <code>QThread.run()</code> 函式，就像下例子中的 WorkerThread 類別繼承 QThread 並且覆寫了 run 成員函式，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkerThread</span><span class="params">(QThread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># do something</span></span><br></pre></td></tr></table></figure></p><p>接下來就可以使用 <code>QThread.start()</code> 來啟動執行緒，我們先來看一個小例子，在建構完 WorkerThread 還不會去執行 run 函式，直到呼叫 <code>QThread.start()</code> 才會開始去執行 run 函式，另外如果主執行緒要等待這兩個執行緒執行完畢才繼續往下執行的話可以使用 <code>QThread.wait()</code>，<code>QThread.wait()</code> 會等待該執行緒執行完成才會返回，如果該執行緒裡寫了一個無窮迴圈的話，那麼執行 <code>QThread.wait()</code> 就會進入無限等待，等到天荒地老了，<br><figure class="highlight python"><figcaption><span>python-pyqt-qthread.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QThread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkerThread</span><span class="params">(QThread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            print(<span class="string">'WorkerThread::run '</span> + str(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    print(<span class="string">'main'</span>)</span><br><span class="line"></span><br><span class="line">    work1 = WorkerThread()</span><br><span class="line">    work2 = WorkerThread()</span><br><span class="line">    work1.start()</span><br><span class="line">    work2.start()</span><br><span class="line">    work1.wait()</span><br><span class="line">    work2.wait()</span><br><span class="line">    print(<span class="string">'end of main'</span>)</span><br><span class="line">    <span class="comment"># sys.exit(app.exec_())</span></span><br></pre></td></tr></table></figure></p><p>在這個 run 函式裡有個 for 迴圈執行 3 次迴圈，並且每次 sleep 1 秒就輸出一個訊息，以便我們了解執行迴圈到第幾次了，以下為輸出的結果，可以發現主執行緒是等到兩個 WorkerThread 都執行完畢了以後才輸出了 <code>end of main</code> 訊息，證明了使用 <code>QThread.wait()</code> 是有效的，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">main</span><br><span class="line">WorkerThread::run 0</span><br><span class="line">WorkerThread::run 0</span><br><span class="line">WorkerThread::run 1</span><br><span class="line">WorkerThread::run 1</span><br><span class="line">WorkerThread::run 2</span><br><span class="line">WorkerThread::run 2</span><br><span class="line">end of main</span><br></pre></td></tr></table></figure></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>接下來讓我們來修改 WorkerThread 類別，讓輸出的訊息能夠更好地分辨是哪個執行緒，在 WorkerThread 建構時帶入一個名稱，還有 sleep 的秒數，<br><figure class="highlight python"><figcaption><span>python-pyqt-qthread2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QThread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkerThread</span><span class="params">(QThread)</span>:</span></span><br><span class="line">    thread_name = <span class="string">'unknown'</span></span><br><span class="line">    sleep_seconds = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, thread_name, sleep_seconds)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.thread_name = thread_name</span><br><span class="line">        self.sleep_seconds = sleep_seconds</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">            time.sleep(self.sleep_seconds)</span><br><span class="line">            print(self.thread_name + <span class="string">' '</span> + str(i))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    print(<span class="string">'main'</span>)</span><br><span class="line"></span><br><span class="line">    work1 = WorkerThread(<span class="string">'work 1'</span>, <span class="number">2</span>)</span><br><span class="line">    work2 = WorkerThread(<span class="string">'work 2'</span>, <span class="number">1</span>)</span><br><span class="line">    work1.start()</span><br><span class="line">    work2.start()</span><br><span class="line">    work1.wait()</span><br><span class="line">    work2.wait()</span><br><span class="line">    print(<span class="string">'end of main'</span>)</span><br><span class="line">    <span class="comment"># sys.exit(app.exec_())</span></span><br></pre></td></tr></table></figure></p><p>跟上例不同的次這次我們帶入不同的 sleep 秒數，來觀察看看是不是 work1 執行緒跟我們的預期一樣應該要比 work2 晚完成，以下為輸出的結果，果然 work1 因為 sleep 得比較久的關係所以比 work2 執行緒晚完成，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">main</span><br><span class="line">work 2 0</span><br><span class="line">work 2 1</span><br><span class="line">work 1 0</span><br><span class="line">work 2 2</span><br><span class="line">work 1 1</span><br><span class="line">work 1 2</span><br><span class="line">end of main</span><br></pre></td></tr></table></figure></p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="pyqt5-錯誤使用執行緒讓畫面卡住">PyQt5 錯誤使用執行緒讓畫面卡住</span></h2><p>新手在 PyQt5 開發過程中容易錯誤地使用執行緒導致讓畫面卡住或者畫面變黑，以一個下載檔案的程式為例，按下按鈕會去作約 10 秒的工作，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QVBoxLayout,</span><br><span class="line">                             QLabel, QPushButton)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.mylabel = QLabel(<span class="string">'press button to start download'</span>, self)</span><br><span class="line">        layout.addWidget(self.mylabel)</span><br><span class="line"></span><br><span class="line">        self.mybutton = QPushButton(<span class="string">'start'</span>, self)</span><br><span class="line">        self.mybutton.clicked.connect(self.onButtonClick)</span><br><span class="line">        layout.addWidget(self.mybutton)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onButtonClick</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.mybutton.setDisabled(<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        self.mylabel.setText(<span class="string">'finish'</span>)</span><br><span class="line">        self.mybutton.setDisabled(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>在執行的過程中按下按鈕後會發現整個 GUI 程式就無法再做其它 UI 操作，之後整個畫面卡住或者畫面變黑，如下圖所示，<br><img src="/python-pyqt-qthread/pyqt-qthread-1.png" title="pyqt qthread"><br>這就是錯誤地使用 UI 執行緒，要如何解決這個問題呢？下一章節馬上給你介紹。  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="pyqt5-在-qwidget-裡使用-qthread">PyQt5 在 QWidget 裡使用 QThread</span></h2><p>在 PyQT 程式中，主執行緒就是我們說的 UI 執行緒，UI 執行緒會處理所有 widget 的事務，所以如果有一耗時的工作要執行的話我們通常不會寫在 UI 執行緒裡，因為那樣會無法讓其它 widget 進行更新，導致畫面卡住或程式無回應的現象，解決的方法是另外建立一個執行緒在處理這些耗時的工作，  </p><p>我們在 WorkerThread 裡新增了兩個 signal，分別為 trigger 與 finished，finished 就是完成後的訊號，而 trigger 就是我們執行過程中會發送的訊號，而要客製化 signal 訊號時使用 pysingal 來定義要發射到目標函式的函式原型，例如下例中的 <code>trigger = pyqtSignal(str)</code>，  </p><p>整個程式就是按下按鈕後，會開啟另一個執行緒，每一秒都會更新一次秒數到 label 上，透過 <code>self.trigger.emit(str(i+1))</code> 來發射訊號並且傳送第幾秒參數，第 5 秒會結束這個執行緒，然後 <code>self.finished.emit()</code> 發射結束訊號，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QVBoxLayout,</span><br><span class="line">                             QLabel, QPushButton)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QThread, pyqtSignal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkerThread</span><span class="params">(QThread)</span>:</span></span><br><span class="line">    trigger = pyqtSignal(str)</span><br><span class="line">    finished = pyqtSignal()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            self.trigger.emit(str(i+<span class="number">1</span>))</span><br><span class="line">            print(<span class="string">'WorkerThread::run '</span> + str(i))</span><br><span class="line">        self.finished.emit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.mylabel = QLabel(<span class="string">'press button to start thread'</span>, self)</span><br><span class="line">        layout.addWidget(self.mylabel)</span><br><span class="line"></span><br><span class="line">        self.mybutton = QPushButton(<span class="string">'start'</span>, self)</span><br><span class="line">        self.mybutton.clicked.connect(self.startThread)</span><br><span class="line">        layout.addWidget(self.mybutton)</span><br><span class="line"></span><br><span class="line">        self.work = WorkerThread()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startThread</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.mybutton.setDisabled(<span class="literal">True</span>)</span><br><span class="line">        self.work.start()</span><br><span class="line">        self.work.trigger.connect(self.updateLabel)</span><br><span class="line">        self.work.finished.connect(self.threadFinished)</span><br><span class="line">        self.updateLabel(str(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">threadFinished</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.mybutton.setDisabled(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">updateLabel</span><span class="params">(self, text)</span>:</span></span><br><span class="line">        self.mylabel.setText(text)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qthread/pyqt-qthread-2.png" title="pyqt qthread">  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>如果不想要 threadFinished 函式裡僅僅地只是一行程式碼的話，想去除 threadFinished 函式的話可以改成 lambda 的寫法，如下範例所示，將 <code>self.mybutton.setDisabled(False)</code> 操作寫在 <code>self.work.finished.connect()</code> 裡的 lambda 運算式裡，更多詳細的 Python lambda 用法可以參考<a href="/python-lambda/" title="這篇">這篇</a>，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">startThread</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.mybutton.setDisabled(<span class="literal">True</span>)</span><br><span class="line">    self.work.start()</span><br><span class="line">    self.work.trigger.connect(self.updateLabel)</span><br><span class="line">    <span class="comment"># self.work.finished.connect(self.threadFinished)</span></span><br><span class="line">    self.work.finished.connect(<span class="keyword">lambda</span>: self.mybutton.setDisabled(<span class="literal">False</span>))</span><br><span class="line">    self.updateLabel(str(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># def threadFinished(self):</span></span><br><span class="line"><span class="comment">#    self.mybutton.setDisabled(False)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateLabel</span><span class="params">(self, text)</span>:</span></span><br><span class="line">    self.mylabel.setText(text)</span><br></pre></td></tr></table></figure></p><p>以上就是 Python PyQt5 QThread 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python PyQt5 QThread 用法與範例，在 GUI 程式中，如果你想要讓程式做一件很耗時的工作，例如：下載檔案、I/O 存取等等，在 UI thread 做這些事的話會讓整個 UI 卡住，出現 UI 無回應的狀態，這時你可以將這些耗
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
      <category term="PyQt" scheme="https://shengyu7697.github.io/tags/PyQt/"/>
    
  </entry>
  
  <entry>
    <title>Python PyQt5 QImage 用法與範例</title>
    <link href="https://shengyu7697.github.io/python-pyqt-qimage/"/>
    <id>https://shengyu7697.github.io/python-pyqt-qimage/</id>
    <published>2021-12-03T14:00:00.000Z</published>
    <updated>2021-12-07T12:42:12.081Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python PyQt5 QImage 用法與範例，QImage 是專門處理影像 pixel 像素的類別，在這篇我們將會介紹 PyQt5 何使用 QImage 來讀取圖片並顯示出來。  </p><p>以下的 Python PyQt5 QImage 用法與範例將分為這幾部分，  </p><ul><li>PyQt5 QImage 讀取圖片並顯示在 QLabel 上  </li><li>PyQt5 QImage 用某顏色填充/填滿  </li><li>PyQt5 QImage 修改像素  </li><li>PyQt5 從 numpy.ndarray 初始化 QImage  </li><li>PyQt5 從 cv2.imread 讀取影像並轉換成 QImage  </li></ul><h2><span id="pyqt5-qimage-讀取圖片並顯示在-qlabel-上">PyQt5 QImage 讀取圖片並顯示在 QLabel 上</span></h2><p>QImage 跟之前介紹的 Widget 不一樣，之前都是使用 QtWidgets 裡的元件，而 QImage 是為 I/O 或圖片 pixel 像素存取而設計的。如果你想要存取圖片的像素或是修改圖片像素，就需要使用 QImage，實際上要使用 QImage 時要配合著 QLabel 與 QPixmap一起使用，  </p><p>這邊示範 PyQt5 QImage 基本用法，這邊先示範一個 label 搭配 QImage 使用，<code>self.myqimage = QImage(&#39;lena.jpg&#39;)</code> 建構 QImage 同時讀取圖片，因為 QLabel 只支援 QPixmap 顯示，所以我們這邊要將 QImage 轉換成 QPixmap，使用的是 <code>QPixmap.fromImage()</code> 函式，接下來用 <code>QLabel.setPixmap()</code> 將該 QImage 透過 <code>QPixmap.fromImage()</code> 轉成 QPixmap 設定給 mylabel，如果目錄下沒有 lena.jpg 這張圖片的話則會顯示空白的 label，範例如下，<br><figure class="highlight python"><figcaption><span>python-pyqt-qimage.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QVBoxLayout, QLabel)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QImage, QPixmap</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.mylabel = QLabel(<span class="string">'this is an image'</span>, self)</span><br><span class="line">        layout.addWidget(self.mylabel)</span><br><span class="line"></span><br><span class="line">        self.myqimage = QImage(<span class="string">'lena.jpg'</span>)</span><br><span class="line">        self.mylabel.setPixmap(QPixmap.fromImage(self.myqimage))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qimage/pyqt-qimage-1.png" width="480" title="pyqt qimage">  </p><h2><span id="pyqt5-qimage-用某顏色填充填滿">PyQt5 QImage 用某顏色填充/填滿</span></h2><p>PyQt5 要將 QImage 用某顏色填充的話，可以使用 <code>QImage.fill()</code> 函式，以下例子示範用紅色填充，一開始先初始化 320x240 大小的 QImage 並且格式為 Format_RGB888，之後再用 <code>QImage.fill()</code> 填充 qRgb，<br><figure class="highlight python"><figcaption><span>python-pyqt-qimage2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QVBoxLayout, QLabel)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QImage, QPixmap, qRgb</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.mylabel = QLabel(<span class="string">'this is an image'</span>, self)</span><br><span class="line">        layout.addWidget(self.mylabel)</span><br><span class="line"></span><br><span class="line">        self.myqimage = QImage(<span class="number">320</span>, <span class="number">240</span>, QImage.Format_RGB888)</span><br><span class="line">        self.myqimage.fill(qRgb(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">        self.mylabel.setPixmap(QPixmap.fromImage(self.myqimage))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qimage/pyqt-qimage-2.png" title="pyqt qimage">  </p><p>承上例，再 <code>QImage.fill()</code> 裡也可以先用 QColor 再轉 rgb，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.myqimage = QImage(<span class="number">320</span>, <span class="number">240</span>, QImage.Format_RGB888)</span><br><span class="line">self.myqimage.fill(QColor(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>).rgb())</span><br><span class="line">self.mylabel.setPixmap(QPixmap.fromImage(self.myqimage))</span><br></pre></td></tr></table></figure></p><h2><span id="pyqt5-qimage-修改像素">PyQt5 QImage 修改像素</span></h2><p>PyQt5 QImage 要修改像素的話可以使用 <code>QImage.setPixel()</code>，這邊示範用 for 迴圈遍歷每一個 pixel，將每個 pixel 都設為藍色，<br><figure class="highlight python"><figcaption><span>python-pyqt-qimage3.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QVBoxLayout, QLabel)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QImage, QPixmap, QColor</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.mylabel = QLabel(<span class="string">'this is an image'</span>, self)</span><br><span class="line">        layout.addWidget(self.mylabel)</span><br><span class="line"></span><br><span class="line">        self.myqimage = QImage(<span class="number">320</span>, <span class="number">240</span>, QImage.Format_RGB888)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(self.myqimage.width()):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(self.myqimage.height()):</span><br><span class="line">                self.myqimage.setPixel(x, y, QColor(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>).rgb())</span><br><span class="line"></span><br><span class="line">        self.mylabel.setPixmap(QPixmap.fromImage(self.myqimage))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qimage/pyqt-qimage-3.png" title="pyqt qimage">  </p><p>上述例子是使用 QColor 轉換成 rgb，也可以直接使用 qRgb，例如將每個 pixel 改成綠色可以這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> qRgb</span><br><span class="line">...</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(self.myqimage.width()):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> range(self.myqimage.height()):</span><br><span class="line">        self.myqimage.setPixel(x, y, qRgb(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure></p><p>如果要將每個 pixel 都加 10 的話可以這樣寫，pixel 值超過 255 需要進行邊界處理，這邊先省略了，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">r, g, b, a = QColor(self.myqimage.pixel(x, y)).getRgb()</span><br><span class="line">r += <span class="number">10</span></span><br><span class="line">g += <span class="number">10</span></span><br><span class="line">b += <span class="number">10</span></span><br><span class="line">self.myqimage.setPixel(x, y, QColor(r, g, b, a).rgb())</span><br></pre></td></tr></table></figure></p><h2><span id="pyqt5-從-numpyndarray-初始化-qimage">PyQt5 從 numpy.ndarray 初始化 QImage</span></h2><p>如果 PyQt5 要從 numpy.ndarray 初始化 QImage 的話，可以在 <code>QImage()</code> 建構子的第一個引數放入 numpy.ndarray，詳細用法請看下面例子，<code>np.zeros()</code> 是初始化一個 numpy.ndarray 並且用 0 來填充初始化，<br><figure class="highlight python"><figcaption><span>python-pyqt-qimage4.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QVBoxLayout, QLabel)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QImage, QPixmap, QColor</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.mylabel = QLabel(<span class="string">'this is an image'</span>, self)</span><br><span class="line">        layout.addWidget(self.mylabel)</span><br><span class="line"></span><br><span class="line">        img_np = np.zeros((<span class="number">240</span>, <span class="number">320</span>, <span class="number">3</span>), dtype=np.uint8)</span><br><span class="line">        print(type(img_np))  <span class="comment"># numpy.ndarray</span></span><br><span class="line">        print(type(img_np.data))  <span class="comment"># memoryview</span></span><br><span class="line">        height, width, channel = img_np.shape</span><br><span class="line">        bytesPerline = <span class="number">3</span> * width</span><br><span class="line">        self.myqimage = QImage(img_np.data, width, height, bytesPerline, QImage.Format_RGB888)</span><br><span class="line">        self.mylabel.setPixmap(QPixmap.fromImage(self.myqimage))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qimage/pyqt-qimage-4.png" title="pyqt qimage">  </p><h2><span id="pyqt5-從-cv2imread-讀取影像並轉換成-qimage">PyQt5 從 cv2.imread 讀取影像並轉換成 QImage</span></h2><p>如果 PyQt5 要從 <code>cv2.imread()</code> 讀取影像並轉換成 QImage 的話，範例如下，從 <code>cv2.imread()</code> 讀入影像後，後面的步驟基本上跟前述例子一樣了，需要注意的是 OpenCV 的 pixel 擺放順序為 bgr，所以這邊要透過 <code>QImage.rgbSwapped()</code> 函式將 rgb 轉換成 bgr，<br><figure class="highlight python"><figcaption><span>python-pyqt-qimage5.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QVBoxLayout, QLabel)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QImage, QPixmap</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.mylabel = QLabel(<span class="string">'this is an image'</span>, self)</span><br><span class="line">        layout.addWidget(self.mylabel)</span><br><span class="line"></span><br><span class="line">        img = cv2.imread(<span class="string">'lena.jpg'</span>)</span><br><span class="line">        print(type(img))  <span class="comment"># numpy.ndarray</span></span><br><span class="line">        print(type(img.data))  <span class="comment"># memoryview</span></span><br><span class="line">        height, width, channel = img.shape</span><br><span class="line">        bytesPerline = <span class="number">3</span> * width</span><br><span class="line">        self.myqimage = QImage(img.data, width, height, bytesPerline, QImage.Format_RGB888)</span><br><span class="line">        self.mylabel.setPixmap(QPixmap.fromImage(self.myqimage.rgbSwapped()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>以上就是 Python PyQt5 QImage 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a><br><a href="/python-opencv-show-image-pyqt/" title="Python OpenCV 使用 PyQt5 顯示影像圖片">Python OpenCV 使用 PyQt5 顯示影像圖片</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python PyQt5 QImage 用法與範例，QImage 是專門處理影像 pixel 像素的類別，在這篇我們將會介紹 PyQt5 何使用 QImage 來讀取圖片並顯示出來。  &lt;/p&gt;
&lt;p&gt;以下的 Python PyQt5 QImag
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
      <category term="PyQt" scheme="https://shengyu7697.github.io/tags/PyQt/"/>
    
  </entry>
  
  <entry>
    <title>Python PyQt5 QHBoxLayout 水平佈局用法與範例</title>
    <link href="https://shengyu7697.github.io/python-pyqt-qhboxlayout/"/>
    <id>https://shengyu7697.github.io/python-pyqt-qhboxlayout/</id>
    <published>2021-12-02T14:00:00.000Z</published>
    <updated>2021-12-02T13:04:14.139Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python PyQt5 QHBoxLayout 水平佈局用法與範例，QHBoxLayout 能讓 UI 元件橫向/水平/左右的方式排列，相較於手動排版 QHBoxLayout 能夠讓開發者很快速方便地讓元件佈局。  </p><p>以下的 Python PyQt5 QHBoxLayout 用法與範例將分為這幾部分，  </p><ul><li>PyQt5 QHBoxLayout 基本用法  </li><li>PyQt5 QHBoxLayout 放入不同元件  </li></ul><h2><span id="pyqt5-qhboxlayout-基本用法">PyQt5 QHBoxLayout 基本用法</span></h2><p>這邊示範 PyQt5 QHBoxLayout 基本用法，這邊示範將三個按鈕放入一個 QHBoxLayout 垂直佈局上，<br><figure class="highlight python"><figcaption><span>python-pyqt-qvboxlayout.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QHBoxLayout, QPushButton)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.mybutton1 = QPushButton(<span class="string">'button 1'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton1)</span><br><span class="line"></span><br><span class="line">        self.mybutton2 = QPushButton(<span class="string">'button 2'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton2)</span><br><span class="line"></span><br><span class="line">        self.mybutton3 = QPushButton(<span class="string">'button 3'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qhboxlayout/pyqt-qhboxlayout-1.png" title="pyqt qhboxlayout">  </p><h2><span id="pyqt5-qhboxlayout-放入不同元件">PyQt5 QHBoxLayout 放入不同元件</span></h2><p>這邊示範將不同的 UI 元件放入一個 QHBoxLayout 水平佈局上，分別是一個 label、一個 lineEdit 與一個 button 按鈕，<br><figure class="highlight python"><figcaption><span>python-pyqt-qvboxlayout2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QHBoxLayout,</span><br><span class="line">                             QLabel, QLineEdit, QPushButton)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.mylabel = QLabel(<span class="string">'username:'</span>, self)</span><br><span class="line">        layout.addWidget(self.mylabel)</span><br><span class="line"></span><br><span class="line">        self.mylineedit = QLineEdit(self)</span><br><span class="line">        layout.addWidget(self.mylineedit)</span><br><span class="line"></span><br><span class="line">        self.mybutton = QPushButton(<span class="string">'Login'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qhboxlayout/pyqt-qhboxlayout-2.png" title="pyqt qhboxlayout">  </p><p>以上就是 Python PyQt5 QHBoxLayout 水平佈局用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python PyQt5 QHBoxLayout 水平佈局用法與範例，QHBoxLayout 能讓 UI 元件橫向/水平/左右的方式排列，相較於手動排版 QHBoxLayout 能夠讓開發者很快速方便地讓元件佈局。  &lt;/p&gt;
&lt;p&gt;以下的 Py
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
      <category term="PyQt" scheme="https://shengyu7697.github.io/tags/PyQt/"/>
    
  </entry>
  
  <entry>
    <title>Python PyQt5 QGridLayout 網格佈局用法與範例</title>
    <link href="https://shengyu7697.github.io/python-pyqt-qgridlayout/"/>
    <id>https://shengyu7697.github.io/python-pyqt-qgridlayout/</id>
    <published>2021-12-01T14:00:00.000Z</published>
    <updated>2021-12-01T12:00:14.836Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python PyQt5 QGridLayout 網格佈局用法與範例，QGridLayout 能讓 UI 元件網格狀的方式排列，相較於手動排版 QGridLayout 能夠讓開發者很快速方便地讓元件佈局。  </p><p>以下的 Python PyQt5 QGridLayout 用法與範例將分為這幾部分，  </p><ul><li>PyQt5 QGridLayout 基本用法  </li><li>PyQt5 QGridLayout 跨越多欄或多列  </li></ul><h2><span id="pyqt5-qgridlayout-基本用法">PyQt5 QGridLayout 基本用法</span></h2><p>這邊示範 PyQt5 QGridLayout 基本用法，<code>QGridLayout.addWidget()</code> 的 3 種函式參數介紹如下，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QGridLayout.addWidget(QWidget)</span><br><span class="line">QGridLayout.addWidget(QWidget, int row, int column, Qt.Alignment alignment=<span class="number">0</span>)</span><br><span class="line">QGridLayout.addWidget(QWidget, int row, int column, int rowSpan, int columnSpan, Qt.Alignment alignment=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><p>以下範例是將多個按鈕放入一個 QGridLayout 網格佈局上，這邊單純的介紹 GridLayout 網格佈局就不示範按下按鈕的事件處理，想要進一步了解按鈕事件的可以參考 <a href="/python-pyqt-qpushbutton/" title="PyQt5 QPushButton 按鈕用法與範例">PyQt5 QPushButton 按鈕用法與範例</a>這篇，<br><figure class="highlight python"><figcaption><span>python-pyqt-qgridlayout.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QGridLayout, QPushButton)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QGridLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.mybutton1 = QPushButton(<span class="string">'button 1'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton1, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.mybutton2 = QPushButton(<span class="string">'button 2'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton2, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        self.mybutton3 = QPushButton(<span class="string">'button 3'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton3, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">        self.mybutton4 = QPushButton(<span class="string">'button 4'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton4, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        self.mybutton5 = QPushButton(<span class="string">'button 5'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton5, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        self.mybutton6 = QPushButton(<span class="string">'button 6'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton6, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        self.mybutton7 = QPushButton(<span class="string">'button 7'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton7, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">        self.mybutton8 = QPushButton(<span class="string">'button 8'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton8, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">        self.mybutton9 = QPushButton(<span class="string">'button 9'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton9, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qgridlayout/pyqt-qgridlayout-1.png" title="pyqt qgridlayout">  </p><h2><span id="pyqt5-qgridlayout-跨越多欄或多列">PyQt5 QGridLayout 跨越多欄或多列</span></h2><p>上述範例介紹每一個元件都是一個網格單位，但有時需要一個網格單位，例如水平橫跨 3 網格單位或者垂直橫跨 2 網格單位等等需求，<br>這邊示範將不同的 UI 元件放入一個 QGridLayout 垂直佈局上，分別是 1 個 label 1 個 lineedit 文字輸入框與 5 個 button 按鈕，label 與 lineedit 的用法與範例可以分別參考 <a href="/python-pyqt-qlabel/" title="PyQt5 QLabel 標籤用法與範例">PyQt5 QLabel 標籤用法與範例</a>與 <a href="/python-pyqt-qlineedit/" title="PyQt5 QLineEdit 文字輸入框用法與範例">PyQt5 QLineEdit 文字輸入框用法與範例</a>這兩篇，下例中的 mylineedit 是水平橫跨 2 網格單位，mybutton1 是水平橫跨 2 網格單位，而 mybutton2 是垂直橫跨 2 網格單位，<br><figure class="highlight python"><figcaption><span>python-pyqt-qgridlayout2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QGridLayout,</span><br><span class="line">                             QLabel, QLineEdit, QPushButton)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QGridLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.mylabel = QLabel(<span class="string">'Input:'</span>, self)</span><br><span class="line">        layout.addWidget(self.mylabel, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.mylineedit = QLineEdit(self)</span><br><span class="line">        layout.addWidget(self.mylineedit, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        self.mybutton1 = QPushButton(<span class="string">'button 1'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton1, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">        self.mybutton2 = QPushButton(<span class="string">'button 2'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton2, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">        self.mybutton3 = QPushButton(<span class="string">'button 3'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton3, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">        self.mybutton4 = QPushButton(<span class="string">'button 4'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton4, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        self.mybutton5 = QPushButton(<span class="string">'button 5'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton5, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qgridlayout/pyqt-qgridlayout-2.png" title="pyqt qgridlayout">  </p><p>以上就是 Python PyQt5 QGridLayout 網格佈局用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python PyQt5 QGridLayout 網格佈局用法與範例，QGridLayout 能讓 UI 元件網格狀的方式排列，相較於手動排版 QGridLayout 能夠讓開發者很快速方便地讓元件佈局。  &lt;/p&gt;
&lt;p&gt;以下的 Python 
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
      <category term="PyQt" scheme="https://shengyu7697.github.io/tags/PyQt/"/>
    
  </entry>
  
  <entry>
    <title>Python Socket 網路通訊教學</title>
    <link href="https://shengyu7697.github.io/python-socket/"/>
    <id>https://shengyu7697.github.io/python-socket/</id>
    <published>2021-11-30T14:00:00.000Z</published>
    <updated>2021-11-30T14:01:33.271Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹如何寫 Python Socket 網路通訊程式，在這個網路盛行的時代，網路通訊已成為基礎，想要精通學習網路通訊必須先了解 TCP/IP 協定，其中以 TCP 與 UDP 兩種主要通訊方式最常被使用，接下來教學內容將介紹如何使用 Python Socket API 來搭建一個典型的 TCP &amp; UDP 通訊程式，甚至可以寫出一個聊天室的程式，或者像 LINE 或 Skype 這樣的通訊程式。  </p><p>以下 Python Socket 教學內容將分為幾部分，分別為：  </p><ul><li>Python Socket TCP Server &amp; Client 基本範例  </li><li>Python Socket UDP Server &amp; Client 基本範例  </li></ul><p>在 Python 中已經內建好 Socket API 供你使用，所以不需另外安裝額外的套件即可使用，接下來我們就來看看 Python Socket TCP Server 與 Client 的程式怎麼撰寫吧！  </p><h2><span id="python-socket-tcp-server-amp-client-基本範例">Python Socket TCP Server &amp; Client 基本範例</span></h2><p>這邊介紹 Python Socket TCP 伺服器端與客戶端的網路通訊程式，TCP 這種連線協議具有可靠性，因為 TCP 協議有重傳的機制，所以收到的封包一定沒有錯誤，也因為 TCP 協議的關係在傳輸速度上會有所犧牲，在稍後會介紹 UDP 無重傳機制，提升傳輸性能，不過 TCP 還是給我們帶來很大的便利性，一般瀏覽網頁的 HTTP 協議就是基於 TCP 的基礎，接下來示範一下簡單的 Python Socket TCP Server 伺服器端程式，  </p><p>如下例所示，伺服器端一開始建立 socket，<code>socket.AF_INET</code> 表示使用 Internet Protocol 的通訊協定，而 <code>socket.SOCK_STREAM</code> 表示傳輸方式為 TCP，用 <code>bind()</code> 綁定，這裡是使用 <code>0.0.0.0</code>, port 為 <code>7000</code>，  </p><p>使用 <code>listen()</code> 開始監聽，上限連線數為<code>5</code>，之後進入主迴圈，<code>accept()</code> 等待接受客戶端的連線請求，一旦有客戶端連線的話，就會從 <code>accept()</code> 繼續往下執行，  </p><p>接著從這個連線 <code>recv()</code> 接收資料與 <code>send()</code> 傳送資料，之後就關閉該連線，之後回到 <code>accept()</code> 等待新的客戶端連線，等到新的客戶端連線連上便跟之前的流程一樣，這樣便是一個完整的 Python Socket TCP 伺服器程式。<br><figure class="highlight python"><figcaption><span>python3-socket-tcp-server.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'0.0.0.0'</span></span><br><span class="line">PORT = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.bind((HOST, PORT))</span><br><span class="line">s.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'server start at: %s:%s'</span> % (HOST, PORT))</span><br><span class="line">print(<span class="string">'wait for connection...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn, addr = s.accept()</span><br><span class="line">    print(<span class="string">'connected by '</span> + str(addr))</span><br><span class="line"></span><br><span class="line">    indata = conn.recv(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">'recv: '</span> + indata.decode())</span><br><span class="line"></span><br><span class="line">    outdata = <span class="string">'echo '</span> + indata.decode()</span><br><span class="line">    conn.send(outdata.encode())</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure></p><p>下面範例是對應的 Python Socket TCP Client 客戶端端程式，如下例所示，客戶端一開始建立 socket，之後 <code>connect()</code> 連線伺服器主機的 host 與 port，<br>接著使用 <code>send()</code> 把 <code>&#39;hello tcp&#39;</code> 字串發送給伺服器端，然後使用 <code>recv()</code> 接收來至伺服器端的資料，接收到資料後就把它印出來，之後就關閉該連線，<br><figure class="highlight python"><figcaption><span>python3-socket-tcp-client.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'0.0.0.0'</span></span><br><span class="line">PORT = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((HOST, PORT))</span><br><span class="line"></span><br><span class="line">outdata = <span class="string">'hello tcp'</span></span><br><span class="line">print(<span class="string">'send: '</span> + outdata)</span><br><span class="line">s.send(outdata.encode())</span><br><span class="line"></span><br><span class="line">indata = s.recv(<span class="number">1024</span>)</span><br><span class="line">print(<span class="string">'recv: '</span> + indata.decode())</span><br><span class="line"></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure></p><p>先執行 TCP 伺服器端程式等著，接著再執行 TCP 客戶端端程式就可以將此範例完整體驗，TCP 伺服器端的輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python3 python3-socket-tcp-server.py</span><br><span class="line">server start at: 0.0.0.0:7000</span><br><span class="line">wait for connection...</span><br><span class="line">connected by (&apos;127.0.0.1&apos;, 42202)</span><br><span class="line">recv: hello tcp</span><br></pre></td></tr></table></figure></p><p>TCP 客戶端的輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python3 python3-socket-tcp-client.py </span><br><span class="line">send: hello tcp</span><br><span class="line">recv: echo hello tcp</span><br></pre></td></tr></table></figure></p><p>以上是最基本的 Python Socket TCP 用法與範例，本篇僅示範客戶端傳送一次資料便關閉連線，詳細的 Python Socket TCP 通訊程式範例可以參考 <a href="/python-tcp-socket/" title="Python TCP Socket Server/Client 網路通訊教學">Python TCP Socket Server/Client 網路通訊教學</a>這篇，裡面還會介紹伺服器端如何對同一客戶端多次通訊，以及客戶端如何不間斷地跟伺服器端溝通。  </p><script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="python-socket-udp-server-amp-client-基本範例">Python Socket UDP Server &amp; Client 基本範例</span></h2><p>這邊介紹 Python Socket UDP 服器端與客戶端的網路通訊程式，UDP 無重傳機制，所以相對於 TCP 來說是傳輸效率較好，但因為不保證資料正確性的關係，意味著必須自己實作資料檢查機制，接下來示範一下簡單的 Python Socket UDP Server 伺服器端程式，  </p><p>如下例所示，伺服器端一開始建立 socket，<code>socket.AF_INET</code> 表示使用 Internet Protocol 的通訊協定，而 <code>socket.SOCK_DGRAM</code> 表示傳輸方式為 UDP，用 <code>bind()</code> 綁定，這裡是使用 <code>0.0.0.0</code>, port 為 <code>7000</code>，  </p><p>跟 TCP 不同的是 UDP 不需使用 <code>listen()</code> 與 <code>accept()</code>，直接使用 <code>recvfrom</code> 來接收任何一個 socket 地址的客戶端資料，以及 <code>sendto</code> 傳送資料給指定 socket 位址的客戶端，這邊用一個迴圈不斷地重複 <code>recvfrom()</code> 接收資料與 <code>sendto()</code> 傳送資料，這樣便是一個完整的 Python Socket UDP 伺服器程式。<br><figure class="highlight python"><figcaption><span>python3-socket-udp-server.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'0.0.0.0'</span></span><br><span class="line">PORT = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">s.bind((HOST, PORT))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'server start at: %s:%s'</span> % (HOST, PORT))</span><br><span class="line">print(<span class="string">'wait for connection...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    indata, addr = s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">'recvfrom '</span> + str(addr) + <span class="string">': '</span> + indata.decode())</span><br><span class="line"></span><br><span class="line">    outdata = <span class="string">'echo '</span> + indata.decode()</span><br><span class="line">    s.sendto(outdata.encode(), addr)</span><br></pre></td></tr></table></figure></p><p>下面範例是對應的 Python Socket UDP Client 客戶端端程式，如下例所示，客戶端一開始建立 socket，跟 TCP 不同的是 UDP 不需要 <code>connect()</code> 而是直接用 <code>sendto()</code> 將資料送往指定的主機 host 與 port，<br>接著使用 <code>sendto()</code> 把 <code>&#39;hello udp&#39;</code> 字串發送給伺服器端，然後使用 <code>recvfrom()</code> 接收來至伺服器端的資料，接收到資料後就把它印出來，之後就關閉該連線，<br><figure class="highlight python"><figcaption><span>python3-socket-udp-client.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'0.0.0.0'</span></span><br><span class="line">PORT = <span class="number">7000</span></span><br><span class="line">server_addr = (HOST, PORT)</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line">outdata = <span class="string">'hello udp'</span></span><br><span class="line">print(<span class="string">'sendto '</span> + str(server_addr) + <span class="string">': '</span> + outdata)</span><br><span class="line">s.sendto(outdata.encode(), server_addr)</span><br><span class="line"></span><br><span class="line">indata, addr = s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">print(<span class="string">'recvfrom '</span> + str(addr) + <span class="string">': '</span> + indata.decode())</span><br></pre></td></tr></table></figure></p><p>先執行 UDP 伺服器端程式等著，接著再執行 UDP 客戶端端程式就可以將此範例完整體驗，TCP 伺服器端的輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python3 python3-socket-udp-server.py </span><br><span class="line">server start at: 0.0.0.0:7000</span><br><span class="line">wait for connection...</span><br><span class="line">recvfrom (&apos;127.0.0.1&apos;, 44346): hello udp</span><br></pre></td></tr></table></figure></p><p>UDP 客戶端的輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ python3 python3-socket-udp-client.py</span><br><span class="line">sendto (&apos;0.0.0.0&apos;, 7000): hello udp</span><br><span class="line">recvfrom (&apos;127.0.0.1&apos;, 7000): echo hello udp</span><br></pre></td></tr></table></figure></p><p>以上是最基本的 Python Socket UDP 用法與範例，本篇僅示範客戶端傳送一次資料便關閉連線，詳細的 Python Socket UDP 通訊程式範例可以參考 <a href="/python-udp-socket/" title="Python UDP Socket Server/Client 網路通訊教學">Python UDP Socket Server/Client 網路通訊教學</a>這篇，裡面還會介紹伺服器端如何對同一客戶端多次通訊，以及客戶端如何不間斷地跟伺服器端溝通。  </p><p>以上就是 Python Socket 網路通訊教學介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p>其他參考<br>socket — Low-level networking interface — Python 3 documentation<br><a href="https://docs.python.org/3/library/socket.html" rel="noopener" target="_blank">https://docs.python.org/3/library/socket.html</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹如何寫 Python Socket 網路通訊程式，在這個網路盛行的時代，網路通訊已成為基礎，想要精通學習網路通訊必須先了解 TCP/IP 協定，其中以 TCP 與 UDP 兩種主要通訊方式最常被使用，接下來教學內容將介紹如何使用 Python So
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python PyQt5 QVBoxLayout 垂直佈局用法與範例</title>
    <link href="https://shengyu7697.github.io/python-pyqt-qvboxlayout/"/>
    <id>https://shengyu7697.github.io/python-pyqt-qvboxlayout/</id>
    <published>2021-11-29T14:00:00.000Z</published>
    <updated>2021-11-30T13:17:24.519Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python PyQt5 QVBoxLayout 垂直佈局用法與範例，QVBoxLayout 能讓 UI 元件縱向/垂直/上下的方式排列，相較於手動排版 QVBoxLayout 能夠讓開發者很快速方便地讓元件佈局。  </p><p>以下的 Python PyQt5 QVBoxLayout 用法與範例將分為這幾部分，  </p><ul><li>PyQt5 QVBoxLayout 基本用法  </li><li>PyQt5 QVBoxLayout 放入不同元件  </li></ul><h2><span id="pyqt5-qvboxlayout-基本用法">PyQt5 QVBoxLayout 基本用法</span></h2><p>這邊示範 PyQt5 QVBoxLayout 基本用法，這邊示範將三個按鈕放入一個 QVBoxLayout 垂直佈局上，<br><figure class="highlight python"><figcaption><span>python-pyqt-qvboxlayout.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QVBoxLayout, QPushButton)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.mybutton1 = QPushButton(<span class="string">'button 1'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton1)</span><br><span class="line"></span><br><span class="line">        self.mybutton2 = QPushButton(<span class="string">'button 2'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton2)</span><br><span class="line"></span><br><span class="line">        self.mybutton3 = QPushButton(<span class="string">'button 3'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qvboxlayout/pyqt-qvboxlayout-1.png" title="pyqt qvboxlayout">  </p><h2><span id="pyqt5-qvboxlayout-放入不同元件">PyQt5 QVBoxLayout 放入不同元件</span></h2><p>這邊示範將不同的 UI 元件放入一個 QVBoxLayout 垂直佈局上，分別是一個 label 與一個 button 按鈕，  </p><p>由於 label 預設顯示的文字為靠左對齊，為了讓 label 顯示的文字置中對齊這邊使用 <code>QLabel.setAlignment()</code> 指定為 <code>PyQt5.QtCore.Qt.AlignCenter</code>，<br><figure class="highlight python"><figcaption><span>python-pyqt-qvboxlayout2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QVBoxLayout,</span><br><span class="line">                             QLabel, QPushButton)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.mylabel = QLabel(<span class="string">'hello world'</span>, self)</span><br><span class="line">        self.mylabel.setAlignment(Qt.AlignCenter)</span><br><span class="line">        layout.addWidget(self.mylabel)</span><br><span class="line"></span><br><span class="line">        self.mybutton = QPushButton(<span class="string">'button'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qvboxlayout/pyqt-qvboxlayout-2.png" title="pyqt qvboxlayout">  </p><p>以上就是 Python PyQt5 QVBoxLayout 垂直佈局用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python PyQt5 QVBoxLayout 垂直佈局用法與範例，QVBoxLayout 能讓 UI 元件縱向/垂直/上下的方式排列，相較於手動排版 QVBoxLayout 能夠讓開發者很快速方便地讓元件佈局。  &lt;/p&gt;
&lt;p&gt;以下的 Py
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
      <category term="PyQt" scheme="https://shengyu7697.github.io/tags/PyQt/"/>
    
  </entry>
  
  <entry>
    <title>Python UDP Server/Client 網路通訊教學</title>
    <link href="https://shengyu7697.github.io/python-udp-socket/"/>
    <id>https://shengyu7697.github.io/python-udp-socket/</id>
    <published>2021-11-26T14:00:00.000Z</published>
    <updated>2021-11-30T13:17:24.447Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹如何寫 Python UDP Socket Server/Client 網路通訊程式，在這個網路盛行的時代，網路通訊已成為基礎，想要精通學習網路通訊必須先了解 TCP/IP 協定，除了 TCP 以外，想要自行客製化通訊規則的話就一定要學習 UDP 通訊方式，UDP 通訊程式通常分成伺服器端與客戶端兩部份程式，接下來教學內容將介紹如何使用 socket API 來搭建一個典型的 UDP 通訊程式，甚至可以寫出一個視訊或音訊聊天的程式，或者像 Skype、遠端桌面連線或 TeamViewer 這樣的通訊程式。  </p><p>以下 Python UDP 內容將分為幾部分，分別為：  </p><ul><li>Python UDP Server/Client 通訊流程  </li><li>Python UDP Server 伺服器端程式 (Echo Sever)  </li><li>Python UDP Client 客戶端程式 (傳送使用者的輸入)  </li><li>Python UDP Client 客戶端程式 (定時傳送資料)  </li><li>Python UDP 常見問題  </li></ul><p>那麼就開始吧！   </p><h2><span id="python-udp-serverclient-通訊流程">Python UDP Server/Client 通訊流程</span></h2><p>以下 ShengYu 講解 Python UDP Server 端與 UDP Client 端的程式流程以及會如何使用這些 socket API，<br>UDP Server 的流程分為以下幾大步驟：  </p><ol><li>建立socket：<code>s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</code>，指定 <code>socket.AF_INET</code> (Internet Protocol) family 的通訊協定，類型使用 socket.SOCK_DGRAM (Datagram Socket) 也就是 UDP 傳輸方式  </li><li>綁定 socket 到本地 IP 與 port：<code>s.bind()</code>    </li><li>接收客戶端傳來的資料：<code>s.recvfrom()</code>  </li><li>傳送給對方發送資料：<code>s.sendto()</code>  </li></ol><p>跟 TCP 不同的是 UDP Client 不需要 <code>listen()</code> 跟 <code>accept()</code>，傳輸完畢後也不需要關閉連線。  </p><p>UDP Client 的流程分為以下幾大步驟：  </p><ol><li>建立 socket：<code>s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</code>  </li><li>傳送資料：<code>s.sendto()</code>    </li><li>接收資料：<code>s.recvfrom()</code>  </li></ol><p>跟 TCP 不同的是 UDP Client 不需要 <code>connect()</code>，傳輸完畢後也不需要關閉連線。  </p><p>以上是 UDP Server/Client 通訊的重點流程，實際的 Python socket API 用法與範例詳見下列章節，接下來就來看看怎麼寫 UDP Server/Client 通訊程式吧！  </p><h2><span id="python-udp-server-伺服器端程式-echo-sever">Python UDP Server 伺服器端程式 (Echo Sever)</span></h2><p>這邊 ShengYu 就開始介紹怎麼寫 Python UDP Server 程式，下列範例這是一個典型的 Echo Server，Echo Server 就是收到什麼資料就回覆什麼資料，很簡單吧！<br>跟網路上其他範例不同的是此範例建立連線後不是傳輸一次資料就關閉連線，而是使用迴圈可以一直傳輸資料直到客戶端不想傳關閉連線為止，並且伺服器端再次地等待新的客戶端連線來服務。  </p><p>如下例所示，伺服器端一開始建立 socket，用 <code>bind()</code> 綁定，這裡是使用 <code>0.0.0.0</code>, port 為 <code>7000</code>，<br>跟 TCP 不同的是 UDP 不需使用 <code>listen()</code> 與 <code>accept()</code>，直接使用 <code>recvfrom</code> 來接收任何一個 socket 地址的客戶端資料，以及 <code>sendto</code> 傳送資料給指定 socket 位址的客戶端<br>這邊用一個迴圈不斷地重複 <code>recvfrom</code> 接收資料與 <code>sendto</code> 傳送資料，這樣便是一個完整的 Python UDP 伺服器程式。  </p><p>本篇範例是以 Python 3 作為示範，另外補充一下 Python 2 與 Python 3 的差異處，<br>Python 2 的 <code>recvfrom()</code> 與 <code>sendto()</code> 傳入的參數類型為 <code>str</code>，<br>到了 Python 3 的 <code>recvfrom()</code> 與 <code>sendto()</code> 傳入的參數類型改為 <code>byte</code>，<br>所以 <code>str</code> 要轉成 <code>byte</code> 要透過 <code>decode()</code>，以及使用 <code>decode()</code> 轉回 <code>str</code>，<br><figure class="highlight python"><figcaption><span>python3-udp-socket-server.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'0.0.0.0'</span></span><br><span class="line">PORT = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">s.bind((HOST, PORT))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'server start at: %s:%s'</span> % (HOST, PORT))</span><br><span class="line">print(<span class="string">'wait for connection...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    indata, addr = s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">'recvfrom '</span> + str(addr) + <span class="string">': '</span> + indata.decode())</span><br><span class="line"></span><br><span class="line">    outdata = <span class="string">'echo '</span> + indata.decode()</span><br><span class="line">    s.sendto(outdata.encode(), addr)</span><br></pre></td></tr></table></figure></p><p>如果 Server 伺服器端不正常關閉後再次啟動時可能會遇到 <code>socket.error: [Errno 98] Address already in use</code> 這種錯誤訊息的話，那麼你可以在 <code>bind()</code> 之前設定 <code>REUSEADDR</code> 可以解決這個問題，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)</span><br></pre></td></tr></table></figure></p><h2><span id="python-udp-client-客戶端程式-傳送使用者的輸入">Python UDP Client 客戶端程式 (傳送使用者的輸入)</span></h2><p>Python UDP Client 範例如下，這邊要示範的是傳送使用者的輸入訊息，將使用者的輸入訊息傳送給伺服器端，通常應用於一般聊天軟體上，學習之後就可以寫一個簡單的聊天軟體了。  </p><p>如下例所示，客戶端一開始建立 socket，跟 TCP 不同的是 UDP 不需要 <code>connect()</code> 而是直接用 <code>sendto()</code> 將資料送往指定的主機 host 與 port，<br>之後進入主迴圈，不斷地傳送使用者的輸入，需要注意的是要取得使用者輸入的函式 Python 2 裡是使用 <code>raw_input()</code>，而 Python 3 是使用 <code>input()</code>，<br>使用者輸入完後按下 Enter 便會將資料發送給伺服器端，接著等待伺服器端傳送資料，接收到來自伺服器端的資料就把它印出來，<br><figure class="highlight python"><figcaption><span>python3-udp-socket-client.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'0.0.0.0'</span></span><br><span class="line">PORT = <span class="number">7000</span></span><br><span class="line">server_addr = (HOST, PORT)</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    outdata = input(<span class="string">'please input message: '</span>)</span><br><span class="line">    print(<span class="string">'sendto '</span> + str(server_addr) + <span class="string">': '</span> + outdata)</span><br><span class="line">    s.sendto(outdata.encode(), server_addr)</span><br><span class="line">    </span><br><span class="line">    indata, addr = s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">'recvfrom '</span> + str(addr) + <span class="string">': '</span> + indata.decode())</span><br></pre></td></tr></table></figure></p><p>以下示範一下程式的啟動過程，過程中我在客戶端輸入了兩次的訊息，最後按 <code>ctrl+c</code> 結束了程式，<br>客戶端輸出結果如下，<br><figure class="highlight bash"><figcaption><span>client</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ python3 python3-udp-socket-client.py </span><br><span class="line">please input message: hello</span><br><span class="line">sendto (<span class="string">'0.0.0.0'</span>, 7000): hello</span><br><span class="line">recvfrom (<span class="string">'127.0.0.1'</span>, 7000): <span class="built_in">echo</span> hello</span><br><span class="line">please input message: hello udp</span><br><span class="line">sendto (<span class="string">'0.0.0.0'</span>, 7000): hello udp</span><br><span class="line">recvfrom (<span class="string">'127.0.0.1'</span>, 7000): <span class="built_in">echo</span> hello udp</span><br><span class="line">please input message: ^CTraceback (most recent call last):</span><br><span class="line">  File <span class="string">"python3-udp-socket-client.py"</span>, line 12, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    outdata = input(<span class="string">'please input message: '</span>)</span><br><span class="line">KeyboardInterrupt</span><br></pre></td></tr></table></figure></p><p>伺服器端輸出結果如下，<br><figure class="highlight bash"><figcaption><span>server</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ python3 python3-udp-socket-server.py </span><br><span class="line">server start at: 0.0.0.0:7000</span><br><span class="line"><span class="built_in">wait</span> <span class="keyword">for</span> connection...</span><br><span class="line">recvfrom (<span class="string">'127.0.0.1'</span>, 36042): hello</span><br><span class="line">recvfrom (<span class="string">'127.0.0.1'</span>, 36042): hello udp</span><br></pre></td></tr></table></figure></p><h2><span id="python-udp-client-客戶端程式-定時傳送資料">Python UDP Client 客戶端程式 (定時傳送資料)</span></h2><p>前一章節示範了 Echo Sever 與 Client 通訊程式，這時可以打鐵趁熱，除了前一章節 UDP Client 使用者手動輸入的情形之外，這邊也介紹另一種客戶端會定時地傳送資料給伺服器端，同時這也適用於各種通訊情形。  </p><p>步驟跟前一章節 UDP Client 幾乎相同，傳輸字串為 <code>&#39;heartbeat&#39;</code>，這邊傳送後使用 <code>time.sleep(1)</code> 來讓程式睡眠1秒，之後再繼續傳送資料，進而達成定時傳送的功能，<br><figure class="highlight python"><figcaption><span>python3-udp-socket-client-heartbeat.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">'0.0.0.0'</span></span><br><span class="line">PORT = <span class="number">7000</span></span><br><span class="line">server_addr = (HOST, PORT)</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    outdata = <span class="string">'heartbeat'</span></span><br><span class="line">    print(<span class="string">'sendto '</span> + str(server_addr) + <span class="string">': '</span> + outdata)</span><br><span class="line">    s.sendto(outdata.encode(), server_addr)</span><br><span class="line">    </span><br><span class="line">    indata, addr = s.recvfrom(<span class="number">1024</span>)</span><br><span class="line">    print(<span class="string">'recvfrom '</span> + str(addr) + <span class="string">': '</span> + indata.decode())</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p>客戶端輸出結果如下，<br><figure class="highlight bash"><figcaption><span>client</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ python3 python3-udp-socket-client-heartbeat.py </span><br><span class="line">sendto (<span class="string">'0.0.0.0'</span>, 7000): heartbeat</span><br><span class="line">recvfrom (<span class="string">'127.0.0.1'</span>, 7000): <span class="built_in">echo</span> heartbeat</span><br><span class="line">sendto (<span class="string">'0.0.0.0'</span>, 7000): heartbeat</span><br><span class="line">recvfrom (<span class="string">'127.0.0.1'</span>, 7000): <span class="built_in">echo</span> heartbeat</span><br><span class="line">sendto (<span class="string">'0.0.0.0'</span>, 7000): heartbeat</span><br><span class="line">recvfrom (<span class="string">'127.0.0.1'</span>, 7000): <span class="built_in">echo</span> heartbeat</span><br><span class="line">sendto (<span class="string">'0.0.0.0'</span>, 7000): heartbeat</span><br><span class="line">recvfrom (<span class="string">'127.0.0.1'</span>, 7000): <span class="built_in">echo</span> heartbeat</span><br><span class="line">sendto (<span class="string">'0.0.0.0'</span>, 7000): heartbeat</span><br><span class="line">recvfrom (<span class="string">'127.0.0.1'</span>, 7000): <span class="built_in">echo</span> heartbeat</span><br><span class="line">^CTraceback (most recent call last):</span><br><span class="line">  File <span class="string">"python3-socket-udp-client-heartbeat.py"</span>, line 20, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    time.sleep(1)</span><br><span class="line">KeyboardInterrupt</span><br></pre></td></tr></table></figure></p><p>伺服器端輸出結果如下，<br><figure class="highlight bash"><figcaption><span>server</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ python3 python3-udp-socket-server.py </span><br><span class="line">server start at: 0.0.0.0:7000</span><br><span class="line"><span class="built_in">wait</span> <span class="keyword">for</span> connection...</span><br><span class="line">recvfrom (<span class="string">'127.0.0.1'</span>, 58488): heartbeat</span><br><span class="line">recvfrom (<span class="string">'127.0.0.1'</span>, 58488): heartbeat</span><br><span class="line">recvfrom (<span class="string">'127.0.0.1'</span>, 58488): heartbeat</span><br><span class="line">recvfrom (<span class="string">'127.0.0.1'</span>, 58488): heartbeat</span><br><span class="line">recvfrom (<span class="string">'127.0.0.1'</span>, 58488): heartbeat</span><br></pre></td></tr></table></figure></p><h2><span id="python-udp-常見問題">Python UDP 常見問題</span></h2><p>在 UDP 的傳輸裡，為什麼伺服器還要回傳給客戶端？<br>因為這只是個示範用的通訊程式，讓你了解通訊的過程，就像打電話或者跟別人對話一樣，你一句我一句的來回互動，你可以根據實際的需求而修改程式，你也可以改成一直傳，例如客戶端一直傳送，伺服器一直接收。  </p><p>為什麼 recvfrom 還沒收到資料前會卡住一直等？<br>因為預設是 blocking 非阻塞模式，recvfrom 還沒收到資料前會卡住一直等，沒法做其他事情，直到 recv 接收到資料才會從 recvfrom 函式返回，解決辦法是改用 Non-blocking 非阻塞模式，Non-blocking 模式是這次沒接收到資料就會從 recvfrom 函式返回，接著繼續往下執行；另一個解決方式是另外建立執行緒去做其他事情。  </p><p>以上就是 Python UDP Server/Client 網路通訊教學介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p>其他參考<br>socket — Low-level networking interface — Python 3 documentation<br><a href="https://docs.python.org/3/library/socket.html" rel="noopener" target="_blank">https://docs.python.org/3/library/socket.html</a>  </p><p><strong>其它相關文章推薦</strong><br>下一篇將會介紹如何用 Python 3 提供的 socketserver 來撰寫 server 端的程式，<br><a href="/python-socketserver/" title="Python socketserver 伺服器端網路通訊程式">Python socketserver 伺服器端網路通訊程式</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹如何寫 Python UDP Socket Server/Client 網路通訊程式，在這個網路盛行的時代，網路通訊已成為基礎，想要精通學習網路通訊必須先了解 TCP/IP 協定，除了 TCP 以外，想要自行客製化通訊規則的話就一定要學習 UDP 
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python PyQt5 QRadioButton 單選框用法與範例</title>
    <link href="https://shengyu7697.github.io/python-pyqt-qradiobutton/"/>
    <id>https://shengyu7697.github.io/python-pyqt-qradiobutton/</id>
    <published>2021-11-25T14:00:00.000Z</published>
    <updated>2021-11-30T13:17:24.555Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python PyQt5 QRadioButton 單選框用法與範例，QRadioButton 可以作一些多選項擇一的選取功能，例如性別選取、葷素食選取等等。  </p><p>以下的 Python PyQt5 QRadioButton 用法與範例將分為這幾部分，  </p><ul><li>PyQt5 QRadioButton 基本用法  </li><li>PyQt5 QRadioButton 綁定事件  </li></ul><h2><span id="pyqt5-qradiobutton-基本用法">PyQt5 QRadioButton 基本用法</span></h2><p>這邊介紹 PyQt5 建立 QRadioButton 的用法，QRadioButton 基本上也是個按鈕，在建構 QRadioButton 時帶入顯示的文字，多個 QRadioButton 在同一個父類視窗下是互斥的，也就是在同一個父類視窗下的多個 QRadioButton 只能一個選取一個，如果選取另一個 QRadioButton 的話，先前選取的 QRadioButton 則會被取消，QRadioButton 搭配 QButtonGroup 使用的話則可以實做出多組 QRadioButton 的互斥選取，  </p><p>以下示範將三個 QRadioButton 放入同一個父類裡，<br><figure class="highlight python"><figcaption><span>python-pyqt-qradiobutton.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QVBoxLayout,</span><br><span class="line">                             QRadioButton)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.myradiobutton1 = QRadioButton(<span class="string">'apple'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton1)</span><br><span class="line">        self.myradiobutton2 = QRadioButton(<span class="string">'banana'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton2)</span><br><span class="line">        self.myradiobutton3 = QRadioButton(<span class="string">'orange'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，所以實際操作時可以發現同一群裡的 QRadioButton 單選框是互斥的，只能選擇其中一個 QRadioButton，<br><img src="/python-pyqt-qradiobutton/pyqt-qradiobutton-1.png" title="pyqt qradiobutton">  </p><p>那如果想要產生 QRadioButton 多組選取呢？<br>這時候可以使用 QButtonGroup，這邊示範兩組選取，將二群 QRadioButton 放入二個 QButtonGroup，這邊我們建立第二個 QButtonGroup，把 myradiobutton1 ~ myradiobutton3 放入第一個 QButtonGroup，把 myradiobutton4 ~ myradiobutton6 放入第二個 QButtonGroup，同時也把 layout 改成 QGridLayout，左邊為第一群，右邊為第二群，方便示範說明，<br><figure class="highlight python"><figcaption><span>python-pyqt-qradiobutton2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QGridLayout,</span><br><span class="line">                             QRadioButton, QButtonGroup)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QGridLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.myradiobutton1 = QRadioButton(<span class="string">'apple'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton1, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.myradiobutton2 = QRadioButton(<span class="string">'banana'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton2, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        self.myradiobutton3 = QRadioButton(<span class="string">'orange'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton3, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">        self.myradiobutton4 = QRadioButton(<span class="string">'lemon'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton4, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        self.myradiobutton5 = QRadioButton(<span class="string">'strawberry'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton5, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        self.myradiobutton6 = QRadioButton(<span class="string">'tomato'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton6, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.buttongroup = QButtonGroup(self)</span><br><span class="line">        self.buttongroup.addButton(self.myradiobutton1, <span class="number">1</span>)</span><br><span class="line">        self.buttongroup.addButton(self.myradiobutton2, <span class="number">2</span>)</span><br><span class="line">        self.buttongroup.addButton(self.myradiobutton3, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        self.buttongroup2 = QButtonGroup(self)</span><br><span class="line">        self.buttongroup2.addButton(self.myradiobutton4, <span class="number">4</span>)</span><br><span class="line">        self.buttongroup2.addButton(self.myradiobutton5, <span class="number">5</span>)</span><br><span class="line">        self.buttongroup2.addButton(self.myradiobutton6, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qradiobutton/pyqt-qradiobutton-2.png" title="pyqt qradiobutton">  </p><h2><span id="pyqt5-設定-qradiobutton-預設的選項">PyQt5 設定 QRadioButton 預設的選項</span></h2><p>這邊介紹 PyQt5 設定 QCheckBox 預設的選項，建立 QCheckBox 後預設是不勾選的狀態，有兩種方式可以改變這個狀態，<br>一個是使用 <code>QCheckBox.toggle()</code>，toggle 就是原本勾選的會變成不勾選，在使用一次 toggle 的話原本不勾選的會變成勾選，<br>另一個方式是透過 <code>QCheckBox.setChecked()</code> 來設定 CheckBox 是否要勾選，True 為 勾選，False 為不勾選，<br><figure class="highlight python"><figcaption><span>python-pyqt-qradiobutton3.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QGridLayout,</span><br><span class="line">                             QRadioButton, QButtonGroup)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QGridLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.myradiobutton1 = QRadioButton(<span class="string">'apple'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton1, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.myradiobutton2 = QRadioButton(<span class="string">'banana'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton2, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        self.myradiobutton3 = QRadioButton(<span class="string">'orange'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton3, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">        self.myradiobutton4 = QRadioButton(<span class="string">'lemon'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton4, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        self.myradiobutton5 = QRadioButton(<span class="string">'strawberry'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton5, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        self.myradiobutton6 = QRadioButton(<span class="string">'tomato'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton6, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.buttongroup = QButtonGroup(self)</span><br><span class="line">        self.buttongroup.addButton(self.myradiobutton1, <span class="number">1</span>)</span><br><span class="line">        self.buttongroup.addButton(self.myradiobutton2, <span class="number">2</span>)</span><br><span class="line">        self.buttongroup.addButton(self.myradiobutton3, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        self.buttongroup2 = QButtonGroup(self)</span><br><span class="line">        self.buttongroup2.addButton(self.myradiobutton4, <span class="number">4</span>)</span><br><span class="line">        self.buttongroup2.addButton(self.myradiobutton5, <span class="number">5</span>)</span><br><span class="line">        self.buttongroup2.addButton(self.myradiobutton6, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">        self.myradiobutton1.toggle()</span><br><span class="line">        self.myradiobutton4.setChecked(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qradiobutton/pyqt-qradiobutton-3.png" title="pyqt qradiobutton">  </p><h2><span id="pyqt5-qradiobutton-綁定事件">PyQt5 QRadioButton 綁定事件</span></h2><p>這邊介紹 PyQt5 QRadioButton 如何綁定事件，透過先前的範例我們將 QRadioButton 加入 QButtonGroup 後，所以這邊我們是要將 QButtonGroup 的 buttonClicked 事件連接到我們要處理的函式，第一群連結至 <code>onButtonGroup1Click()</code>，第二群連結至 <code>onButtonGroup2Click()</code>，範例如下，<br><figure class="highlight python"><figcaption><span>python-pyqt-qradiobutton4.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QGridLayout,</span><br><span class="line">                             QRadioButton, QButtonGroup, QPushButton)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QGridLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.myradiobutton1 = QRadioButton(<span class="string">'apple'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton1, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.myradiobutton2 = QRadioButton(<span class="string">'banana'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton2, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        self.myradiobutton3 = QRadioButton(<span class="string">'orange'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton3, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">        self.myradiobutton4 = QRadioButton(<span class="string">'lemon'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton4, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        self.myradiobutton5 = QRadioButton(<span class="string">'strawberry'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton5, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        self.myradiobutton6 = QRadioButton(<span class="string">'tomato'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton6, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.mybutton = QPushButton(<span class="string">'button'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.buttongroup1 = QButtonGroup(self)</span><br><span class="line">        self.buttongroup1.addButton(self.myradiobutton1, <span class="number">1</span>)</span><br><span class="line">        self.buttongroup1.addButton(self.myradiobutton2, <span class="number">2</span>)</span><br><span class="line">        self.buttongroup1.addButton(self.myradiobutton3, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        self.buttongroup2 = QButtonGroup(self)</span><br><span class="line">        self.buttongroup2.addButton(self.myradiobutton4, <span class="number">4</span>)</span><br><span class="line">        self.buttongroup2.addButton(self.myradiobutton5, <span class="number">5</span>)</span><br><span class="line">        self.buttongroup2.addButton(self.myradiobutton6, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">        self.buttongroup1.buttonClicked.connect(self.onButtonGroup1Click)</span><br><span class="line">        self.buttongroup2.buttonClicked.connect(self.onButtonGroup2Click)</span><br><span class="line">        self.mybutton.clicked.connect(self.onButtonClick)</span><br><span class="line"></span><br><span class="line">        self.myradiobutton1.setChecked(<span class="literal">True</span>)</span><br><span class="line">        self.myradiobutton4.setChecked(<span class="literal">True</span>)</span><br><span class="line">        self.fruit1 = self.myradiobutton1.text()</span><br><span class="line">        self.fruit2 = self.myradiobutton4.text()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onButtonGroup1Click</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.buttongroup1.checkedId() == <span class="number">1</span>:</span><br><span class="line">            print(<span class="string">'1 checked'</span>)</span><br><span class="line">            self.fruit1 = self.myradiobutton1.text()</span><br><span class="line">        <span class="keyword">elif</span> self.buttongroup1.checkedId() == <span class="number">2</span>:</span><br><span class="line">            print(<span class="string">'2 checked'</span>)</span><br><span class="line">            self.fruit1 = self.myradiobutton2.text()</span><br><span class="line">        <span class="keyword">elif</span> self.buttongroup1.checkedId() == <span class="number">3</span>:</span><br><span class="line">            print(<span class="string">'3 checked'</span>)</span><br><span class="line">            self.fruit1 = self.myradiobutton3.text()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'? checked'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onButtonGroup2Click</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.buttongroup2.checkedId() == <span class="number">4</span>:</span><br><span class="line">            print(<span class="string">'4 checked'</span>)</span><br><span class="line">            self.fruit2 = self.myradiobutton4.text()</span><br><span class="line">        <span class="keyword">elif</span> self.buttongroup2.checkedId() == <span class="number">5</span>:</span><br><span class="line">            print(<span class="string">'5 checked'</span>)</span><br><span class="line">            self.fruit2 = self.myradiobutton5.text()</span><br><span class="line">        <span class="keyword">elif</span> self.buttongroup2.checkedId() == <span class="number">6</span>:</span><br><span class="line">            print(<span class="string">'6 checked'</span>)</span><br><span class="line">            self.fruit2 = self.myradiobutton6.text()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'? checked'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onButtonClick</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.fruit1 + <span class="string">' + '</span> + self.fruit2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qradiobutton/pyqt-qradiobutton-4.png" title="pyqt qradiobutton"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 checked</span><br><span class="line">6 checked</span><br><span class="line">banana + tomato</span><br></pre></td></tr></table></figure></p><p>也可以將兩個 QButtonGroup 的 buttonClicked 事件都連結到 <code>onButtonGroupClick()</code> 同一個函式處理，在 <code>onButtonGroupClick()</code> 裡使用 <code>self.sender()</code> 來判斷是哪一個 QButtonGroup，<br><figure class="highlight python"><figcaption><span>python-pyqt-qradiobutton5.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QGridLayout,</span><br><span class="line">                             QRadioButton, QButtonGroup, QPushButton)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QGridLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.myradiobutton1 = QRadioButton(<span class="string">'apple'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton1, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        self.myradiobutton2 = QRadioButton(<span class="string">'banana'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton2, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        self.myradiobutton3 = QRadioButton(<span class="string">'orange'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton3, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">        self.myradiobutton4 = QRadioButton(<span class="string">'lemon'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton4, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        self.myradiobutton5 = QRadioButton(<span class="string">'strawberry'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton5, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        self.myradiobutton6 = QRadioButton(<span class="string">'tomato'</span>, self)</span><br><span class="line">        layout.addWidget(self.myradiobutton6, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.mybutton = QPushButton(<span class="string">'button'</span>, self)</span><br><span class="line">        layout.addWidget(self.mybutton, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.buttongroup1 = QButtonGroup(self)</span><br><span class="line">        self.buttongroup1.addButton(self.myradiobutton1, <span class="number">1</span>)</span><br><span class="line">        self.buttongroup1.addButton(self.myradiobutton2, <span class="number">2</span>)</span><br><span class="line">        self.buttongroup1.addButton(self.myradiobutton3, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        self.buttongroup2 = QButtonGroup(self)</span><br><span class="line">        self.buttongroup2.addButton(self.myradiobutton4, <span class="number">4</span>)</span><br><span class="line">        self.buttongroup2.addButton(self.myradiobutton5, <span class="number">5</span>)</span><br><span class="line">        self.buttongroup2.addButton(self.myradiobutton6, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">        self.buttongroup1.buttonClicked.connect(self.onButtonGroupClick)</span><br><span class="line">        self.buttongroup2.buttonClicked.connect(self.onButtonGroupClick)</span><br><span class="line">        self.mybutton.clicked.connect(self.onButtonClick)</span><br><span class="line"></span><br><span class="line">        self.myradiobutton1.setChecked(<span class="literal">True</span>)</span><br><span class="line">        self.myradiobutton4.setChecked(<span class="literal">True</span>)</span><br><span class="line">        self.fruit1 = self.myradiobutton1.text()</span><br><span class="line">        self.fruit2 = self.myradiobutton4.text()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onButtonGroupClick</span><span class="params">(self)</span>:</span></span><br><span class="line">        sender = self.sender()</span><br><span class="line">        <span class="keyword">if</span> sender == self.buttongroup1:</span><br><span class="line">            <span class="keyword">if</span> self.buttongroup1.checkedId() == <span class="number">1</span>:</span><br><span class="line">                print(<span class="string">'1 checked'</span>)</span><br><span class="line">                self.fruit1 = self.myradiobutton1.text()</span><br><span class="line">            <span class="keyword">elif</span> self.buttongroup1.checkedId() == <span class="number">2</span>:</span><br><span class="line">                print(<span class="string">'2 checked'</span>)</span><br><span class="line">                self.fruit1 = self.myradiobutton2.text()</span><br><span class="line">            <span class="keyword">elif</span> self.buttongroup1.checkedId() == <span class="number">3</span>:</span><br><span class="line">                print(<span class="string">'3 checked'</span>)</span><br><span class="line">                self.fruit1 = self.myradiobutton3.text()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'? checked'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self.buttongroup2.checkedId() == <span class="number">4</span>:</span><br><span class="line">                print(<span class="string">'4 checked'</span>)</span><br><span class="line">                self.fruit2 = self.myradiobutton4.text()</span><br><span class="line">            <span class="keyword">elif</span> self.buttongroup2.checkedId() == <span class="number">5</span>:</span><br><span class="line">                print(<span class="string">'5 checked'</span>)</span><br><span class="line">                self.fruit2 = self.myradiobutton5.text()</span><br><span class="line">            <span class="keyword">elif</span> self.buttongroup2.checkedId() == <span class="number">6</span>:</span><br><span class="line">                print(<span class="string">'6 checked'</span>)</span><br><span class="line">                self.fruit2 = self.myradiobutton6.text()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">'? checked'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onButtonClick</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.fruit1 + <span class="string">' + '</span> + self.fruit2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>以上就是 Python PyQt5 QRadioButton 單選框用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！<br>下一篇將會介紹 <a href="/python-pyqt-qcheckbox/" title="PyQt5 QCheckBox 複選框用法與範例">PyQt5 QCheckBox 複選框用法與範例</a>   </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python PyQt5 QRadioButton 單選框用法與範例，QRadioButton 可以作一些多選項擇一的選取功能，例如性別選取、葷素食選取等等。  &lt;/p&gt;
&lt;p&gt;以下的 Python PyQt5 QRadioButton 用法與範
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
      <category term="PyQt" scheme="https://shengyu7697.github.io/tags/PyQt/"/>
    
  </entry>
  
  <entry>
    <title>Python PyQt5 QPixmap 用法與範例</title>
    <link href="https://shengyu7697.github.io/python-pyqt-qpixmap/"/>
    <id>https://shengyu7697.github.io/python-pyqt-qpixmap/</id>
    <published>2021-11-24T14:00:00.000Z</published>
    <updated>2021-11-24T14:10:35.537Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python PyQt5 QPixmap 用法與範例，QPixmap 是專門處理繪圖的類別，顯示影像到螢幕裝置上，在這篇我們將會介紹如何使用 QPixmap 來讀取圖片並顯示出來。  </p><p>以下的 Python PyQt5 QPixmap 用法與範例將分為這幾部分，  </p><ul><li>PyQt5 QPixmap 讀取圖片並顯示在 QLabel 上  </li><li>PyQt5 用按鈕來觸發 QPixmap 讀取圖片顯示在 QLabel 上  </li><li>PyQt5 QPixmap 用檔案對話框開啟圖片並顯示在 QLabel 上  </li></ul><h2><span id="pyqt5-qpixmap-讀取圖片並顯示在-qlabel-上">PyQt5 QPixmap 讀取圖片並顯示在 QLabel 上</span></h2><p>QPixmap 跟之前介紹的 Widget 不一樣，之前都是使用 QtWidgets 裡的元件，而 QPixmap 則是 QtGui 裡專門處理繪圖的類別，實際上要使用 QPixmap 時要配合著 QLabel 或者 QAbstractButton 的延伸類別(例如QPushButton)一起使用，  </p><p>QPixmap 支援的影像格式有：BMP、GIF、JPG、JPEG、PNG、PBM、PGM、PPM、XBM 和 XPM。  </p><p>QImage 是為 I/O 或圖片 pixel 像素存取而設計的。如果你想要存取圖片的像素或是修改圖片像素，則需要使用 QImage，  </p><p>這邊示範 PyQt5 QPixmap 基本用法，這邊先示範一個 label 搭配 QPixmap 使用，<code>self.mypixmap = QPixmap(&#39;lena.jpg&#39;)</code> 建構 QPixmap 同時傳入圖片檔名讀取圖片，接著再用 <code>QLabel.setPixmap()</code> 將該 QPixmap 設定給 mylabel，如果目錄下沒有 lena.jpg 這張圖片的話則會顯示空白的 label，範例如下，<br><figure class="highlight python"><figcaption><span>python-pyqt-qpixmap.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QVBoxLayout, QLabel)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPixmap</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.mylabel = QLabel(<span class="string">'this is an image'</span>, self)</span><br><span class="line">        layout.addWidget(self.mylabel)</span><br><span class="line"></span><br><span class="line">        self.mypixmap = QPixmap(<span class="string">'lena.jpg'</span>)</span><br><span class="line">        self.mylabel.setPixmap(self.mypixmap)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qpixmap/pyqt-qpixmap-1.png" width="480" title="pyqt qpixmap">  </p><h2><span id="pyqt5-用按鈕來觸發-qpixmap-讀取圖片顯示在-qlabel-上">PyQt5 用按鈕來觸發 QPixmap 讀取圖片顯示在 QLabel 上</span></h2><p>這邊介紹 PyQt5 用按鈕事件來讓 QPixmap 讀取圖片，  </p><p>QPixmap 讀取圖片的方法不只一種，除了可以使用 <code>self.mypixmap = QPixmap(&#39;lena.jpg&#39;)</code> 建構 QPixmap 的同時順便讀取圖片外，也可以先建構 <code>QPixmap()</code> 再用 <code>QPixmap.load()</code> 讀取圖片，</p><p>要判斷有沒有讀取圖片成功的話可以使用 <code>QPixmap.isNull()</code> 來進行判斷，<br><figure class="highlight python"><figcaption><span>python-pyqt-qpixmap2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QGridLayout, QLabel, QPushButton)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPixmap</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QGridLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.mylabel = QLabel(<span class="string">'click button to load image'</span>, self)</span><br><span class="line">        layout.addWidget(self.mylabel, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.mybutton1 = QPushButton(<span class="string">'load image'</span>, self)</span><br><span class="line">        self.mybutton1.clicked.connect(self.loadImageAndShow)</span><br><span class="line">        layout.addWidget(self.mybutton1, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">loadImageAndShow</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'load image...'</span>)</span><br><span class="line">        <span class="comment"># self.mypixmap = QPixmap('lena.jpg')</span></span><br><span class="line">        <span class="comment"># or</span></span><br><span class="line">        self.mypixmap = QPixmap()</span><br><span class="line">        self.mypixmap.load(<span class="string">'lena.jpg'</span>)</span><br><span class="line">        <span class="keyword">if</span> self.mypixmap.isNull():</span><br><span class="line">            print(<span class="string">'load image failed'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.mylabel.setPixmap(self.mypixmap)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qpixmap/pyqt-qpixmap-2.png" width="480" title="pyqt qpixmap">  </p><h2><span id="pyqt5-qpixmap-用檔案對話框開啟圖片並顯示在-qlabel-上">PyQt5 QPixmap 用檔案對話框開啟圖片並顯示在 QLabel 上</span></h2><p>這邊示範 QPixmap 用檔案對話框開啟圖片並顯示在 QLabel 上，在 <code>QFileDialog.getOpenFileName()</code> 裡指定 png、jpg、jpeg 或 bmp 檔案類型，<code>QFileDialog.getOpenFileName()</code> 詳細的檔案對話框細節請參考這篇，接著將取得的 filename 判斷是不是為空，否則的話就進行建構 QPixmap 與讀取圖片檔，之後顯示在 label 上，<br><figure class="highlight python"><figcaption><span>python-pyqt-qpixmap3.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QGridLayout,</span><br><span class="line">                             QLabel, QPushButton, QFileDialog)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPixmap</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QCoreApplication</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QGridLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.mylabel = QLabel(<span class="string">'click button to open image'</span>, self)</span><br><span class="line">        layout.addWidget(self.mylabel, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.mybutton1 = QPushButton(<span class="string">'open image'</span>, self)</span><br><span class="line">        self.mybutton1.clicked.connect(self.openImageAndShow)</span><br><span class="line">        layout.addWidget(self.mybutton1, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        self.mybutton2 = QPushButton(<span class="string">'exit'</span>, self)</span><br><span class="line">        self.mybutton2.clicked.connect(QCoreApplication.instance().quit)</span><br><span class="line">        layout.addWidget(self.mybutton2, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">openImageAndShow</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'QFileDialog.getOpenFileName'</span>)</span><br><span class="line">        filename, _ = QFileDialog.getOpenFileName(</span><br><span class="line">            self,</span><br><span class="line">            filter=<span class="string">'Image Files (*.png *.jpg *.jpeg *.bmp)'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> filename:</span><br><span class="line">            print(<span class="string">'filename is empty'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        print(<span class="string">'load image...'</span>)</span><br><span class="line">        self.mypixmap = QPixmap(filename)</span><br><span class="line">        <span class="keyword">if</span> self.mypixmap.isNull():</span><br><span class="line">            print(<span class="string">'load image failed'</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.mylabel.setPixmap(self.mypixmap)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qpixmap/pyqt-qpixmap-3.png" width="480" title="pyqt qpixmap">  </p><p>以上就是 Python PyQt5 QPixmap 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p>其它參考<br>QPixmap Class | Qt GUI 5<br><a href="https://doc.qt.io/qt-5/qpixmap.html" rel="noopener" target="_blank">https://doc.qt.io/qt-5/qpixmap.html</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python PyQt5 QPixmap 用法與範例，QPixmap 是專門處理繪圖的類別，顯示影像到螢幕裝置上，在這篇我們將會介紹如何使用 QPixmap 來讀取圖片並顯示出來。  &lt;/p&gt;
&lt;p&gt;以下的 Python PyQt5 QPixma
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
      <category term="PyQt" scheme="https://shengyu7697.github.io/tags/PyQt/"/>
    
  </entry>
  
  <entry>
    <title>Python PyQt5 QTimer 定時器用法與範例</title>
    <link href="https://shengyu7697.github.io/python-pyqt-qtimer/"/>
    <id>https://shengyu7697.github.io/python-pyqt-qtimer/</id>
    <published>2021-11-23T14:00:00.000Z</published>
    <updated>2021-12-01T12:00:36.398Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python PyQt5 QTimer 定時器用法與範例，QTimer 定時器可以作間隔一段時間就要執行任務的相關應用，例如時鐘、更新攝影機顯示影像或倒數計時器等等應用。  </p><p>以下的 Python PyQt5 QTimer 用法與範例將分為這幾部分，  </p><ul><li>PyQt5 QTimer 基本用法與綁定事件  </li><li>PyQt5 用按鈕事件啟動 QTimer 定時器  </li><li>PyQt5 QTimer 倒數計時器  </li></ul><h2><span id="pyqt5-qtimer-基本用法與綁定事件">PyQt5 QTimer 基本用法與綁定事件</span></h2><p>這邊示範 PyQt5 QTimer 基本用法，這邊先示範一個定時器搭配一個 label，每間隔 1 秒就更新秒數在 label 上，  </p><p>QTimer 綁定事件可以用 <code>QTimer.timeout.connect()</code> 這個信號，將信號綁訂到對應處理的函式，如下例中的 <code>onTimer()</code>，當時間到時會執行 <code>onTimer()</code>，  </p><p>要啟動 QTimer 定時器的話要使用 <code>QTimer.start()</code>，引數是帶入時間間隔，單位為 ms 毫秒，例如帶入 1000 表示每隔 1000ms 毫秒會觸發 <code>onTimer()</code> 一次，因此不僅僅只是觸發一次而已。需要停止 QTimer 可以使用 <code>QTimer.stop()</code> ，在下一個範例會介紹到，<br><figure class="highlight python"><figcaption><span>python-pyqt-qtimer.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QLabel)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QFont</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QTimer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        self.mylabel = QLabel(<span class="string">'timer'</span>, self)</span><br><span class="line">        self.mylabel.setFont(QFont(<span class="string">'Arial'</span>, <span class="number">24</span>))</span><br><span class="line">        self.mylabel.move(<span class="number">60</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">        self.counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        self.mytimer = QTimer(self)</span><br><span class="line">        self.mytimer.timeout.connect(self.onTimer)</span><br><span class="line">        self.mytimer.start(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onTimer</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.counter += <span class="number">1</span></span><br><span class="line">        self.mylabel.setText(str(self.counter))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qtimer/pyqt-qtimer-1.png" title="pyqt qtimer">  </p><h2><span id="pyqt5-用按鈕事件啟動-qtimer-定時器">PyQt5 用按鈕事件啟動 QTimer 定時器</span></h2><p>這邊介紹 PyQt5 用按鈕事件啟動 QTimer 定時器，利用一個按鈕啟動 QTimer 定時器，另一個按鈕來停止 QTimer 定時器。  </p><p>將 mybutton1 的按下事件綁定 <code>startTimer()</code> 函式，<code>startTimer()</code> 會使用 <code>QTimer.start()</code> 去啟動 timer 跟其它相關的設定，接著將 mybutton2 的按下事件綁定 <code>stopTimer()</code> 函式，<code>stopTimer()</code> 會使用 <code>QTimer.stop()</code> 去停止 timer。  </p><p>這邊的 mybutton1 與 mybutton2 按鈕還加上了防呆設計，當 mybutton1 按下時，mybutton1 就必須 disable，避免使用者重複按下，而 mybutton2 要 enable，而按下 mybutton2 時則反之，<br><figure class="highlight python"><figcaption><span>python-pyqt-qtimer2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QGridLayout, QLabel, QPushButton)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QFont</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QTimer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        gridlayout = QGridLayout()</span><br><span class="line">        self.setLayout(gridlayout)</span><br><span class="line"></span><br><span class="line">        self.mylabel = QLabel(<span class="string">'timer'</span>, self)</span><br><span class="line">        self.mylabel.setFont(QFont(<span class="string">'Arial'</span>, <span class="number">24</span>))</span><br><span class="line">        gridlayout.addWidget(self.mylabel, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.mybutton1 = QPushButton(<span class="string">'start'</span>, self)</span><br><span class="line">        self.mybutton1.clicked.connect(self.startTimer)</span><br><span class="line">        gridlayout.addWidget(self.mybutton1, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        self.mybutton2 = QPushButton(<span class="string">'stop'</span>, self)</span><br><span class="line">        self.mybutton2.clicked.connect(self.stopTimer)</span><br><span class="line">        self.mybutton2.setDisabled(<span class="literal">True</span>)</span><br><span class="line">        gridlayout.addWidget(self.mybutton2, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        self.mytimer = QTimer(self)</span><br><span class="line">        self.mytimer.timeout.connect(self.onTimer)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">startTimer</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.counter = <span class="number">0</span></span><br><span class="line">        self.mylabel.setText(<span class="string">'start timer...'</span>)</span><br><span class="line">        self.mybutton1.setDisabled(<span class="literal">True</span>)</span><br><span class="line">        self.mybutton2.setDisabled(<span class="literal">False</span>)</span><br><span class="line">        self.mytimer.start(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stopTimer</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.mylabel.setText(<span class="string">'stop timer'</span>)</span><br><span class="line">        self.mybutton1.setDisabled(<span class="literal">False</span>)</span><br><span class="line">        self.mybutton2.setDisabled(<span class="literal">True</span>)</span><br><span class="line">        self.mytimer.stop()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onTimer</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.counter += <span class="number">1</span></span><br><span class="line">        self.mylabel.setText(str(self.counter))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，這邊是使用 QGridLayout 來進行 UI 元件排版，更多的 QGridLayout 介紹可以參考<a href="/python-pyqt-qgridlayout/" title="Python PyQt5 QGridLayout 網格佈局用法與範例">Python PyQt5 QGridLayout 網格佈局用法與範例</a>這篇，<br><img src="/python-pyqt-qtimer/pyqt-qtimer-2.png" title="pyqt qtimer">  </p><p>以上的範例也可以把兩個按鈕精簡成一個按鈕，第一次按下按鈕時啟動定時器，再次按下按鈕就停止計時器，這邊就先簡單介紹不作示範了。  </p><h2><span id="pyqt5-qtimer-倒數計時器">PyQt5 QTimer 倒數計時器</span></h2><p>QTimer 除了作定時器以外，你也可以利用 QTimer 來實作倒數計時器，倒數完後停止定時器後去執行你想要的函式或程式邏輯，以下示範倒數 5 秒後執行一行 <code>print()</code>，<br><figure class="highlight python"><figcaption><span>python-pyqt-qtimer3.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QLabel)</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QFont</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QTimer</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        self.counter = <span class="number">5</span></span><br><span class="line">        self.mylabel = QLabel(str(self.counter), self)</span><br><span class="line">        self.mylabel.setFont(QFont(<span class="string">'Arial'</span>, <span class="number">24</span>))</span><br><span class="line">        self.mylabel.move(<span class="number">60</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">        self.mytimer = QTimer(self)</span><br><span class="line">        self.mytimer.timeout.connect(self.onTimer)</span><br><span class="line">        self.mytimer.start(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onTimer</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.counter -= <span class="number">1</span></span><br><span class="line">        self.mylabel.setText(str(self.counter))</span><br><span class="line">        <span class="keyword">if</span> self.counter == <span class="number">0</span>:</span><br><span class="line">            self.mytimer.stop()</span><br><span class="line">            print(<span class="string">'time out'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qtimer/pyqt-qtimer-3.png" title="pyqt qtimer">  </p><p>以上就是 Python PyQt5 QTimer 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python PyQt5 QTimer 定時器用法與範例，QTimer 定時器可以作間隔一段時間就要執行任務的相關應用，例如時鐘、更新攝影機顯示影像或倒數計時器等等應用。  &lt;/p&gt;
&lt;p&gt;以下的 Python PyQt5 QTimer 用法與範
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
      <category term="PyQt" scheme="https://shengyu7697.github.io/tags/PyQt/"/>
    
  </entry>
  
  <entry>
    <title>Python PyQt5 QCheckBox 複選框用法與範例</title>
    <link href="https://shengyu7697.github.io/python-pyqt-qcheckbox/"/>
    <id>https://shengyu7697.github.io/python-pyqt-qcheckbox/</id>
    <published>2021-11-22T14:00:00.000Z</published>
    <updated>2021-11-30T13:17:24.555Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 將介紹 Python PyQt5 QCheckBox 複選框用法與範例，CheckBox 可以作一些多選項的確認功能，例如代辦清單這種應用。  </p><p>以下的 Python PyQt5 QCheckBox 用法與範例將分為這幾部分，  </p><ul><li>PyQt5 QCheckBox 基本用法  </li><li>PyQt5 設定 QCheckBox 預設的選項  </li><li>PyQt5 QCheckBox 綁定事件  </li></ul><h2><span id="pyqt5-qcheckbox-基本用法">PyQt5 QCheckBox 基本用法</span></h2><p>PyQt5 簡單建立 QCheckBox 的用法如下，在建構 QCheckBox 的同時帶入複選框的顯示文字，之後使用 move 移動到想要顯示的座標上，<br><figure class="highlight python"><figcaption><span>python-pyqt-qcheckbox.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QCheckBox)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        self.checkbox = QCheckBox(<span class="string">'PyQt5'</span>, self)</span><br><span class="line">        self.checkbox.move(<span class="number">60</span>, <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qcheckbox/pyqt-qcheckbox-1.png" title="pyqt qcheckbox">  </p><p>這邊示範建立多個 QCheckBox，並且不使用 move 手動排版的方式，而是透過放入 QVBoxLayout 來進行排版，<br><figure class="highlight python"><figcaption><span>python-pyqt-qcheckbox2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QVBoxLayout, QCheckBox)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.checkbox1 = QCheckBox(<span class="string">'apple'</span>, self)</span><br><span class="line">        layout.addWidget(self.checkbox1)</span><br><span class="line"></span><br><span class="line">        self.checkbox2 = QCheckBox(<span class="string">'banana'</span>, self)</span><br><span class="line">        layout.addWidget(self.checkbox2)</span><br><span class="line"></span><br><span class="line">        self.checkbox3 = QCheckBox(<span class="string">'orange'</span>, self)</span><br><span class="line">        layout.addWidget(self.checkbox3)</span><br><span class="line"></span><br><span class="line">        self.checkbox4 = QCheckBox(<span class="string">'tomato'</span>, self)</span><br><span class="line">        layout.addWidget(self.checkbox4)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qcheckbox/pyqt-qcheckbox-2.png" title="pyqt qcheckbox">  </p><h2><span id="pyqt5-設定-qcheckbox-預設的選項">PyQt5 設定 QCheckBox 預設的選項</span></h2><p>這邊介紹 PyQt5 設定 QCheckBox 預設的選項，建立 QCheckBox 後預設是不勾選的狀態，有兩種方式可以改變這個狀態，<br>一個是使用 <code>QCheckBox.toggle()</code>，toggle 就是原本勾選的會變成不勾選，在使用一次 toggle 的話原本不勾選的會變成勾選，<br>另一個方式是透過 <code>QCheckBox.setChecked()</code> 來設定 CheckBox 是否要勾選，True 為 勾選，False 為不勾選，<br><figure class="highlight python"><figcaption><span>python-pyqt-qcheckbox3.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QVBoxLayout, QCheckBox)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.checkbox1 = QCheckBox(<span class="string">'apple'</span>, self)</span><br><span class="line">        layout.addWidget(self.checkbox1)</span><br><span class="line"></span><br><span class="line">        self.checkbox2 = QCheckBox(<span class="string">'banana'</span>, self)</span><br><span class="line">        self.checkbox2.toggle()</span><br><span class="line">        layout.addWidget(self.checkbox2)</span><br><span class="line"></span><br><span class="line">        self.checkbox3 = QCheckBox(<span class="string">'orange'</span>, self)</span><br><span class="line">        self.checkbox3.setChecked(<span class="literal">False</span>)</span><br><span class="line">        layout.addWidget(self.checkbox3)</span><br><span class="line"></span><br><span class="line">        self.checkbox4 = QCheckBox(<span class="string">'tomato'</span>, self)</span><br><span class="line">        self.checkbox4.setChecked(<span class="literal">True</span>)</span><br><span class="line">        layout.addWidget(self.checkbox4)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>結果圖如下，<br><img src="/python-pyqt-qcheckbox/pyqt-qcheckbox-3.png" title="pyqt qcheckbox">  </p><h2><span id="pyqt5-qcheckbox-綁定事件">PyQt5 QCheckBox 綁定事件</span></h2><p>PyQt5 QCheckBox 綁定事件可以用 <code>QCheckBox.clicked.connect()</code>，或者是 <code>QCheckBox.stateChanged.connect()</code> 這兩種信號，將信號綁訂到對應處理的函式，這邊示範 <code>QCheckBox.clicked.connect()</code> 信號綁訂，  </p><p>而在處理函式裡可以使用 <code>QCheckBox.isChecked()</code> 來判斷該 CheckBox 是否被 check 了，<br><figure class="highlight python"><figcaption><span>python-pyqt-qcheckbox4.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QVBoxLayout, QCheckBox)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.checkbox1 = QCheckBox(<span class="string">'apple'</span>, self)</span><br><span class="line">        self.checkbox1.clicked.connect(self.onCheckBox1Click)</span><br><span class="line">        layout.addWidget(self.checkbox1)</span><br><span class="line"></span><br><span class="line">        self.checkbox2 = QCheckBox(<span class="string">'banana'</span>, self)</span><br><span class="line">        self.checkbox2.clicked.connect(self.onCheckBox2Click)</span><br><span class="line">        layout.addWidget(self.checkbox2)</span><br><span class="line"></span><br><span class="line">        self.checkbox3 = QCheckBox(<span class="string">'orange'</span>, self)</span><br><span class="line">        self.checkbox3.clicked.connect(self.onCheckBox3Click)</span><br><span class="line">        layout.addWidget(self.checkbox3)</span><br><span class="line"></span><br><span class="line">        self.checkbox4 = QCheckBox(<span class="string">'tomato'</span>, self)</span><br><span class="line">        self.checkbox4.clicked.connect(self.onCheckBox4Click)</span><br><span class="line">        layout.addWidget(self.checkbox4)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onCheckBox1Click</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.checkbox1.isChecked():</span><br><span class="line">            print(<span class="string">'apple is checked'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'apple is unchecked'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onCheckBox2Click</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.checkbox2.isChecked():</span><br><span class="line">            print(<span class="string">'banana is checked'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'banana is unchecked'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onCheckBox3Click</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.checkbox3.isChecked():</span><br><span class="line">            print(<span class="string">'orange is checked'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'orange is unchecked'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onCheckBox4Click</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.checkbox4.isChecked():</span><br><span class="line">            print(<span class="string">'tomato is checked'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'tomato is unchecked'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>當然你也可以這幾個 CheckBox 全部綁訂同一個事件處理函式，而在 <code>onCheckBoxClick()</code> 處理函式裡透過 <code>self.sender()</code> 的方式可以取得是哪一個 CheckBox，範例如下，<br><figure class="highlight python"><figcaption><span>python-pyqt-qcheckbox5.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QVBoxLayout, QCheckBox)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        self.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        self.checkbox1 = QCheckBox(<span class="string">'apple'</span>, self)</span><br><span class="line">        self.checkbox1.clicked.connect(self.onCheckBoxClick)</span><br><span class="line">        layout.addWidget(self.checkbox1)</span><br><span class="line"></span><br><span class="line">        self.checkbox2 = QCheckBox(<span class="string">'banana'</span>, self)</span><br><span class="line">        self.checkbox2.clicked.connect(self.onCheckBoxClick)</span><br><span class="line">        layout.addWidget(self.checkbox2)</span><br><span class="line"></span><br><span class="line">        self.checkbox3 = QCheckBox(<span class="string">'orange'</span>, self)</span><br><span class="line">        self.checkbox3.clicked.connect(self.onCheckBoxClick)</span><br><span class="line">        layout.addWidget(self.checkbox3)</span><br><span class="line"></span><br><span class="line">        self.checkbox4 = QCheckBox(<span class="string">'tomato'</span>, self)</span><br><span class="line">        self.checkbox4.clicked.connect(self.onCheckBoxClick)</span><br><span class="line">        layout.addWidget(self.checkbox4)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onCheckBoxClick</span><span class="params">(self)</span>:</span></span><br><span class="line">        checkbox = self.sender()</span><br><span class="line">        <span class="comment">#print(checkbox)</span></span><br><span class="line">        <span class="keyword">if</span> checkbox.isChecked():</span><br><span class="line">            print(checkbox.text() + <span class="string">' is checked'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(checkbox.text() + <span class="string">' is unchecked'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>以上就是 Python PyQt5 QCheckBox 複選框用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 將介紹 Python PyQt5 QCheckBox 複選框用法與範例，CheckBox 可以作一些多選項的確認功能，例如代辦清單這種應用。  &lt;/p&gt;
&lt;p&gt;以下的 Python PyQt5 QCheckBox 用法與範例將分為這幾部分，  &lt;/p&gt;
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
      <category term="PyQt" scheme="https://shengyu7697.github.io/tags/PyQt/"/>
    
  </entry>
  
  <entry>
    <title>Python PyQt5 QFileDialog 開啟檔案對話框</title>
    <link href="https://shengyu7697.github.io/python-pyqt-qfiledialog/"/>
    <id>https://shengyu7697.github.io/python-pyqt-qfiledialog/</id>
    <published>2021-11-18T14:00:00.000Z</published>
    <updated>2021-11-30T13:17:24.555Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介紹如何在 Python PyQt5 中開啟檔案對話框，開啟檔案對話框是要讓使用者可以自己選取要開啟的檔案，在 PyQt5 裡要開啟檔案對話框可以使用 QFileDialog，  </p><h2><span id="python-pyqt5-qfiledialog-開啟檔案對話框">Python PyQt5 QFileDialog 開啟檔案對話框</span></h2><p>Python PyQt5 要叫出開啟檔案對話框要使用 <code>QFileDialog.getOpenFileName()</code>，如果沒有父類視窗 Widget 的話，<code>QFileDialog.getOpenFileName()</code> 第一個引數 Widget 帶入可以使用 None，<br><figure class="highlight python"><figcaption><span>python-pyqt-qfiledialog-1.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QFileDialog)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    filename, filetype = QFileDialog.getOpenFileName(<span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> filename:</span><br><span class="line">        print(filename)</span><br><span class="line">        print(filetype)</span><br></pre></td></tr></table></figure></p><p><code>QFileDialog.getOpenFileName()</code> 如果有父類視窗 Widget 的話可以這樣寫，完整的 python 3 使用範例如下，<br><figure class="highlight python"><figcaption><span>python-pyqt-qfiledialog-2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QPushButton, QFileDialog)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        self.mybutton = QPushButton(<span class="string">'button'</span>, self)</span><br><span class="line">        self.mybutton.move(<span class="number">60</span>, <span class="number">50</span>)</span><br><span class="line">        self.mybutton.clicked.connect(self.onButtonClick)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onButtonClick</span><span class="params">(self)</span>:</span></span><br><span class="line">        filename, filetype = QFileDialog.getOpenFileName(self)</span><br><span class="line">        <span class="keyword">if</span> filename:</span><br><span class="line">            print(filename)</span><br><span class="line">            print(filetype)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>接著就把程式執行起來看看吧！程式啟動後會彈出一個開啟檔案的對話框，如下圖所示，<br><img src="/python-pyqt-qfiledialog/pyqt-qfiledialog-getopenfilename.png" width="480" title="pyqt qfiledialog getopenfilename"><br>接著選好檔案後，按下OK確定按鈕後 <code>getOpenFileName()</code> 就會回傳檔案路徑與檔案類型了。  </p><h2><span id="pyqt5-qfiledialog-判斷開啟檔案對話框回傳的檔案">PyQt5 QFileDialog 判斷開啟檔案對話框回傳的檔案</span></h2><p>通常程式會需要去判斷使用者是否選擇了一個合法的檔案或者是取消動作根本沒選檔案，<br>這邊示範最簡單的方法是接著判斷檔案是否為空，不為空的話才繼續做接下來的程式邏輯，<br><code>QFileDialog.getOpenFileName()</code> 會回傳的兩個 str，若取消的話會回傳兩個空的 str，<br>判斷 str 不為 empty 的寫法可以用 not 運算子，之前在<a href="/python-check-str-empty/" title="這篇">這篇</a>有介紹過， 這邊我們沒有使用到回傳的 filetype，所以用 <code>_</code> 不取得這個回傳值，  </p><p>實際上程式會寫成這樣，<br><figure class="highlight python"><figcaption><span>python-pyqt-qfiledialog-3.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QPushButton, QFileDialog)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        self.mybutton = QPushButton(<span class="string">'button'</span>, self)</span><br><span class="line">        self.mybutton.move(<span class="number">60</span>, <span class="number">50</span>)</span><br><span class="line">        self.mybutton.clicked.connect(self.onButtonClick)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onButtonClick</span><span class="params">(self)</span>:</span></span><br><span class="line">        filename, _ = QFileDialog.getOpenFileName(self)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> filename:</span><br><span class="line">            print(<span class="string">'filename is empty'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">with</span> open(filename, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                print(f.read())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><h2><span id="pyqt5-qfiledialog-設定開啟檔案對話框的標題">PyQt5 QFileDialog 設定開啟檔案對話框的標題</span></h2><p>QFileDialog 想要設定一些提示訊息在開啟檔案對話框的標題，來提示使用者到底要開什麼檔案的話，<br>可以在 <code>QFileDialog.getOpenFileName()</code> 的第二個引數裡指定顯示的標題，  </p><p>實際上就會寫成這樣，<br><figure class="highlight python"><figcaption><span>python-pyqt-qfiledialog-4.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QPushButton, QFileDialog)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        self.mybutton = QPushButton(<span class="string">'button'</span>, self)</span><br><span class="line">        self.mybutton.move(<span class="number">60</span>, <span class="number">50</span>)</span><br><span class="line">        self.mybutton.clicked.connect(self.onButtonClick)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onButtonClick</span><span class="params">(self)</span>:</span></span><br><span class="line">        filename, filetype = QFileDialog.getOpenFileName(self, <span class="string">'開啟檔案'</span>)</span><br><span class="line">        <span class="keyword">if</span> filename:</span><br><span class="line">            print(filename)</span><br><span class="line">            print(filetype)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>也可以用指定 caption 的方式，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename, filetype = QFileDialog.getOpenFileName(self, caption=<span class="string">'開啟檔案'</span>)</span><br></pre></td></tr></table></figure></p><h2><span id="pyqt5-qfiledialog-指定一個初始的目錄來開啟檔案">PyQt5 QFileDialog 指定一個初始的目錄來開啟檔案</span></h2><p>QFileDialog 通常會有個初始的目錄讓使用者去選，但預設的目錄可能離最終目標的目錄差很多層，這樣使用者要點很多次，很不方便，所以會給一個初始目錄，這邊示範用 <code>os.getcwd()</code> 取得當前目錄，<br><figure class="highlight python"><figcaption><span>python-pyqt-qfiledialog-5.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QPushButton, QFileDialog)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        self.mybutton = QPushButton(<span class="string">'button'</span>, self)</span><br><span class="line">        self.mybutton.move(<span class="number">60</span>, <span class="number">50</span>)</span><br><span class="line">        self.mybutton.clicked.connect(self.onButtonClick)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onButtonClick</span><span class="params">(self)</span>:</span></span><br><span class="line">        filename, filetype = QFileDialog.getOpenFileName(self, <span class="string">'開啟檔案'</span>, os.getcwd())</span><br><span class="line">        <span class="keyword">if</span> filename:</span><br><span class="line">            print(filename)</span><br><span class="line">            print(filetype)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>設定成家目錄的話可以使用 <code>os.path.expanduser(&#39;~&#39;)</code> 的方式，這方法 Windows 與 Linux 都適用，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filename, filetype = QFileDialog.getOpenFileName(self, <span class="string">'開啟檔案'</span>, </span><br><span class="line">                                                         os.path.expanduser(<span class="string">'~'</span>))</span><br></pre></td></tr></table></figure></p><p>你也可以設定一個絕對路徑，這邊示範 <code>/tmp/</code> 路徑，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filename, filetype = QFileDialog.getOpenFileName(self, <span class="string">'開啟檔案'</span>, <span class="string">'/tmp/'</span>)</span><br></pre></td></tr></table></figure></p><p>也可以用指定參數的寫法，像這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filename, filetype = QFileDialog.getOpenFileName(self, caption=<span class="string">'開啟檔案'</span>,</span><br><span class="line">                                                         directory=<span class="string">'C:/'</span>)</span><br></pre></td></tr></table></figure></p><h2><span id="pyqt5-qfiledialog-設定開啟的檔案類型">PyQt5 QFileDialog 設定開啟的檔案類型</span></h2><p>假設使用者只想開啟圖片類型的檔案，又不想看到一堆非圖片類型的檔案例如像 <code>.txt</code> 或其他類型，<br>否則使用者在選擇檔案時會找很慢，所以有些情況下會去設定開啟的檔案類型，這有助於加速使用者開啟檔案，<br>可以在 <code>QFileDialog.getOpenFileName()</code> 第四個引數裡指定要開啟的檔案類型，範例如下，<br><figure class="highlight python"><figcaption><span>python-pyqt-qfiledialog-6.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> (QApplication, QWidget, QPushButton, QFileDialog)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span><span class="params">(QWidget)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initUI</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.setWindowTitle(<span class="string">'my window'</span>)</span><br><span class="line">        self.setGeometry(<span class="number">50</span>, <span class="number">50</span>, <span class="number">200</span>, <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">        self.mybutton = QPushButton(<span class="string">'button'</span>, self)</span><br><span class="line">        self.mybutton.move(<span class="number">60</span>, <span class="number">50</span>)</span><br><span class="line">        self.mybutton.clicked.connect(self.onButtonClick)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">onButtonClick</span><span class="params">(self)</span>:</span></span><br><span class="line">        filename, filetype = QFileDialog.getOpenFileName(self, <span class="string">'開啟檔案'</span>, os.getcwd(),</span><br><span class="line">                                    <span class="string">'All Files (*);;JPEG Files (*.jpg)'</span>)</span><br><span class="line">        <span class="keyword">if</span> filename:</span><br><span class="line">            print(filename)</span><br><span class="line">            print(filetype)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    w = MyWidget()</span><br><span class="line">    w.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure></p><p>如果想開啟文字檔類型的話，可以這樣寫，<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filename, filetype = QFileDialog.getOpenFileName(self, <span class="string">'開啟檔案'</span>, os.getcwd(),</span><br><span class="line">                            <span class="string">'All Files (*);;Text Files (*.txt)'</span>)</span><br></pre></td></tr></table></figure></p><p>以上就是 Python PyQt5 QFileDialog 開啟檔案對話框用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇介紹如何在 Python PyQt5 中開啟檔案對話框，開啟檔案對話框是要讓使用者可以自己選取要開啟的檔案，在 PyQt5 裡要開啟檔案對話框可以使用 QFileDialog，  &lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;python-pyqt5-qfiledialog-開
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
      <category term="PyQt" scheme="https://shengyu7697.github.io/tags/PyQt/"/>
    
  </entry>
  
  <entry>
    <title>Python 3 個求最大值的方法</title>
    <link href="https://shengyu7697.github.io/python-find-max-value/"/>
    <id>https://shengyu7697.github.io/python-find-max-value/</id>
    <published>2021-11-17T14:00:00.000Z</published>
    <updated>2021-11-17T14:07:09.986Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介紹 Python 3 個求最大值的方法，分別為兩數求最大值、Python list 求最大值的方法以及 Python numpy 求最大值的方法。 </p><h2><span id="python-兩數求最大值的方法">Python 兩數求最大值的方法</span></h2><p>以下為 Python 兩數中求最大值的方法，要自己寫一個 max 函式也不是不行，只是如果想快速開發的話，使用 Python 內建提供的 <code>max()</code> 函式會方便快速些，<br><figure class="highlight python"><figcaption><span>python3-max-1.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">print(max(<span class="number">4</span>, <span class="number">6</span>))</span><br><span class="line">print(max(<span class="number">11</span>, <span class="number">7</span>))</span><br><span class="line">print(max(<span class="number">16.6</span>, <span class="number">18.1</span>))</span><br></pre></td></tr></table></figure></p><p>輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">6</span><br><span class="line">11</span><br><span class="line">18.1</span><br></pre></td></tr></table></figure></p><h2><span id="python-list-求最大值的方法">Python list 求最大值的方法</span></h2><p>這邊介紹 Python list 求最大值的方法，同時耶適用於三數求最大值，或者更多組數字以上求最大值，<br>python 內建提供的 <code>max()</code> 函式可以支援 list 作為輸入，所以這邊很快速地沿用上個範例的經驗，直接將 python 內建 <code>max()</code> 函式拿來用，<br><figure class="highlight python"><figcaption><span>python3-max-2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">mylist = [<span class="number">5</span>,<span class="number">3</span>,<span class="number">-5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">print(max(mylist))</span><br></pre></td></tr></table></figure></p><p>輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure></p><p>或者是自己用 for 迴圈自己寫一個求最大值的函式，<br><figure class="highlight python"><figcaption><span>python3-max-3.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">mylist = [<span class="number">5</span>,<span class="number">3</span>,<span class="number">-5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">max_val = mylist[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(mylist)):</span><br><span class="line">    <span class="keyword">if</span> mylist[i] &gt; max_val:</span><br><span class="line">        max_val = mylist[i]</span><br><span class="line">print(max_val)</span><br></pre></td></tr></table></figure></p><p>輸出結果同上，  </p><h2><span id="python-numpy-求最大值的方法">Python numpy 求最大值的方法</span></h2><p>這邊介紹 Python numpy 求最大值的方法，numpy 有個 <code>numpy.argmax()</code> 函式可以求最大值的索引值，所以要得到最大值的話就可以藉由最大值的索引值去取得，如下範例程式，<br><figure class="highlight python"><figcaption><span>python3-max-4.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.array([<span class="number">5</span>,<span class="number">3</span>,<span class="number">-5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">4</span>])</span><br><span class="line">print(arr)</span><br><span class="line"></span><br><span class="line">max_index = np.argmax(arr)</span><br><span class="line">print(max_index)</span><br><span class="line"></span><br><span class="line">max_value = arr[max_index]</span><br><span class="line">print(max_value)</span><br></pre></td></tr></table></figure></p><p>輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ 5  3 -5  6  2  4]</span><br><span class="line">3</span><br><span class="line">6</span><br></pre></td></tr></table></figure></p><p>以上就是 Python 3 個求最大值的方法的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇介紹 Python 3 個求最大值的方法，分別為兩數求最大值、Python list 求最大值的方法以及 Python numpy 求最大值的方法。 &lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;python-兩數求最大值的方法&quot;&gt;Python 兩數求最大值的方法&lt;/span&gt;
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python 2 種取得當前路徑的方法</title>
    <link href="https://shengyu7697.github.io/python-get-current-path/"/>
    <id>https://shengyu7697.github.io/python-get-current-path/</id>
    <published>2021-11-16T14:00:00.000Z</published>
    <updated>2021-11-17T14:07:10.026Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介紹 Python 2 種取得當前路徑的方法，分別是 Python os 模組以及 pathlib 模組。 </p><h2><span id="python-os-模組取得當前路徑的方法">Python os 模組取得當前路徑的方法</span></h2><p>這邊介紹 Python os 模組取得當前路徑的方法，使用 <code>os.getcwd()</code> 可以取得當前目錄的絕對路徑，程式碼如下，<br><figure class="highlight python"><figcaption><span>python3-get-current-path-1.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">print(os.getcwd())</span><br></pre></td></tr></table></figure></p><p>輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/shengyu</span><br></pre></td></tr></table></figure></p><h2><span id="python-pathlib-模組取得當前路徑的方法">Python pathlib 模組取得當前路徑的方法</span></h2><p>這邊介紹 Python pathlib 模組取得當前路徑的方法，使用 <code>pathlib.Path().absolute()</code> 可以取得當前目錄的絕對路徑，程式碼如下，<br><figure class="highlight python"><figcaption><span>python3-max-2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"></span><br><span class="line">print(pathlib.Path().absolute())</span><br></pre></td></tr></table></figure></p><p>輸出結果如下，跟上一個範例結果一致，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/shengyu</span><br></pre></td></tr></table></figure></p><p>以上就是 Python 2 種取得當前路徑的方法的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇介紹 Python 2 種取得當前路徑的方法，分別是 Python os 模組以及 pathlib 模組。 &lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;python-os-模組取得當前路徑的方法&quot;&gt;Python os 模組取得當前路徑的方法&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;這邊介
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShengYu Talk</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shengyu7697.github.io/"/>
  <updated>2024-06-07T09:51:40.209Z</updated>
  <id>https://shengyu7697.github.io/</id>
  
  <author>
    <name>ShengYu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ChatGPT 的 2 個替代工具：Google Gemini與Microsoft Copilot</title>
    <link href="https://shengyu7697.github.io/chatgpt-alternatives/"/>
    <id>https://shengyu7697.github.io/chatgpt-alternatives/</id>
    <published>2024-06-06T12:00:00.000Z</published>
    <updated>2024-06-07T09:51:40.209Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 來介紹 ChatGPT 的 2 個替代工具，在人工智能（AI）技術飛速發展的今天，聊天機器人已成為人們日常生活和工作中的重要工具。ChatGPT作為一個廣受歡迎的AI對話助手，已經幫助了無數使用者解決問題、產生內容和提供陪伴。然而，市面上還有其他強大的ChatGPT替代工具值得一試。Google Gemini和Microsoft Copilot被視為兩大替代工具，致力於為使用者提供智能化的文字產生和程式碼編寫服務。讓我們深入探討這兩款工具，了解它們的功能和適用情況。</p><h2><span id="google-gemini">Google Gemini</span></h2><p>Google Gemini是一款由Google開發的自然語言處理工具，旨在幫助使用者快速產生高質量的文字內容。憑藉其強大的語言理解和產生能力，Gemini能夠理解使用者的意圖並根據上下文產生相應的內容。主要功能包括：</p><ul><li><strong>自然語言產生</strong>：根據使用者提供的關鍵字和提示產生符合需求的文章、部落格或廣告文案。</li><li><strong>多語言支持</strong>：支持多種語言，適用於全球不同的使用者群。</li><li><strong>智慧型建議</strong>：根據使用者的輸入提供智慧型建議，改進文字內容的質量和流暢度。</li></ul><p>想要體驗Google Gemini的強大功能嗎？立即訪問以下連結：</p><ul><li><a href="https://gemini.google.com" rel="noopener" target="_blank">Google Gemini 網頁版</a></li><li>Google Gemini iOS版 尚未支援，要用<a href="https://support.google.com/gemini/answer/14554984?hl=zh-Hant&amp;co=GENIE.Platform%3DiOS" rel="noopener" target="_blank">Google App 應用程式中的 Gemini 分頁</a>的方式</li><li><a href="https://play.google.com/store/apps/details?id=com.google.android.apps.bard" rel="noopener" target="_blank">Google Gemini Android版</a></li></ul><h2><span id="microsoft-copilot">Microsoft Copilot</span></h2><p>Microsoft Copilot是一款由OpenAI和Microsoft合作開發的程式碼編寫助手，旨在幫助開發人員更快速、更智慧地編寫程式碼。基於大量的程式碼庫和人工智慧技術，Copilot能夠理解使用者的編碼需求並產生相應的程式碼。主要功能包括：</p><ul><li><strong>程式碼產生</strong>：根據使用者需求產生高質量的程式碼片段，提高開發效率。</li><li><strong>智慧型提示</strong>：根據編碼上下文提供智慧型提示和建議，幫助使用者理解和處理程式碼。</li><li><strong>版本控制整合</strong>：與常用的版本控制系統（如GitHub）整合，使開發流程更加流暢。</li></ul><p>想要體驗Microsoft Copilot的強大功能嗎？立即訪問以下連結：</p><ul><li><a href="https://copilot.microsoft.com" rel="noopener" target="_blank">Microsoft Copilot 網頁版</a></li><li><a href="https://apps.apple.com/tw/app/microsoft-copilot/id6472538445" rel="noopener" target="_blank">Microsoft Copilot iOS版</a></li><li><a href="https://play.google.com/store/apps/details?id=com.microsoft.copilot" rel="noopener" target="_blank">Microsoft Copilot Android版</a></li></ul><p>這兩款工具都代表了人工智慧技術在文字產生和程式碼編寫方面的最新發展，讓使用者能夠更有效率地完成工作。無論是Google Gemini還是Microsoft Copilot，都值得開發者和內容創作者的深入研究和使用。</p><h2><span id="總結">總結</span></h2><p>最後總結一下，不論你是尋求更強大的資訊取得能力還是更智能的對話體驗，Google Gemini和Microsoft Copilot都是優秀的ChatGPT替代品。它們各自具備獨特的優勢，能夠滿足不同使用者的需求。</p><p>選擇適合你的AI對話助手，可以大大提升你的工作效率和生活質量。希望本文的介紹能幫助你找到最適合的工具。</p><p>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/why-programmers-should-utilize-chatgpt/" title="善用ChatGPT：程式人員提升效率和技能的必備工具">善用ChatGPT：程式人員提升效率和技能的必備工具</a><br><a href="/why-google-search-engine-remains-essential-in-the-age-of-chatgpt/" title="在ChatGPT時代，Google搜尋引擎仍然不可或缺的原因">在ChatGPT時代，Google搜尋引擎仍然不可或缺的原因</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 來介紹 ChatGPT 的 2 個替代工具，在人工智能（AI）技術飛速發展的今天，聊天機器人已成為人們日常生活和工作中的重要工具。ChatGPT作為一個廣受歡迎的AI對話助手，已經幫助了無數使用者解決問題、產生內容和提供陪伴。然而，市面上還有其他強大的
      
    
    </summary>
    
    
      <category term="ChatGPT" scheme="https://shengyu7697.github.io/tags/ChatGPT/"/>
    
      <category term="AI" scheme="https://shengyu7697.github.io/tags/AI/"/>
    
      <category term="Google Gemini" scheme="https://shengyu7697.github.io/tags/Google-Gemini/"/>
    
      <category term="Microsoft Copilot" scheme="https://shengyu7697.github.io/tags/Microsoft-Copilot/"/>
    
  </entry>
  
  <entry>
    <title>Python subprocess.Popen 用法與範例</title>
    <link href="https://shengyu7697.github.io/python-subprocess.popen/"/>
    <id>https://shengyu7697.github.io/python-subprocess.popen/</id>
    <published>2024-06-05T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.969Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python subprocess.Popen 用法與範例，在進行 Python 程式開發時，常常需要與外部程式進行互動，例如執行系統指令、啟動外部應用程式或執行其他腳本。在這些情境下，Python 的 <code>subprocess</code> 模組是非常有用的工具，其中的 <code>subprocess.Popen</code> 提供了強大的功能和靈活性，讓我們能夠更精細地控制子行程。本文將詳盡介紹 <code>subprocess.Popen</code> 的用途，並提供簡單與進階範例，幫助你掌握這一功能。</p><h2><span id="什麼是-subprocesspopen">什麼是 subprocess.Popen？</span></h2><p><code>subprocess.Popen</code> 是 Python 的 <code>subprocess</code> 模組中的一個類，用於啟動和管理子行程。相比於 <code>subprocess.run</code> 和 <code>subprocess.call</code> 等函式，<code>Popen</code> 提供了更大的靈活性，允許我們：</p><ol><li>執行外部指令或腳本。</li><li>在執行指令時進行進階的 I/O 操作，如管道通信。</li><li>取得子行程的回傳碼。</li><li>在非同步或同步模式下執行子行程。</li></ol><h2><span id="為什麼使用-subprocesspopen">為什麼使用 subprocess.Popen？</span></h2><p>使用 <code>subprocess.Popen</code> 有以下幾個主要優點：</p><ul><li><strong>高靈活性</strong>：允許我們對子行程的標準輸入、輸出和錯誤流進行精細控制。</li><li><strong>非阻塞操作</strong>：可以非同步執行子行程，避免阻塞主程式的執行。</li><li><strong>管道通信</strong>：支持將多個子行程的輸出和輸入進行管道連結，實現複雜的資料處理流程。</li></ul><h2><span id="基本範例">基本範例</span></h2><p>以下是一個基本範例，示範如何使用 <code>subprocess.Popen</code> 執行一個簡單的指令並取得其輸出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立一個子行程，執行 `ls` 指令（列出當前目錄中的檔案和資料夾）</span></span><br><span class="line">process = subprocess.Popen([<span class="string">'ls'</span>], stdout=subprocess.PIPE, stderr=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 讀取標準輸出和標準錯誤</span></span><br><span class="line">stdout, stderr = process.communicate()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將標準輸出和標準錯誤的結果解碼為字串並打印</span></span><br><span class="line">print(<span class="string">"標準輸出:"</span>)</span><br><span class="line">print(stdout.decode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> stderr:</span><br><span class="line">    print(<span class="string">"標準錯誤:"</span>)</span><br><span class="line">    print(stderr.decode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取得子行程的回傳碼</span></span><br><span class="line">return_code = process.returncode</span><br><span class="line">print(<span class="string">f"回傳碼: <span class="subst">&#123;return_code&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><p>在這個範例中，我們使用 <code>subprocess.Popen</code> 執行了 <code>ls</code> 指令，並透過 <code>communicate()</code> 方法讀取了標準輸出和標準錯誤。最終，我們還取得了子行程的回傳碼。</p><h2><span id="進階範例">進階範例</span></h2><p>下面是一個進階範例，示範如何使用 <code>subprocess.Popen</code> 進行管道通信。這個範例中，我們首先使用 <code>seq</code> 指令產生一個數字清單，然後使用 <code>grep</code> 指令過濾掉奇數。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="comment"># 執行第一個子行程，產生一個數字清單</span></span><br><span class="line">process1 = subprocess.Popen([<span class="string">'seq'</span>, <span class="string">'1'</span>, <span class="string">'10'</span>], stdout=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 執行第二個子行程，過濾掉奇數</span></span><br><span class="line">process2 = subprocess.Popen([<span class="string">'grep'</span>, <span class="string">'-v'</span>, <span class="string">'1$'</span>], stdin=process1.stdout, stdout=subprocess.PIPE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 關閉 process1 的 stdout 以避免死鎖</span></span><br><span class="line">process1.stdout.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 讀取第二個子行程的標準輸出</span></span><br><span class="line">output, _ = process2.communicate()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 將結果解碼為字串並打印</span></span><br><span class="line">print(<span class="string">"過濾後的數字:"</span>)</span><br><span class="line">print(output.decode())</span><br></pre></td></tr></table></figure><p>在這個範例中，兩個子行程透過管道進行通信。<code>process1</code> 產生了一個數字清單，並將輸出透過管道傳遞給 <code>process2</code>，<code>process2</code> 過濾掉奇數並輸出結果。</p><h2><span id="關鍵參數">關鍵參數</span></h2><p>在使用 <code>subprocess.Popen</code> 時，有一些關鍵參數需要了解：</p><ul><li><code>args</code>: 要執行的指令和參數，通常以清單形式提供。</li><li><code>stdin</code>, <code>stdout</code>, <code>stderr</code>: 用於設定子行程的標準輸入、輸出和錯誤流，可以是 <code>subprocess.PIPE</code>、檔案物件或 <code>None</code>。</li><li><code>shell</code>: 如果為 <code>True</code>，指令會透過 shell 執行，允許使用 shell 特性（如管道和重導向）。</li><li><code>cwd</code>: 設定子行程的當前工作目錄。</li><li><code>env</code>: 設定子行程的環境變數。</li></ul><h2><span id="小結">小結</span></h2><p><code>subprocess.Popen</code> 是一個功能強大且靈活的工具，能夠滿足從簡單指令執行到複雜行程間通信的各種需求。無論你是需要簡單地執行一個外部指令，還是需要在多個子行程間進行資料傳遞，<code>subprocess.Popen</code> 都能提供合適的解決方案。</p><p>透過上述範例和說明，相信你已經對 <code>subprocess.Popen</code> 有了一定的了解和掌握。希望這些資訊能夠幫助你在未來的開發工作中更好地使用 Python 進行行程管理。</p><p>以上就是 Python subprocess.Popen 用法與範例的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python subprocess.Popen 用法與範例，在進行 Python 程式開發時，常常需要與外部程式進行互動，例如執行系統指令、啟動外部應用程式或執行其他腳本。在這些情境下，Python 的 &lt;code&gt;subprocess&lt;/cod
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>善用ChatGPT：程式人員提升效率和技能的必備工具</title>
    <link href="https://shengyu7697.github.io/why-programmers-should-utilize-chatgpt/"/>
    <id>https://shengyu7697.github.io/why-programmers-should-utilize-chatgpt/</id>
    <published>2024-06-04T12:00:00.000Z</published>
    <updated>2024-06-07T09:51:40.209Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 來聊聊為什麼程式人員應該善用 ChatGPT，隨著人工智慧技術的迅速發展，ChatGPT已成為許多行業中的重要工具，特別是在程式開發領域。程式人員利用ChatGPT，不僅能提升工作效率，還能迅速提升技能。這篇文章將詳細探討程式人員為什麼應該善用ChatGPT，並說明其帶來的多種好處。</p><h2><span id="1-快速解決問題">1. 快速解決問題</span></h2><p>程式人員在編碼過程中經常遇到各種技術問題和錯誤，從簡單的語法錯誤到複雜的邏輯問題。這些問題有時會花費大量時間來解決，特別是涉及不熟悉的技術或工具時。ChatGPT能夠即時提供解決方案或建議，幫助程式人員快速解決問題，從而節省時間和精力。</p><h3><span id="範例">範例：</span></h3><p>假設你在開發一個Python應用程式時遇到了一個錯誤訊息，不知道如何解決。你可以向ChatGPT描述這個錯誤，ChatGPT會根據其龐大的知識庫和上下文理解，提供可能的解決方案。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">'Name'</span>: [<span class="string">'John'</span>, <span class="string">'Anna'</span>, <span class="string">'Peter'</span>, <span class="string">'Linda'</span>],</span><br><span class="line">        <span class="string">'Age'</span>: [<span class="number">28</span>, <span class="number">24</span>, <span class="number">35</span>, <span class="number">32</span>]&#125;</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出現錯誤：KeyError: 'Name'</span></span><br><span class="line">average_age = df[<span class="string">'name'</span>].mean()</span><br></pre></td></tr></table></figure><p>如果程式人員將這個錯誤訊息輸入到ChatGPT，ChatGPT會指出「KeyError」的原因是因為列名大小寫不對應，應該將<code>df[&#39;name&#39;]</code>改為<code>df[&#39;Name&#39;]</code>。</p><h2><span id="2-程式碼產生和優化">2. 程式碼產生和優化</span></h2><p>程式人員經常需要撰寫大量的程式碼，包括一些重複性的任務。ChatGPT可以產生程式碼片段，幫助程式人員完成特定任務。此外，ChatGPT還能提供程式碼優化建議，幫助提高程式碼的效率和可讀性。</p><h3><span id="程式碼產生範例">程式碼產生範例：</span></h3><p>假設你需要一段Python程式碼來讀取CSV檔案並計算每列的平均值，ChatGPT可以直接產生所需的程式碼：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculate_column_averages</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    df = pd.read_csv(file_path)</span><br><span class="line">    averages = df.mean()</span><br><span class="line">    <span class="keyword">return</span> averages</span><br><span class="line"></span><br><span class="line">file_path = <span class="string">'data.csv'</span></span><br><span class="line">averages = calculate_column_averages(file_path)</span><br><span class="line">print(averages)</span><br></pre></td></tr></table></figure><h3><span id="程式碼優化範例">程式碼優化範例：</span></h3><p>如果你有一段需要優化的程式碼，可以向ChatGPT尋求建議。假設你有以下的排序函式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    n = len(arr)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, n-i<span class="number">-1</span>):</span><br><span class="line">            <span class="keyword">if</span> arr[j] &gt; arr[j+<span class="number">1</span>]:</span><br><span class="line">                arr[j], arr[j+<span class="number">1</span>] = arr[j+<span class="number">1</span>], arr[j]</span><br><span class="line">    <span class="keyword">return</span> arr</span><br></pre></td></tr></table></figure><p>ChatGPT可能會建議你使用更高效的排序演算法，例如快速排序（QuickSort）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(arr)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(arr) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> arr</span><br><span class="line">    pivot = arr[len(arr) // <span class="number">2</span>]</span><br><span class="line">    left = [x <span class="keyword">for</span> x <span class="keyword">in</span> arr <span class="keyword">if</span> x &lt; pivot]</span><br><span class="line">    middle = [x <span class="keyword">for</span> x <span class="keyword">in</span> arr <span class="keyword">if</span> x == pivot]</span><br><span class="line">    right = [x <span class="keyword">for</span> x <span class="keyword">in</span> arr <span class="keyword">if</span> x &gt; pivot]</span><br><span class="line">    <span class="keyword">return</span> quick_sort(left) + middle + quick_sort(right)</span><br></pre></td></tr></table></figure><h2><span id="3-學習和提升技能">3. 學習和提升技能</span></h2><p>在科技快速發展的時代，程式人員需要不斷學習新語言、框架或技術。ChatGPT可以作為一個學習輔助工具，提供教學材料、範例程式碼和概念解釋，幫助程式人員快速上手新技能。</p><h3><span id="學習新語言範例">學習新語言範例：</span></h3><p>如果你是一個Python程式員，現在需要學習JavaScript，ChatGPT可以提供基礎的語法介紹和範例程式碼：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JavaScript 基本語法範例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 變數宣告</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> y = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函式宣告</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 呼叫函式</span></span><br><span class="line"><span class="keyword">let</span> result = add(x, y);</span><br><span class="line"><span class="built_in">console</span>.log(result);  <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><h3><span id="學習新框架範例">學習新框架範例：</span></h3><p>假設你想學習一個新的前端框架如React，ChatGPT可以提供基礎範例並解釋其核心概念：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// React 基本範例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;h1&gt;Hello, World!<span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;App /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><h2><span id="4-提升生產力">4. 提升生產力</span></h2><p>透過自動化重複性和單調的任務，ChatGPT可以幫助程式人員將更多時間投入到創造性和更具挑戰性的工作中，從而提升整體生產力。例如，自動產生測試用例、自動化部署腳本等都可以由ChatGPT來幫助完成。</p><h3><span id="自動產生測試用例">自動產生測試用例：</span></h3><p>假設你有一個函式需要測試：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a * b</span><br></pre></td></tr></table></figure><p>你可以讓ChatGPT幫助產生測試用例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestMultiply</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_positive_numbers</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.assertEqual(multiply(<span class="number">3</span>, <span class="number">4</span>), <span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_negative_numbers</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.assertEqual(multiply(<span class="number">-1</span>, <span class="number">-1</span>), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_positive_and_negative</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.assertEqual(multiply(<span class="number">-1</span>, <span class="number">1</span>), <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_zero</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.assertEqual(multiply(<span class="number">0</span>, <span class="number">5</span>), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><h2><span id="5-協助文件和報告撰寫">5. 協助文件和報告撰寫</span></h2><p>撰寫技術文件、API說明和項目報告是程式人員的重要工作之一，但這通常是一項繁瑣的任務。ChatGPT可以幫助自動產生這些文件，使程式人員能更專注於編碼本身。</p><h3><span id="api-文件產生範例">API 文件產生範例：</span></h3><p>假設你有一個簡單的API，ChatGPT可以幫助產生其文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">API 文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">函式：multiply</span></span><br><span class="line"><span class="string">描述：該函式接收兩個參數，回傳它們的乘積。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">參數：</span></span><br><span class="line"><span class="string">    - a (int): 第一個乘數。</span></span><br><span class="line"><span class="string">    - b (int): 第二個乘數。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">回傳值：</span></span><br><span class="line"><span class="string">    - int: 兩個參數的乘積。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">使用範例：</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; multiply(2, 3)</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a * b</span><br></pre></td></tr></table></figure><h2><span id="6-協作和溝通">6. 協作和溝通</span></h2><p>在團隊合作中，清晰的溝通至關重要。ChatGPT可以幫助解釋複雜的技術概念，促進團隊成員之間的溝通和理解。例如，在討論技術方案時，ChatGPT可以幫助快速產生各種解決方案的優缺點，供團隊參考。</p><h3><span id="技術方案討論範例">技術方案討論範例：</span></h3><p>假設團隊在討論應該使用哪種資料庫技術，ChatGPT可以提供MySQL和MongoDB的優缺點比較：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">MySQL 優點：</span><br><span class="line">    - 關聯資料庫，支持SQL標準。</span><br><span class="line">    - 適合需要多表聯合查詢的應用。</span><br><span class="line">    - 廣泛使用，社群和支持豐富。</span><br><span class="line"></span><br><span class="line">MySQL 缺點：</span><br><span class="line">    - 結構化資料要求高，不適合頻繁變更的資料結構。</span><br><span class="line">    - 水平擴展性較差。</span><br><span class="line"></span><br><span class="line">MongoDB 優點：</span><br><span class="line">    - 非關聯資料庫，支持靈活的文件模型。</span><br><span class="line">    - 高水平擴展性，適合大資料量和高併發應用。</span><br><span class="line">    - 支持巢狀資料和靈活的結構變更。</span><br><span class="line"></span><br><span class="line">MongoDB 缺點：</span><br><span class="line">    - 不支持SQL查詢語言，學習曲線較陡。</span><br><span class="line">    - 事務支持較弱，不適合複雜事務操作。</span><br></pre></td></tr></table></figure><h2><span id="7-模擬面試和技術測試">7. 模擬面試和技術測試</span></h2><p>程式人員在求職過程中，技術面試是必不可少的一環。ChatGPT可以幫助模擬技術面試問題，進行自我測試和練習，為求職做好充分準備。</p><h3><span id="演算法題模擬">演算法題模擬：</span></h3><p>假設你需要練習一個常見的演算法題：反轉一個單鏈表。ChatGPT可以提供這類題目的詳細解答和程式碼實現：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">問題：反轉一個單鏈表。</span><br><span class="line">給定一個單鏈表的頭節點，將鏈表反轉並回傳反轉後的頭節點。</span><br><span class="line"></span><br><span class="line">範例：</span><br><span class="line">輸入：1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; NULL</span><br><span class="line">輸出：5 -&gt; 4 -&gt; 3 -&gt; 2 -&gt; 1 -&gt; NULL</span><br></pre></td></tr></table></figure><p>ChatGPT的解答和程式碼實現：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, val=<span class="number">0</span>, next=None)</span>:</span></span><br><span class="line">        self.val = val</span><br><span class="line">        self.next = next</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_list</span><span class="params">(head)</span>:</span></span><br><span class="line">    prev = <span class="literal">None</span></span><br><span class="line">    current = head</span><br><span class="line">    <span class="keyword">while</span> current:</span><br><span class="line">        next_node = current.next</span><br><span class="line">        current.next = prev</span><br><span class="line">        prev = current</span><br><span class="line">        current = next_node</span><br><span class="line">    <span class="keyword">return</span> prev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 測試</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_list</span><span class="params">(head)</span>:</span></span><br><span class="line">    current = head</span><br><span class="line">    <span class="keyword">while</span> current:</span><br><span class="line">        print(current.val, end=<span class="string">" -&gt; "</span>)</span><br><span class="line">        current = current.next</span><br><span class="line">    print(<span class="string">"NULL"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立鏈表 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; NULL</span></span><br><span class="line">head = ListNode(<span class="number">1</span>, ListNode(<span class="number">2</span>, ListNode(<span class="number">3</span>, ListNode(<span class="number">4</span>, ListNode(<span class="number">5</span>)))))</span><br><span class="line">print(<span class="string">"原始鏈表："</span>)</span><br><span class="line">print_list(head)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反轉鏈表</span></span><br><span class="line">reversed_head = reverse_list(head)</span><br><span class="line">print(<span class="string">"反轉後的鏈表："</span>)</span><br><span class="line">print_list(reversed_head)</span><br></pre></td></tr></table></figure><h3><span id="系統設計題模擬">系統設計題模擬：</span></h3><p>系統設計是技術面試中的一個重要部分，ChatGPT可以幫助你理解和練習這類問題。例如，設計一個URL縮短服務：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">問題：設計一個URL縮短服務（類似於bit.ly）。</span><br><span class="line">要求：</span><br><span class="line">1. 支持將長URL轉換為短URL。</span><br><span class="line">2. 短URL應該是唯一的。</span><br><span class="line">3. 能夠根據短URL還原長URL。</span><br><span class="line">4. 需考慮高併發和高可用性。</span><br><span class="line"></span><br><span class="line">設計考量：</span><br><span class="line">- 如何產生唯一的短URL。</span><br><span class="line">- 如何儲存和檢索URL映射。</span><br><span class="line">- 如何處理大量請求。</span><br></pre></td></tr></table></figure><p>ChatGPT的回答可能包括：</p><ul><li>使用哈希函式產生短URL。</li><li>使用資料庫（如NoSQL）儲存URL映射。</li><li>針對高併發，考慮使用分佈式系統和快取機制。</li></ul><p>延伸閱讀：<a href="/sql-vs-nosql-database/" title="SQL 與 NoSQL 資料庫的差異：深入了解及選擇指南">SQL 與 NoSQL 資料庫的差異：深入了解及選擇指南</a>  </p><h3><span id="行為面試問題模擬">行為面試問題模擬：</span></h3><p>除了技術問題，行為面試問題也很常見。ChatGPT可以幫助模擬這類問題，幫助你組織答案。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">問題：請描述一個你曾經遇到的挑戰並如何解決的例子。</span><br></pre></td></tr></table></figure><p>ChatGPT建議的回答結構：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 描述挑戰：在某個項目中，面臨了一個技術瓶頸，導致項目進度延遲。</span><br><span class="line">2. 採取的行動：我組織了一個小組，深入研究問題，並提出了幾個可能的解決方案。最終，我們決定重構部分程式碼並優化演算法。</span><br><span class="line">3. 結果：重構和優化後，性能提高了30%，項目按時完成，並獲得了客戶的高度評價。</span><br></pre></td></tr></table></figure><h2><span id="8-整合與自動化工作流">8. 整合與自動化工作流</span></h2><p>ChatGPT可以幫助程式人員整合和自動化各種工作流，從而提高整體開發效率。例如，ChatGPT可以用來自動化產生設定檔案、處理日誌檔案、部署應用程式等任務。</p><h3><span id="自動化設定檔案產生範例">自動化設定檔案產生範例：</span></h3><p>假設你需要產生一個Docker設定檔案，可以向ChatGPT請求幫助：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">問題：產生一個基本的Dockerfile來部署Python應用。</span><br></pre></td></tr></table></figure><p>ChatGPT的回應：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本的Dockerfile</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用官方的Python映像</span></span><br><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.9</span>-slim</span><br><span class="line"></span><br><span class="line"><span class="comment"># 設定工作目錄</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 複製當前目錄的內容到容器中</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安裝所需的Python包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install --no-cache-dir -r requirements.txt</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定容器啟動時執行的指令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"python"</span>, <span class="string">"app.py"</span>]</span></span><br></pre></td></tr></table></figure><h3><span id="自動化日誌檔案處理範例">自動化日誌檔案處理範例：</span></h3><p>假設你需要處理應用程式產生的大量日誌檔案，可以向ChatGPT尋求建議和程式碼：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">問題：撰寫一個Python腳本來壓縮並備份日誌檔案。</span><br></pre></td></tr></table></figure><p>ChatGPT的回應：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">backup_logs</span><span class="params">(logs_dir, backup_dir)</span>:</span></span><br><span class="line">    <span class="comment"># 建立備份目錄（如果不存在）</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(backup_dir):</span><br><span class="line">        os.makedirs(backup_dir)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 取得當前日期</span></span><br><span class="line">    current_date = datetime.datetime.now().strftime(<span class="string">"%Y-%m-%d"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 壓縮並備份日誌檔案</span></span><br><span class="line">    <span class="keyword">for</span> log_file <span class="keyword">in</span> os.listdir(logs_dir):</span><br><span class="line">        <span class="keyword">if</span> log_file.endswith(<span class="string">".log"</span>):</span><br><span class="line">            file_path = os.path.join(logs_dir, log_file)</span><br><span class="line">            backup_path = os.path.join(backup_dir, <span class="string">f"<span class="subst">&#123;log_file&#125;</span>.<span class="subst">&#123;current_date&#125;</span>.zip"</span>)</span><br><span class="line">            shutil.make_archive(backup_path, <span class="string">'zip'</span>, logs_dir, log_file)</span><br><span class="line">            os.remove(file_path)  <span class="comment"># 刪除原始日誌檔案</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用範例</span></span><br><span class="line">logs_dir = <span class="string">"/path/to/logs"</span></span><br><span class="line">backup_dir = <span class="string">"/path/to/backup"</span></span><br><span class="line">backup_logs(logs_dir, backup_dir)</span><br></pre></td></tr></table></figure><h2><span id="9-自動產生檔案和資料分析報告">9. 自動產生檔案和資料分析報告</span></h2><p>在需要產生各種檔案或分析報告時，ChatGPT可以大幅減少重複性工作，讓程式人員更專注於核心任務。例如，產生Excel報表、PDF檔案、資料分析報告等。</p><h3><span id="自動產生excel報表範例">自動產生Excel報表範例：</span></h3><p>假設你需要從資料庫匯出資料並產生Excel報表，可以請ChatGPT幫助：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">問題：撰寫一個Python腳本，從資料庫匯出資料並產生Excel報表。</span><br></pre></td></tr></table></figure><p>ChatGPT的回應：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">export_to_excel</span><span class="params">(db_path, query, excel_path)</span>:</span></span><br><span class="line">    <span class="comment"># 連接到資料庫</span></span><br><span class="line">    conn = sqlite3.connect(db_path)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 執行查詢並將結果轉換為DataFrame</span></span><br><span class="line">    df = pd.read_sql_query(query, conn)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 將DataFrame匯出為Excel檔案</span></span><br><span class="line">    df.to_excel(excel_path, index=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 關閉資料庫連接</span></span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用範例</span></span><br><span class="line">db_path = <span class="string">"database.db"</span></span><br><span class="line">query = <span class="string">"SELECT * FROM table_name"</span></span><br><span class="line">excel_path = <span class="string">"output.xlsx"</span></span><br><span class="line">export_to_excel(db_path, query, excel_path)</span><br></pre></td></tr></table></figure><h2><span id="10-建立自定義工具和擴展">10. 建立自定義工具和擴展</span></h2><p>程式人員可以使用ChatGPT來開發自定義工具和擴展，以滿足特定需求。例如，開發自動化程式碼審查工具、程式碼格式化工具或其他有助於提升開發效率的擴展。</p><h3><span id="自動化程式碼審查工具範例">自動化程式碼審查工具範例：</span></h3><p>假設你需要開發一個自動化程式碼審查工具，可以向ChatGPT尋求幫助：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">問題：撰寫一個Python腳本，進行基本的程式碼風格檢查。</span><br></pre></td></tr></table></figure><p>ChatGPT的回應：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_code_style</span><span class="params">(file_path)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(file_path, <span class="string">'r'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        lines = file.readlines()</span><br><span class="line">    </span><br><span class="line">    errors = []</span><br><span class="line">    <span class="keyword">for</span> i, line <span class="keyword">in</span> enumerate(lines):</span><br><span class="line">        <span class="comment"># 檢查行長度</span></span><br><span class="line">        <span class="keyword">if</span> len(line) &gt; <span class="number">79</span>:</span><br><span class="line">            errors.append((i+<span class="number">1</span>, <span class="string">"Line exceeds 79 characters"</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 檢查行尾空白</span></span><br><span class="line">        <span class="keyword">if</span> re.search(<span class="string">r'\s+$'</span>, line):</span><br><span class="line">            errors.append((i+<span class="number">1</span>, <span class="string">"Trailing whitespace"</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> errors</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用範例</span></span><br><span class="line">file_path = <span class="string">"example.py"</span></span><br><span class="line">errors = check_code_style(file_path)</span><br><span class="line"><span class="keyword">for</span> line_num, error <span class="keyword">in</span> errors:</span><br><span class="line">    print(<span class="string">f"Line <span class="subst">&#123;line_num&#125;</span>: <span class="subst">&#123;error&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><h2><span id="總結">總結</span></h2><p>總結來說，善用 ChatGPT 可以幫助程式人員更高效地工作，學習新技術，改進程式碼品質，並促進團隊協作和知識共享。這些優勢使 ChatGPT 成為程式人員不可或缺的工具。</p><p>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/why-google-search-engine-remains-essential-in-the-age-of-chatgpt/" title="在ChatGPT時代，Google搜尋引擎仍然不可或缺的原因">在ChatGPT時代，Google搜尋引擎仍然不可或缺的原因</a><br><a href="/chatgpt-alternatives/" title="ChatGPT 的 2 個替代工具：Google Gemini與Microsoft Copilot">ChatGPT 的 2 個替代工具：Google Gemini與Microsoft Copilot</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 來聊聊為什麼程式人員應該善用 ChatGPT，隨著人工智慧技術的迅速發展，ChatGPT已成為許多行業中的重要工具，特別是在程式開發領域。程式人員利用ChatGPT，不僅能提升工作效率，還能迅速提升技能。這篇文章將詳細探討程式人員為什麼應該善用Chat
      
    
    </summary>
    
    
      <category term="軟體開發" scheme="https://shengyu7697.github.io/tags/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC/"/>
    
      <category term="ChatGPT" scheme="https://shengyu7697.github.io/tags/ChatGPT/"/>
    
      <category term="AI" scheme="https://shengyu7697.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>深入了解 Python subprocess 模組用法與實用範例</title>
    <link href="https://shengyu7697.github.io/python-subprocess/"/>
    <id>https://shengyu7697.github.io/python-subprocess/</id>
    <published>2024-06-03T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.969Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Python subprocess 模組用法與範例，在開發 Python 程式時，您是否曾經遇到需要執行外部指令或腳本的情況？無論是執行系統指令、呼叫其他應用程式，還是與外部行程進行通訊，Python 的 <code>subprocess</code> 模組都能滿足您的需求。本文將詳細介紹 <code>subprocess</code> 模組的用途，並透過一些實用範例來幫助您更好地理解和應用這個強大的工具。</p><h2><span id="為什麼選擇-subprocess-模組">為什麼選擇 subprocess 模組？</span></h2><p><code>subprocess</code> 模組的主要用途在於產生新的行程、連接到它們的輸入/輸出/錯誤管道，並取得它們的回傳狀態。這在自動化任務、腳本化系統管理以及構建複雜的應用程式時非常有用。</p><ol><li><strong>執行外部指令</strong>：您可以直接從 Python 程式中執行系統指令或其他腳本。</li><li><strong>管道通訊</strong>：透過標準輸入、輸出和錯誤流與外部指令進行通訊。</li><li><strong>捕獲指令結果</strong>：將外部指令的輸出捕獲到 Python 程式中，以便進一步處理。</li><li><strong>處理回傳碼</strong>：檢查外部指令的回傳碼，以判斷其成功與否，並進行相應的錯誤處理。</li></ol><p>接下來，我們將透過幾個實際範例來介紹 <code>subprocess</code> 模組的基本用法。</p><h2><span id="1-執行簡單指令">1. 執行簡單指令</span></h2><p>以下程式碼展示了如何使用 <code>subprocess.run</code> 執行一個簡單的系統指令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">result = subprocess.run([<span class="string">'ls'</span>, <span class="string">'-l'</span>], capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line">print(result.stdout)</span><br></pre></td></tr></table></figure><p>在這段程式碼中，我們執行了 <code>ls -l</code> 指令來列出當前目錄中的檔案。<code>capture_output=True</code> 表示捕獲指令的標準輸出，而 <code>text=True</code> 則將輸出作為文字處理。</p><h2><span id="2-執行指令並捕獲輸出">2. 執行指令並捕獲輸出</span></h2><p>下面的例子展示了如何執行一個指令並捕獲其輸出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">result = subprocess.run([<span class="string">'echo'</span>, <span class="string">'Hello, World!'</span>], capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line">print(result.stdout)</span><br></pre></td></tr></table></figure><p>這段程式碼執行了 <code>echo Hello, World!</code> 指令，並將其輸出捕獲到變數 <code>result.stdout</code> 中，然後印出來。</p><h2><span id="3-執行指令並處理錯誤">3. 執行指令並處理錯誤</span></h2><p>當執行指令可能失敗時，您可以使用 <code>try-except</code> 語句來捕獲並處理錯誤：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    result = subprocess.run([<span class="string">'ls'</span>, <span class="string">'non_existing_file'</span>], check=<span class="literal">True</span>, capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">f'Error: <span class="subst">&#123;e.stderr&#125;</span>'</span>)</span><br></pre></td></tr></table></figure><p>在這段程式碼中，我們嘗試列出一個不存在的檔案。如果指令失敗，<code>subprocess.CalledProcessError</code> 會被拋出，我們可以捕獲並印出錯誤資訊。</p><h2><span id="4-使用-popen-進行更複雜的通訊">4. 使用 <code>Popen</code> 進行更複雜的通訊</span></h2><p>如果需要更靈活的通訊方式，您可以使用 <code>subprocess.Popen</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line">process = subprocess.Popen([<span class="string">'cat'</span>], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=<span class="literal">True</span>)</span><br><span class="line">stdout, stderr = process.communicate(input=<span class="string">'Hello from Popen\n'</span>)</span><br><span class="line">print(stdout)</span><br></pre></td></tr></table></figure><p>這段程式碼使用 <code>Popen</code> 建立了一個行程，並透過管道將輸入發送給它，然後捕獲並印出其輸出。這種方式適用於需要與外部指令進行雙向通訊的情況。</p><h2><span id="小結">小結</span></h2><p>Python 的 <code>subprocess</code> 模組是一個非常強大的工具，能夠讓您在 Python 程式中輕鬆地執行和控制外部指令和行程。無論是簡單的指令執行還是複雜的行程通訊，<code>subprocess</code> 模組都能提供靈活的解決方案。透過理解和使用這些功能，您可以大幅提升 Python 應用程式的自動化和集成能力。</p><p>以上就是 Python subprocess 模組用法與實用範例的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Python subprocess 模組用法與範例，在開發 Python 程式時，您是否曾經遇到需要執行外部指令或腳本的情況？無論是執行系統指令、呼叫其他應用程式，還是與外部行程進行通訊，Python 的 &lt;code&gt;subprocess&lt;/co
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Linux lsof 指令用法範例</title>
    <link href="https://shengyu7697.github.io/linux-lsof/"/>
    <id>https://shengyu7697.github.io/linux-lsof/</id>
    <published>2024-06-02T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.969Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Linux lsof 指令用法，<code>lsof</code> 是一個用於列出系統中打開的檔案的 Linux 指令，它可以顯示正在使用的檔案、檔案描述符、行程等資訊。現在讓我們來看一下它的基本用法以及其他常見和進階的用法。</p><h2><span id="基本用法">基本用法</span></h2><p><code>lsof</code> 指令的基本用法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof [options]</span><br></pre></td></tr></table></figure></p><p>其中，<code>options</code> 是一些可選的參數。</p><p>要查看系統中當前打開的所有檔案，只需在終端中輸入以下指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof</span><br></pre></td></tr></table></figure></p><p>這將列出系統中所有打開的檔案、行程和檔案描述符的資訊。</p><h2><span id="lsof-常用選項"><code>lsof</code> 常用選項</span></h2><p>當你在 Linux 系統中執行 <code>lsof</code> 指令時，你可以使用一些選項來調整它的行為。以下是一些常用的選項及其說明：<br><code>-i</code>：顯示與網路連接相關的資訊，包括 TCP、UDP 和 UNIX 域套接字。<br><code>-p PID</code>：僅顯示指定行程 ID（PID）打開的檔案清單。<br><code>-u USER</code>：僅顯示指定使用者名稱打開的檔案清單。<br><code>-c COMMAND</code>：僅顯示指定指令名稱打開的檔案清單。<br><code>-t</code>：顯示打開的檔案所屬的檔案描述符（FD）。<br><code>-i4</code>：僅顯示 IPv4 地址相關的網路連接。<br><code>-i6</code>：僅顯示 IPv6 地址相關的網路連接。<br><code>-n</code>：在顯示網路地址時，禁用對 IP 地址和主機名的反解析。</p><p>這些選項可以根據你的需求來過濾和查看系統中的打開檔案和網路連接。</p><h3><span id="其他常見用法">其他常見用法</span></h3><p><code>lsof</code> 指令顯示指定使用者打開的檔案，用法如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -u username</span><br></pre></td></tr></table></figure></p><p>這將僅顯示指定使用者打開的檔案。將 <code>username</code> 替換為要查詢的使用者名。</p><p><code>lsof</code> 指令顯示指定行程打開的檔案，用法如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -p PID</span><br></pre></td></tr></table></figure></p><p>這將僅顯示指定行程 ID（PID）打開的檔案。將 <code>PID</code> 替換為要查詢的行程 ID。</p><h2><span id="進階用法">進階用法</span></h2><p><code>lsof</code> 指令查找指定檔案正在被哪個行程使用，用法如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof /path/to/file</span><br></pre></td></tr></table></figure></p><p>這將列出正在使用指定檔案的行程資訊。</p><p><code>lsof</code> 指令查找被刪除但仍在使用的檔案，用法如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof +L1</span><br></pre></td></tr></table></figure></p><p>這將列出已被刪除但仍在使用的檔案，<code>+L1</code> 表示僅顯示被刪除但仍有一個或多個行程打開的檔案。</p><p><code>lsof</code> 指令顯示指定連接埠正在使用的程式，用法如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i :port</span><br></pre></td></tr></table></figure></p><p>這將列出指定連接埠上正在進行通訊的程式，將 <code>port</code> 替換為要查詢的連接埠號。</p><h2><span id="總結">總結</span></h2><p><code>lsof</code> 指令是一個非常有用的工具，用於查詢系統中打開的檔案、行程和檔案描述符的資訊。透過了解其基本用法、其他常見用法和進階用法，使用者可以更好地了解系統的執行狀況，並快速找到正在使用的檔案和相關行程。無論是用於查找檔案佔用情況、除錯程式問題還是進行系統監控，<code>lsof</code> 都是一個非常實用的指令。</p><p>以上就是 Linux lsof 指令用法範例的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/linux-tutorial/" title="Linux 常用指令教學懶人包">Linux 常用指令教學懶人包</a><br><a href="/linux-wget/" title="Linux wget 下載檔案用法與範例">Linux wget 下載檔案用法與範例</a><br><a href="/linux-sed/" title="Linux sed 字串取代用法與範例">Linux sed 字串取代用法與範例</a><br><a href="/linux-find/" title="Linux find 尋找檔案/尋找資料夾用法與範例">Linux find 尋找檔案/尋找資料夾用法與範例</a><br><a href="/linux-grep-ack-ag/" title="Linux grep/ack/ag 搜尋字串用法與範例">Linux grep/ack/ag 搜尋字串用法與範例</a><br><a href="/linux-tee/" title="Linux tee 同時螢幕標準輸出和輸出到檔案用法與範例">Linux tee 同時螢幕標準輸出和輸出到檔案用法與範例</a><br><a href="/linux-xargs/" title="Linux xargs 參數列表轉換用法與範例">Linux xargs 參數列表轉換用法與範例</a><br><a href="/linux-tail/" title="Linux tail 持續監看檔案輸出用法與範例">Linux tail 持續監看檔案輸出用法與範例</a><br><a href="/linux-du/" title="Linux du 查詢硬碟剩餘空間/資料夾容量用法與範例">Linux du 查詢硬碟剩餘空間/資料夾容量用法與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Linux lsof 指令用法，&lt;code&gt;lsof&lt;/code&gt; 是一個用於列出系統中打開的檔案的 Linux 指令，它可以顯示正在使用的檔案、檔案描述符、行程等資訊。現在讓我們來看一下它的基本用法以及其他常見和進階的用法。&lt;/p&gt;
&lt;h2&gt;&lt;
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shengyu7697.github.io/tags/Ubuntu/"/>
    
      <category term="Linux Command" scheme="https://shengyu7697.github.io/tags/Linux-Command/"/>
    
      <category term="Linux" scheme="https://shengyu7697.github.io/tags/Linux/"/>
    
      <category term="Shell Script" scheme="https://shengyu7697.github.io/tags/Shell-Script/"/>
    
  </entry>
  
  <entry>
    <title>C++ std::bitset 用法與範例</title>
    <link href="https://shengyu7697.github.io/std-bitset/"/>
    <id>https://shengyu7697.github.io/std-bitset/</id>
    <published>2024-06-01T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.969Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C++ std::bitset 用法與範例，在 C++ 程式設計中，處理位元操作是一項相當常見的任務，而標準程式庫中的 <code>std::bitset</code> 提供了一個非常方便的解決方案。本文將深入探討 <code>std::bitset</code> 的使用方法、優點以及一些實際應用案例，讓你可以輕鬆地處理位元操作。</p><h2><span id="什麼是-stdbitset">什麼是 std::bitset？</span></h2><p><code>std::bitset</code> 是 C++ 標準程式庫中的一個類別，它用來表示固定大小的位元序列。它的大小在編譯時就已經確定，因此提供了高效率的位元儲存和操作。你可以將 <code>std::bitset</code> 想像成一個具有固定大小的開關陣列，每個開關都可以是開或者是關。</p><h2><span id="stdbitset-基本用法">std::bitset 基本用法</span></h2><p>讓我們先介紹一下 <code>std::bitset</code> 的基本用法。以下是一個簡單的範例程式碼：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;4&gt; b;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="string">'\n'</span>;  <span class="comment">// 輸出：0000</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; b.<span class="built_in">set</span>() &lt;&lt; <span class="string">'\n'</span>;  <span class="comment">// 輸出：1111</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; b.reset() &lt;&lt; <span class="string">'\n'</span>;  <span class="comment">// 輸出：0000</span></span><br><span class="line"> </span><br><span class="line">    b.<span class="built_in">set</span>(<span class="number">0</span>);</span><br><span class="line">    b.<span class="built_in">set</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="string">'\n'</span>;  <span class="comment">// 輸出：0011</span></span><br><span class="line">    </span><br><span class="line">    b.<span class="built_in">set</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="string">'\n'</span>;  <span class="comment">// 輸出：0001</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，我們建立了一個 <code>std::bitset</code> 物件 <code>b</code>，大小為 4，並將其所有位元初始化為 0。我們使用 <code>set()</code> 方法將所有位元都設定為 1，並將結果輸出。接著，我們使用 <code>reset()</code> 方法將所有位元都重新設定為 0，並將結果輸出。然後，我們使用 <code>set()</code> 方法分別設定第 0 和第 1 個位元，將結果輸出。最後，我們使用帶有兩個參數的 <code>set()</code> 方法，將第 1 個位元設定為 0，將結果輸出。</p><p>以上範例展示了 <code>std::bitset</code> 的基本操作，但這只是冰山一角。讓我們看看如何將這些基本操作應用到實際情況中。</p><h2><span id="stdbitset-範例位元狀態表示">std::bitset 範例：位元狀態表示</span></h2><p>你可以使用 <code>std::bitset</code> 來表示某個系統的狀態，比如一個交通訊號的狀態。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;3&gt; trafficSignal;</span><br><span class="line">trafficSignal.<span class="built_in">set</span>(<span class="number">0</span>); <span class="comment">// 設定第一個位元表示紅燈</span></span><br><span class="line">trafficSignal.reset(<span class="number">1</span>); <span class="comment">// 重設第二個位元表示綠燈</span></span><br></pre></td></tr></table></figure><h2><span id="stdbitset-範例控制開關">std::bitset 範例：控制開關</span></h2><p>你可以使用 <code>std::bitset</code> 來表示遊戲中的各種開關，比如角色是否擁有某個技能。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;5&gt; playerAbilities;</span><br><span class="line">playerAbilities.<span class="built_in">set</span>(<span class="number">2</span>); <span class="comment">// 設定第三個位元表示角色擁有某個技能</span></span><br></pre></td></tr></table></figure><h2><span id="stdbitset-範例位元過濾">std::bitset 範例：位元過濾</span></h2><p>在某些應用中，你可能需要對某些位元進行過濾。讓我們現在來看看這個範例，展示了 <code>std::bitset</code> 在位元過濾方面的強大功能。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;8&gt; data(<span class="number">0b10101010</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;8&gt; mask(<span class="number">0b11001100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;8&gt; filteredData = data &amp; mask; <span class="comment">// 使用位元 AND 運算進行過濾</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Original Data:   "</span> &lt;&lt; data &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Mask:            "</span> &lt;&lt; mask &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Filtered Data:   "</span> &lt;&lt; filteredData &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在這個範例中，我們建立了一個原始的資料 <code>data</code> 和一個遮罩 <code>mask</code>，然後使用位元 AND 運算將它們進行過濾，得到過濾後的資料 <code>filteredData</code>。這個過程可以用來選擇性地保留或丟棄原始資料中的位元，從而達到過濾的效果。輸出結果如下，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Original Data:   10101010</span><br><span class="line">Mask:            11001100</span><br><span class="line">Filtered Data:   10001000</span><br></pre></td></tr></table></figure><p>這個範例展示了 <code>std::bitset</code> 在處理位元過濾時的簡潔性和高效率，使得你可以輕鬆地實現各種位元操作，並且適用於各種實際情況。</p><h3><span id="stdbitset-的優點">std::bitset 的優點</span></h3><p><code>std::bitset</code> 在處理位元操作時有很多優點，這些優點使其成為許多場景下的理想選擇：</p><ol><li><p><strong>高效率</strong>：<code>std::bitset</code> 在編譯時已確定大小，因此允許進行高效的位元儲存和操作。它通常比使用 <code>bool</code> 陣列或其他位元操作的手動實現更有效率。</p></li><li><p><strong>簡潔易於使用</strong>：與手動進行位元操作相比，使用 <code>std::bitset</code> 更簡單、更直觀。<code>std::bitset</code> 提供了許多內建的位元操作方法，如 <code>set()</code>、<code>reset()</code>、<code>flip()</code> 等，使得程式碼更加簡潔且易於閱讀。這可以大大簡化對位元的操作，同時減少了錯誤的可能性。</p></li><li><p><strong>安全性</strong>：由於 <code>std::bitset</code> 具有固定大小，因此它可以防止常見的緩衝區溢出和記憶體錯誤。這使得在程式碼中使用 <code>std::bitset</code> 更加安全，減少了不必要的錯誤和漏洞。</p></li><li><p><strong>內建位元運算支援</strong>：<code>std::bitset</code> 提供了許多內建的位元運算方法，如 AND、OR、XOR 等，這使得位元操作更加方便。你可以直接使用這些方法來進行位元操作，而無需自行實現複雜的邏輯。</p></li></ol><h3><span id="總結">總結</span></h3><p>在本文中，我們探索了 C++ 標準程式庫中的 <code>std::bitset</code>，並介紹了它的基本用法、優點以及一些實際應用案例。透過使用 <code>std::bitset</code>，你可以更輕鬆地處理位元操作，並且使你的程式碼更加簡潔、高效。希望這篇文章能幫助你更好地理解和應用 <code>std::bitset</code>。</p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>以上就是 C++ std::bitset 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/std-string/" title="std::string 用法與範例">std::string 用法與範例</a><br><a href="/std-vector/" title="std::vector 用法與範例">std::vector 用法與範例</a><br><a href="/std-sort/" title="std::sort 用法與範例">std::sort 用法與範例</a><br><a href="/std-map/" title="std::map 用法與範例">std::map 用法與範例</a><br><a href="/std-set/" title="std::set 用法與範例">std::set 用法與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C++ std::bitset 用法與範例，在 C++ 程式設計中，處理位元操作是一項相當常見的任務，而標準程式庫中的 &lt;code&gt;std::bitset&lt;/code&gt; 提供了一個非常方便的解決方案。本文將深入探討 &lt;code&gt;std::bits
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>SQL 與 NoSQL 資料庫的差異：深入了解及選擇指南</title>
    <link href="https://shengyu7697.github.io/sql-vs-nosql-database/"/>
    <id>https://shengyu7697.github.io/sql-vs-nosql-database/</id>
    <published>2024-05-31T12:00:00.000Z</published>
    <updated>2024-06-07T09:51:40.209Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 聊聊 SQL 與 NoSQL 資料庫的差異，在現今的數位時代，選擇適合的資料庫對於應用程式的成功至關重要。SQL 和 NoSQL 資料庫是兩種主要的選擇，各有其獨特的特點和適用場景。本文將深入探討這兩者之間的差異，幫助您做出明智的選擇。</p><h2><span id="什麼是-sql-資料庫">什麼是 SQL 資料庫？</span></h2><p>SQL（Structured Query Language）資料庫，也稱為關聯式資料庫，使用結構化表格來儲存資料。每個表格由行和列組成，並且有嚴格的模式（schema）。常見的 SQL 資料庫包括 MySQL、PostgreSQL 和 Oracle。</p><p><strong>主要特點</strong>：</p><ul><li><strong>結構化資料模型</strong>：資料以表格形式組織，具有固定的模式。</li><li><strong>強大的查詢功能</strong>：使用 SQL 來定義和操作資料。</li><li><strong>垂直擴展</strong>：透過增加硬體資源（如更強大的 CPU 和記憶體）來提升性能。</li><li><strong>ACID 特性</strong>：確保資料的一致性和可靠性，適合需要複雜查詢和事務支持的應用。</li></ul><h2><span id="什麼是-nosql-資料庫">什麼是 NoSQL 資料庫？</span></h2><p>NoSQL（Not Only SQL）資料庫不使用傳統的表格結構，而是提供多種資料模型，包括檔案型、圖形型、鍵值型和列族型。常見的 NoSQL 資料庫有 MongoDB、Cassandra、Redis 和 CouchDB。</p><p><strong>主要特點</strong>：</p><ul><li><strong>靈活的資料模型</strong>：支持不同的資料結構，不需要嚴格的模式。</li><li><strong>高擴展性</strong>：設計為水平擴展，透過增加更多的節點來處理大量資料和高負載。</li><li><strong>多樣的查詢語言和 API</strong>：根據資料庫類型的不同而有所差異。</li><li><strong>CAP 理論</strong>：在一致性和可用性之間做出權衡，通常更強調高可用性和分區容錯性。</li></ul><h2><span id="sql-與-nosql-的比較">SQL 與 NoSQL 的比較</span></h2><ol><li><p><strong>資料模型</strong>：</p><ul><li><strong>SQL</strong>：使用結構化的表格，有嚴格的模式。</li><li><strong>NoSQL</strong>：多種資料模型（檔案型、圖形型、鍵值型、列族型），靈活的模式。</li></ul></li><li><p><strong>擴展性</strong>：</p><ul><li><strong>SQL</strong>：垂直擴展，透過增加硬體資源提升性能。</li><li><strong>NoSQL</strong>：水平擴展，透過增加節點來應對大資料和高負載。</li></ul></li><li><p><strong>查詢語言</strong>：</p><ul><li><strong>SQL</strong>：使用 SQL 語言，提供強大的查詢功能。</li><li><strong>NoSQL</strong>：各自的查詢語言或 API，根據資料庫類型不同。</li></ul></li><li><p><strong>使用情境</strong>：</p><ul><li><strong>SQL</strong>：適合需要複雜查詢和事務支持的應用，如金融系統、電子商務網站。</li><li><strong>NoSQL</strong>：適合高性能、靈活結構和水平擴展的應用，如社交媒體、即時分析、大資料處理。</li></ul></li><li><p><strong>一致性與可用性</strong>：</p><ul><li><strong>SQL</strong>：遵循 ACID 特性，確保資料一致性。</li><li><strong>NoSQL</strong>：根據 CAP 理論，在一致性和可用性之間做出權衡。</li></ul></li></ol><h2><span id="如何選擇適合的資料庫">如何選擇適合的資料庫？</span></h2><p>選擇 SQL 還是 NoSQL 資料庫取決於您的具體需求。如果應用需要複雜的查詢和事務支持，SQL 資料庫是更好的選擇。如果應用需要處理大量資料，並且需要高性能和靈活的資料結構，NoSQL 資料庫可能更適合。</p><h2><span id="結論">結論</span></h2><p>了解 SQL 和 NoSQL 資料庫的差異對於選擇合適的資料庫至關重要。根據您的應用需求，選擇適當的資料庫將幫助您提升性能、靈活性和可擴展性。</p><p>以上就是 SQL 與 NoSQL 資料庫的差異介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 聊聊 SQL 與 NoSQL 資料庫的差異，在現今的數位時代，選擇適合的資料庫對於應用程式的成功至關重要。SQL 和 NoSQL 資料庫是兩種主要的選擇，各有其獨特的特點和適用場景。本文將深入探討這兩者之間的差異，幫助您做出明智的選擇。&lt;/p&gt;
&lt;h2
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>在ChatGPT時代，Google搜尋引擎仍然不可或缺的原因</title>
    <link href="https://shengyu7697.github.io/why-google-search-engine-remains-essential-in-the-age-of-chatgpt/"/>
    <id>https://shengyu7697.github.io/why-google-search-engine-remains-essential-in-the-age-of-chatgpt/</id>
    <published>2024-05-30T12:00:00.000Z</published>
    <updated>2024-06-07T09:51:40.209Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 來聊聊在ChatGPT時代，Google搜尋引擎仍然不可或缺的原因，隨著人工智慧（AI）的快速發展，像ChatGPT這樣的對話式AI工具已經變得越來越普及。許多人開始好奇，在擁有如此強大且方便的AI助手後，傳統的Google搜尋引擎是否仍然必不可少。本文將深入探討這個問題，分析ChatGPT和Google搜尋引擎各自的優勢、用途，以及它們如何互補，以幫助使用者更有效地獲取所需資訊。</p><h2><span id="1-資料來源和即時性">1. 資料來源和即時性</span></h2><p>首先，最明顯的區別在於資料來源和即時性。Google搜尋引擎是依賴於網絡上的最新資料來提供搜索結果的。每當一個新事件發生，新聞網站、博客和社交媒體上都會迅速出現相關報導，Google可以立即抓取這些信息並顯示給用戶。因此，對於需要即時資訊的人來說，Google是無可替代的。例如，當你想知道某個體育比賽的最新比分或某地發生的緊急事件的詳細情況時，Google能夠最快速地提供最新的信息。</p><p>相比之下，ChatGPT雖然能夠提供大量有用的資訊，但其知識範圍僅限於訓練數據截止的時間點（例如，至2023年）。這意味著ChatGPT無法提供最新的事件報導或即時更新的資訊。如果你問它一個發生在2024年的事件，它可能無法給出準確的答案。因此，對於涉及到即時性或最新資料的需求，Google搜尋引擎仍然是首選，至少現階段短期還是這樣。</p><h2><span id="2-搜尋範圍和精確度">2. 搜尋範圍和精確度</span></h2><p>Google搜尋引擎的另一大優勢在於其廣泛的搜尋範圍和精確度。Google的搜索算法能夠從數以億計的網頁中挑選出與你的查詢最相關的結果。它提供的不僅僅是簡單的答案，還包括各種各樣的資源，如新聞文章、學術論文、論壇討論和專業網站。使用者可以根據需要瀏覽和比較不同的來源，進行深入研究。</p><p>例如，假如你在研究某個專業技術問題，Google可以幫助你找到相關的研究論文、技術博客和專業論壇，讓你從多個角度了解這個問題。而ChatGPT雖然能夠提供綜合的答案，但其回答通常是基於已有的知識，無法直接提供具體來源或進行詳細比較。因此，當你需要查找具體的文件、深入研究某個領域或進行資料核實時，Google搜尋引擎會更為合適。</p><h2><span id="3-使用體驗">3. 使用體驗</span></h2><p>在使用體驗方面，ChatGPT和Google搜尋引擎各有千秋。Google搜尋引擎提供多種工具和功能，如圖片搜尋、地圖、視頻等，滿足多樣化的搜尋需求。例如，當你需要找一張特定圖片、查看某地的地圖位置或觀看某個視頻時，Google的相關工具能夠快速滿足這些需求。</p><p>相比之下，ChatGPT以對話形式提供答案，更加人性化和互動性。它能夠理解並回應自然語言，適合進行對話式查詢和回答。例如，如果你有一個複雜的問題，ChatGPT可以逐步引導你了解答案，並根據你的回應進一步調整答案，這在很多情況下比簡單的搜索結果更有用。</p><p>舉例來說，當你在學習一個新概念時，ChatGPT可以根據你的理解程度提供不同層次的解釋，並回答你在學習過程中出現的任何疑問。這種交互式的學習體驗是傳統搜索引擎所無法提供的。因此，在涉及到自然語言互動和個性化教學時，ChatGPT更具優勢。</p><h2><span id="4-專業性和細節">4. 專業性和細節</span></h2><p>對於需要高專業性和細節的需求，Google搜尋引擎仍然占有重要地位。許多專業領域的資料和研究論文僅能通過特定的數據庫或專業網站獲取，Google能夠幫助使用者定位這些資源。例如，醫學、法律、工程等領域的專業資料，通常需要通過學術搜尋引擎（如Google Scholar）或專業期刊網站來獲取。</p><p>而ChatGPT在處理一般性問題和提供概述方面非常優秀，但在某些高度專業化的領域，可能無法提供足夠深入的資料。例如，當你需要查找某個法律條款的詳細解釋或某項醫學研究的具體數據時，Google搜尋引擎能夠幫助你找到相關的法律文獻或醫學期刊，提供精確和詳盡的資訊。</p><h2><span id="5-整合使用的優勢">5. 整合使用的優勢</span></h2><p>綜合來看，ChatGPT和Google搜尋引擎並非相互排斥，而是可以互補使用。根據具體需求，使用者可以選擇最合適的工具，甚至可以同時使用兩者來獲取更全面和精確的資訊。</p><p>例如，在進行某個研究項目時，你可以先使用Google搜尋引擎查找相關的文獻和資料，然後再使用ChatGPT對這些資料進行綜合和總結，或者向ChatGPT詢問一些具體的概念解釋和知識背景。這樣一來，你既能獲得最新的資料，又能通過對話形式加深對資料的理解。</p><p>另一個例子是，當你需要即時了解某個事件的最新進展時，可以首先使用Google搜尋引擎查找新聞報導，然後使用ChatGPT進一步探討事件的背景、影響和相關知識。這種整合使用的方式能夠充分發揮兩者的優勢，提供更豐富和有深度的資訊。</p><h2><span id="結語">結語</span></h2><p>在AI技術快速發展的今天，ChatGPT作為一種強大的對話式AI工具，為我們提供了便利和高效的資訊獲取方式。然而，Google搜尋引擎作為傳統且功能強大的搜索工具，依然在許多方面不可或缺。兩者各有優勢，適合不同的使用場景和需求。</p><p>無論是尋求即時資訊、進行深入研究，還是需要互動性教學和概念解釋，使用者都可以根據具體情況選擇最合適的工具。更重要的是，通過整合使用ChatGPT和Google搜尋引擎，我們可以更全面地獲取資訊，提升工作和學習效率。</p><p>總而言之，ChatGPT和Google搜尋引擎各自擁有獨特的優勢和用途，它們之間並非替代關係，而是互補共存。在未來的數字化世界中，這兩種工具將繼續為我們提供強大的支持和幫助，讓我們能夠更好地應對各種資訊需求和挑戰。</p><p>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/why-programmers-should-utilize-chatgpt/" title="善用ChatGPT：程式人員提升效率和技能的必備工具">善用ChatGPT：程式人員提升效率和技能的必備工具</a><br><a href="/chatgpt-alternatives/" title="ChatGPT 的 2 個替代工具：Google Gemini與Microsoft Copilot">ChatGPT 的 2 個替代工具：Google Gemini與Microsoft Copilot</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 來聊聊在ChatGPT時代，Google搜尋引擎仍然不可或缺的原因，隨著人工智慧（AI）的快速發展，像ChatGPT這樣的對話式AI工具已經變得越來越普及。許多人開始好奇，在擁有如此強大且方便的AI助手後，傳統的Google搜尋引擎是否仍然必不可少。本
      
    
    </summary>
    
    
      <category term="ChatGPT" scheme="https://shengyu7697.github.io/tags/ChatGPT/"/>
    
      <category term="AI" scheme="https://shengyu7697.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>如何消除C/C++未使用變數的編譯錯誤訊息</title>
    <link href="https://shengyu7697.github.io/cpp-remove-unused-variable-errors/"/>
    <id>https://shengyu7697.github.io/cpp-remove-unused-variable-errors/</id>
    <published>2024-05-29T12:00:00.000Z</published>
    <updated>2024-06-07T09:51:40.209Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 如何消除C/C++未使用變數的編譯錯誤訊息，在開發C/C++程式時，我們常會遇到未使用變數所產生的編譯警告或錯誤訊息。這些訊息雖然對程式的執行沒有直接影響，但會使編譯過程不夠乾淨，甚至可能掩蓋其他潛在的問題。本文將介紹幾種有效的方法來消除這些警告或錯誤訊息，讓你的程式碼更加整潔。</p><h2><span id="1-移除未使用的變數">1. 移除未使用的變數</span></h2><p>最直接的方法就是從程式碼中移除不需要的變數。如果確實不需要該變數，將其刪除即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> unused_var;</span><br><span class="line"><span class="comment">// 將 unused_var 移除</span></span><br></pre></td></tr></table></figure><h2><span id="2-使用-void-來表示變數未使用">2. 使用 <code>(void)</code> 來表示變數未使用</span></h2><p>在變數前加上 <code>(void)</code>，表示你有意識到該變數未使用，從而避免編譯器警告。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> unused_var;</span><br><span class="line">(<span class="keyword">void</span>)unused_var;</span><br></pre></td></tr></table></figure><p>或者，你也可以定義一個巨集來標記未使用的變數，使程式碼更具可讀性和一致性。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用巨集</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNUSED(x) (void)(x)</span></span><br><span class="line">UNUSED(unused_var);</span><br></pre></td></tr></table></figure><h2><span id="3-使用-__attribute__unused-gcc特定">3. 使用 <code>__attribute__((unused))</code> (GCC特定)</span></h2><p>在變數宣告前加上 <code>__attribute__((unused))</code>，告訴編譯器該變數未使用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> unused_var __attribute__((unused));</span><br></pre></td></tr></table></figure><h2><span id="4-使用-pragma-指示-gcc特定">4. 使用 <code>#pragma</code> 指示 (GCC特定)</span></h2><p>使用 <code>#pragma</code> 指示來忽略特定的警告。在程式碼的適當位置新增以下指示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC diagnostic ignored <span class="meta-string">"-Wunused-variable"</span></span></span><br><span class="line"><span class="keyword">int</span> unused_var;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC diagnostic <span class="meta-keyword">warning</span> <span class="meta-string">"-Wunused-variable"</span></span></span><br></pre></td></tr></table></figure><p>這樣可以有選擇性地忽略特定區塊的警告。</p><h2><span id="5-使用-wno-unused-variable-編譯選項">5. 使用 <code>-Wno-unused-variable</code> 編譯選項</span></h2><p>編譯時新增 <code>-Wno-unused-variable</code> 選項來忽略未使用變數的警告。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -Wno-unused-variable -o myprogram myprogram.c</span><br></pre></td></tr></table></figure><h2><span id="6-使用條件編譯">6. 使用條件編譯</span></h2><p>使用條件編譯根據需要定義變數。例如在除錯模式下才使用某些變數：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line"><span class="keyword">int</span> debug_var;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2><span id="總結">總結</span></h2><p>未使用變數的警告雖然不會影響程式執行，但會讓編譯過程不夠乾淨。以上介紹的幾種方法能幫助你有效地消除這些警告，讓程式碼更加整潔和專業。</p><p>以上就是 如何消除C/C++未使用變數的編譯錯誤訊息介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 C++ 相關技術，可以參考看看下面的文章，<br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-strcpy/" title="C/C++ strcpy 用法與範例">C/C++ strcpy 用法與範例</a><br><a href="/cpp-strcmp/" title="C/C++ strcmp 用法與範例">C/C++ strcmp 用法與範例</a><br><a href="/cpp-strcat/" title="C/C++ strcat 用法與範例">C/C++ strcat 用法與範例</a><br><a href="/cpp-strstr/" title="C/C++ strstr 用法與範例">C/C++ strstr 用法與範例</a><br><a href="/cpp-strtok/" title="C/C++ strtok 用法與範例">C/C++ strtok 用法與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 如何消除C/C++未使用變數的編譯錯誤訊息，在開發C/C++程式時，我們常會遇到未使用變數所產生的編譯警告或錯誤訊息。這些訊息雖然對程式的執行沒有直接影響，但會使編譯過程不夠乾淨，甚至可能掩蓋其他潛在的問題。本文將介紹幾種有效的方法來消除這些警告
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>draw.io 線上畫圖表、流程圖工具</title>
    <link href="https://shengyu7697.github.io/draw.io/"/>
    <id>https://shengyu7697.github.io/draw.io/</id>
    <published>2024-05-28T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.969Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 draw.io 這套工具，在現代日常工作的信件、簡報中常常用到圖表和流程圖，這些圖是溝通和表達想法的重要橋樑。本篇就是要來介紹一款名為 draw.io 的線上工具。draw.io 它不僅提供了強大的圖表製作功能，還讓使用者輕鬆地建立各種類型的圖形和圖表。只要連上網路不用安裝任何軟體即可馬上製作流程圖是我覺得的一個巨大優勢，還能夠支援存檔與讀檔，以及匯出成常見png 、jpeg或bmp格式，本篇都會一一來作介紹，一起來了解一下這款 draw.io。</p><img src="/draw.io/draw.io-1.png" title="draw.io">  <h2><span id="特點和功能">特點和功能</span></h2><p>draw.io 的簡潔而直觀的使用者界面讓使用者能夠輕鬆上手，即使是沒有設計經驗的人也能夠快速建立專業水準的圖表。它提供了豐富的圖形和圖表類型，包括流程圖、組織圖、UML 圖、網路圖等，滿足了不同場景下的需求。此外，draw.io 還支持將圖表匯出為多種格式，方便使用者在不同平台上分享和使用。</p><img src="/draw.io/draw.io-2.png" title="draw.io">  <h2><span id="使用方法">使用方法</span></h2><p>使用 draw.io 建立新的圖表非常簡單，只需選擇所需的圖表類型，然後拖動和放置圖形即可。使用者可以輕鬆編輯和自定義每個圖形的外觀和屬性，使其符合自己的需求。匯入和匯出功能讓使用者可以方便地將圖表嵌入到其他檔案中或與他人共享。</p><img src="/draw.io/draw.io-3.png" title="draw.io">  <h2><span id="應用範圍">應用範圍</span></h2><p>Draw.io 的應用範圍非常廣泛，不僅適用於商業和教育領域，也適用於個人用途。在商業領域，它可以用於製作企業組織結構圖、流程圖、市場分析圖等；在教育領域，它可以用於製作教學資料、課程規劃等；在個人用途方面，它可以用於製作個人計劃、生活日程等。</p><h2><span id="drawio與其他類似工具的比較">Draw.io與其他類似工具的比較</span></h2><p>儘管市面上有許多類似的圖表製作工具，但 draw.io 仍然脫穎而出。它不僅功能強大，而且免費且開放源碼，為使用者提供了更多的自由和靈活性。</p><p>draw.io 跟一些付費工具相比，例如：Microsoft Visio，draw.io 免費使用免安裝任何軟體馬上即可使用是一個極大優勢，以及能夠存檔進度與讀取，匯出成圖片常見功能都有支援，實在是超級方便好用。</p><h2><span id="總結">總結</span></h2><p>綜上所述，draw.io 是一款功能強大、易於使用的圖表製作工具，為使用者提供了無限的創作可能性。無論是在工作、學習還是生活中，它都能夠幫助使用者將複雜的想法清晰地表達出來。期待它在未來的發展中繼續帶給我們更多驚喜和便利！</p><p>以上就是 draw.io 線上畫圖表、流程圖工具介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/gimp-crop/" title="GIMP 圖片裁切">GIMP 圖片裁切</a><br><a href="/gimp-remove-background/" title="GIMP 去背/去除背景">GIMP 去背/去除背景</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 draw.io 這套工具，在現代日常工作的信件、簡報中常常用到圖表和流程圖，這些圖是溝通和表達想法的重要橋樑。本篇就是要來介紹一款名為 draw.io 的線上工具。draw.io 它不僅提供了強大的圖表製作功能，還讓使用者輕鬆地建立各種類型的圖形
      
    
    </summary>
    
    
      <category term="Software" scheme="https://shengyu7697.github.io/tags/Software/"/>
    
  </entry>
  
  <entry>
    <title>macOS 版本升級的方法</title>
    <link href="https://shengyu7697.github.io/mac-upgrade/"/>
    <id>https://shengyu7697.github.io/mac-upgrade/</id>
    <published>2024-05-27T14:00:00.000Z</published>
    <updated>2024-05-21T14:04:31.642Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 紀錄 macOS 版本升級的方法，最近要將我的 mbpr15 從 10.13.6 升級到 macOS 11 時遇到線上無法更新，出現『無法聯絡復原伺服器』的錯誤訊息，以下紀錄解決方法，</p><p>最後只好從從另一台 mbp13 新的 macOS 下載 macOS 在弄到 USB 裏，讓我的 mbpr15 去安裝，<br>參考<a href="https://support.apple.com/zh-tw/101578#download" rel="noopener" target="_blank">為 macOS 製作可開機安裝磁碟</a></p><p>官方教學已經寫的夠詳細了，直接切入重點，</p><ol><li>從 Apple 下載完整的 macOS 安裝磁碟<br>再把它製作可開機安裝磁碟，</li></ol><p>以我的範例為例，我的 USB 隨身碟名稱就剛好叫 “USB”，所以以下為製作的指令與過程，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo /Applications/Install\ macOS\ Big\ Sur.app/Contents/Resources/createinstallmedia --volume /Volumes/USB</span><br><span class="line">Password:</span><br><span class="line">Ready to start.</span><br><span class="line">To <span class="built_in">continue</span> we need to erase the volume at /Volumes/USB.</span><br><span class="line">If you wish to <span class="built_in">continue</span> <span class="built_in">type</span> (Y) <span class="keyword">then</span> press <span class="built_in">return</span>: Y</span><br><span class="line">Erasing disk: 0%... 10%... 20%... 30%... 100%</span><br><span class="line">Copying to disk: 0%... 10%... 20%... 30%... 40%... 50%... 60%... 70%... 80%... 90%... 100%</span><br><span class="line">Making disk bootable...</span><br><span class="line">Install media now available at <span class="string">"/Volumes/Install macOS Big Sur"</span></span><br></pre></td></tr></table></figure></p><p>以上就是 macOS 版本升級的方法介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/mac-xocde-version/" title="macOS 查詢 Xcode 版本的 3 種方法">macOS 查詢 Xcode 版本的 3 種方法</a><br><a href="/mac-zsh-completions/" title="macOS 安裝 zsh-completions 自動完成指令">macOS 安裝 zsh-completions 自動完成指令</a><br><a href="/mac-move-dock-to-other-screen/" title="mac 雙螢幕延伸模式的 dock 切換方法">mac 雙螢幕延伸模式的 dock 切換方法</a><br><a href="/mac-screen-sharing/" title="macOS Screen Sharing 用指令開啟螢幕分享">macOS Screen Sharing 用指令開啟螢幕分享</a><br><a href="/mac-download-an-older-version-of-xcode/" title="macOS 安裝舊版的 Xcode 版本">macOS 安裝舊版的 Xcode 版本</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 紀錄 macOS 版本升級的方法，最近要將我的 mbpr15 從 10.13.6 升級到 macOS 11 時遇到線上無法更新，出現『無法聯絡復原伺服器』的錯誤訊息，以下紀錄解決方法，&lt;/p&gt;
&lt;p&gt;最後只好從從另一台 mbp13 新的 macOS 下
      
    
    </summary>
    
    
      <category term="macOS" scheme="https://shengyu7697.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>Linux iostat 指令用法範例</title>
    <link href="https://shengyu7697.github.io/linux-iostat/"/>
    <id>https://shengyu7697.github.io/linux-iostat/</id>
    <published>2024-05-26T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.969Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Linux iostat 指令用法，<code>iostat</code> 是一個用於顯示系統的磁碟 I/O 統計資訊的 Linux 指令。它可以提供關於磁碟讀寫、平均回應時間、磁碟使用率等方面的資訊。現在讓我們來看一下它的基本用法以及其他常見和進階的用法。</p><h2><span id="基本用法">基本用法</span></h2><p><code>iostat</code> 指令的基本用法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iostat [options] [interval [count]]</span><br></pre></td></tr></table></figure></p><p>其中，<code>options</code> 是一些可選的參數，<code>interval</code> 是兩次回報之間的延遲時間（以秒為單位），<code>count</code> 是回報的次數。</p><p>Ubuntu 要用 apt 安裝的話請輸入 <code>sudo apt install sysstat</code> 指令。</p><p>要查看磁碟的使用情況，只需在終端中輸入以下指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iostat</span><br></pre></td></tr></table></figure></p><p>這將顯示所有磁碟的平均 I/O 情況和 CPU 使用率。</p><img src="/linux-iostat/iostat.png" title="iostat">  <h2><span id="其他常見用法">其他常見用法</span></h2><p><code>iostat</code> 指令指定延遲時間和回報次數，用法如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iostat 5 3</span><br></pre></td></tr></table></figure></p><p>這將每隔五秒回報一次磁碟的使用情況，共回報三次。</p><p><code>iostat</code> 指令顯示指定的磁碟資訊，用法如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iostat -d /dev/sda</span><br></pre></td></tr></table></figure></p><p>這將僅顯示名為 <code>/dev/sda</code> 的磁碟的使用情況。</p><h2><span id="iostat-常用選項"><code>iostat</code> 常用選項</span></h2><p>當你在 Linux 系統中執行 <code>iostat</code> 指令時，你可以使用一些選項來調整它的行為。以下是一些常用的選項及其說明：<br><code>-c</code>：顯示 CPU 使用情況的統計資訊，包括每個 CPU 核心的使用率、context switch次數和中斷次數。<br><code>-d</code>：顯示磁碟 I/O 使用情況的統計資訊，包括每個磁碟的讀寫速率、平均等待時間和 I/O 佇列長度。<br><code>-h</code>：以人類可讀的格式顯示結果，這樣可以更容易理解資料。<br><code>-k</code>：以 KB/s 為單位顯示磁碟 I/O 資料，而不是預設的 blocks per second。<br><code>-m</code>：以 MB/s 為單位顯示磁碟 I/O 資料。<br><code>-N</code>：顯示網路 I/O 使用情況的統計資訊，包括每個網路接口的接收和發送速率。<br><code>-t</code>：顯示時間戳記，以便在多次執行 <code>iostat</code> 時追蹤資料變化。</p><p>這些選項可以幫助你根據需要查看系統的 CPU、磁碟和網路使用情況的統計資訊。</p><h3><span id="進階用法">進階用法</span></h3><p><code>iostat</code> 指令監視磁碟讀寫情況，用法如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -n 1 iostat -x</span><br></pre></td></tr></table></figure></p><p>這將每秒更新一次磁碟的詳細 I/O 情況，包括讀寫速度、等待時間等。</p><p><code>iostat</code> 指令監視指定磁碟的 I/O 活動，用法如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iostat -x -d /dev/sdb</span><br></pre></td></tr></table></figure></p><p>這將持續顯示名為 <code>/dev/sdb</code> 的磁碟的詳細 I/O 情況。</p><p><code>iostat</code> 指令顯示 CPU 和磁碟的詳細資訊，用法如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iostat -x -c</span><br></pre></td></tr></table></figure></p><p>這將顯示 CPU 和磁碟的詳細資訊，包括每個 CPU 核心的使用率和磁碟的 I/O 活動。</p><h2><span id="總結">總結</span></h2><p><code>iostat</code> 指令是一個強大的工具，用於監視和分析系統的磁碟 I/O 情況。透過了解其基本用法、其他常見用法和進階用法，使用者可以更好地了解系統的磁碟使用情況，並進行性能優化和故障排除。無論是用於監視系統狀態、測試磁碟性能還是除錯磁碟問題，<code>iostat</code> 都是一個非常有用的工具。</p><p>以上就是 Linux iostat 指令用法範例的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/linux-tutorial/" title="Linux 常用指令教學懶人包">Linux 常用指令教學懶人包</a><br><a href="/linux-wget/" title="Linux wget 下載檔案用法與範例">Linux wget 下載檔案用法與範例</a><br><a href="/linux-sed/" title="Linux sed 字串取代用法與範例">Linux sed 字串取代用法與範例</a><br><a href="/linux-find/" title="Linux find 尋找檔案/尋找資料夾用法與範例">Linux find 尋找檔案/尋找資料夾用法與範例</a><br><a href="/linux-grep-ack-ag/" title="Linux grep/ack/ag 搜尋字串用法與範例">Linux grep/ack/ag 搜尋字串用法與範例</a><br><a href="/linux-tee/" title="Linux tee 同時螢幕標準輸出和輸出到檔案用法與範例">Linux tee 同時螢幕標準輸出和輸出到檔案用法與範例</a><br><a href="/linux-xargs/" title="Linux xargs 參數清單轉換用法與範例">Linux xargs 參數清單轉換用法與範例</a><br><a href="/linux-tail/" title="Linux tail 持續監看檔案輸出用法與範例">Linux tail 持續監看檔案輸出用法與範例</a><br><a href="/linux-du/" title="Linux du 查詢硬碟剩餘空間/資料夾容量用法與範例">Linux du 查詢硬碟剩餘空間/資料夾容量用法與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Linux iostat 指令用法，&lt;code&gt;iostat&lt;/code&gt; 是一個用於顯示系統的磁碟 I/O 統計資訊的 Linux 指令。它可以提供關於磁碟讀寫、平均回應時間、磁碟使用率等方面的資訊。現在讓我們來看一下它的基本用法以及其他常見和
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shengyu7697.github.io/tags/Ubuntu/"/>
    
      <category term="Linux Command" scheme="https://shengyu7697.github.io/tags/Linux-Command/"/>
    
      <category term="Linux" scheme="https://shengyu7697.github.io/tags/Linux/"/>
    
      <category term="Shell Script" scheme="https://shengyu7697.github.io/tags/Shell-Script/"/>
    
  </entry>
  
  <entry>
    <title>C++ std::swap 用法與範例</title>
    <link href="https://shengyu7697.github.io/std-swap/"/>
    <id>https://shengyu7697.github.io/std-swap/</id>
    <published>2024-05-25T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.969Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C++ std::swap 用法與範例，在 C++ 中，當我們需要交換兩個變數的值時，我們通常會使用一個名為<code>swap</code>的函式。這個函式可以幫助我們快速且簡單地交換變數的值，而不需要額外的程式碼。在本篇文章中，我們將探討如何使用C++標準庫中的<code>std::swap</code>函式，以及如何自製一個自己的<code>swap</code>函式。</p><h2><span id="使用-stdswap-函式">使用 <code>std::swap</code> 函式</span></h2><p>首先，讓我們看一下如何使用C++標準庫中提供的<code>std::swap</code>函式來交換兩個變數的值。這個函式非常方便，因為它已經被優化並且被廣泛使用。</p><p>要使用 std::swap 的話，需要引入的標頭檔: <code>&lt;algorithm&gt;</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Before swapping: a = "</span> &lt;&lt; a &lt;&lt; <span class="string">", b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::swap(a, b);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"After swapping: a = "</span> &lt;&lt; a &lt;&lt; <span class="string">", b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的程式碼中，我們首先定義了兩個整數變數<code>a</code>和<code>b</code>，並且初始化它們的值。然後，我們使用<code>std::swap</code>函式來交換它們的值，最後輸出交換後的結果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Before swapping: a = 5, b = 10</span><br><span class="line">After swapping: a = 10, b = 5</span><br></pre></td></tr></table></figure><p>這種方法非常簡單且高效，因為<code>std::swap</code>函式已經被優化並且具有良好的性能。</p><h2><span id="自製swap函式使用參考進行交換">自製<code>swap</code>函式：使用參考進行交換</span></h2><p>除了使用標準庫提供的函式外，我們還可以自製一個自己的<code>swap</code>函式。這樣做的好處是我們可以更好地理解變數交換的原理，並且可以根據需要進行修改和擴充。請看以下範例，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">referenceSwap</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">int</span>&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Before swapping: a = "</span> &lt;&lt; a &lt;&lt; <span class="string">", b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    referenceSwap(a, b);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"After swapping: a = "</span> &lt;&lt; a &lt;&lt; <span class="string">", b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在這個自製的<code>swap</code>函式中，我們使用了參考(reference)參數，這樣可以直接修改變數的值而不需要回傳值。這種方法與使用標準庫提供的方法相比，更加靈活且容易理解。</p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <h2><span id="自製swap函式使用指標進行交換">自製<code>swap</code>函式：使用指標進行交換</span></h2><p>除了使用參考(reference)外，我們還可以使用指標(pointer)來交換兩個變數的值。這種方法與使用參考類似，但是需要傳遞指向變數的指標。請看以下範例，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pointerSwap</span><span class="params">(<span class="keyword">int</span>* x, <span class="keyword">int</span>* y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = *x;</span><br><span class="line">    *x = *y;</span><br><span class="line">    *y = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Before swapping: a = "</span> &lt;&lt; a &lt;&lt; <span class="string">", b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    pointerSwap(&amp;a, &amp;b);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"After swapping: a = "</span> &lt;&lt; a &lt;&lt; <span class="string">", b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在這個方法中，我們透過將變數的地址傳遞給<code>pointerSwap</code>函式，然後在函式內部使用指標操作來交換兩個變數的值。這種方法與使用參考的方法非常相似，但是指標允許我們明確地操作變數的記憶體地址。</p><h2><span id="總結">總結</span></h2><p>在本篇文章中，我們學習了如何使用C++中的<code>std::swap</code>函式來交換兩個變數的值，以及如何自製一個自己的參考跟指標<code>swap</code>函式來進行變數交換。無論是使用標準庫提供的函式還是自製的函式，都可以方便地實現變數交換的功能。</p><ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-pub-8106207149031244" data-ad-slot="3222287843"></ins><script>    (adsbygoogle = window.adsbygoogle || []).push({});</script>  <p>以上就是 C++ std::swap 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/std-string/" title="std::string 用法與範例">std::string 用法與範例</a><br><a href="/std-vector/" title="std::vector 用法與範例">std::vector 用法與範例</a><br><a href="/std-sort/" title="std::sort 用法與範例">std::sort 用法與範例</a><br><a href="/std-map/" title="std::map 用法與範例">std::map 用法與範例</a><br><a href="/std-set/" title="std::set 用法與範例">std::set 用法與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C++ std::swap 用法與範例，在 C++ 中，當我們需要交換兩個變數的值時，我們通常會使用一個名為&lt;code&gt;swap&lt;/code&gt;的函式。這個函式可以幫助我們快速且簡單地交換變數的值，而不需要額外的程式碼。在本篇文章中，我們將探討如何
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Swiss File Knife 多功能命令列工具介紹及超實用FTP功能</title>
    <link href="https://shengyu7697.github.io/swiss-file-knife/"/>
    <id>https://shengyu7697.github.io/swiss-file-knife/</id>
    <published>2024-05-24T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.969Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Swiss File Knife 多功能命令列工具，在現代的數位工作環境中，擁有一款功能強大的命令列工具是每個開發者、系統管理員及技術愛好者的夢想。Swiss File Knife（SFK）就是這樣一款多功能的命令列工具，它能在不需要安裝多個單獨工具的情況下，幫助使用者完成許多常見的檔案和文字處理任務。本文將介紹 SFK 的主要功能，特別是其強大的 FTP 功能，並提供一些實用的使用範例。</p><h2><span id="swiss-file-knife-介紹">Swiss File Knife 介紹</span></h2><p>Swiss File Knife，顧名思義，其名稱靈感來自瑞士軍刀（Swiss Army Knife），這是一款集多種工具於一身的實用軟體。SFK 支持 Windows、Linux 和 MacOS 系統，提供了一系列實用的檔案和文字處理功能，使得使用者可以輕鬆完成各種任務。</p><h3><span id="主要功能概述">主要功能概述</span></h3><ol><li><p><strong>檔案處理</strong>：</p><ul><li><p><strong>合併檔案</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk concat file1.txt file2.txt -o output.txt</span><br></pre></td></tr></table></figure><p>這個指令將 <code>file1.txt</code> 和 <code>file2.txt</code> 合併成一個新檔案 <code>output.txt</code>。</p></li><li><p><strong>分割檔案</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk split bigfile.txt -size 1m</span><br></pre></td></tr></table></figure><p>將 <code>bigfile.txt</code> 按每個部分 1MB 大小進行分割。</p></li><li><p><strong>比較檔案</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk diff file1.txt file2.txt</span><br></pre></td></tr></table></figure><p>比較 <code>file1.txt</code> 和 <code>file2.txt</code> 之間的差異。</p></li><li><p><strong>查找檔案</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk find -pattern <span class="string">"*.txt"</span> -dir /path/to/search</span><br></pre></td></tr></table></figure><p>在 <code>/path/to/search</code> 目錄中查找所有 <code>.txt</code> 檔案。</p></li><li><p><strong>複製檔案</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk copy file.txt /path/to/destination/</span><br></pre></td></tr></table></figure><p>將 <code>file.txt</code> 複製到 <code>/path/to/destination/</code> 目錄。</p></li></ul></li><li><p><strong>文字處理</strong>：</p><ul><li><p><strong>搜尋和替換</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk replace <span class="keyword">in</span> file.txt from <span class="string">"oldtext"</span> to <span class="string">"newtext"</span></span><br></pre></td></tr></table></figure><p>將 <code>file.txt</code> 中的所有 <code>oldtext</code> 替換為 <code>newtext</code>。</p></li><li><p><strong>文字轉換</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk tolower file.txt -o lowerfile.txt</span><br></pre></td></tr></table></figure><p>將 <code>file.txt</code> 中的所有文字轉換為小寫並保存到 <code>lowerfile.txt</code>。</p></li><li><p><strong>提取文字</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk extract file.txt <span class="string">"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]&#123;2,&#125;"</span></span><br></pre></td></tr></table></figure><p>從 <code>file.txt</code> 中提取所有的電子郵件地址。</p></li></ul></li><li><p><strong>系統操作</strong>：</p><ul><li><p><strong>行程監控和管理</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk ps</span><br></pre></td></tr></table></figure><p>列出當前系統中的所有行程。</p></li><li><p><strong>目錄樹查看</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk tree /path/to/directory</span><br></pre></td></tr></table></figure><p>以圖形化方式顯示 <code>/path/to/directory</code> 目錄結構。</p></li><li><p><strong>服務監控</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk check service</span><br></pre></td></tr></table></figure><p>檢查本地或遠端系統的服務狀態。</p></li></ul></li><li><p><strong>網路工具</strong>：</p><ul><li><p><strong>連接埠掃描</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk scanport 192.168.1.1 1 65535</span><br></pre></td></tr></table></figure><p>掃描 IP 地址 <code>192.168.1.1</code> 上的所有連接埠。</p></li><li><p><strong>檔案傳輸</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk httpserv -port 8080</span><br></pre></td></tr></table></figure><p>在本地啟動一個 HTTP 伺服器，連接埠號為 8080，用於檔案傳輸。</p></li><li><p><strong>URL 檢查</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk checkurl http://example.com</span><br></pre></td></tr></table></figure><p>檢查 URL <code>http://example.com</code> 的可達性和回應時間。</p></li></ul></li><li><p><strong>資料壓縮和解壓</strong>：</p><ul><li><p><strong>壓縮檔案</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk zip output.zip file1.txt file2.txt</span><br></pre></td></tr></table></figure><p>將 <code>file1.txt</code> 和 <code>file2.txt</code> 壓縮為 <code>output.zip</code> 檔案。</p></li><li><p><strong>解壓檔案</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk unzip output.zip</span><br></pre></td></tr></table></figure><p>解壓 <code>output.zip</code> 檔案。</p></li></ul></li><li><p><strong>腳本編寫</strong>：</p><ul><li><p><strong>批量處理</strong>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk script myscript.txt</span><br></pre></td></tr></table></figure><p>執行腳本檔案 <code>myscript.txt</code> 中的指令。</p></li></ul></li></ol><h3><span id="實用的-ftp-功能">實用的 FTP 功能</span></h3><p>SFK 的 FTP 功能特別實用，對於需要頻繁進行檔案傳輸和管理的使用者來說，是不可多得的利器。以下是 SFK 提供的主要 FTP 功能以及一些常見的使用範例：</p><h4><span id="主要-ftp-功能">主要 FTP 功能</span></h4><ol><li><strong>上傳檔案</strong>：將本地檔案上傳到遠端 FTP 伺服器。</li><li><strong>下載檔案</strong>：從遠端 FTP 伺服器下載檔案到本地。</li><li><strong>列出檔案和目錄</strong>：列出遠端 FTP 伺服器上的檔案和目錄。</li><li><strong>刪除檔案</strong>：刪除遠端 FTP 伺服器上的檔案。</li><li><strong>建立和刪除目錄</strong>：建立新的遠端目錄或刪除現有目錄。</li><li><strong>FTP 腳本支持</strong>：支持使用腳本來自動化 FTP 任務，適合批量處理。</li></ol><h4><span id="使用範例">使用範例</span></h4><p>以下是一些常見的 SFK FTP 指令範例：</p><p><strong>上傳檔案到 FTP 伺服器</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk ftpput user:password@ftp.server.com /remote/path/file.txt /<span class="built_in">local</span>/path/file.txt</span><br></pre></td></tr></table></figure><p>這個指令將本地檔案 <code>/local/path/file.txt</code> 上傳到 FTP 伺服器的 <code>/remote/path/file.txt</code>。</p><p><strong>從 FTP 伺服器下載檔案</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk ftpget user:password@ftp.server.com /remote/path/file.txt /<span class="built_in">local</span>/path/file.txt</span><br></pre></td></tr></table></figure><p>這個指令將遠端檔案 <code>/remote/path/file.txt</code> 下載到本地的 <code>/local/path/file.txt</code>。</p><p><strong>列出遠端目錄中的檔案</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk ftpls user:password@ftp.server.com /remote/path/</span><br></pre></td></tr></table></figure><p>這個指令列出 <code>/remote/path/</code> 目錄中的檔案和子目錄。</p><p><strong>刪除遠端檔案</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk ftprm user:password@ftp.server.com /remote/path/file.txt</span><br></pre></td></tr></table></figure><p>這個指令刪除 FTP 伺服器上的 <code>/remote/path/file.txt</code> 檔案。</p><p><strong>建立遠端目錄</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk ftpmkdir user:password@ftp.server.com /remote/path/newdir</span><br></pre></td></tr></table></figure><p>這個指令在 FTP 伺服器上建立一個新的目錄 <code>/remote/path/newdir</code>。</p><h4><span id="自動化-ftp-任務">自動化 FTP 任務</span></h4><p>透過 SFK 的腳本功能，你可以將多個 FTP 操作組合起來，進行自動化處理。例如，下面是一個簡單的腳本範例，先上傳檔案，然後列出目錄：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sfk ftp user:password@ftp.server.com -<span class="built_in">command</span> <span class="string">"put /remote/path/file.txt /local/path/file.txt; ls /remote/path/"</span></span><br></pre></td></tr></table></figure><p>這個腳本首先上傳本地檔案，然後列出遠端目錄中的檔案。</p><h2><span id="總結">總結</span></h2><p>Swiss File Knife 是一款功能豐富且強大的命令列工具，特別適合那些需要高效處理檔案和文字的使用者。其強大的 FTP 功能使得檔案傳輸和管理變得更加便捷和高效。無論是單次的檔案上傳下載，還是批量自動化操作，SFK 都能夠提供高效便捷的解決方案。如果你經常處理 FTP 任務，Swiss File Knife 無疑是一個非常實用的工具。</p><p>下載點可以參考 <a href="https://swissfileknife.sourceforge.net/" rel="noopener" target="_blank">Swiss File Knife sourceforge</a> 這裡。</p><p>以上就是 Swiss File Knife 多功能命令列工具的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Swiss File Knife 多功能命令列工具，在現代的數位工作環境中，擁有一款功能強大的命令列工具是每個開發者、系統管理員及技術愛好者的夢想。Swiss File Knife（SFK）就是這樣一款多功能的命令列工具，它能在不需要安裝多個單獨
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shengyu7697.github.io/tags/Ubuntu/"/>
    
      <category term="Windows" scheme="https://shengyu7697.github.io/tags/Windows/"/>
    
      <category term="Software" scheme="https://shengyu7697.github.io/tags/Software/"/>
    
      <category term="macOS" scheme="https://shengyu7697.github.io/tags/macOS/"/>
    
      <category term="Linux" scheme="https://shengyu7697.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>為什麼 MVP 是每個創業者都應該了解的關鍵策略？</title>
    <link href="https://shengyu7697.github.io/what-is-a-minimum-viable-product/"/>
    <id>https://shengyu7697.github.io/what-is-a-minimum-viable-product/</id>
    <published>2024-05-23T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.969Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 來聊聊什麼是最小可行產品，Minimum Viable Product (MVP) 最小可行產品是軟體開發和創業領域中一個重要的概念。以及做產品中這件事為什麼如此重要，你是否曾經花費大量時間和資源開發產品，卻發現市場並不接受？最小可行產品（MVP）能幫助你避免這種情況。在這篇文章中，我們將探討什麼是MVP，為什麼它對初創企業和成熟公司同樣重要，並分享一些真實案例，告訴你如何有效地構建和運用MVP。</p><h2><span id="什麼是最小可行產品mvp">什麼是最小可行產品（MVP）？</span></h2><p>在現代創業和產品開發中，”最小可行產品”（Minimum Viable Product，簡稱MVP）是一個非常重要的概念。MVP是指具有最基本功能的產品，能夠滿足早期使用者的核心需求，並且可以快速推出市場以取得反饋，從而進一步完善和改進產品。</p><h3><span id="為什麼需要mvp">為什麼需要MVP？</span></h3><p>創業和產品開發過程中，最常見的風險之一就是投入大量時間和資金開發一個最終可能並不受市場歡迎的產品。MVP的出現正是為了解決這一問題。透過先推出一個簡單的、功能有限但可以使用的產品，我們能夠：</p><ol><li><strong>驗證市場需求</strong>：了解目標使用者是否真的需要這樣的產品。</li><li><strong>快速叠代改進</strong>：根據使用者的反饋，快速改進產品，提升使用者體驗。</li><li><strong>節省資源</strong>：避免在無用的功能上浪費時間和資金，把精力集中在最重要的功能上。</li><li><strong>降低風險</strong>：在初期就能發現並解決潛在的問題，減少未來開發的風險。</li></ol><h3><span id="如何構建mvp">如何構建MVP？</span></h3><p>構建MVP並不是簡單地去掉所有功能，而是有策略地選擇那些最關鍵的、能夠解決使用者核心問題的功能。以下是構建MVP的一些步驟：</p><ol><li><strong>定義問題和目標使用者</strong>：首先明確你要解決的問題以及目標使用者群體，這樣才能確保你的MVP能夠滿足這些使用者的需求。</li><li><strong>列出所有潛在功能</strong>：把你認為產品應該具備的所有功能列出來，然後優先排序。</li><li><strong>選擇核心功能</strong>：選擇那些最能解決目標使用者問題的核心功能，這些功能將構成你的MVP。</li><li><strong>開發和測試</strong>：快速開發出MVP，並進行內部測試，確保基本功能可以正常執行。</li><li><strong>推出市場並收集反饋</strong>：將MVP推向市場，收集使用者反饋，了解他們的使用體驗和需求。</li></ol><h3><span id="成功的mvp案例">成功的MVP案例</span></h3><p>前面已經了解了什麼是MVP，那現在我們來看看市面上有什麼值得我們學習的MVP案例，</p><ol><li><p><strong>Dropbox</strong>：Dropbox的創始人並沒有在一開始就構建完整的產品，而是製作了一個簡單的影片，展示了Dropbox的核心功能。這個影片吸引了大量使用者的興趣和註冊，幫助團隊驗證了市場需求。</p></li><li><p><strong>Airbnb</strong>：Airbnb最初的MVP是一個簡單的網站，允許使用者在自己的家中出租空閒房間。這個簡單的網站幫助創始人驗證了人們對短期出租房間的需求。</p></li><li><p><strong>Instagram</strong><br>Instagram一開始的MVP是一個名為Burbn的應用，主要功能是允許使用者分享地理位置和照片。創始人發現使用者對分享照片的功能最感興趣，於是他們簡化了產品，專注於照片分享和簡單的濾鏡功能，從而誕生了現在的Instagram。</p></li><li><p><strong>Facebook</strong><br>Facebook最初僅僅是一個面向哈佛大學學生的校內社交平台，名為“TheFacebook”。其功能非常簡單，主要是提供一個在線的學生名冊。透過逐步擴展到其他大學，並在收到使用者反饋後不斷增加新功能，Facebook最終成為全球最大的社交媒體平台之一。</p></li><li><p><strong>Spotify</strong><br>Spotify的MVP是一個簡單的桌面應用程式，允許使用者免費流媒體播放音樂。創始團隊透過這個基本產品測試了使用者對流媒體音樂服務的需求和反應。使用者的正面反饋幫助Spotify確信他們的商業模式，並逐步擴展其功能和音樂庫。</p></li><li><p><strong>Amazon</strong><br>Amazon的創始人Jeff Bezos一開始只是一個在線書店，產品非常簡單，只有基本的購物車和結賬功能。他透過這個MVP驗證了在線購物的市場需求。隨著時間的推移，Amazon逐步擴展到銷售其他產品，成為今天的電商巨頭。</p></li><li><p><strong>Uber</strong><br>Uber的MVP名為UberCab，是一個簡單的應用，允許使用者透過手機呼叫豪華車。在早期階段，創始人只在舊金山運營這項服務，並收集使用者反饋。透過不斷優化使用者體驗和擴大服務範圍，Uber逐漸成為全球範圍內的共享出行領導者。</p></li></ol><h3><span id="總結">總結</span></h3><p>這些案例展示了MVP在不同領域和行業中的成功應用。它們的共同點在於創始人都選擇了一個簡單但具有關鍵價值的功能，迅速推出市場，並根據使用者反饋逐步改進和擴展產品。這種方法不僅有效地節省了資源，還能迅速驗證市場需求，是創業和產品開發中極其寶貴的策略。</p><p>最小可行產品（MVP）是一種有效的產品開發策略，可以幫助創業者和企業節省資源，降低風險，並且快速適應市場需求。在構建MVP的過程中，關鍵是聚焦於核心功能，快速推出市場並且不斷從使用者反饋中學習和改進。這樣，才能逐步打磨出一款成功的產品。</p><p>以上就是 什麼是最小可行產品的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 來聊聊什麼是最小可行產品，Minimum Viable Product (MVP) 最小可行產品是軟體開發和創業領域中一個重要的概念。以及做產品中這件事為什麼如此重要，你是否曾經花費大量時間和資源開發產品，卻發現市場並不接受？最小可行產品（MVP）能幫
      
    
    </summary>
    
    
      <category term="軟體開發" scheme="https://shengyu7697.github.io/tags/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC/"/>
    
      <category term="商業策略" scheme="https://shengyu7697.github.io/tags/%E5%95%86%E6%A5%AD%E7%AD%96%E7%95%A5/"/>
    
      <category term="產品管理" scheme="https://shengyu7697.github.io/tags/%E7%94%A2%E5%93%81%E7%AE%A1%E7%90%86/"/>
    
      <category term="創業" scheme="https://shengyu7697.github.io/tags/%E5%89%B5%E6%A5%AD/"/>
    
  </entry>
  
  <entry>
    <title>macOS python urllib3 v2 only supports OpenSSL 1.1.1 問題與解決方法</title>
    <link href="https://shengyu7697.github.io/mac-python-import-error-urllib3-v2-only-supports-openssl-1-1-1/"/>
    <id>https://shengyu7697.github.io/mac-python-import-error-urllib3-v2-only-supports-openssl-1-1-1/</id>
    <published>2024-05-22T14:00:00.000Z</published>
    <updated>2024-06-07T09:51:40.209Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 紀錄在 macOS 執行 python 跑 requests 遇到的 urllib3 v2 only supports OpenSSL 1.1.1 問題與解決方法，今日在新 macOS 中執行 python 跑 requests 遇到以下問題，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">% ./main.py</span><br><span class="line">/Users/shengyu/Library/Python/3.8/lib/python/site-packages/urllib3/__init__.py:35: NotOpenSSLWarning: urllib3 v2 only supports OpenSSL 1.1.1+, currently the &apos;ssl&apos; module is compiled with &apos;LibreSSL 2.8.3&apos;. See: https://github.co</span><br><span class="line">m/urllib3/urllib3/issues/3020</span><br><span class="line">  warnings.warn(</span><br></pre></td></tr></table></figure></p><p>看起來似乎是說我的Python環境中使用的ssl模組版本（LibreSSL 2.8.3）不被urllib3版本2.x支持。urllib3版本2要求OpenSSL 1.1.1或更高版本。</p><p>用 pip3 查看我安裝 urllib3 的版本是 2.2.1<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 list | grep urllib3</span><br><span class="line">urllib3            2.2.1</span><br></pre></td></tr></table></figure></p><p>網路上查的結果有幾種方式，最後是採用降級安裝 urllib3 舊版本解決，<a href="https://stackoverflow.com/questions/76187256/importerror-urllib3-v2-0-only-supports-openssl-1-1-1-currently-the-ssl-modu" rel="noopener" target="_blank">這篇</a>是說安裝 1.26.6 可以解決</p><p><strong>降級 urllib3 版本</strong></p><p>要降級 urllib3，你可以使用 pip 安裝指定的 urllib3 舊版本，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install urllib3==1.26.15</span><br></pre></td></tr></table></figure></p><p>安裝後查詢一下 urllib3 版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">% pip3 list | grep urllib3</span><br><span class="line">urllib3            1.26.15</span><br></pre></td></tr></table></figure></p><p>或者是安裝 urllib3 2.0 以下的最新版<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install &apos;urllib3&lt;2.0&apos;</span><br></pre></td></tr></table></figure></p><p><strong>使用 Python 虛擬環境來安裝 urllib3 舊版本</strong></p><p>以下是如何建立虛擬環境並安裝相容版本的 urllib3：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python -m venv myenv</span><br><span class="line"><span class="built_in">source</span> myenv/bin/activate  <span class="comment"># 在 Windows 上使用 `myenv\Scripts\activate`</span></span><br><span class="line">pip install urllib3==1.26.15</span><br></pre></td></tr></table></figure><p>離開虛擬環境的話則是輸入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure></p><p>無論在哪個作業系統上，deactivate 指令都可以退出當前的虛擬環境，使你回傳到全域的 Python 環境。</p><p>以上就是 macOS 執行 python 跑 requests 遇到的 urllib3 v2 only supports OpenSSL 1.1.1 問題與解決方法，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 紀錄在 macOS 執行 python 跑 requests 遇到的 urllib3 v2 only supports OpenSSL 1.1.1 問題與解決方法，今日在新 macOS 中執行 python 跑 requests 遇到以下問題，&lt;br&gt;
      
    
    </summary>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
      <category term="macOS" scheme="https://shengyu7697.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>macOS 安裝舊版的 Xcode 版本 (Download an Older Version of Xcode)</title>
    <link href="https://shengyu7697.github.io/mac-download-an-older-version-of-xcode/"/>
    <id>https://shengyu7697.github.io/mac-download-an-older-version-of-xcode/</id>
    <published>2024-05-20T14:00:00.000Z</published>
    <updated>2024-05-21T14:04:31.642Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 紀錄 macOS 安裝舊版的 Xcode 版本，例如我家中現在服役的 2014 的 mbpr15 只能更新到 macOS 11.7.10，只能裝對應的 Xcode 13.2.1，但 AppStore 只能裝最新版本的 Xcode，那怎麼辦呢？</p><p>Apple 有提供開發者下載 Xcode 歷史版本，（需要登入一下Apple ID），<br><a href="https://developer.apple.com/download/all/" rel="noopener" target="_blank">https://developer.apple.com/download/all/</a></p><p>然後在搜尋列中輸入 Xcode，也可以帶入 Xcode 版本資訊(例如 Xcode 13.2.1)<br><img src="/mac-download-an-older-version-of-xcode/xcode-older-version.png" title="xcode older version">  </p><p>下載後點擊檔案，會自動解壓縮，解壓縮後移動到應用程式就可以執行了，<br>如果你有多個 Xcode 版本，你也可以將 Xcode 改名加上版號。</p><p>其他參考<br><a href="https://forums.developer.apple.com/forums/thread/698396" rel="noopener" target="_blank">https://forums.developer.apple.com/forums/thread/698396</a></p><p>以上就是 macOS 安裝舊版的 Xcode 版本介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/mac-move-dock-to-other-screen/" title="mac 雙螢幕延伸模式的 dock 切換方法">mac 雙螢幕延伸模式的 dock 切換方法</a><br><a href="/mac-screen-sharing/" title="macOS Screen Sharing 用指令開啟螢幕分享">macOS Screen Sharing 用指令開啟螢幕分享</a><br><a href="/mac-zsh-completions/" title="macOS 安裝 zsh-completions 自動完成指令">macOS 安裝 zsh-completions 自動完成指令</a><br><a href="/mac-upgrade/" title="macOS 版本升級的方法">macOS 版本升級的方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 紀錄 macOS 安裝舊版的 Xcode 版本，例如我家中現在服役的 2014 的 mbpr15 只能更新到 macOS 11.7.10，只能裝對應的 Xcode 13.2.1，但 AppStore 只能裝最新版本的 Xcode，那怎麼辦呢？&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="macOS" scheme="https://shengyu7697.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>Linux iotop 指令用法範例</title>
    <link href="https://shengyu7697.github.io/linux-iotop/"/>
    <id>https://shengyu7697.github.io/linux-iotop/</id>
    <published>2024-05-19T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.969Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Linux iotop 指令用法，<code>iotop</code> 是一個 Linux 指令，用於監視系統中磁碟 I/O 的情況，類似於 <code>top</code> 指令用於監視 CPU 使用情況。它可以顯示正在進行的磁碟 I/O 操作的相關資訊，如行程、IO 速度、IOPS（每秒輸入/輸出操作數）等。現在讓我們來看一下它的基本用法以及其他常見和進階的用法。</p><h2><span id="基本用法">基本用法</span></h2><p><code>iotop</code> 指令的基本用法如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iotop [options]</span><br></pre></td></tr></table></figure></p><p>Ubuntu 要用 apt 安裝的話請輸入 <code>sudo apt install iotop</code> 指令。</p><p>要查看當前系統中正在進行的磁碟 I/O 操作，只需在終端中輸入以下指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iotop</span><br></pre></td></tr></table></figure></p><p>這將列出正在進行的磁碟 I/O 操作的相關資訊，如行程 ID、使用者、IO 速度等。預設情況下，<code>iotop</code> 每秒更新一次資訊。</p><img src="/linux-iotop/iotop.png" title="iotop">  <h2><span id="iotop-常用選項"><code>iotop</code> 常用選項</span></h2><p>當你在 Linux 系統中執行 <code>iotop</code> 指令時，你可以使用一些選項來調整它的行為。以下是一些常用的選項及其說明：<br><code>-o</code>：僅顯示符合指定選項的行。例如，<code>iotop -o</code> 將僅顯示有 IO 活動的行程。<br><code>-b</code>：以批次模式執行，這將禁用互動式模式，直接將結果輸出到標準輸出中。<br><code>-m</code>：用來僅顯示檔案系統相關的 IO 活動，而忽略 swap 空間的 IO 活動。這對於關注檔案系統 IO 的場景很有用。<br><code>-n NUM</code>：指定要執行的疊代次數，預設為一次。<br><code>-d SEC</code>：指定更新延遲（秒）。預設為 1 秒。<br><code>-p PID</code>：僅顯示指定行程 ID 的 IO 活動。<br><code>-u USER</code>：僅顯示指定使用者名稱的 IO 活動。<br><code>-P</code>：顯示行程 ID，而不是指定行程的指令行。<br><code>-a</code>：顯示 IO 活動的累計資料而不是瞬時值。</p><p>這些選項可以根據你的需求來選擇，以更好地了解系統中的 IO 活動情況。</p><h2><span id="其他常見用法">其他常見用法</span></h2><p><code>iotop</code> 指令使用 <code>-o</code> 選項，可以顯示磁碟 I/O 操作的每秒輸出操作數：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iotop -o</span><br></pre></td></tr></table></figure></p><p>這將顯示每個行程的每秒輸出操作數。</p><p><code>iotop</code> 指令使用 <code>-a</code> 選項，可以顯示正在進行磁碟 I/O 操作的每秒輸入操作數：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iotop -a</span><br></pre></td></tr></table></figure></p><p>這將顯示每個行程的每秒輸入操作數。</p><h2><span id="進階用法">進階用法</span></h2><p><code>iotop</code> 指令透過 <code>-d</code> 選項，可以顯示指定時間間隔的磁碟 I/O 操作：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iotop -d 5</span><br></pre></td></tr></table></figure></p><p>這將每隔五秒顯示一次磁碟 I/O 操作的情況。</p><p><code>iotop</code> 指令透過 <code>-p</code> 選項，可以顯示指定行程的 I/O 操作：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iotop -p &lt;PID&gt;</span><br></pre></td></tr></table></figure></p><p>這將僅顯示指定行程 ID（PID）正在進行的 I/O 操作。</p><p><code>iotop</code> 指令透過 <code>-T</code> 選項，可以顯示執行緒等級的磁碟 I/O 使用情況，而不僅僅是處理程式等級。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iotop -T</span><br></pre></td></tr></table></figure></p><p><code>iotop</code> 指令透過 <code>-P</code> 選項，可以顯示磁碟 I/O 操作的累計值，而不是瞬時值。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iotop -P</span><br></pre></td></tr></table></figure></p><h2><span id="總結">總結</span></h2><p><code>iotop</code> 指令是一個非常有用的工具，用於監視系統中的磁碟 I/O 操作。透過了解其基本用法、其他常見用法和進階用法，使用者可以更好地了解系統的磁碟 I/O 情況，並及時發現和解決可能存在的性能問題。無論是用於性能優化、故障排查還是監控系統狀態，<code>iotop</code> 都是一個非常實用的指令。</p><p>以上就是 Linux iotop 指令用法範例的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/linux-tutorial/" title="Linux 常用指令教學懶人包">Linux 常用指令教學懶人包</a><br><a href="/linux-wget/" title="Linux wget 下載檔案用法與範例">Linux wget 下載檔案用法與範例</a><br><a href="/linux-sed/" title="Linux sed 字串取代用法與範例">Linux sed 字串取代用法與範例</a><br><a href="/linux-find/" title="Linux find 尋找檔案/尋找資料夾用法與範例">Linux find 尋找檔案/尋找資料夾用法與範例</a><br><a href="/linux-grep-ack-ag/" title="Linux grep/ack/ag 搜尋字串用法與範例">Linux grep/ack/ag 搜尋字串用法與範例</a><br><a href="/linux-tee/" title="Linux tee 同時螢幕標準輸出和輸出到檔案用法與範例">Linux tee 同時螢幕標準輸出和輸出到檔案用法與範例</a><br><a href="/linux-xargs/" title="Linux xargs 參數清單轉換用法與範例">Linux xargs 參數清單轉換用法與範例</a><br><a href="/linux-tail/" title="Linux tail 持續監看檔案輸出用法與範例">Linux tail 持續監看檔案輸出用法與範例</a><br><a href="/linux-du/" title="Linux du 查詢硬碟剩餘空間/資料夾容量用法與範例">Linux du 查詢硬碟剩餘空間/資料夾容量用法與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Linux iotop 指令用法，&lt;code&gt;iotop&lt;/code&gt; 是一個 Linux 指令，用於監視系統中磁碟 I/O 的情況，類似於 &lt;code&gt;top&lt;/code&gt; 指令用於監視 CPU 使用情況。它可以顯示正在進行的磁碟 I/O 操作
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shengyu7697.github.io/tags/Ubuntu/"/>
    
      <category term="Linux Command" scheme="https://shengyu7697.github.io/tags/Linux-Command/"/>
    
      <category term="Linux" scheme="https://shengyu7697.github.io/tags/Linux/"/>
    
      <category term="Shell Script" scheme="https://shengyu7697.github.io/tags/Shell-Script/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ sscanf 用法與範例</title>
    <link href="https://shengyu7697.github.io/cpp-sscanf/"/>
    <id>https://shengyu7697.github.io/cpp-sscanf/</id>
    <published>2024-05-18T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.969Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ sscanf 用法與範例，在 C/C++ 語言中，<code>sscanf</code> 函式是一個非常有用的工具，用於從字串中提取資料（從字串中讀取格式化的輸入）。本文將介紹 <code>sscanf</code> 函式的基本用法，並提供一些常見的使用情況和範例程式碼，scanf 詳細用法範例請繼續往下閱讀。  </p><p>C/C++ 要讓指定的格式從字串中提取資料，並將提取的資料儲存到指定的變數可以使用 sscanf，使用 sscanf 的話需要引入的標頭檔 <code>&lt;stdio.h&gt;</code>，如果要使用 C++ 的標頭檔則是引入 <code>&lt;cstdio&gt;</code>，<br>sscanf 函式原型為<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sscanf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str, <span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span>;</span><br></pre></td></tr></table></figure></p><p>其中，<code>str</code> 是包含要解析的字串，<code>format</code> 是格式字串，用於指定解析的方式，而 <code>...</code> 則是輸出的變數。<code>sscanf</code> 函式會根據 <code>format</code> 字串中的格式來解析 <code>str</code> 字串，並將解析結果儲存到 <code>...</code> 中指定的變數中。</p><h2><span id="cc-sscanf-基本用法範例">C/C++ sscanf 基本用法範例</span></h2><p>下面是一個簡單的範例，示範了如何使用 <code>sscanf</code> 函式：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[] = <span class="string">"John 25"</span>;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 從 str 中按照格式提取資料</span></span><br><span class="line">    <span class="built_in">sscanf</span>(str, <span class="string">"%s %d"</span>, name, &amp;age);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Name: %s\n"</span>, name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Age: %d\n"</span>, age);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在這個範例中，我們首先定義了一個字串 <code>str</code> 包含了一個名字和一個年齡，然後我們定義了兩個變數 <code>name</code> 和 <code>age</code>，用於儲存從字串中提取的名字和年齡，之後我們使用 <code>sscanf</code> 函式按照格式 <code>&quot;%s %d&quot;</code> 從字串 <code>str</code> 中提取名字和年齡，並將它們分別儲存到 <code>name</code> 和 <code>age</code> 變數中。最後我們列印出提取出的名字和年齡。</p><p>除了基本的用法外，C/C++ <code>sscanf</code> 函式還可以處理更覆雜的情況，下面是一些常見的用法及範例程式碼：</p><h2><span id="cc-sscanf-提取多個資料項">C/C++ sscanf 提取多個資料項</span></h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[] = <span class="string">"3.14 42 hello"</span>;</span><br><span class="line">    <span class="keyword">double</span> pi;</span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    <span class="keyword">char</span> word[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 從 str 中按照格式提取資料</span></span><br><span class="line">    <span class="built_in">sscanf</span>(str, <span class="string">"%lf %d %s"</span>, &amp;pi, &amp;num, word);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Pi: %.2f\n"</span>, pi);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Number: %d\n"</span>, num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Word: %s\n"</span>, word);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這個範例中，字串 <code>str</code> 包含了一個浮點數、一個整數和一個單詞。我們定義了三個變數 <code>pi</code>、<code>num</code> 和 <code>word</code>，用於儲存從字串中提取的資料。使用 <code>sscanf</code> 函式按照格式 <code>&quot;%lf %d %s&quot;</code> 從字串 <code>str</code> 中提取這三個資料，並將它們分別儲存到對應的變數中。最後我們印出提取出的浮點數、整數和單詞。</p><h2><span id="cc-sscanf-使用格式修飾符">C/C++ sscanf 使用格式修飾符</span></h2><p>忽略特定的字元，例如：忽略<code>-</code>字元，範例如下，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[] = <span class="string">"2024-04-30"</span>;</span><br><span class="line">    <span class="keyword">int</span> year, month, day;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 從 str 中按照格式提取資料</span></span><br><span class="line">    <span class="built_in">sscanf</span>(str, <span class="string">"%d-%d-%d"</span>, &amp;year, &amp;month, &amp;day);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Year: %d\n"</span>, year);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Month: %d\n"</span>, month);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Day: %d\n"</span>, day);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這個範例中，字串 <code>str</code> 包含了一個日期，格式為 “年-月-日”。我們定義了三個變數 <code>year</code>、<code>month</code> 和 <code>day</code>，用於儲存從字串中提取的年、月和日。使用 <code>sscanf</code> 函式按照格式 <code>&quot;%d-%d-%d&quot;</code> 從字串 <code>str</code> 中提取年、月和日，忽略中間的<code>-</code>連接字元，並將它們分別儲存到對應的變數中。最終我們列印出提取出的年、月和日。</p><h2><span id="cc-sscanf-處理不定長資料">C/C++ sscanf 處理不定長資料</span></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[] = <span class="string">"10 20 30 40 50"</span>;</span><br><span class="line">    <span class="keyword">int</span> numbers[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 從 str 中按照格式提取資料</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="built_in">sscanf</span>(str, <span class="string">"%d %d %d %d %d"</span>, &amp;numbers[<span class="number">0</span>], &amp;numbers[<span class="number">1</span>], &amp;numbers[<span class="number">2</span>], &amp;numbers[<span class="number">3</span>], &amp;numbers[<span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Count: %d\n"</span>, count);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Numbers: "</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; ++i) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, numbers[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這個範例中，字串 <code>str</code> 包含了多個整數，以空格分隔。我們定義了一個整型陣列 <code>numbers</code>，用於儲存從字串中提取的整數。使用 <code>sscanf</code> 函式按照格式 <code>&quot;%d %d %d %d %d&quot;</code> 從字串 <code>str</code> 中提取整數，並將它們儲存到陣列 <code>numbers</code> 中。<code>sscanf</code> 函式回傳成功解析的資料項的數量，我們可以據此確定實際提取了多少個整數。最終，我們列印出提取出的整數以及實際提取的數量。</p><h2><span id="總結">總結</span></h2><p><code>sscanf</code> 函式是 C 語言中用於從字串中提取資料的強大工具。透過指定合適的格式字串，我們可以靈活地從字串中提取各種類型的資料，並將其儲存到指定的變數中。本文介紹了 <code>sscanf</code> 函式的基本用法以及一些常見的使用情況和範例程式碼，你可以看到 <code>sscanf</code> 函式的靈活性和多功能性。無論是從簡單的整數和浮點數，到複雜的字串和特定格式的輸入，它都能應對自如。</p><p>以上就是 C/C++ sscanf 的用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 C++ 相關技術，可以參考看看下面的文章，<br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-strcpy/" title="C/C++ strcpy 用法與範例">C/C++ strcpy 用法與範例</a><br><a href="/cpp-strcmp/" title="C/C++ strcmp 用法與範例">C/C++ strcmp 用法與範例</a><br><a href="/cpp-strcat/" title="C/C++ strcat 用法與範例">C/C++ strcat 用法與範例</a><br><a href="/cpp-strstr/" title="C/C++ strstr 用法與範例">C/C++ strstr 用法與範例</a><br><a href="/cpp-strtok/" title="C/C++ strtok 用法與範例">C/C++ strtok 用法與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ sscanf 用法與範例，在 C/C++ 語言中，&lt;code&gt;sscanf&lt;/code&gt; 函式是一個非常有用的工具，用於從字串中提取資料（從字串中讀取格式化的輸入）。本文將介紹 &lt;code&gt;sscanf&lt;/code&gt; 函式的基本用法，
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>使用 adb 指令讓你的 Android 裝置關機</title>
    <link href="https://shengyu7697.github.io/android-adb-shutdown-android-device/"/>
    <id>https://shengyu7697.github.io/android-adb-shutdown-android-device/</id>
    <published>2024-05-17T12:00:00.000Z</published>
    <updated>2024-06-07T09:51:40.209Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 使用 adb 指令讓你的 Android 裝置關機，在現代科技世界中，遠端控制裝置變得越來越重要。Android Debug Bridge (ADB) 是一個強大的工具，可以幫助開發者和高級使用者透過指令行遠端控制他們的 Android 裝置。在這篇文章中，我們將詳細介紹如何使用 ADB 指令來遠端關機你的 Android 裝置。</p><h2><span id="什麽是-adb">什麽是 ADB？</span></h2><p>ADB，即 Android Debug Bridge，是一個通用的指令行工具，允許你與 Android 裝置進行通訊和操作。透過 ADB，你可以執行各種任務，包括安裝和除錯應用、查看系統日志以及控制裝置的電源狀態。</p><h2><span id="為什麽使用-adb-關機">為什麽使用 ADB 關機？</span></h2><p>使用 ADB 關機有許多優點：</p><ol><li><strong>遠端操作</strong>：你可以在不直接接觸裝置的情況下進行關機。</li><li><strong>自動化任務</strong>：適用於需要自動化裝置管理的場景。</li><li><strong>開發和測試</strong>：對於開發者而言，透過指令行關機裝置可以更高效地進行測試。</li></ol><h2><span id="如何使用-adb-指令關機">如何使用 ADB 指令關機？</span></h2><p>以下是使用 ADB 指令關機 Android 裝置的詳細步驟：</p><h3><span id="1-安裝和設定-adb">1. 安裝和設定 ADB</span></h3><p>首先，你需要確保 ADB 工具已安裝並設定好。如果你還沒有安裝，可以按照以下步驟進行安裝：</p><ol><li>從 <a href="https://developer.android.com/studio#downloads" rel="noopener" target="_blank">Android 開發者網站</a>下載 Android Studio 和 SDK 工具。</li><li>安裝後，找到 <code>platform-tools</code> 目錄，其中包含 ADB 工具。</li></ol><p>要確認 ADB 是否已正確安裝，可以在指令行中輸入以下指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb version</span><br></pre></td></tr></table></figure></p><p>如果安裝成功，你將看到 ADB 的版本資訊。</p><h3><span id="2-連接你的裝置">2. 連接你的裝置</span></h3><p>確保你的 Android 裝置透過 USB 資料線或無線方式連接到電腦。為了驗證裝置是否已連接並被 ADB 識別，輸入以下指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure></p><p>你應該會看到連接裝置的清單。如果裝置沒有顯示，請檢查你的連接和 USB 除錯設定（在裝置的開發者選項中啟用 USB 除錯）。</p><h3><span id="3-執行關機指令">3. 執行關機指令</span></h3><p>現在，你可以使用 ADB 指令來關機裝置。輸入以下指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell reboot -p</span><br></pre></td></tr></table></figure></p><p>這里，<code>reboot -p</code> 是用來關機的指令。</p><h2><span id="詳細操作步驟">詳細操作步驟</span></h2><p>為了幫助你更好地理解，以下是完整的操作步驟：</p><ol><li><strong>打開指令提示符或終端</strong>。</li><li><strong>輸入 <code>adb devices</code> 並確認你的裝置已連接</strong>。</li><li><strong>輸入 <code>adb shell reboot -p</code> 以關機裝置</strong>。</li></ol><p>這樣，你的裝置將會立刻關機。</p><h2><span id="結論">結論</span></h2><p>透過 ADB 指令遠端關機 Android 裝置是一個簡單而實用的技巧，特別適合開發者和高級使用者。希望這篇指南能幫助你更好地理解和使用 ADB 工具。如果你有任何問題或需要進一步的幫助，請隨時在評論區留言！</p><p>以上就是使用 adb 指令讓你的 Android 裝置關機的介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 使用 adb 指令讓你的 Android 裝置關機，在現代科技世界中，遠端控制裝置變得越來越重要。Android Debug Bridge (ADB) 是一個強大的工具，可以幫助開發者和高級使用者透過指令行遠端控制他們的 Android 裝置。在
      
    
    </summary>
    
    
      <category term="Android" scheme="https://shengyu7697.github.io/tags/Android/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShengYu Talk</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shengyu7697.github.io/"/>
  <updated>2022-06-11T09:09:37.714Z</updated>
  <id>https://shengyu7697.github.io/</id>
  
  <author>
    <name>ShengYu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android adb forward 通訊埠轉發用法教學</title>
    <link href="https://shengyu7697.github.io/android-adb-forward/"/>
    <id>https://shengyu7697.github.io/android-adb-forward/</id>
    <published>2022-06-09T14:00:00.000Z</published>
    <updated>2022-06-11T09:09:37.714Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Android 的 adb forward 通訊埠轉發的功能。  </p><p>adb forward 的功能是轉發 PC 電腦上某個埠號 (port) 資料到 Android 裝置的某個埠號 (port)，例如：下列 <code>adb forward</code> 指令就是將 PC 端的 port 10000 收到的資料，轉發給到 Android Device 的 port 20000，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:10000 tcp:20000</span><br></pre></td></tr></table></figure></p><p>通常在 Android Device 會啟動一個 server 程式，而 PC 端的 client 程式想要連到 Android Device 的 server，除了使用 ip 的方式連線以外，沒有 ip 的話，還可以利用 USB 連線的方式，也就是透過 adb forward 轉發 port，如此一來 PC 端的 client 程式就可以連上 Android Device 的 server 程式，  </p><p>adb forward 執行完後可以使用 <code>adb forward --list</code> 查看轉發列表，或者用 <code>adb forward --remove-all</code> 移除全部<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ adb forward --list</span><br><span class="line">XX00X0000000 tcp:10000 tcp:20000</span><br></pre></td></tr></table></figure></p><p>如果要移除轉發的話，就這樣下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb forward --remove tcp:10000</span><br></pre></td></tr></table></figure></p><p>如果要寫一個 PC Java client 與 Android Java server 通訊的話可以參考<a href="https://www.jianshu.com/p/63c4d5c31909" target="_blank" rel="noopener">這篇後半部的範例</a>。  </p><p>其他參考<br>adb forward的細節（1）：原理概述_愛博客大伯的博客-CSDN博客_adb forward<br><a href="https://blog.csdn.net/u013553529/article/details/80036227" target="_blank" rel="noopener">https://blog.csdn.net/u013553529/article/details/80036227</a><br>Android Debug Bridge (ADB)  |  Android Developers<br><a href="https://developer.android.com/studio/command-line/adb.html#forwardports" target="_blank" rel="noopener">https://developer.android.com/studio/command-line/adb.html#forwardports</a></p><p><strong>相關主題</strong><br><a href="/android-adb/" title="Android adb 基本用法教學">Android adb 基本用法教學</a><br>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Android 的 adb forward 通訊埠轉發的功能。  &lt;/p&gt;
&lt;p&gt;adb forward 的功能是轉發 PC 電腦上某個埠號 (port) 資料到 Android 裝置的某個埠號 (port)，例如：下列 &lt;code&gt;adb fo
      
    
    </summary>
    
    
      <category term="Android" scheme="https://shengyu7697.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>macOS 使用 VS Code Debugger 除錯</title>
    <link href="https://shengyu7697.github.io/vscode-debugging-on-mac/"/>
    <id>https://shengyu7697.github.io/vscode-debugging-on-mac/</id>
    <published>2022-06-06T14:00:00.000Z</published>
    <updated>2022-06-11T09:09:37.724Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹在 macOS 使用 Visual Studio Code(VS Code) 設定 C/C++ 除錯的環境，  </p><p>以下 macOS 使用 VS Code 設定除錯環境的內容大概分為  </p><ul><li>VS Code 除錯環境設定  </li><li>VS Code 安裝 CodeLLDB extension  </li><li>偵錯前先編譯  </li></ul><p>那我們開始吧！  </p><h2 id="VS-Code-除錯環境設定"><a href="#VS-Code-除錯環境設定" class="headerlink" title="VS Code 除錯環境設定"></a>VS Code 除錯環境設定</h2><p>我的 VS Code 版本為 1.67.2，macOS 版本為 10.13.4，<br>在新專案下按下 F5 時如果沒有 <code>.vscode/launch.json</code> 設定檔的話，會跳出一些選項讓你選擇，如圖中的 C++ (GDB/LLDB)<br><img src="/vscode-debugging-on-mac/vscode-debugging-1.png" title="vscode lldb debugging">  </p><p>新專案下沒有 <code>.vscode/tasks.json</code> 設定檔的話，也會跳出選項讓你選擇，由於 macOS 早就已經棄用 gcc，所以這邊是選擇使用 clang，<br><img src="/vscode-debugging-on-mac/vscode-debugging-2.png" title="vscode lldb debugging">  </p><p>會在資料夾下產生 .vscode/launch.json 設定如下，如果沒有的話自己手動新增也可以，<br><figure class="highlight"><figcaption><span>.vscode/launch.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // Use IntelliSense to learn about possible attributes.</span><br><span class="line">    // Hover to view descriptions of existing attributes.</span><br><span class="line">    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    "version": "0.2.0",</span><br><span class="line">    "configurations": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"(lldb) Launch"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"cppdbg"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/a.out"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [],</span><br><span class="line">            <span class="attr">"stopAtEntry"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;fileDirname&#125;"</span>,</span><br><span class="line">            <span class="attr">"environment"</span>: [],</span><br><span class="line">            <span class="attr">"externalConsole"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"MIMode"</span>: <span class="string">"lldb"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>編譯 C/C++ 時記得加上 <code>-g</code> 選項，按 F5 執行 Start Debugging 後，<br>出現 <code>Unable to start debugging. LLDB exited unexpectedly with exit code 137 (0x89).</code> 如下圖所示，<br><img src="/vscode-debugging-on-mac/vscode-debugging-3.png" title="vscode lldb debugging">  </p><p>看到<a href="https://blog.csdn.net/weixin_42147726/article/details/112537822" target="_blank" rel="noopener">這篇文章</a>分享將 <code>.vscode/launch.json</code> 的 type 從原本的 <code>cppdbg</code> 改成 <code>lldb</code> 就可以使用了，type 改成 <code>lldb</code> 後像這樣，<br><figure class="highlight"><figcaption><span>.vscode/launch.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // Use IntelliSense to learn about possible attributes.</span><br><span class="line">    // Hover to view descriptions of existing attributes.</span><br><span class="line">    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    "version": "0.2.0",</span><br><span class="line">    "configurations": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"(lldb) Launch"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"lldb"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/a.out"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [],</span><br><span class="line">            <span class="attr">"stopAtEntry"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;fileDirname&#125;"</span>,</span><br><span class="line">            <span class="attr">"environment"</span>: [],</span><br><span class="line">            <span class="attr">"externalConsole"</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">"MIMode"</span>: <span class="string">"lldb"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>將 <code>.vscode/launch.json</code> 的 type 改成 <code>lldb</code> 後，再按 F5 執行 Start Debugging 後，<br>出現 <code>Configured debug type &#39;lldb&#39; is not supported.</code> 如下圖所示，<br><img src="/vscode-debugging-on-mac/vscode-debugging-4.png" title="vscode lldb debugging">  </p><p>看到<a href="https://github.com/vknabel/vscode-swift-development-environment/issues/29" target="_blank" rel="noopener">這篇 troyibm 這位網友</a>他也遇到同樣的問題，結果是安裝了 CodeLLDB 擴充套件就可以使用了！那我們來安裝 CodeLLDB 擴充套件吧。  </p><h2 id="VS-Code-安裝-CodeLLDB-extension"><a href="#VS-Code-安裝-CodeLLDB-extension" class="headerlink" title="VS Code 安裝 CodeLLDB extension"></a>VS Code 安裝 CodeLLDB extension</h2><p>接下來就安裝<a href="https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb" target="_blank" rel="noopener">CodeLLDB</a>擴充套件，<br>網頁有寫支援的平台，  </p><ul><li>Linux with glibc 2.18+ for x86_64, aarch64 or armhf,  </li><li>MacOS X 10.10+ for x86_64 and 11.0+ for arm64,  </li><li>Windows 10 for x86_64.  </li></ul><p>看起來三大平台都有支援。  </p><p>接著再次 F5 執行 Start Debugging 終於成功了！<br><img src="/vscode-debugging-on-mac/vscode-debugging-5.png" title="vscode lldb debugging">  </p><p>經過這次安裝 CodeLLDB extension 後，之後在新專案要 按 F5 時會有 LLDB 新的選項，可以直接選擇 LLDB，<br><img src="/vscode-debugging-on-mac/vscode-debugging-6.png" title="vscode lldb debugging">  </p><p>選擇 LLDB 後產生的 launch.json 如下，然後記得修改 program 裡的名稱，<br><figure class="highlight"><figcaption><span>.vscode/launch.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // Use IntelliSense to learn about possible attributes.</span><br><span class="line">    // Hover to view descriptions of existing attributes.</span><br><span class="line">    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    "version": "0.2.0",</span><br><span class="line">    "configurations": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"lldb"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Debug"</span>,</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/&lt;your program&gt;"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [],</span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="偵錯前先編譯"><a href="#偵錯前先編譯" class="headerlink" title="偵錯前先編譯"></a>偵錯前先編譯</h2><p>按下 F5 要先編譯再啟動偵錯的話，要在 launch.json 加上 preLaunchTask，如下範例，<br><figure class="highlight"><figcaption><span>.vscode/launch.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // Use IntelliSense to learn about possible attributes.</span><br><span class="line">    // Hover to view descriptions of existing attributes.</span><br><span class="line">    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    "version": "0.2.0",</span><br><span class="line">    "configurations": [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"lldb"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Debug"</span>,</span><br><span class="line">            <span class="attr">"program"</span>: <span class="string">"$&#123;workspaceFolder&#125;/a.out"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [],</span><br><span class="line">            <span class="attr">"cwd"</span>: <span class="string">"$&#123;workspaceFolder&#125;"</span>,</span><br><span class="line">            <span class="attr">"preLaunchTask"</span>: <span class="string">"C/C++: clang++ build"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>launch.json 的 <code>&quot;preLaunchTask&quot;: &quot;C/C++: clang++ build&quot;</code> 是對應到 tasks.json 的 label 名稱，<br><figure class="highlight json"><figcaption><span>.vscode/tasks.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"cppbuild"</span>,</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"C/C++: clang++ build"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"/usr/bin/clang++"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [</span><br><span class="line">                <span class="string">"-fdiagnostics-color=always"</span>,</span><br><span class="line">                <span class="string">"-g"</span>,</span><br><span class="line">                <span class="string">"$&#123;file&#125;"</span>,</span><br><span class="line">                <span class="string">"-o"</span>,</span><br><span class="line">                <span class="string">"$&#123;fileDirname&#125;/a.out"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"options"</span>: &#123;</span><br><span class="line">                <span class="attr">"cwd"</span>: <span class="string">"$&#123;fileDirname&#125;"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"problemMatcher"</span>: [</span><br><span class="line">                <span class="string">"$gcc"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"group"</span>: &#123;</span><br><span class="line">                <span class="attr">"kind"</span>: <span class="string">"build"</span>,</span><br><span class="line">                <span class="attr">"isDefault"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"detail"</span>: <span class="string">"偵錯工具產生的工作。"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>這樣按 F5 啟動偵錯前會先編譯，成功編譯才會啟動偵錯。  </p><p>詳細的 <code>.vscode</code> 設定可以參考 <a href="https://github.com/shengyu7697/vscode-debugging/tree/master/mac-lldb" target="_blank" rel="noopener">https://github.com/shengyu7697/vscode-debugging/tree/master/mac-lldb</a>  </p><p>其他參考<br><a href="https://code.visualstudio.com/docs/cpp/launch-json-reference" target="_blank" rel="noopener">launch.json 參數說明</a><br><a href="https://blog.csdn.net/ZCShouCSDN/article/details/60466707" target="_blank" rel="noopener">Visual Studio Code （VSCode） 之 C/C++ 调试配置详解</a><br><a href="https://ithelp.ithome.com.tw/articles/10190238" target="_blank" rel="noopener">[VSCode] Visual Studio Code 執行 C++ (2) - IntelliSense + Building + Debugging</a>  </p><h2 id="make-專案"><a href="#make-專案" class="headerlink" title="make 專案"></a>make 專案</h2><p>make 專案編譯時會使用 Makefile 來執行裡面的腳本，所以 <code>.vscode/tasks.json</code> 不能在使用 <code>cppbuild</code> type 要換成 <code>shell</code> 來執行 make 這個指令，  </p><p>然後 command 換成 <code>cd ${workspaceFolder}; /usr/bin/make</code>，如下所示，<br><figure class="highlight json"><figcaption><span>.vscode/tasks.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tasks"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"shell"</span>,</span><br><span class="line">            <span class="attr">"label"</span>: <span class="string">"C/C++: make build"</span>,</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"cd $&#123;workspaceFolder&#125;; /usr/bin/make"</span>,</span><br><span class="line">            <span class="attr">"args"</span>: [],</span><br><span class="line">            <span class="attr">"options"</span>: &#123;</span><br><span class="line">                <span class="attr">"cwd"</span>: <span class="string">"$&#123;fileDirname&#125;"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"problemMatcher"</span>: [</span><br><span class="line">                <span class="string">"$gcc"</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">"group"</span>: &#123;</span><br><span class="line">                <span class="attr">"kind"</span>: <span class="string">"build"</span>,</span><br><span class="line">                <span class="attr">"isDefault"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"detail"</span>: <span class="string">"偵錯工具產生的工作。"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>這邊也可以參考 <a href="https://stackoverflow.com/questions/57808398/using-visual-studio-code-tasks-to-automate-c-makefiles-in-multiple-folders" target="_blank" rel="noopener">Stack Overflow</a> 跟 <a href="https://gist.github.com/mattmc3/c021236c92c03b61d92c0ff233940643" target="_blank" rel="noopener">github gist</a> 兩篇的其他種做法。  </p><h2 id="cmake-專案"><a href="#cmake-專案" class="headerlink" title="cmake 專案"></a>cmake 專案</h2><p>cmake 專案在 generate 時，要使用 <code>cmake -DCMAKE_BUILD_TYPE=Debug ..</code> 給定編譯 Debug 版本，之後編譯出來的執行檔才有除錯的資訊，或者在 CMakeLists.txt 直接寫死是 Debug 版本，<br><figure class="highlight cmake"><figcaption><span>CMakeLists.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span>(CMAKE_BUILD_TYPE <span class="string">"Debug"</span>)</span><br></pre></td></tr></table></figure></p><p>以上就是 macOS 使用 VS Code Debugger 除錯介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p>其他參考<br><a href="https://www.youtube.com/watch?v=G9gnSGKYIg4" target="_blank" rel="noopener">Debug a C++ project in VS Code - Youtube</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/vscode-shortcuts/" title="Visual Studio Code 常用快捷鍵">Visual Studio Code 常用快捷鍵</a><br><a href="/vscode-add-cpp-include-path/" title="VS Code 新增 C++ 標頭檔路徑">VS Code 新增 C++ 標頭檔路徑</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹在 macOS 使用 Visual Studio Code(VS Code) 設定 C/C++ 除錯的環境，  &lt;/p&gt;
&lt;p&gt;以下 macOS 使用 VS Code 設定除錯環境的內容大概分為  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VS Code 除錯環
      
    
    </summary>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
      <category term="macOS" scheme="https://shengyu7697.github.io/tags/macOS/"/>
    
      <category term="Visual Studio Code" scheme="https://shengyu7697.github.io/tags/Visual-Studio-Code/"/>
    
  </entry>
  
  <entry>
    <title>macOS 2 種安裝 OpenSSL 的方法</title>
    <link href="https://shengyu7697.github.io/mac-openssl/"/>
    <id>https://shengyu7697.github.io/mac-openssl/</id>
    <published>2022-06-02T14:00:00.000Z</published>
    <updated>2022-06-06T13:19:13.541Z</updated>
    
    <content type="html"><![CDATA[<p>本篇紀錄 macOS 下 2 種安裝 OpenSSL 的方法，第一種為使用 homebrew 安裝，第二種為下載 OpenSSL 原始碼編譯安裝。  </p><p>我的使用環境為 macOS 10.13.4，Xcode 9.1。  </p><ul><li>使用 homebrew 安裝 OpenSSL  </li><li>下載 OpenSSL 3 原始碼編譯與安裝 OpenSSL  </li><li>OpenSSL 3 原始碼編譯失敗解決方法  </li><li>下載 OpenSSL 1.1.1 原始碼編譯與安裝 OpenSSL  </li></ul><h2 id="使用-homebrew-安裝-OpenSSL"><a href="#使用-homebrew-安裝-OpenSSL" class="headerlink" title="使用 homebrew 安裝 OpenSSL"></a>使用 homebrew 安裝 OpenSSL</h2><p>以下為 macOS homebrew 安裝 OpenSSL 的指令，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install openssl</span><br></pre></td></tr></table></figure></p><p>或者指定 OpenSSL 安裝的版本，例如：指定安裝 OpenSSL 1.1.1，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install openssl@1.1.1o</span><br></pre></td></tr></table></figure></p><p>或者指定安裝 OpenSSL 3，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install openssl@3</span><br></pre></td></tr></table></figure></p><p>brew 安裝 OpenSSL 3 會編譯失敗的可以參考<a href="https://github.com/openssl/openssl/issues/15937" target="_blank" rel="noopener">這篇</a>，在 <a href="https://github.com/Homebrew/homebrew-core/blob/master/Formula/openssl%403.rb" target="_blank" rel="noopener">openssl@3.rb</a> 的 configure_args 函式裡的 args 新增 no-asm 選項，然後再次安裝 <code>brew install openssl@3</code>，<br><figure class="highlight ruby"><figcaption><span>/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/openssl@3.rb</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">configure_args</span></span></span><br><span class="line">  args = <span class="string">%W[</span></span><br><span class="line"><span class="string">    --prefix=<span class="subst">#&#123;prefix&#125;</span></span></span><br><span class="line"><span class="string">    --openssldir=<span class="subst">#&#123;openssldir&#125;</span></span></span><br><span class="line"><span class="string">    --libdir=<span class="subst">#&#123;lib&#125;</span></span></span><br><span class="line"><span class="string">    no-ssl3</span></span><br><span class="line"><span class="string">    no-ssl3-method</span></span><br><span class="line"><span class="string">    no-zlib</span></span><br><span class="line"><span class="string">    no-asm</span></span><br><span class="line"><span class="string">  ]</span></span><br></pre></td></tr></table></figure></p><p>或者改裝 OpenSSL 1.1.1 的版本。</p><h2 id="下載-OpenSSL-3-原始碼編譯與安裝-OpenSSL"><a href="#下載-OpenSSL-3-原始碼編譯與安裝-OpenSSL" class="headerlink" title="下載 OpenSSL 3 原始碼編譯與安裝 OpenSSL"></a>下載 OpenSSL 3 原始碼編譯與安裝 OpenSSL</h2><p>這邊介紹 OpenSSL 3 的編譯安裝方式，使用下列指令下載 OpenSSL 3.0.3 原始碼並且解壓縮，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.openssl.org/source/openssl-3.0.3.tar.gz</span><br><span class="line">tar xvf openssl-3.0.3.tar.gz</span><br></pre></td></tr></table></figure></p><p>接下來進行編譯與安裝 OpenSSL，zlib 選項非必要，無壓縮需求可以不加，預設安裝在 /usr/local/ssl 目錄下，也可自行指定 <code>--prefix</code> 選項帶入目錄，如果不用 shared 的方式則 <code>./config no-shared</code> 即可，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd openssl-3.0.3</span><br><span class="line">./config shared</span><br><span class="line">#./config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl shared zlib # 指定路徑</span><br><span class="line">make -j4</span><br><span class="line">make test</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><h2 id="OpenSSL-3-原始碼編譯失敗解決方法"><a href="#OpenSSL-3-原始碼編譯失敗解決方法" class="headerlink" title="OpenSSL 3 原始碼編譯失敗解決方法"></a>OpenSSL 3 原始碼編譯失敗解決方法</h2><p>我的 macOS 10.13.4 會出現這樣的編譯錯誤訊息，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">crypto/bn/rsaz-3k-avx512.s:1283:12: error: register %ymm20 is only available with AVX512</span><br><span class="line"> vmovdqu64 %ymm20,320(%rdi)</span><br><span class="line">           ^~~~~~</span><br><span class="line">crypto/bn/rsaz-3k-avx512.s:1284:12: error: register %ymm21 is only available with AVX512</span><br><span class="line"> vmovdqu64 %ymm21,352(%rdi)</span><br><span class="line">           ^~~~~~</span><br><span class="line">crypto/bn/rsaz-3k-avx512.s:1285:12: error: register %ymm22 is only available with AVX512</span><br><span class="line"> vmovdqu64 %ymm22,384(%rdi)</span><br><span class="line">           ^~~~~~</span><br><span class="line">crypto/bn/rsaz-3k-avx512.s:1286:12: error: register %ymm23 is only available with AVX512</span><br><span class="line"> vmovdqu64 %ymm23,416(%rdi)</span><br><span class="line">           ^~~~~~</span><br><span class="line">crypto/bn/rsaz-3k-avx512.s:1287:12: error: register %ymm24 is only available with AVX512</span><br><span class="line"> vmovdqu64 %ymm24,448(%rdi)</span><br><span class="line">           ^~~~~~</span><br><span class="line">crypto/bn/rsaz-3k-avx512.s:1288:12: error: register %ymm25 is only available with AVX512</span><br><span class="line"> vmovdqu64 %ymm25,480(%rdi)</span><br><span class="line">           ^~~~~~</span><br></pre></td></tr></table></figure></p><p>檢查 Xcode 版本，我的是 Xcode 9.1，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ xcodebuild -version</span><br><span class="line">Xcode 9.1</span><br><span class="line">Build version 9B55</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/openssl/openssl/issues/15937" target="_blank" rel="noopener">這篇</a>下面的網友提供了一個解決方法 workaround，<br>就是在 configure 時加入 <code>no-asm</code> 的選項，這樣就可以編譯過了，但是似乎這個方法就沒法得到好的效能，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./config shared no-asm</span><br><span class="line">make -j4</span><br></pre></td></tr></table></figure></p><p>使用 <code>make test</code> 進行測試，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make test</span><br></pre></td></tr></table></figure></p><p>在 <code>make install</code> 安裝到系統之前，使用 <code>openssl version</code> 指令測試執行 openssl 是否成功，出現找不到 libssl.3.dylib 動態函式庫的錯誤訊息<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./apps/openssl version</span><br><span class="line">dyld: Library not loaded: /usr/local/lib/libssl.3.dylib</span><br><span class="line">  Referenced from: /Users/sheng/Desktop/github/openssl/./apps/openssl</span><br><span class="line">  Reason: image not found</span><br><span class="line">Abort trap: 6</span><br></pre></td></tr></table></figure></p><p>設定 DYLD_LIBRARY_PATH 要載入動態函式庫的路徑，因為 libssl.3.dylib 在這個編譯的目錄下，所以就設定一下 libssl.3.dylib 目錄的路徑(相對路徑或絕對路徑都可)，這樣就成功執行起來了，macOS 的 DYLD_LIBRARY_PATH 是對應到 linux 的 LD_LIBRARY_PATH，在 macOS 下使用 LD_LIBRARY_PATH 是無效的，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ DYLD_LIBRARY_PATH=&quot;./&quot; ./apps/openssl version</span><br><span class="line"># or</span><br><span class="line">$ DYLD_LIBRARY_PATH=&quot;/Users/shengyu/openssl-3.0.3&quot; ./apps/openssl version</span><br><span class="line">OpenSSL 3.1.0-dev  (Library: OpenSSL 3.1.0-dev )</span><br></pre></td></tr></table></figure></p><h2 id="下載-OpenSSL-1-1-1-原始碼編譯與安裝-OpenSSL"><a href="#下載-OpenSSL-1-1-1-原始碼編譯與安裝-OpenSSL" class="headerlink" title="下載 OpenSSL 1.1.1 原始碼編譯與安裝 OpenSSL"></a>下載 OpenSSL 1.1.1 原始碼編譯與安裝 OpenSSL</h2><p>這邊也順便介紹一下的 OpenSSL 1.1.1x 的編譯安裝方式，基本上跟 OpenSSL 3 沒什麼太大差異，使用下列指令下載 OpenSSL 1.1.1o 原始碼並且解壓縮，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.openssl.org/source/openssl-1.1.1o.tar.gz</span><br><span class="line">tar xvf openssl-1.1.1o.tar.gz</span><br></pre></td></tr></table></figure></p><p>接下來進行編譯與安裝 OpenSSL，zlib 選項非必要，無壓縮需求可以不加，預設安裝在 /usr/local/ssl 目錄下，也可自行指定 <code>--prefix</code> 選項帶入目錄，如果不用 shared 的方式則 <code>./config no-shared</code> 即可，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd openssl-1.1.1o</span><br><span class="line">./config shared</span><br><span class="line">#./config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl shared zlib # 指定路徑</span><br><span class="line">make -j4</span><br><span class="line">make test</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><p>OpenSSL 1.1.1o 我可以順利編譯過沒有遇到 OpenSSL 3 的 AVX512 的問題。  </p><p>其他參考<br>OpenSSL master (and 3.0 branch) won’t build on MacOS 10.11 (El Capitan) · Issue #16670 · openssl/openssl<br><a href="https://github.com/openssl/openssl/issues/16670" target="_blank" rel="noopener">https://github.com/openssl/openssl/issues/16670</a>  </p><p>DYLD_LIBRARY_PATH 的相關討論<br>language agnostic - Is it OK to use DYLD_LIBRARY_PATH on Mac OS X? And, what’s the dynamic library search algorithm with it? - Stack Overflow<br><a href="https://stackoverflow.com/questions/3146274/is-it-ok-to-use-dyld-library-path-on-mac-os-x-and-whats-the-dynamic-library-s" target="_blank" rel="noopener">https://stackoverflow.com/questions/3146274/is-it-ok-to-use-dyld-library-path-on-mac-os-x-and-whats-the-dynamic-library-s</a><br>How do I configure the LD_LIBRARY_PATH on Linux and DYLD_LIBRARY_PATH on MAC OS X to point to MCR?<br><a href="https://www.mathworks.com/matlabcentral/answers/473971-how-do-i-configure-the-ld_library_path-on-linux-and-dyld_library_path-on-mac-os-x-to-point-to-mcr" target="_blank" rel="noopener">https://www.mathworks.com/matlabcentral/answers/473971-how-do-i-configure-the-ld_library_path-on-linux-and-dyld_library_path-on-mac-os-x-to-point-to-mcr</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/ubuntu-openssl/" title="Ubuntu 2 種安裝 OpenSSL 的方法">Ubuntu 2 種安裝 OpenSSL 的方法</a><br><a href="/openssl-aes-encryption/" title="OpenSSL AES encryption 對稱式加密指令用法與範例">OpenSSL AES encryption 對稱式加密指令用法與範例</a><br><a href="/cpp-openssl-aes/" title="C/C++ OpenSSL AES encryption/decryption 加密解密範例">C/C++ OpenSSL AES encryption/decryption 加密解密範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇紀錄 macOS 下 2 種安裝 OpenSSL 的方法，第一種為使用 homebrew 安裝，第二種為下載 OpenSSL 原始碼編譯安裝。  &lt;/p&gt;
&lt;p&gt;我的使用環境為 macOS 10.13.4，Xcode 9.1。  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 hom
      
    
    </summary>
    
    
      <category term="macOS" scheme="https://shengyu7697.github.io/tags/macOS/"/>
    
      <category term="openssl" scheme="https://shengyu7697.github.io/tags/openssl/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 安裝 Spotify 的方法</title>
    <link href="https://shengyu7697.github.io/ubuntu-spotify/"/>
    <id>https://shengyu7697.github.io/ubuntu-spotify/</id>
    <published>2022-05-31T14:00:00.000Z</published>
    <updated>2022-06-05T12:17:13.692Z</updated>
    
    <content type="html"><![CDATA[<p>本篇紀錄 Ubuntu 下 安裝 Spotify 的方法，  </p><p>我的使用環境為 Ubuntu 16.04，也適用於 Ubuntu 18.04 跟 Ubuntu 20.04。  </p><h2 id="Ubuntu-安裝-Spotify"><a href="#Ubuntu-安裝-Spotify" class="headerlink" title="Ubuntu 安裝 Spotify"></a>Ubuntu 安裝 Spotify</h2><p>這邊會介紹怎麼使用 apt-get 安裝 Spotify，在使用 apt-get 安裝 Spotify 之前要先設定 Spotify 的 ubuntu/debian 倉儲 (repository)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://download.spotify.com/debian/pubkey_0D811D58.gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure></p><p>加入 repository.spotify.com 到 apt sources list，這樣以後 <code>apt-get update</code> 就會去檢查有無更新，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;deb http://repository.spotify.com stable non-free&quot; | sudo tee /etc/apt/sources.list.d/spotify.list</span><br></pre></td></tr></table></figure></p><p>然後 <code>apt-get update</code> 成功後就可以安裝 spotify-client<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install spotify-client</span><br></pre></td></tr></table></figure></p><p>安裝 spotify-client 後檢查一下安裝的版本(這步驟非必要)，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ dpkg -l | grep spotify-client</span><br><span class="line">ii  spotify-client            1:1.0.80.480.g51b03ac3-13          amd64    Spotify streaming music client</span><br></pre></td></tr></table></figure></p><p>現在 spotify-client 最新的版本是 1:1.1.84.716.gc5f8b819，但我還沒更新到最新。  </p><p>也可以參考 <a href="https://www.spotify.com/nz/download/linux/" target="_blank" rel="noopener">Spotify 官方的 linux 安裝教學</a>  </p><h2 id="錯誤排除"><a href="#錯誤排除" class="headerlink" title="錯誤排除"></a>錯誤排除</h2><p>如果已經有安裝 Spotify 的人，後來很久後遇到 <code>apt-get update</code> 時會顯示 repository.spotify.com 站點憑證簽署問題而導致 <code>apt-get update</code> 失敗的話，可以參考這個方法，</p><p>我 <code>apt-get update</code> 失敗的訊息如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">...</span><br><span class="line">Hit:10 http://repo.steampowered.com/steam precise InRelease</span><br><span class="line">Err:8 http://repository.spotify.com stable InRelease</span><br><span class="line">  The following signatures couldn&apos;t be verified because the public key is not available: NO_PUBKEY 5E3C45D7B312C643</span><br><span class="line">Hit:11 http://ppa.launchpad.net/mystic-mirage/pycharm/ubuntu xenial InRelease</span><br><span class="line">Hit:12 http://ppa.launchpad.net/openshot.developers/ppa/ubuntu xenial InRelease</span><br><span class="line">Get:13 https://download.01.org/gfx/ubuntu/16.04/main xenial InRelease [3,651 B]</span><br><span class="line">Hit:14 http://ppa.launchpad.net/peek-developers/stable/ubuntu xenial InRelease</span><br><span class="line">Hit:15 http://ppa.launchpad.net/rvm/smplayer/ubuntu xenial InRelease</span><br><span class="line">Hit:16 http://ppa.launchpad.net/umang/indicator-stickynotes/ubuntu xenial InRelease</span><br><span class="line">Fetched 6,967 B in 3s (2,040 B/s)</span><br><span class="line">Reading package lists... Done</span><br><span class="line">W: An error occurred during the signature verification. The repository is not updated and the previous index files will be used. GPG error: http://repository.spotify.com stable InRelease: The following signatures couldn&apos;t be verified because the public key is not available: NO_PUBKEY 5E3C45D7B312C643</span><br><span class="line">W: https://download.01.org/gfx/ubuntu/16.04/main/dists/xenial/InRelease: Signature by key 09D6EF97BFB38E916EF060E756A3DEF863961D39 uses weak digest algorithm (SHA1)</span><br><span class="line">W: Failed to fetch http://repository.spotify.com/dists/stable/InRelease  The following signatures couldn&apos;t be verified because the public key is not available: NO_PUBKEY 5E3C45D7B312C643</span><br><span class="line">W: Some index files failed to download. They have been ignored, or old ones used instead.</span><br></pre></td></tr></table></figure></p><p>解決方法，就是把上面的訊息提到的 5E3C45D7B312C643 PUBKEY 加入，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 5E3C45D7B312C643</span><br></pre></td></tr></table></figure></p><p>然後再 <code>apt-get update</code> 就可以成功了  </p><p>其他參考<br>Can’t install Spotify under Ubuntu. - The Spotify Community<br><a href="https://community.spotify.com/t5/Desktop-Linux/Can-t-install-Spotify-under-Ubuntu/td-p/5258438" target="_blank" rel="noopener">https://community.spotify.com/t5/Desktop-Linux/Can-t-install-Spotify-under-Ubuntu/td-p/5258438</a><br>下方網友 carlgarner 2022-02-22 02:56 PM 回覆目前的 key 是 5E3C45D7B312C643，而我今天 2022-05-31 測試還有效，根據過往經驗可能隔一陣子就會失效。  </p><p><strong>相關文章</strong><br><a href="/ubuntu-protobuf/" title="Ubuntu 安裝 protobuf">Ubuntu 安裝 protobuf</a><br><a href="/ubuntu-gflags/" title="Ubuntu 安裝 gflags">Ubuntu 安裝 gflags</a><br><a href="/ubuntu-libevent/" title="Ubuntu 安裝 libevent">Ubuntu 安裝 libevent</a><br><a href="/ubuntu-glfw/" title="Ubuntu 編譯安裝 GLFW">Ubuntu 編譯安裝 GLFW</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇紀錄 Ubuntu 下 安裝 Spotify 的方法，  &lt;/p&gt;
&lt;p&gt;我的使用環境為 Ubuntu 16.04，也適用於 Ubuntu 18.04 跟 Ubuntu 20.04。  &lt;/p&gt;
&lt;h2 id=&quot;Ubuntu-安裝-Spotify&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shengyu7697.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 2 種安裝 OpenSSL 的方法</title>
    <link href="https://shengyu7697.github.io/ubuntu-openssl/"/>
    <id>https://shengyu7697.github.io/ubuntu-openssl/</id>
    <published>2022-05-26T14:00:00.000Z</published>
    <updated>2022-06-06T13:19:13.540Z</updated>
    
    <content type="html"><![CDATA[<p>本篇紀錄 Ubuntu 下 2 種安裝 OpenSSL 的方法，第一種為使用 apt 安裝，第二種為下載 OpenSSL 原始碼編譯安裝。  </p><p>我的使用環境為 Ubuntu 16.04，也適用於 Ubuntu 18.04 跟 Ubuntu 20.04。  </p><p>以下 Ubuntu 安裝 OpenSSL 的方法內容大概分為這幾部分，  </p><ul><li>方法1. 使用 distribution package 安裝 OpenSSL  </li><li>方法2. 下載 OpenSSL 原始碼編譯與安裝 OpenSSL  </li><li>備份舊版本 OpenSSL  </li></ul><h2 id="方法1-使用-distribution-package-安裝-OpenSSL"><a href="#方法1-使用-distribution-package-安裝-OpenSSL" class="headerlink" title="方法1. 使用 distribution package 安裝 OpenSSL"></a>方法1. 使用 distribution package 安裝 OpenSSL</h2><p>安裝前記得先 <code>apt-get update</code> 一下，以下為 ubuntu apt-get 安裝 OpenSSL 的指令，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install openssl</span><br></pre></td></tr></table></figure></p><p>安裝後可以使用 <code>openssl version</code> 確認一下 openssl 的版本，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ openssl version</span><br><span class="line">OpenSSL 1.0.2g  1 Mar 2016</span><br></pre></td></tr></table></figure></p><h2 id="方法2-下載-OpenSSL-原始碼編譯與安裝-OpenSSL"><a href="#方法2-下載-OpenSSL-原始碼編譯與安裝-OpenSSL" class="headerlink" title="方法2. 下載 OpenSSL 原始碼編譯與安裝 OpenSSL"></a>方法2. 下載 OpenSSL 原始碼編譯與安裝 OpenSSL</h2><p>由於 apt-get 上安裝的 OpenSSL 版本太舊，不符合我的需求，那就只能自己去下載 source code 下來編譯安裝了，使用下列指令下載 OpenSSL 1.1.1o 原始碼並且解壓縮，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src/</span><br><span class="line">sudo wget https://www.openssl.org/source/openssl-1.1.1o.tar.gz</span><br><span class="line">sudo tar xvf openssl-1.1.1o.tar.gz</span><br></pre></td></tr></table></figure></p><p>如果你 wget 下載時會出現憑證問題，可以使用 –no-check-certificate 選項不檢查憑證，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.openssl.org/source/openssl-1.1.1o.tar.gz --no-check-certificate</span><br></pre></td></tr></table></figure></p><p>接下來進行編譯與安裝 OpenSSL，zlib 選項非必要，無壓縮需求可以不加，預設安裝在 /usr/local/ssl 目錄下，也可自行指定 <code>--prefix</code> 選項帶入目錄，如果不用 shared 的方式則 <code>sudo ./config no-shared</code> 即可，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd openssl-1.1.1o</span><br><span class="line">sudo ./config shared</span><br><span class="line">#sudo ./config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl shared zlib # 指定路徑</span><br><span class="line">sudo make -j4</span><br><span class="line">sudo make test</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p><p>在 /etc/ld.so.conf.d/ 目錄下新增一個 openssl-1.1.1o.conf 設定檔，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ld.so.conf.d/openssl-1.1.1o.conf</span><br></pre></td></tr></table></figure></p><p>開啟 openssl-1.1.1o.conf 後加入這一行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/ssl/lib</span><br></pre></td></tr></table></figure></p><p>重新載入動態連結，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ldconfig -v</span><br></pre></td></tr></table></figure></p><p>測試 openssl 安裝的版本，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ openssl version</span><br><span class="line">OpenSSL 1.1.1o  3 May 2022</span><br></pre></td></tr></table></figure></p><p>如果要看更詳細的參數的話可以使用 <code>openssl version -a</code></p><h2 id="備份舊版本-OpenSSL"><a href="#備份舊版本-OpenSSL" class="headerlink" title="備份舊版本 OpenSSL"></a>備份舊版本 OpenSSL</h2><p>如果你已經從 apt-get 安裝過 OpenSSL，但又要編譯安裝新版本的 OpenSSL 的話，可以先將舊版本的 OpenSSL 備份起來，<br>把原本的 <code>/usr/bin/openssl</code> 重新命名成 <code>/usr/bin/openssl-1.0.2g</code>，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/bin/openssl /usr/bin/openssl-1.0.2g</span><br></pre></td></tr></table></figure></p><p>建立軟連結，將 <code>/usr/bin/openssl</code> 指向 <code>/usr/local/bin/openssl</code> (1.1.1)，這一步可能不需要，新版本 make install 應該會順便覆蓋 <code>/usr/bin/openssl</code> 的版本，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /usr/local/bin/openssl /usr/bin/openssl</span><br></pre></td></tr></table></figure></p><p><strong>其它相關文章推薦</strong><br><a href="/mac-openssl/" title="macOS 2 種安裝 OpenSSL 的方法">macOS 2 種安裝 OpenSSL 的方法</a><br><a href="/openssl-aes-encryption/" title="OpenSSL AES encryption 對稱式加密指令用法與範例">OpenSSL AES encryption 對稱式加密指令用法與範例</a><br><a href="/cpp-openssl-aes/" title="C/C++ OpenSSL AES encryption/decryption 加密解密範例">C/C++ OpenSSL AES encryption/decryption 加密解密範例</a><br><a href="/ubuntu-protobuf/" title="Ubuntu 安裝 protobuf">Ubuntu 安裝 protobuf</a><br><a href="/ubuntu-gflags/" title="Ubuntu 安裝 gflags">Ubuntu 安裝 gflags</a><br><a href="/ubuntu-libevent/" title="Ubuntu 安裝 libevent">Ubuntu 安裝 libevent</a><br><a href="/ubuntu-glfw/" title="Ubuntu 編譯安裝 GLFW">Ubuntu 編譯安裝 GLFW</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇紀錄 Ubuntu 下 2 種安裝 OpenSSL 的方法，第一種為使用 apt 安裝，第二種為下載 OpenSSL 原始碼編譯安裝。  &lt;/p&gt;
&lt;p&gt;我的使用環境為 Ubuntu 16.04，也適用於 Ubuntu 18.04 跟 Ubuntu 20.04。  &lt;/
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shengyu7697.github.io/tags/Ubuntu/"/>
    
      <category term="openssl" scheme="https://shengyu7697.github.io/tags/openssl/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 休眠指令</title>
    <link href="https://shengyu7697.github.io/ubuntu-suspend-command/"/>
    <id>https://shengyu7697.github.io/ubuntu-suspend-command/</id>
    <published>2022-05-23T14:00:00.000Z</published>
    <updated>2022-06-05T12:17:13.692Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 要介紹在 Ubuntu 下休眠的指令，Ubuntu 裡 Systemd 工具提供了睡眠管理的高階命令，分別有 <code>systemctl suspend</code>、<code>systemctl hibernate</code>、<code>systemctl hybrid-sleep</code></p><h2 id="Suspend-掛起模式"><a href="#Suspend-掛起模式" class="headerlink" title="Suspend 掛起模式"></a>Suspend 掛起模式</h2><p>掛起時系統的執行資料仍然儲存在記憶體，所以會以較低的功耗消耗電量。掛起模式喚醒系統恢復非常快速，<br>Ubuntu 桌面版的選單只有 Suspend 掛起模式，要用其他模式可以用輸入指令的方式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl suspend # 需要權限</span><br></pre></td></tr></table></figure></p><p>Suspend 模式使用範例如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl suspend</span><br><span class="line">==== AUTHENTICATING FOR org.freedesktop.login1.set-wall-message ===</span><br><span class="line">Authentication is required to set a wall message</span><br><span class="line">Authenticating as: shengyu,,, (shengyu)</span><br><span class="line">Password: </span><br><span class="line">==== AUTHENTICATION COMPLETE ===</span><br><span class="line">==== AUTHENTICATING FOR org.freedesktop.login1.suspend ===</span><br><span class="line">Authentication is required for suspending the system.</span><br><span class="line">Authenticating as: shengyu,,, (shengyu)</span><br><span class="line">Password: </span><br><span class="line">==== AUTHENTICATION COMPLETE ===</span><br></pre></td></tr></table></figure></p><h2 id="Hibernate-休眠模式"><a href="#Hibernate-休眠模式" class="headerlink" title="Hibernate 休眠模式"></a>Hibernate 休眠模式</h2><p>Hibernate 模式，字面上的意思是休眠，將記憶體內容寫入硬碟後完全關閉電源，等同 Windows 的休眠模式。完全不耗電，恢復速度比掛起慢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl hibernate # 需要權限</span><br></pre></td></tr></table></figure></p><p>Hibernate 模式使用範例如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl hibernate</span><br><span class="line">==== AUTHENTICATING FOR org.freedesktop.login1.set-wall-message ===</span><br><span class="line">Authentication is required to set a wall message</span><br><span class="line">Authenticating as: shengyu,,, (shengyu)</span><br><span class="line">Password: </span><br><span class="line">==== AUTHENTICATION COMPLETE ===</span><br><span class="line">==== AUTHENTICATING FOR org.freedesktop.login1.hibernate ===</span><br><span class="line">Authentication is required for hibernating the system.</span><br><span class="line">Authenticating as: shengyu,,, (shengyu)</span><br><span class="line">Password: </span><br><span class="line">==== AUTHENTICATION COMPLETE ===</span><br></pre></td></tr></table></figure></p><h2 id="Hybird-Sleep-混合睡眠模式"><a href="#Hybird-Sleep-混合睡眠模式" class="headerlink" title="Hybird Sleep 混合睡眠模式"></a>Hybird Sleep 混合睡眠模式</h2><p>Hybird Sleep 模式，混合睡眠，只供應電源給記憶體，其餘零件全部切斷電源供給，等同 Windows 的睡眠模式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl hybrid-sleep # 需要權限</span><br></pre></td></tr></table></figure></p><p>Hybird Sleep 模式使用範例如下，我是桌機安裝 Ubuntu 桌面版，看起來應該沒有啟用 Hybird Sleep 混合睡眠模式而是會去執行 Hibernate 休眠模式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl hybrid-sleep</span><br><span class="line">==== AUTHENTICATING FOR org.freedesktop.login1.set-wall-message ===</span><br><span class="line">Authentication is required to set a wall message</span><br><span class="line">Authenticating as: shengyu,,, (shengyu)</span><br><span class="line">Password: </span><br><span class="line">==== AUTHENTICATION COMPLETE ===</span><br><span class="line">==== AUTHENTICATING FOR org.freedesktop.login1.hibernate ===</span><br><span class="line">Authentication is required for hibernating the system.</span><br><span class="line">Authenticating as: shengyu,,, (shengyu)</span><br><span class="line">Password: </span><br><span class="line">==== AUTHENTICATION COMPLETE ===</span><br></pre></td></tr></table></figure></p><p>以上指令會需要輸入兩次密碼，覺得麻煩可以前面加 sudo，但也不會出現任何提示訊息。  </p><p>其它參考<br><a href="https://caloskao.org/ubuntu-hibernate-and-sleep-mode/" target="_blank" rel="noopener">https://caloskao.org/ubuntu-hibernate-and-sleep-mode/</a><br><a href="https://blog.csdn.net/HermitSun/article/details/113791114" target="_blank" rel="noopener">https://blog.csdn.net/HermitSun/article/details/113791114</a><br><a href="https://www.gushiciku.cn/pl/gvWd/zh-tw" target="_blank" rel="noopener">https://www.gushiciku.cn/pl/gvWd/zh-tw</a><br><a href="https://codertw.com/%E4%BC%BA%E6%9C%8D%E5%99%A8/380170/" target="_blank" rel="noopener">https://codertw.com/%E4%BC%BA%E6%9C%8D%E5%99%A8/380170/</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/windows-joystick-tool/" title="Windows 10 測試搖桿的工具">Windows 10 測試搖桿的工具</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 要介紹在 Ubuntu 下休眠的指令，Ubuntu 裡 Systemd 工具提供了睡眠管理的高階命令，分別有 &lt;code&gt;systemctl suspend&lt;/code&gt;、&lt;code&gt;systemctl hibernate&lt;/code&gt;、&lt;code&gt;s
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shengyu7697.github.io/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>macOS 查詢 Xcode 版本的 3 種方法</title>
    <link href="https://shengyu7697.github.io/mac-xocde-version/"/>
    <id>https://shengyu7697.github.io/mac-xocde-version/</id>
    <published>2022-05-19T14:00:00.000Z</published>
    <updated>2022-06-05T12:17:13.689Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 macOS 如何查詢 Xcode 版本的 3 種方法，查詢 Xcode 版本資訊的方法分為以下這幾種方法，  </p><ul><li>Xcode Welcome 視窗查看版本  </li><li>Xcode 選單查看版本  </li><li>用 xcodebuild 指令查看 Xcode 版本  </li></ul><h2 id="Xcode-Welcome-視窗查看版本"><a href="#Xcode-Welcome-視窗查看版本" class="headerlink" title="Xcode Welcome 視窗查看版本"></a>Xcode Welcome 視窗查看版本</h2><p>啟動 Xcode 後，可以看到 Welcome to Xcode 的視窗，下方就有 Xcode 版本資訊囉！<br><img src="/mac-xocde-version/xcode-version-1.png" title="xcode version">  </p><h2 id="Xcode-選單查看版本"><a href="#Xcode-選單查看版本" class="headerlink" title="Xcode 選單查看版本"></a>Xcode 選單查看版本</h2><p>啟動 Xcode 後，如果已經關閉 Welcome to Xcode 視窗的話，還可以從 Xcode 選單裡查看版本資訊，從選單的 <code>Xcode &gt; About Xcode</code> 就可以看到 Xcode 版本資訊視窗囉！  </p><img src="/mac-xocde-version/xcode-version-2.png" title="xcode version">  <p>Xcode 版本資訊視窗<br><img src="/mac-xocde-version/xcode-version-3.png" title="xcode version">  </p><h2 id="用-xcodebuild-指令查看-Xcode-版本"><a href="#用-xcodebuild-指令查看-Xcode-版本" class="headerlink" title="用 xcodebuild 指令查看 Xcode 版本"></a>用 xcodebuild 指令查看 Xcode 版本</h2><p>這邊介紹在命令列下可以使用 <code>xcodebuild</code> 指令查看 Xcode 版本的方法，<code>xcodebuild</code> 指令用法如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ xcodebuild -version</span><br><span class="line">Xcode 9.1</span><br><span class="line">Build version 9B55</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 macOS 如何查詢 Xcode 版本的 3 種方法，查詢 Xcode 版本資訊的方法分為以下這幾種方法，  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Xcode Welcome 視窗查看版本  &lt;/li&gt;
&lt;li&gt;Xcode 選單查看版本  &lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="macOS" scheme="https://shengyu7697.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>Android Visual Studio Code gdbserver 遠端除錯教學</title>
    <link href="https://shengyu7697.github.io/android-debugging-with-vscode/"/>
    <id>https://shengyu7697.github.io/android-debugging-with-vscode/</id>
    <published>2022-05-09T14:00:00.000Z</published>
    <updated>2022-06-11T14:12:14.903Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 Android 使用 gdbserver 以及搭配 Visual Studio Code(VS Code) 來遠端除錯，gdbserver 需要搭配 gdb 一起使用，而 gdbserver 是 server 的角色，而 gdb 是 client 的角色，一旦 gdb 連上遠端的 gdbserver 後，之後就可用 gdb 進行除錯，跟平常的 gdb 使用上沒有差異，我的桌機環境為 Ubuntu 16.04，  </p><p>用 <a href="/android-adb-forward/" title="adb forward">adb forward</a> 將 PC 的 port 20001 對應到 Android Device 的 port 20002，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb forward 20001 20002</span><br></pre></td></tr></table></figure></p><p>將編譯好的執行檔推到 Android Device，假設這個執行檔名稱叫 samplehello，在編譯時要確保有 <code>-g</code> 選項以及 <code>-O0</code> 不使用最佳化，以便提供足夠的偵錯資訊，  </p><p><strong>Android Device</strong><br>在 Android Device 端執行 gdbserver 或 gdbserver64，假使要偵錯的執行檔 (samplehello) 是 64bit 架構的就使用 gdbserver64，反之使用 gdbserver，使用錯誤的話到時 gdb 端會顯示錯誤訊息，執行 gdbserver 後面參數加上 <code>&lt;ip:port&gt;</code> 監聽的ip位址與port通訊埠以及要偵錯的執行檔路徑，這邊範例使用 port 20002，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdbserver64 :20002 /vendor/bin/samplehello</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">gdbserver64 127.0.0.1:20002 /vendor/bin/samplehello</span><br></pre></td></tr></table></figure></p><p><strong>PC</strong><br>在 PC 端執行 gdb，後面參數接上執行檔(no striped)，這裡使用 codebase 預編譯好的 gdb，執行 gdb 後使用 <code>target remote &lt;ip:port&gt;</code> 來連上遠端的 gdbserver，這邊範例是連上本地端的 port 20001，因為稍早的 adb forward 設定會將 PC 本地端的 port 20001 轉發到 Android Device 遠端的 port 20002，使得 Android Device 上的 gdbserver 收到連線請求，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">./prebuilts/gdb/linux-x86/bin/gdb ./out/target/product/&lt;product_name&gt;/symbols/vendor/bin/samplehello</span><br><span class="line">(gdb) target remote :20001</span><br><span class="line"># or</span><br><span class="line">(gdb) target remote 127.0.0.1:20001</span><br></pre></td></tr></table></figure></p><p>以下為 gdb 常用的指令，<br><code>r</code>：run 開始執行<br><code>c</code>：continue 繼續執行<br><code>b samplehello.c:14</code>：設定中斷點<br><code>info b</code>：印出目前設定的中斷點<br><code>bt</code>：backtrace 印出程式呼叫的堆疊<br><code>q</code>：quit 離開  </p><p>確定基本的 gdbserver 與 gdb 都可以正常地遠端偵錯後，我們就來開始進行 VS Code 遠端偵錯的設定吧！</p><h2 id="VS-Code-遠端偵錯設定"><a href="#VS-Code-遠端偵錯設定" class="headerlink" title="VS Code 遠端偵錯設定"></a>VS Code 遠端偵錯設定</h2><p>VS Code 的 <code>.vscode/launch.json</code> 設定檔資訊如下，其中重點是 <code>miDebuggerServerAddress</code> 要設定對，例如本範例的 PC 本地端 port 20001 (轉發到 Android Device 遠端的 port 20002)，<code>miDebuggerPath</code> 是 gdb 執行檔的路徑，最後是 <code>program</code> 要除錯的執行檔路徑，<br><figure class="highlight"><figcaption><span>.vscode/launch.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"0.2.0"</span>,</span><br><span class="line">    <span class="attr">"configurations"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Remote GDB"</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"cppdbg"</span>,</span><br><span class="line">            <span class="attr">"request"</span>: <span class="string">"launch"</span>,</span><br><span class="line">            //"preLaunchTask": "Forward debug port",</span><br><span class="line">            "cwd": "$&#123;workspaceRoot&#125;",</span><br><span class="line">            "program": "$&#123;workspaceRoot&#125;/app/Intermediate/android/myapp/local/armeabi-v7a/myapp",</span><br><span class="line">            "additionalSOLibSearchPath": "$&#123;workspaceRoot&#125;/app/Intermediate/android/mylib/local/armeabi-v7a",</span><br><span class="line">            "miDebuggerServerAddress": "localhost:20001",</span><br><span class="line">            "setupCommands": [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"text"</span>: <span class="string">"set solib-absolute-prefix $&#123;workspaceRoot&#125;/app/path/android"</span>,</span><br><span class="line">                    <span class="attr">"ignoreFailures"</span>: <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            "windows": &#123;</span><br><span class="line">                "miDebuggerPath": "C:/Tools/android-ndk-r13b/prebuilt/windows-x86_64/bin/gdb.exe",</span><br><span class="line">                "MIMode": "gdb"</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其他參考<br>Android Debugging with Visual Studio Code - General and Gameplay Programming - Tutorials - GameDev.net<br><a href="https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/android-debugging-with-visual-studio-code-r4820/" target="_blank" rel="noopener">https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/android-debugging-with-visual-studio-code-r4820/</a></p><p><strong>相關主題</strong><br><a href="/android-adb-forward/" title="Android adb forward 通訊埠轉發用法教學">Android adb forward 通訊埠轉發用法教學</a><br><a href="/vscode-debugging-on-mac/" title="macOS 使用 VS Code Debugger 除錯">macOS 使用 VS Code Debugger 除錯</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 Android 使用 gdbserver 以及搭配 Visual Studio Code(VS Code) 來遠端除錯，gdbserver 需要搭配 gdb 一起使用，而 gdbserver 是 server 的角色，而 gdb 是 client
      
    
    </summary>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
      <category term="Visual Studio Code" scheme="https://shengyu7697.github.io/tags/Visual-Studio-Code/"/>
    
      <category term="Android" scheme="https://shengyu7697.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ strlen 用法與範例</title>
    <link href="https://shengyu7697.github.io/cpp-strlen/"/>
    <id>https://shengyu7697.github.io/cpp-strlen/</id>
    <published>2022-05-05T14:00:00.000Z</published>
    <updated>2022-06-06T13:19:13.572Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ strlen 的用法與範例，C/C++ 可以使用 strlen 來計算字串長度，但不包括結束字元 <code>&#39;\0&#39;</code>。  </p><p>C/C++ 要使用 strlen 的話需要引入的標頭檔 <code>&lt;string.h&gt;</code>，如果要使用 C++ 的標頭檔則是引入 <code>&lt;cstring&gt;</code>，<br>strlen 函式原型為<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">size_t</span> <span class="built_in">strlen</span>(<span class="keyword">const</span> <span class="keyword">char</span> * str);</span><br></pre></td></tr></table></figure></p><p>str：欲計算字串長度的字元陣列  </p><h2 id="C-C-strlen-計算字串長度的基本用法"><a href="#C-C-strlen-計算字串長度的基本用法" class="headerlink" title="C/C++ strlen 計算字串長度的基本用法"></a>C/C++ strlen 計算字串長度的基本用法</h2><p>這邊介紹 C/C++ strlen 來計算字元陣列裡的字串長度，strlen 計算字串長度是不包含結束字元 <code>&#39;\0&#39;</code>，<br><figure class="highlight cpp"><figcaption><span>cpp-strlen.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-strlen.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[] = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Length of string is: %d\n"</span>, (<span class="keyword">int</span>)<span class="built_in">strlen</span>(arr)); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Length of string is: 5</span><br></pre></td></tr></table></figure></p><p>這邊示範另外一種使用情境，字元陣列分別初始化每個字元，並之後計算該字串長度，<br><figure class="highlight cpp"><figcaption><span>cpp-strlen2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-strlen2.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[] = &#123;<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">'\0'</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Length of string is: %d\n"</span>, (<span class="keyword">int</span>)<span class="built_in">strlen</span>(arr)); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出同上。 </p><p>這邊介紹另外一種使用情境，初始化一個 const 字串，並之後計算該字串長度，<br><figure class="highlight cpp"><figcaption><span>cpp-strlen3.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-strlen3.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *arr = <span class="string">"hello"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Length of string is: %d\n"</span>, (<span class="keyword">int</span>)<span class="built_in">strlen</span>(arr)); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出同上。  </p><p>這邊介紹另外一種使用情境，使用 malloc 配置一塊指向字元陣列指標，並用 strcpy 複製字串，之後計算該字串長度，<br><figure class="highlight cpp"><figcaption><span>cpp-strlen4.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-strlen4.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *arr = <span class="literal">NULL</span>;</span><br><span class="line">    arr = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">64</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(arr, <span class="string">"hello"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Length of string is: %d\n"</span>, (<span class="keyword">int</span>)<span class="built_in">strlen</span>(arr)); </span><br><span class="line">    <span class="built_in">free</span>(arr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出同上。  </p><p>這邊介紹另外一種使用情境，取得使用者輸入的字串，並計算該字串長度，使用 gets 取得輸入是不安全的，因為給 gets 一個緩衝區但是卻沒有告訴它這個緩衝區到底有多大，也不知道輸入的字串到底有多大，輸入的字串可能超出緩衝區，而引起程式崩潰，解決方法是使用 fgets 替代，fgets 取得標準輸入時會將換行字元讀取進來，而 strlen 計算字串長度是會包含換行字元的，所以在這邊會將換行字元取代成結束字元。<br><figure class="highlight cpp"><figcaption><span>cpp-strlen5.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-strlen5.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">// gets(arr); // unsafe</span></span><br><span class="line">    fgets(arr, <span class="number">128</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">int</span> len = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(arr);</span><br><span class="line">    <span class="keyword">if</span> (arr[len<span class="number">-1</span>] == <span class="string">'\n'</span>) <span class="comment">// remove '\n'</span></span><br><span class="line">        arr[len<span class="number">-1</span>] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Input: %s\n"</span>, arr); </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Length of string is: %d\n"</span>, (<span class="keyword">int</span>)<span class="built_in">strlen</span>(arr)); </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>gets 在某些平台下執行程式時會顯示警告訊息，例如在 macOS 平台下會顯示 <code>warning: this program uses gets(), which is unsafe.</code>。  </p><p>以上就是 C/C++ strlen 的用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p>其它參考<br>strlen - C++ Reference<br><a href="https://www.cplusplus.com/reference/cstring/strlen/" target="_blank" rel="noopener">https://www.cplusplus.com/reference/cstring/strlen/</a>  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 C++ 相關技術，可以參考看看下面的文章，<br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-fgets/" title="C/C++ fgets 用法與範例">C/C++ fgets 用法與範例</a><br><a href="/cpp-malloc/" title="C/C++ malloc 用法與範例">C/C++ malloc 用法與範例</a><br><a href="/cpp-strcmp/" title="C/C++ strcmp 用法與範例">C/C++ strcmp 用法與範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ strlen 的用法與範例，C/C++ 可以使用 strlen 來計算字串長度，但不包括結束字元 &lt;code&gt;&amp;#39;\0&amp;#39;&lt;/code&gt;。  &lt;/p&gt;
&lt;p&gt;C/C++ 要使用 strlen 的話需要引入的標頭檔 &lt;cod
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ snprintf 用法與範例</title>
    <link href="https://shengyu7697.github.io/cpp-snprintf/"/>
    <id>https://shengyu7697.github.io/cpp-snprintf/</id>
    <published>2022-05-02T14:00:00.000Z</published>
    <updated>2022-06-05T12:17:13.660Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ snprintf 的用法與範例，C/C++ 可以使用 snprintf 格式化輸出到 buffer 裡，除此之外還可以指定輸出的字元數。  </p><p>C/C++ 要使用 snprintf 的話需要引入的標頭檔 <code>&lt;stdio.h&gt;</code>，如果要使用 C++ 的標頭檔則是引入 <code>&lt;cstdio&gt;</code>，<br>snprintf 函式原型為<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">snprintf</span><span class="params">(<span class="keyword">char</span> * buffer, <span class="keyword">size_t</span> n, <span class="keyword">const</span> <span class="keyword">char</span> * format, ...)</span></span>;</span><br></pre></td></tr></table></figure></p><p>buffer：指向一塊字元陣列的指標，格式化輸出的結果字串輸出到這裡，該 buffer 需要足夠的空間存放結果。<br>n：指定輸出的最大字元數。<br>format：format 是格式控制字串，format 可被隨後的附加參數中指定的值替換，並按需求進行格式化，跟 printf 的 format 用法一樣。<br>…：可變引數 argument，依序替換 format 中的格式化種類。  </p><h2 id="C-C-snprintf-格式化輸出基本用法"><a href="#C-C-snprintf-格式化輸出基本用法" class="headerlink" title="C/C++ snprintf 格式化輸出基本用法"></a>C/C++ snprintf 格式化輸出基本用法</h2><p>這邊介紹 C/C++ snprintf 格式化輸出的基本用法，snprintf 函式會在中將格式化輸出的一連串字元存到 buffer 裡。隨後的每個引數 argument 是根據 format 中的對應格式進行轉換和輸出。  </p><p>使用 sprintf 的話沒有方法可以限制寫入的字元數，這表示使用 sprintf 撰寫出的程式碼很容易發生緩衝區溢位。跟 sprintf 相比 snprintf 可以指定要寫入 buffer 的字元數。  </p><p>這邊介紹 C/C++ snprintf 格式化輸出，例如將數字格式化輸出成字串到 buffer 裡、將浮點數格式化輸出成字串到 buffer 裡，<br><figure class="highlight cpp"><figcaption><span>cpp-snprintf.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-snprintf.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> str[] = <span class="string">"hello world"</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">float</span> f = <span class="number">5.4321f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="number">128</span>, <span class="string">"string: %s\n"</span>, str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="number">128</span>, <span class="string">"character: %c\n"</span>, c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="number">128</span>, <span class="string">"integer: %d\n"</span>, num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">snprintf</span>(buf, <span class="number">128</span>, <span class="string">"float: %f\n"</span>, f);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string: hello world</span><br><span class="line">character: a</span><br><span class="line">integer: 123</span><br><span class="line">float: 5.432100</span><br></pre></td></tr></table></figure></p><p>這邊再介紹一個範例，有時需要將一些資料格式化輸出並且連接在一起，這時可以使用 snprintf 搭配 strcat，snprintf 將資料格式化輸出到 tmp 後，再使用 strcat 連接 tmp 到 buf 裡，最後再用 printf 輸出結果，詳見下列範例，<br><figure class="highlight cpp"><figcaption><span>cpp-snprintf2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-snprintf2.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> hex[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x1a</span>, <span class="number">0x2b</span>, <span class="number">0x3c</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> tmp[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(hex); i++) &#123;</span><br><span class="line">        <span class="built_in">snprintf</span>(tmp, <span class="keyword">sizeof</span>(tmp), <span class="string">"0x%02x, "</span>, hex[i]);</span><br><span class="line">        <span class="built_in">strcat</span>(buf, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hex : %s\n"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hex : 0x01, 0x02, 0x03, 0x1a, 0x2b, 0x3c,</span><br></pre></td></tr></table></figure></p><p>以上就是 C/C++ snprintf 的用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p>其它參考<br>snprintf - C++ Reference<br><a href="https://www.cplusplus.com/reference/cstdio/snprintf/" target="_blank" rel="noopener">https://www.cplusplus.com/reference/cstdio/snprintf/</a>  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 C++ 相關技術，可以參考看看下面的文章，<br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-sprintf/" title="C/C++ sprintf 用法與範例">C/C++ sprintf 用法與範例</a><br><a href="/cpp-strcat/" title="C/C++ strcat 用法與範例">C/C++ strcat 用法與範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ snprintf 的用法與範例，C/C++ 可以使用 snprintf 格式化輸出到 buffer 裡，除此之外還可以指定輸出的字元數。  &lt;/p&gt;
&lt;p&gt;C/C++ 要使用 snprintf 的話需要引入的標頭檔 &lt;code&gt;&amp;lt
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ sprintf 用法與範例</title>
    <link href="https://shengyu7697.github.io/cpp-sprintf/"/>
    <id>https://shengyu7697.github.io/cpp-sprintf/</id>
    <published>2022-04-28T14:00:00.000Z</published>
    <updated>2022-06-05T12:17:13.659Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ sprintf 的用法與範例，C/C++ 可以使用 sprintf 格式化輸出到 buffer 裡。  </p><p>C/C++ 要使用 sprintf 的話需要引入的標頭檔 <code>&lt;stdio.h&gt;</code>，如果要使用 C++ 的標頭檔則是引入 <code>&lt;cstdio&gt;</code>，<br>sprintf 函式原型為<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sprintf</span><span class="params">(<span class="keyword">char</span> * buffer, <span class="keyword">const</span> <span class="keyword">char</span> * format, ...)</span></span>;</span><br></pre></td></tr></table></figure></p><p>buffer：指向一塊字元陣列的指標，格式化輸出的結果字串輸出到這裡，該 buffer 需要足夠的空間存放結果。<br>format：format 是格式控制字串，format 可被隨後的附加參數中指定的值替換，並按需求進行格式化，跟 printf 的 format 用法一樣。<br>…：可變引數 argument，依序替換 format 中的格式化種類。  </p><h2 id="C-C-sprintf-格式化輸出基本用法"><a href="#C-C-sprintf-格式化輸出基本用法" class="headerlink" title="C/C++ sprintf 格式化輸出基本用法"></a>C/C++ sprintf 格式化輸出基本用法</h2><p>這邊介紹 C/C++ sprintf 格式化輸出的基本用法，sprintf 函式會在中將格式化輸出的一連串字元存到 buffer 裡。隨後的每個引數 argument 是根據 format 中的對應格式進行轉換和輸出。  </p><p>使用 sprintf 的話沒有方法可以限制寫入的字元數，這表示使用 sprintf 撰寫出的程式碼很容易發生緩衝區溢位。如果要指定要寫入 buffer 的字元數請使用 <a href="/cpp-snprintf/" title="snprintf">snprintf</a>，  </p><p>這邊介紹 C/C++ sprintf 格式化輸出，例如將數字格式化輸出成字串到 buffer 裡、將浮點數格式化輸出成字串到 buffer 裡，<br><figure class="highlight cpp"><figcaption><span>cpp-sprintf.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-sprintf.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> str[] = <span class="string">"hello world"</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">float</span> f = <span class="number">5.4321f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">"string: %s\n"</span>, str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">"character: %c\n"</span>, c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">"integer: %d\n"</span>, num);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">"float: %f\n"</span>, f);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string: hello world</span><br><span class="line">character: a</span><br><span class="line">integer: 123</span><br><span class="line">float: 5.432100</span><br></pre></td></tr></table></figure></p><p>這邊再介紹一個範例，有時需要將一些資料格式化輸出並且連接在一起，這時可以使用 sprintf 搭配 strcat，sprintf 將資料格式化輸出到 tmp 後，再使用 strcat 連接 tmp 到 buf 裡，最後再用 printf 輸出結果，詳見下列範例，<br><figure class="highlight cpp"><figcaption><span>cpp-sprintf2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-sprintf2.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> hex[] = &#123;<span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x03</span>, <span class="number">0x1a</span>, <span class="number">0x2b</span>, <span class="number">0x3c</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> tmp[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(hex); i++) &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(tmp, <span class="string">"0x%02x, "</span>, hex[i]);</span><br><span class="line">        <span class="built_in">strcat</span>(buf, tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"hex : %s\n"</span>, buf);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hex : 0x01, 0x02, 0x03, 0x1a, 0x2b, 0x3c,</span><br></pre></td></tr></table></figure></p><p>以上就是 C/C++ sprintf 的用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p>其它參考<br>sprintf - C++ Reference<br><a href="https://www.cplusplus.com/reference/cstdio/sprintf/" target="_blank" rel="noopener">https://www.cplusplus.com/reference/cstdio/sprintf/</a>  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 C++ 相關技術，可以參考看看下面的文章，<br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-snprintf/" title="C/C++ snprintf 用法與範例">C/C++ snprintf 用法與範例</a><br><a href="/cpp-strcat/" title="C/C++ strcat 用法與範例">C/C++ strcat 用法與範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ sprintf 的用法與範例，C/C++ 可以使用 sprintf 格式化輸出到 buffer 裡。  &lt;/p&gt;
&lt;p&gt;C/C++ 要使用 sprintf 的話需要引入的標頭檔 &lt;code&gt;&amp;lt;stdio.h&amp;gt;&lt;/code&gt;
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ memcmp 用法與範例</title>
    <link href="https://shengyu7697.github.io/cpp-memcmp/"/>
    <id>https://shengyu7697.github.io/cpp-memcmp/</id>
    <published>2022-04-25T14:00:00.000Z</published>
    <updated>2022-06-04T04:07:35.244Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ memcmp 用法與範例，memcmp 是用來判斷兩段記憶體區塊內容是否相同的函式，以下介紹如何使用 memcmp 函式。  </p><p>C/C++ 要判斷 c-style 字串是否相等可以使用 memcmp，要使用 memcmp 的話需要引入的標頭檔 <code>&lt;string.h&gt;</code>，如果要使用 C++ 的標頭檔則是引入 <code>&lt;cstring&gt;</code>，<br>memcmp 函式原型為<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">memcmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * ptr1, <span class="keyword">const</span> <span class="keyword">char</span> * ptr2, <span class="keyword">size_t</span> num)</span></span>;</span><br></pre></td></tr></table></figure></p><p><code>memcmp()</code> 如果判斷兩段記憶體區塊內容相同的話會回傳 0，這必須牢記因為很容易混搖，很多程式 bug 就是這樣產生的，所以 <code>if (memcmp(buffer1, buffer2, sizeof(buffer1)) printf(&quot;not equal\n&quot;);</code> 這樣寫的話結果會是 not equal 唷！來看看下面的 memcmp 用法範例吧！<br><figure class="highlight cpp"><figcaption><span>cpp-memcmp.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-memcmp.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer1[] = <span class="string">"abcde"</span>;</span><br><span class="line">    <span class="keyword">char</span> buffer2[] = <span class="string">"abcde"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ret = <span class="built_in">memcmp</span>(buffer1, buffer2, <span class="keyword">sizeof</span>(buffer1));</span><br><span class="line">    <span class="keyword">if</span> (ret &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"buffer1 is greater than buffer2\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"buffer1 is less than buffer2\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// ret == 0</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"buffer1 is equal to buffer2\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buffer1 is equal to buffer2</span><br></pre></td></tr></table></figure></p><p>再來看看兩段記憶體區塊不相同的例子，memcmp 是大小寫都判斷不同的，<br><figure class="highlight cpp"><figcaption><span>cpp-memcmp2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-memcmp2.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer1[] = <span class="string">"abcde"</span>;</span><br><span class="line">    <span class="keyword">char</span> buffer2[] = <span class="string">"ABCDE"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ret = <span class="built_in">memcmp</span>(buffer1, buffer2, <span class="keyword">sizeof</span>(buffer1));</span><br><span class="line">    <span class="keyword">if</span> (ret &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"buffer1 is greater than buffer2\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"buffer1 is less than buffer2\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// ret == 0</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"buffer1 is equal to buffer2\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buffer1 is greater than buffer2</span><br></pre></td></tr></table></figure></p><p>再來判斷兩段記憶體區塊前 n 個內容是否相等，以下範例是判斷兩段記憶體區塊前 3 個字元是否相同，<br><figure class="highlight cpp"><figcaption><span>cpp-memcmp3.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-memcmp3.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buffer1[] = <span class="string">"abcde"</span>;</span><br><span class="line">    <span class="keyword">char</span> buffer2[] = <span class="string">"abcDE"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ret = <span class="built_in">memcmp</span>(buffer1, buffer2, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (ret &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"buffer1 is greater than buffer2\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"buffer1 is less than buffer2\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// ret == 0</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"buffer1 is equal to buffer2\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buffer1 is equal to buffer2</span><br></pre></td></tr></table></figure></p><p>以上就是 C/C++ memcmp 的用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p>其它參考<br>memcmp - C++ Reference<br><a href="https://www.cplusplus.com/reference/cstring/memcmp/" target="_blank" rel="noopener">https://www.cplusplus.com/reference/cstring/memcmp/</a>  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 C++ 相關技術，可以參考看看下面的文章，<br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-string-compare/" title="C/C++ 字串比較的3種方法">C/C++ 字串比較的3種方法</a><br><a href="/cpp-strcmp/" title="C/C++ strcmp 用法與範例">C/C++ strcmp 用法與範例</a><br><a href="/cpp-memcpy/" title="C/C++ memcpy 用法與範例">C/C++ memcpy 用法與範例</a><br><a href="/cpp-memset/" title="C/C++ memset 用法與範例">C/C++ memset 用法與範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ memcmp 用法與範例，memcmp 是用來判斷兩段記憶體區塊內容是否相同的函式，以下介紹如何使用 memcmp 函式。  &lt;/p&gt;
&lt;p&gt;C/C++ 要判斷 c-style 字串是否相等可以使用 memcmp，要使用 memcmp
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ strncmp 用法與範例</title>
    <link href="https://shengyu7697.github.io/cpp-strncmp/"/>
    <id>https://shengyu7697.github.io/cpp-strncmp/</id>
    <published>2022-04-21T14:00:00.000Z</published>
    <updated>2022-06-04T04:07:35.243Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ strncmp 用法與範例，strncmp 是用來作字串比較的函式，除了可以用來判斷兩個字串是否相同以外，還可以判斷兩字串前 n 個字元是否相等，以下介紹如何使用 strncmp 函式。  </p><p>C/C++ 要判斷 c-style 字串前 n 個字元是否相同可以使用 strncmp，要使用 strncmp 的話需要引入的標頭檔 <code>&lt;string.h&gt;</code>，如果要使用 C++ 的標頭檔則是引入 <code>&lt;cstring&gt;</code>，<br>strncmp 函式原型為<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">strncmp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * str1, <span class="keyword">const</span> <span class="keyword">char</span> * str2, <span class="keyword">size_t</span> num)</span></span>;</span><br></pre></td></tr></table></figure></p><p><code>strncmp()</code> 如果判斷兩字串相同的話會回傳 0，這必須牢記因為很容易混搖，很多程式 bug 就是這樣產生的，所以 <code>if (strncmp(str1, str2, strlen(str1))) printf(&quot;not equal\n&quot;);</code> 這樣寫的話結果會是 not equal 唷！來看看下面的 strncmp 用法範例吧！<br><figure class="highlight cpp"><figcaption><span>cpp-strncmp.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-strncmp.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *str1 = <span class="string">"hello world"</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *str2 = <span class="string">"hello world"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strncmp</span>(str1, str2, <span class="built_in">strlen</span>(str1)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"equal\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"not equal\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">equal</span><br></pre></td></tr></table></figure></p><p>再來看看字串不相同的例子，strncmp 是大小寫都判斷不同的，<br><figure class="highlight cpp"><figcaption><span>cpp-strncmp2.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-strncmp2.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *str1 = <span class="string">"hello world"</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *str2 = <span class="string">"HELLO WORLD"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ret = <span class="built_in">strncmp</span>(str1, str2, <span class="built_in">strlen</span>(str1));</span><br><span class="line">    <span class="keyword">if</span> (ret &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"str1 is greater than str2\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"str1 is less than str2\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// ret == 0</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"str1 is equal to str2\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str1 is greater than str2</span><br></pre></td></tr></table></figure></p><p>再來判斷兩字串前 n 個字元是否相同，以下範例是判斷兩字串前 6 個字元是否相同，<br><figure class="highlight cpp"><figcaption><span>cpp-strncmp3.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// g++ cpp-strncmp3.cpp -o a.out</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *str1 = <span class="string">"hello world"</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *str2 = <span class="string">"hello WORLD"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strncmp</span>(str1, str2, <span class="number">6</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"equal\n"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"not equal\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">equal</span><br></pre></td></tr></table></figure></p><p>以上就是 C/C++ strncmp 的用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p>其它參考<br>strncmp - C++ Reference<br><a href="https://www.cplusplus.com/reference/cstring/strncmp/" target="_blank" rel="noopener">https://www.cplusplus.com/reference/cstring/strncmp/</a>  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 C++ 相關技術，可以參考看看下面的文章，<br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-string-compare/" title="C/C++ 字串比較的3種方法">C/C++ 字串比較的3種方法</a><br><a href="/cpp-strcmp/" title="C/C++ strcmp 用法與範例">C/C++ strcmp 用法與範例</a><br><a href="/cpp-memcmp/" title="C/C++ memcmp 用法與範例">C/C++ memcmp 用法與範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ strncmp 用法與範例，strncmp 是用來作字串比較的函式，除了可以用來判斷兩個字串是否相同以外，還可以判斷兩字串前 n 個字元是否相等，以下介紹如何使用 strncmp 函式。  &lt;/p&gt;
&lt;p&gt;C/C++ 要判斷 c-st
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>C/C++ OpenSSL AES encryption/decryption 加密解密範例</title>
    <link href="https://shengyu7697.github.io/cpp-openssl-aes/"/>
    <id>https://shengyu7697.github.io/cpp-openssl-aes/</id>
    <published>2022-04-07T14:00:00.000Z</published>
    <updated>2022-06-11T09:09:37.681Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ OpenSSL AES 256 CBC encryption/decryption 加密解密範例，AES 是典型的對稱式加密演算法，對稱式加密演算法是可逆的，也就是用一個金鑰加密後可以再用同一個金鑰解密回來，而 AES 全名是 Advanced Encryption Standard 是用來取代原先的 DES (Data Encryption Standard) 演算法，AES 是目前主流的加密演算法，常見對稱式加密演算法的應用像是將檔案壓成壓縮時 (zip/7-zip) 如果要設定密碼加密就會使用到。  </p><h2 id="C-C-OpenSSL-AES-256-CBC"><a href="#C-C-OpenSSL-AES-256-CBC" class="headerlink" title="C/C++ OpenSSL AES-256 CBC"></a>C/C++ OpenSSL AES-256 CBC</h2><p>AES 提供了幾種模式，分別為 ECB、CBC、CFB、CTR、OFB 五種模式，這邊介紹 C/C++ OpenSSL AES 256 CBC encryption/decryption 加密解密範例，在 openssl 可以常看到 encrypt 與 decrypt 關鍵字，encrypt 表示加密，decrypt 表示解密，在本範例中我們會使用 <code>AES_cbc_encrypt()</code> 做加密，解密的話則是使用 <code>aes_cbc_decrypt()</code>。  </p><p>AES 的區塊長度固定為 128 bits (16 bytes)，即多輪且每次對 128 bits 明文區塊作加密，而不是一次對整個明文作加密，明文長度不是 128 bits 的整數倍的話，剩餘不足 128 bits 的區塊會用填充 (Padding) 的方式，填充 (Padding) 的方式有好幾種，最簡單就是用零填充 ZeroBytePadding，常用填充方式為 PKCS5Padding 或 PKCS7Padding，需要注意的是加密用哪一種填充方式，解密時也要同用一種填充方式。  </p><p>key 就是加密過程中會用到的金鑰，AES 的 key 金鑰長度則可以是 128、192 或 256 bits，也就是平常大家說的 AES-128、AES-192 或 AES-256，以安全性來說 AES-256 安全性最高。  </p><p>iv 就是初始向量 (Initialization Vector)，在加密過程中，原本相同明文區塊使用相同金鑰加密後的密文會相同，加入 iv 可讓每次的相同明文區塊使用相同金鑰加密後的密文不同，<br>用來防止同樣的內容產生同樣的加密資料，解密時用的 iv 必須跟加密的 iv 內容一樣，長度必須為 16 bytes (128 bits)，在使用 <code>AES_cbc_encrypt()</code> 加密時會修改 iv 的數值，所以在 <code>aes_cbc_decrypt()</code> 解密時務必確認是用相同的 iv。  </p><p>另外 openssl command 還提供了 salt 的選項，salt 就是加鹽的意思，是個隨機產生的資料，在密碼 password 推導成金鑰 key 時可以使用，使用 salt 的話相同的密碼 password 就不會每次都推導成相同的金鑰 key 了。  </p><p>以下的範例是直接設定金鑰 key 與 iv，沒有使用 salt，<br><figure class="highlight cpp"><figcaption><span>cpp-aes-cbc.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/aes.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> plain = from_hex_string(<span class="string">"6B"</span>);</span><br><span class="line">    <span class="keyword">auto</span> key = from_hex_string(<span class="string">"2B7E151628AED2A6ABF7158809CF4F3C"</span>);</span><br><span class="line">    <span class="keyword">auto</span> iv = from_hex_string(<span class="string">"000102030405060708090A0B0C0D0E0F"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> cipher = aes_128_cbc_encrypt(plain, key, iv);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"plain  : "</span> &lt;&lt; to_hex_string(plain) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"cipher : "</span> &lt;&lt; to_hex_string(cipher) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"iv     : "</span> &lt;&lt; to_hex_string(iv) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> decrypt_text = aes_128_cbc_decrypt(cipher, key, iv);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"decrypt: "</span> &lt;&lt; to_hex_string(decrypt_text) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>加密的函式，<br><figure class="highlight cpp"><figcaption><span>cpp-aes-cbc.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; aes_128_cbc_encrypt(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; &amp;plain,</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; &amp;key,</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; &amp;iv) &#123;</span><br><span class="line">    </span><br><span class="line">    AES_KEY aes_enc_ctx;</span><br><span class="line">    AES_set_encrypt_key(key.data(), <span class="number">128</span>, &amp;aes_enc_ctx);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; cipher(<span class="number">16</span>);</span><br><span class="line">    AES_cbc_encrypt(plain.data(), cipher.data(), <span class="number">1</span>, &amp;aes_enc_ctx, iv.data(), AES_ENCRYPT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cipher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>解密的函式，<br><figure class="highlight cpp"><figcaption><span>cpp-aes-cbc.cpp</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; aes_128_cbc_decrypt(<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; &amp;cipher,</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; &amp;key,</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; &amp;iv) &#123;</span><br><span class="line"></span><br><span class="line">    AES_KEY aes_dec_ctx;</span><br><span class="line">    AES_set_decrypt_key(key.data(), <span class="number">128</span>, &amp;aes_dec_ctx);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt; decrypt_text(<span class="number">16</span>);</span><br><span class="line">    AES_cbc_encrypt(cipher.data(), decrypt_text.data(), <span class="number">16</span>, &amp;aes_dec_ctx, iv.data(), AES_DECRYPT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decrypt_text;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>結果輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plain  : 6B</span><br><span class="line">cipher : F05F94CA1B1459C236C2C35A4BCA72ED</span><br><span class="line">iv     : F05F94CA1B1459C236C2C35A4BCA72ED</span><br><span class="line">decrypt: 9B5E96C91F115FC53ECBC95147C77CE2</span><br></pre></td></tr></table></figure></p><p>後來 openssl 還有推出了 EVP 的 API，EVP 的 API 提供了所有對稱式加密演算法的統一介面，對開發者來說就可以很輕易的就換成其他演算法，另外 EVP API 還有硬體加速的部分，關於 EVP API 的討論可以看看<a href="https://stackoverflow.com/questions/9889492/how-to-do-encryption-using-aes-in-openssl" target="_blank" rel="noopener">這篇</a>與<a href="https://stackoverflow.com/questions/10366950/openssl-using-evp-vs-algorithm-api-for-symmetric-crypto" target="_blank" rel="noopener">這篇</a>，下一篇就介紹怎麼用 EVP API 來寫 AES-256 CBC。  </p><h2 id="C-C-OpenSSL-AES-256-CBC-使用-EVP-API"><a href="#C-C-OpenSSL-AES-256-CBC-使用-EVP-API" class="headerlink" title="C/C++ OpenSSL AES-256 CBC 使用 EVP API"></a>C/C++ OpenSSL AES-256 CBC 使用 EVP API</h2><p>C++ class that interfaces to OpenSSL ciphers – Joe’s Blog<br><a href="https://joelinoff.com/blog/?p=664" target="_blank" rel="noopener">https://joelinoff.com/blog/?p=664</a><br><a href="https://github.com/jlinoff/openssl-aes-cipher" target="_blank" rel="noopener">https://github.com/jlinoff/openssl-aes-cipher</a><br>這個人寫了一個 C++ Cipher class for OpenSSL AES-256-CBC，</p><p>其他參考<br>進階加密標準 - 維基百科，自由的百科全書<br><a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86</a><br>高級加密標准AES的工作模式（ECB、CBC、CFB、OFB）_天天向上99的博客-CSDN博客_aes cfb<br><a href="https://blog.csdn.net/charleslei/article/details/48710293" target="_blank" rel="noopener">https://blog.csdn.net/charleslei/article/details/48710293</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzI1MTIzMzI2MA==&amp;mid=2650561454&amp;idx=1&amp;sn=dd91cdd8f3853fe07e1f2d02f4f126a9&amp;chksm=f1feed2dc689643bc143bc9462cc36315843a96e1babe372216375808148c43258278723749a&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">漫画：什么是 AES 算法？</a><br><a href="https://mp.weixin.qq.com/s/zayzFr1h5HIIcWq9xGefkQ?" target="_blank" rel="noopener">漫画：AES 算法的底层原理</a>  </p><p>填充模式<br>Day 22. 加密演算法要注意的那些毛 (二) - 填充模式 - iT 邦幫忙::一起幫忙解決難題，拯救 IT 人的一天<br><a href="https://ithelp.ithome.com.tw/articles/10250386" target="_blank" rel="noopener">https://ithelp.ithome.com.tw/articles/10250386</a><br>(瞭解 PKCS#5 的 PKCS#7 的差別)  </p><p>Salt and IV 的差異<br>encryption - Passphrase, Salt and IV, do I need all of these? - Stack Overflow<br><a href="https://stackoverflow.com/questions/1905112/passphrase-salt-and-iv-do-i-need-all-of-these" target="_blank" rel="noopener">https://stackoverflow.com/questions/1905112/passphrase-salt-and-iv-do-i-need-all-of-these</a><br>encryption - Why would you need a salt for AES-CBS when IV is already randomly generated and stored with the encrypted data? - Information Security Stack Exchange<br><a href="https://security.stackexchange.com/questions/48000/why-would-you-need-a-salt-for-aes-cbs-when-iv-is-already-randomly-generated-and" target="_blank" rel="noopener">https://security.stackexchange.com/questions/48000/why-would-you-need-a-salt-for-aes-cbs-when-iv-is-already-randomly-generated-and</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/openssl-aes-encryption/" title="OpenSSL AES encryption 對稱式加密指令用法與範例">OpenSSL AES encryption 對稱式加密指令用法與範例</a><br><a href="/ubuntu-openssl/" title="Ubuntu 2 種安裝 OpenSSL 的方法">Ubuntu 2 種安裝 OpenSSL 的方法</a><br><a href="/mac-openssl/" title="macOS 2 種安裝 OpenSSL 的方法">macOS 2 種安裝 OpenSSL 的方法</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ OpenSSL AES 256 CBC encryption/decryption 加密解密範例，AES 是典型的對稱式加密演算法，對稱式加密演算法是可逆的，也就是用一個金鑰加密後可以再用同一個金鑰解密回來，而 AES 全名是 Adv
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
      <category term="openssl" scheme="https://shengyu7697.github.io/tags/openssl/"/>
    
  </entry>
  
  <entry>
    <title>OpenSSL AES encryption 對稱式加密指令用法與範例</title>
    <link href="https://shengyu7697.github.io/openssl-aes-encryption/"/>
    <id>https://shengyu7697.github.io/openssl-aes-encryption/</id>
    <published>2022-04-04T14:00:00.000Z</published>
    <updated>2022-06-06T13:19:13.589Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 OpenSSL AES encryption and decryption 對稱式加密解密指令用法與範例，AES 是典型的對稱式加密演算法，對稱式加密演算法是可逆的，也就是用一個金鑰加密後可以再用同一個金鑰解密回來，而 AES 全名是 Advanced Encryption Standard 是用來取代原先的 DES (Data Encryption Standard) 演算法，AES 是目前主流的加密演算法，常見對稱式加密演算法的應用像是將檔案壓成壓縮時 (zip/7-zip) 如果要設定密碼加密就會使用到。  </p><p>以下 OpenSSL AES 加密解密的指令用法介紹將分為這幾部份，  </p><ul><li>檢查 OpenSSL 版本  </li><li>OpenSSL AES encryption 加密/解密檔案  </li><li>OpenSSL AES encryption 加密/解密文字  </li></ul><p>那我們開始吧！  </p><h2 id="檢查-OpenSSL-版本"><a href="#檢查-OpenSSL-版本" class="headerlink" title="檢查 OpenSSL 版本"></a>檢查 OpenSSL 版本</h2><p>在使用 OpenSSL 之前，要先檢查確認 OpenSSL 版本，輸入 <code>openssl version</code> 指令可以顯示 OpenSSL 的版本，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ openssl version</span><br><span class="line">OpenSSL 1.1.1n  15 Mar 2022</span><br></pre></td></tr></table></figure></p><p>目前來說是比較建議使用 OpenSSL 1.1.1 之後的版本，之前的版本有一些安全性 bug 不建議使用，建議要裝有 -pbkdf2 選項的 OpenSSL 版本。<br>有些平台會使用 <a href="https://zh.wikipedia.org/wiki/LibreSSL" target="_blank" rel="noopener">LibreSSL</a>，LibreSSL 是從 OpenSSL 1.0.1g 分支出來的，那麼可能有些選項跟 openssl 不一樣。  </p><h2 id="OpenSSL-AES-encryption-加密-解密檔案"><a href="#OpenSSL-AES-encryption-加密-解密檔案" class="headerlink" title="OpenSSL AES encryption 加密/解密檔案"></a>OpenSSL AES encryption 加密/解密檔案</h2><p>這邊介紹 OpenSSL AES-256 encryption 加密與解密檔案指令的用法，使用 <code>openssl list-cipher-commands</code> 選項可以列出有哪些加密模式可以選擇，在本範例我們使用 aes-256-cbc 選項，AES-256 表示 key 金鑰長度使用 256 bits，目前有 128、192 或 256 bits 可以選擇，而其中以 AES-256 安全性最高，CBC 是 AES 的其中一種模式，</p><p>openssl 對稱式加密有兩種使用方式，一種是直接指定要用的加密演算法，例如直接指定 AES-256 CBC：<code>openssl aes-256-cbc</code> ，另外一種是使用 enc 的方式，在 <code>openssl enc</code> 後面參數再指定要使用的加密演算法，例如：<code>openssl enc -aes-256-cbc</code>，enc 是將 openssl 提供多個對稱式加密演算法集成到一個指令中，而且 enc 可以指定對稱式加密演算法指令沒有提供的選項，所以建議使用 <code>openssl enc</code> 這種方式，openssl AES 解密檔案指令如下，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ openssl enc -aes-256-cbc -pbkdf2 -<span class="keyword">in</span> plain.txt -out encrypted.txt</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ openssl aes-256-cbc -pbkdf2 -<span class="keyword">in</span> plain.txt -out encrypted.txt</span><br></pre></td></tr></table></figure></p><p><code>openssl enc -aes-256-cbc</code> 常見選項有：<br>-in: 輸入檔案<br>-out: 輸出檔案<br>-e: 加密(預設)<br>-d: 解密<br>-a: 文字格式輸出，base64<br>-md: Openssl 1.1.0 才從 md5 改為 sha-256，目前 sha-256 為預設<br>-pass pass:<password>: 指定加密/解密密碼，否則會顯示提示訊息讓你輸入密碼<br>-salt: 加鹽(預設)，用於 password 推導成 key 的過程中<br>-nosalt: 不加鹽，除非測試才時使用<br>-S salt: 指定鹽<br>-p: 印出 salt, key and IV<br>-P: 印出 salt, key and IV 且立即結束程式，不做任何加解密<br>-pbkdf2: Openssl 1.1.1 才有，建議使用此選項<br>-iter: password 推導成 key 的迭代次數<br>-z: 在加密前壓縮，使用zlib，前提是這個openssl在編譯時有加入zlib選項。  </password></p><p>執行後會要你輸入 password，並且重新輸入 password 一次確認，之後就會進行加密，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ openssl enc -aes-256-cbc -pbkdf2 -<span class="keyword">in</span> plain.txt -out encrypted.txt</span><br><span class="line">enter aes-256-cbc encryption password:</span><br><span class="line">Verifying - enter aes-256-cbc encryption password:</span><br></pre></td></tr></table></figure></p><p>openssl AES 解密檔案的話就使用下列指令，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ openssl enc -aes-256-cbc -pbkdf2 -d -<span class="keyword">in</span> encrypted.txt -out plain.txt</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ openssl aes-256-cbc -pbkdf2 -d -<span class="keyword">in</span> encrypted.txt -out plain.txt</span><br></pre></td></tr></table></figure></p><h2 id="OpenSSL-AES-encryption-加密-解密文字"><a href="#OpenSSL-AES-encryption-加密-解密文字" class="headerlink" title="OpenSSL AES encryption 加密/解密文字"></a>OpenSSL AES encryption 加密/解密文字</h2><p>這邊介紹 OpenSSL AES-256 encryption 加密與解密文字指令的用法，openssl AES 加密文字指令如下，<code>-a</code> 表示以文字格式輸出 (base64格式)，預設不指定 <code>-pass</code> 帶入密碼的話，他會跳出提示訊息讓你輸入密碼，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"Hello World"</span> | openssl aes-256-cbc -pbkdf2 -a</span><br><span class="line">enter aes-256-cbc encryption password:</span><br><span class="line">Verifying - enter aes-256-cbc encryption password:</span><br><span class="line">U2FsdGVkX19X1Q1t2NbuTdc4xjRr21ZGQ0BZ4rYy8qs=</span><br></pre></td></tr></table></figure></p><p>openssl AES 解密文字的話就使用下列指令，加密時有加 <code>-a</code> 選項的話解密也要有 <code>-a</code> 選項，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"U2FsdGVkX19X1Q1t2NbuTdc4xjRr21ZGQ0BZ4rYy8qs="</span> | openssl enc -aes-256-cbc -pbkdf2 -a -d</span><br><span class="line">enter aes-256-cbc decryption password:</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure></p><p>加入 <code>-pass</code> 選項的話可以設定密碼，以下範例密碼為 “shengyutalk”，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"Hello World"</span> | openssl enc -aes-256-cbc -pbkdf2 -a -pass pass:shengyutalk</span><br><span class="line">U2FsdGVkX19M0vfdhjcNiBW0OHrwdQYWMnOUJ6UvOL0=</span><br></pre></td></tr></table></figure></p><p>解密時也可以加入 <code>-pass</code> 參數設定解密密碼，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"U2FsdGVkX19M0vfdhjcNiBW0OHrwdQYWMnOUJ6UvOL0="</span> | openssl enc -aes-256-cbc -pbkdf2 -a -d -pass pass:shengyutalk</span><br><span class="line">Hello World</span><br></pre></td></tr></table></figure></p><p>以上就是 OpenSSL AES encryption 對稱式加密指令用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" target="_blank" rel="noopener">Facebook 按讚</a>支持一下！  </p><p>其他參考<br><a href="https://www.openssl.org/docs/man1.0.2/man1/openssl-enc.html" target="_blank" rel="noopener">openssl-enc man 1.0.2</a><br><a href="https://www.openssl.org/docs/man1.1.1/man1/openssl-enc.html" target="_blank" rel="noopener">openssl-enc man 1.1.1</a><br><a href="https://www.openssl.org/docs/man3.0/man1/openssl-enc.html" target="_blank" rel="noopener">openssl-enc man 3.0</a><br>encryption - How to use OpenSSL to encrypt/decrypt files? - Stack Overflow<br><a href="https://stackoverflow.com/questions/16056135/how-to-use-openssl-to-encrypt-decrypt-files" target="_blank" rel="noopener">https://stackoverflow.com/questions/16056135/how-to-use-openssl-to-encrypt-decrypt-files</a><br>encryption - OpenSSL 1.1.1b warning: Using -iter or -pbkdf2 would be better while decrypting a file encrypted using OpenSSL 1.1.0g - Unix &amp; Linux Stack Exchange<br><a href="https://unix.stackexchange.com/questions/507131/openssl-1-1-1b-warning-using-iter-or-pbkdf2-would-be-better-while-decrypting" target="_blank" rel="noopener">https://unix.stackexchange.com/questions/507131/openssl-1-1-1b-warning-using-iter-or-pbkdf2-would-be-better-while-decrypting</a><br>(討論 OpenSSL 1.1.1 之前舊版本的 bug，建議要裝有 -pbkdf2 選項的 OpenSSL 版本。)<br>OpenSSL 對稱式、非對稱式加密檔案指令教學與範例<br><a href="https://officeguide.cc/linux-openssl-file-symmetic-asymmetric-encryption-commands-tutorial-examples/" target="_blank" rel="noopener">https://officeguide.cc/linux-openssl-file-symmetic-asymmetric-encryption-commands-tutorial-examples/</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/cpp-openssl-aes/" title="C/C++ OpenSSL AES encryption/decryption 加密解密範例">C/C++ OpenSSL AES encryption/decryption 加密解密範例</a><br><a href="/mac-openssl/" title="macOS 2 種安裝 OpenSSL 的方法">macOS 2 種安裝 OpenSSL 的方法</a><br><a href="/ubuntu-openssl/" title="Ubuntu 2 種安裝 OpenSSL 的方法">Ubuntu 2 種安裝 OpenSSL 的方法</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 OpenSSL AES encryption and decryption 對稱式加密解密指令用法與範例，AES 是典型的對稱式加密演算法，對稱式加密演算法是可逆的，也就是用一個金鑰加密後可以再用同一個金鑰解密回來，而 AES 全名是 Advan
      
    
    </summary>
    
    
      <category term="openssl" scheme="https://shengyu7697.github.io/tags/openssl/"/>
    
  </entry>
  
  <entry>
    <title>Python OpenCV cv2.medianBlur 中值濾波</title>
    <link href="https://shengyu7697.github.io/python-opencv-medianblur/"/>
    <id>https://shengyu7697.github.io/python-opencv-medianblur/</id>
    <published>2022-03-31T14:00:00.000Z</published>
    <updated>2022-05-23T15:29:27.894Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 將介紹 Python 使用 OpenCV cv2.medianBlur 來作影像平滑模糊化，在寫 Python 影像處理程式時常會用到 OpenCV 圖片平滑模糊化的功能，而中值濾波 Median Filtering 是其中一個方法，接下來介紹怎麼使用中值濾波 cv2.medianBlur 來進行影像平滑模糊化。  </p><h2 id="中值濾波-Median-Filtering"><a href="#中值濾波-Median-Filtering" class="headerlink" title="中值濾波 Median Filtering"></a>中值濾波 Median Filtering</h2><p>這邊我們介紹中值濾波 Median Filtering，使用 cv2.medianBlur 就可以計算 kernel 視窗內所有 pixel 的中位數然後取代 kernel 中間的數值，中值濾波 Median Filtering 這個方法對於去除雜訊很有效，我們這邊示範讀取一個有雜訊 opencv logo 的圖片然後做 cv2.medianBlur，kernel 大小為 5，<br><figure class="highlight python"><figcaption><span>opencv-medianBlur.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'opencv-logo-noise.png'</span>)</span><br><span class="line"></span><br><span class="line">blur = cv2.medianBlur(img, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>), plt.imshow(img), plt.title(<span class="string">'Original'</span>)</span><br><span class="line">plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">122</span>), plt.imshow(blur), plt.title(<span class="string">'Blurred'</span>)</span><br><span class="line">plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>結果如下圖所示：<br><img src="/python-opencv-medianblur/opencv-medianBlur.png" width="640" title="結果圖">  </p><p>cv2.medianBlur 參數的詳細細節請參考<a href="https://docs.opencv.org/2.4/modules/imgproc/doc/filtering.html?highlight=blur#cv2.medianBlur" target="_blank" rel="noopener">這裡</a>  </p><p>參考<br>OpenCV: Smoothing Images<br><a href="https://docs.opencv.org/4.x/d4/d13/tutorial_py_filtering.html" target="_blank" rel="noopener">https://docs.opencv.org/4.x/d4/d13/tutorial_py_filtering.html</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-opencv-blur/" title="Python OpenCV 影像平滑模糊化 blur">Python OpenCV 影像平滑模糊化 blur</a><br><a href="/python-opencv-gaussianblur/" title="Python OpenCV cv2.GaussianBlur 高斯濾波">Python OpenCV cv2.GaussianBlur 高斯濾波</a><br><a href="/python-opencv-threshold/" title="Python OpenCV 影像二值化 Image Thresholding">Python OpenCV 影像二值化 Image Thresholding</a><br><a href="/python-opencv-rgb-to-gray/" title="Python OpenCV 彩色轉灰階(RGB/BGR to GRAY)">Python OpenCV 彩色轉灰階(RGB/BGR to GRAY)</a><br><a href="/python-opencv-rgb-to-hsv/" title="Python OpenCV 彩色轉HSV(RGB/BGR to HSV)">Python OpenCV 彩色轉HSV(RGB/BGR to HSV)</a><br><a href="/python-opencv-rgb-to-ycbcr/" title="Python OpenCV 彩色轉YCbCr(RGB/BGR to YCbCr)">Python OpenCV 彩色轉YCbCr(RGB/BGR to YCbCr)</a><br><a href="/python-opencv-canny/" title="Python OpenCV 影像邊緣偵測 Canny Edge Detection">Python OpenCV 影像邊緣偵測 Canny Edge Detection</a><br><a href="/python-opencv-resize/" title="Python OpenCV resize 圖片縮放">Python OpenCV resize 圖片縮放</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 將介紹 Python 使用 OpenCV cv2.medianBlur 來作影像平滑模糊化，在寫 Python 影像處理程式時常會用到 OpenCV 圖片平滑模糊化的功能，而中值濾波 Median Filtering 是其中一個方法，接下來介紹怎麼使用
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="OpenCV" scheme="https://shengyu7697.github.io/tags/OpenCV/"/>
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python OpenCV cv2.GaussianBlur 高斯濾波</title>
    <link href="https://shengyu7697.github.io/python-opencv-gaussianblur/"/>
    <id>https://shengyu7697.github.io/python-opencv-gaussianblur/</id>
    <published>2022-03-28T14:00:00.000Z</published>
    <updated>2022-05-23T15:29:27.741Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 將介紹 Python 使用 OpenCV cv2.GaussianBlur 來作影像平滑模糊化，在寫 Python 影像處理程式時常會用到 OpenCV 圖片平滑模糊化的功能，而高斯濾波 Gaussian Filtering 是其中一個方法，接下來介紹怎麼使用高斯濾波 cv2.GaussianBlur 來進行影像平滑模糊化。  </p><h2 id="cv2-GaussianBlur-高斯濾波"><a href="#cv2-GaussianBlur-高斯濾波" class="headerlink" title="cv2.GaussianBlur 高斯濾波"></a>cv2.GaussianBlur 高斯濾波</h2><p>這邊我們介紹高斯濾波 Gaussian Filtering，它與平均濾波 Averaging 類似，平均濾波 Averaging 的 kernel 裡的每個 pixel 權重都是1，而高斯濾波給予每個 pixel 不同權重，中心 pixel 的權重最高，越往邊角權重就越低，相較於平均濾波 Averaging 這樣可以讓圖片失真較少，高斯濾波通常去除雜訊也有不錯的效果。  </p><p>以下範例為 kernel size 為 5x5，sigma 為 0，<br><figure class="highlight python"><figcaption><span>opencv-GaussianBlur.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'opencv-logo.png'</span>)</span><br><span class="line"></span><br><span class="line">blur = cv2.GaussianBlur(img, (<span class="number">5</span>, <span class="number">5</span>), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>), plt.imshow(img), plt.title(<span class="string">'Original'</span>)</span><br><span class="line">plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">122</span>), plt.imshow(blur), plt.title(<span class="string">'Blurred'</span>)</span><br><span class="line">plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>結果如下圖所示：<br><img src="/python-opencv-gaussianblur/opencv-GaussianBlur.png" width="640" title="結果圖">  </p><p>cv2.GaussianBlur 參數的詳細細節請參考<a href="https://docs.opencv.org/2.4/modules/imgproc/doc/filtering.html?highlight=blur#cv2.GaussianBlur" target="_blank" rel="noopener">這裡</a>  </p><h2 id="cv2-getGaussianKernel-取得高斯-kernel"><a href="#cv2-getGaussianKernel-取得高斯-kernel" class="headerlink" title="cv2.getGaussianKernel 取得高斯 kernel"></a>cv2.getGaussianKernel 取得高斯 kernel</h2><p>這邊介紹使用 cv2.getGaussianKernel 取得高斯 kernel，<br><figure class="highlight python"><figcaption><span>opencv-GaussianBlur2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">kernel_size = <span class="number">3</span></span><br><span class="line">sigma = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get 1-D Gaussian kernel</span></span><br><span class="line">kernel_1d = cv2.getGaussianKernel(kernel_size, sigma)</span><br><span class="line">print(kernel_1d)</span><br><span class="line">kernel_2d = kernel_1d * kernel_1d.T</span><br><span class="line">print(kernel_2d)</span><br></pre></td></tr></table></figure></p><p>輸出結果如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[[0.25]</span><br><span class="line"> [0.5 ]</span><br><span class="line"> [0.25]]</span><br><span class="line">[[0.0625 0.125  0.0625]</span><br><span class="line"> [0.125  0.25   0.125 ]</span><br><span class="line"> [0.0625 0.125  0.0625]]</span><br></pre></td></tr></table></figure></p><h2 id="使用-cv2-sepFilter2D-做高斯濾波"><a href="#使用-cv2-sepFilter2D-做高斯濾波" class="headerlink" title="使用 cv2.sepFilter2D 做高斯濾波"></a>使用 cv2.sepFilter2D 做高斯濾波</h2><p>這邊介紹使用 cv2.sepFilter2D 來做高斯濾波也能達成 cv2.GaussianBlur 同樣的效果，先使用 cv2.getGaussianKernel 建立一個 1-D 的 kernel，接著使用 cv2.sepFilter2D 且分別將 kernelX 與 kernelY 參數都設定成剛剛建立好的 1-D 的 kernel，這樣的結果跟 cv2.GaussianBlur 結果一樣。<br><figure class="highlight python"><figcaption><span>opencv-GaussianBlur3.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">'opencv-logo.png'</span>)</span><br><span class="line"></span><br><span class="line">kernel_size = <span class="number">5</span></span><br><span class="line">sigma = <span class="number">0</span></span><br><span class="line">kernel_1d = cv2.getGaussianKernel(kernel_size, sigma)</span><br><span class="line"></span><br><span class="line">blur = cv2.sepFilter2D(img, <span class="number">-1</span>, kernel_1d, kernel_1d)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>), plt.imshow(img), plt.title(<span class="string">'Original'</span>)</span><br><span class="line">plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.subplot(<span class="number">122</span>), plt.imshow(blur), plt.title(<span class="string">'Blurred'</span>)</span><br><span class="line">plt.xticks([]), plt.yticks([])</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>cv2.sepFilter2D 參數的詳細細節請參考<a href="https://docs.opencv.org/2.4/modules/imgproc/doc/filtering.html?highlight=blur#cv2.sepFilter2D" target="_blank" rel="noopener">這裡</a>  </p><p>參考<br>OpenCV: Smoothing Images<br><a href="https://docs.opencv.org/4.x/d4/d13/tutorial_py_filtering.html" target="_blank" rel="noopener">https://docs.opencv.org/4.x/d4/d13/tutorial_py_filtering.html</a><br>[Python]Gaussian Filter-概念與實作. 實作 Gaussian Filter<br><a href="https://medium.com/@bob800530/python-gaussian-filter-%E6%A6%82%E5%BF%B5%E8%88%87%E5%AF%A6%E4%BD%9C-676aac52ea17" target="_blank" rel="noopener">https://medium.com/@bob800530/python-gaussian-filter-%E6%A6%82%E5%BF%B5%E8%88%87%E5%AF%A6%E4%BD%9C-676aac52ea17</a><br>How Blurs &amp; Filters Work - Computerphile<br><a href="https://youtu.be/C_zFhWdM4ic" target="_blank" rel="noopener">https://youtu.be/C_zFhWdM4ic</a><br>opencv 高斯核是怎么通过参数ksize和sigma计算得到的 cv2.getGaussianKernel()<br><a href="https://blog.csdn.net/weixin_37804469/article/details/113843829" target="_blank" rel="noopener">https://blog.csdn.net/weixin_37804469/article/details/113843829</a><br>Gaussian Blurring | TheAILearner<br><a href="https://theailearner.com/2019/05/06/gaussian-blurring/" target="_blank" rel="noopener">https://theailearner.com/2019/05/06/gaussian-blurring/</a>  </p><p><strong>其它相關文章推薦</strong><br><a href="/python-opencv-blur/" title="Python OpenCV 影像平滑模糊化 blur">Python OpenCV 影像平滑模糊化 blur</a><br><a href="/python-opencv-medianblur/" title="Python OpenCV cv2.medianBlur 中值濾波">Python OpenCV cv2.medianBlur 中值濾波</a><br><a href="/python-opencv-threshold/" title="Python OpenCV 影像二值化 Image Thresholding">Python OpenCV 影像二值化 Image Thresholding</a><br><a href="/python-opencv-rgb-to-gray/" title="Python OpenCV 彩色轉灰階(RGB/BGR to GRAY)">Python OpenCV 彩色轉灰階(RGB/BGR to GRAY)</a><br><a href="/python-opencv-rgb-to-hsv/" title="Python OpenCV 彩色轉HSV(RGB/BGR to HSV)">Python OpenCV 彩色轉HSV(RGB/BGR to HSV)</a><br><a href="/python-opencv-rgb-to-ycbcr/" title="Python OpenCV 彩色轉YCbCr(RGB/BGR to YCbCr)">Python OpenCV 彩色轉YCbCr(RGB/BGR to YCbCr)</a><br><a href="/python-opencv-canny/" title="Python OpenCV 影像邊緣偵測 Canny Edge Detection">Python OpenCV 影像邊緣偵測 Canny Edge Detection</a><br><a href="/python-opencv-resize/" title="Python OpenCV resize 圖片縮放">Python OpenCV resize 圖片縮放</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 將介紹 Python 使用 OpenCV cv2.GaussianBlur 來作影像平滑模糊化，在寫 Python 影像處理程式時常會用到 OpenCV 圖片平滑模糊化的功能，而高斯濾波 Gaussian Filtering 是其中一個方法，接下來介紹
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="OpenCV" scheme="https://shengyu7697.github.io/tags/OpenCV/"/>
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python print numpy array 設定精準度</title>
    <link href="https://shengyu7697.github.io/python-numpy-print-array-precision/"/>
    <id>https://shengyu7697.github.io/python-numpy-print-array-precision/</id>
    <published>2022-03-24T14:00:00.000Z</published>
    <updated>2022-05-21T06:47:39.062Z</updated>
    
    <content type="html"><![CDATA[<p>本篇紀錄如何使用 Python print numpy array 設定精準度。  </p><h2 id="Python-print-numpy-array-設定精準度"><a href="#Python-print-numpy-array-設定精準度" class="headerlink" title="Python print numpy array 設定精準度"></a>Python print numpy array 設定精準度</h2><p>以下範例示範 Python print numpy array 設定精準度，第一個 arr1 是隨機產生 3 個數值，第二個 arr2 是指定各種數值並且有一些是含科學符號的數值，使用 <code>np.printoptions()</code> 設定 precision 參數可以控制印出的精準度，如果不想要影響全域結果可以使用區域的寫法 <code>with np.printoptions(...):</code> (需要 NumPy 1.15.0 或以後的版本)，<br><figure class="highlight python"><figcaption><span>python3-numpy-print-array-precision.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr1 = np.random.random(<span class="number">3</span>)</span><br><span class="line">print(arr1)</span><br><span class="line"><span class="comment">#np.printoptions(precision=2)</span></span><br><span class="line"><span class="keyword">with</span> np.printoptions(precision=<span class="number">2</span>, suppress=<span class="literal">True</span>):</span><br><span class="line">    print(arr1)</span><br><span class="line">print(arr1)</span><br><span class="line"></span><br><span class="line">arr2 = np.asarray([<span class="number">1.5e-10</span>, <span class="number">1.5</span>, <span class="number">1500</span>])</span><br><span class="line"></span><br><span class="line">print(type(arr2)) <span class="comment"># &lt;class 'numpy.ndarray'&gt;</span></span><br><span class="line">print(arr2)</span><br><span class="line"><span class="comment">#np.printoptions(precision=2)</span></span><br><span class="line"><span class="keyword">with</span> np.printoptions(precision=<span class="number">2</span>, suppress=<span class="literal">True</span>):</span><br><span class="line">    print(arr2)</span><br><span class="line">print(arr2)</span><br></pre></td></tr></table></figure></p><p>輸出如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[0.99005858 0.2245673  0.5895889 ]</span><br><span class="line">[0.99 0.22 0.59]</span><br><span class="line">[0.99005858 0.2245673  0.5895889 ]</span><br><span class="line">&lt;class &apos;numpy.ndarray&apos;&gt;</span><br><span class="line">[1.5e-10 1.5e+00 1.5e+03]</span><br><span class="line">[   0.     1.5 1500. ]</span><br><span class="line">[1.5e-10 1.5e+00 1.5e+03]</span><br></pre></td></tr></table></figure></p><p>其他參考<br>python - How to pretty-print a numpy.array without scientific notation and with given precision? - Stack Overflow<br><a href="https://stackoverflow.com/questions/2891790/how-to-pretty-print-a-numpy-array-without-scientific-notation-and-with-given-pre" target="_blank" rel="noopener">https://stackoverflow.com/questions/2891790/how-to-pretty-print-a-numpy-array-without-scientific-notation-and-with-given-pre</a>  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 Python 相關技術，可以參考看看下面的文章，<br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a><br><a href="/python-str/" title="Python str 字串用法與範例">Python str 字串用法與範例</a><br><a href="/python-list/" title="Python list 串列用法與範例">Python list 串列用法與範例</a><br><a href="/python-set/" title="Python set 集合用法與範例">Python set 集合用法與範例</a><br><a href="/python-dict/" title="Python dict 字典用法與範例">Python dict 字典用法與範例</a><br><a href="/python-tuple/" title="Python tuple 元組用法與範例">Python tuple 元組用法與範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇紀錄如何使用 Python print numpy array 設定精準度。  &lt;/p&gt;
&lt;h2 id=&quot;Python-print-numpy-array-設定精準度&quot;&gt;&lt;a href=&quot;#Python-print-numpy-array-設定精準度&quot; class=&quot;h
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python numpy 寫入 csv</title>
    <link href="https://shengyu7697.github.io/python-numpy-write-csv-file/"/>
    <id>https://shengyu7697.github.io/python-numpy-write-csv-file/</id>
    <published>2022-03-21T14:00:00.000Z</published>
    <updated>2022-05-21T06:47:04.318Z</updated>
    
    <content type="html"><![CDATA[<p>本篇紀錄如何使用 python numpy 的資料寫入 csv。  </p><h2 id="將-numpy-array-用-savetxt-寫入-csv"><a href="#將-numpy-array-用-savetxt-寫入-csv" class="headerlink" title="將 numpy array 用 savetxt 寫入 csv"></a>將 numpy array 用 savetxt 寫入 csv</h2><p>以下範例將 numpy array 寫入 csv，<br><figure class="highlight python"><figcaption><span>python3-numpy-csv-write.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.asarray([</span><br><span class="line">  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">  [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],</span><br><span class="line">  [<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">  ])</span><br><span class="line"></span><br><span class="line">print(type(arr)) <span class="comment"># &lt;class 'numpy.ndarray'&gt;</span></span><br><span class="line">np.savetxt(<span class="string">'output_data.csv'</span>, arr, delimiter=<span class="string">','</span>)</span><br><span class="line"><span class="comment">#np.savetxt('output_data.csv', arr, delimiter=',', fmt='%d')</span></span><br><span class="line"><span class="comment">#np.savetxt('output_data.csv', arr, delimiter=',', fmt='%.2f')</span></span><br></pre></td></tr></table></figure></p><p>輸出的 output_data.csv 內容如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.000000000000000000e+00,2.000000000000000000e+00,3.000000000000000000e+00</span><br><span class="line">4.000000000000000000e+00,5.000000000000000000e+00,6.000000000000000000e+00</span><br><span class="line">7.000000000000000000e+00,8.000000000000000000e+00,9.000000000000000000e+00</span><br></pre></td></tr></table></figure></p><p>如果加入 fmt 參數的話可以控制輸出的格式，例如可以控制輸出的精準度 <code>fmt=&#39;%d&#39;</code> 為整數 (預設為 <code>fmt=&#39;%.18e&#39;</code>)，輸出的 output_data.csv 內容如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1,2,3</span><br><span class="line">4,5,6</span><br><span class="line">7,8,9</span><br></pre></td></tr></table></figure></p><p>如果是 <code>fmt=&#39;%.2f&#39;</code> 為小數點第二位，輸出的 output_data.csv 內容如下，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.00,2.00,3.00</span><br><span class="line">4.00,5.00,6.00</span><br><span class="line">7.00,8.00,9.00</span><br></pre></td></tr></table></figure></p><p>另外如果是使用 <code>arr.tofile(&#39;output_data.csv&#39;, sep=&#39;,&#39;)</code> (numpy.ndarray.tofile) 的方式寫入 csv 是不會換行的。  </p><p>其他參考<br>numpy.savetxt — NumPy Manual<br><a href="https://numpy.org/doc/stable/reference/generated/numpy.savetxt.html" target="_blank" rel="noopener">https://numpy.org/doc/stable/reference/generated/numpy.savetxt.html</a><br>python - Setting the fmt option in numpy.savetxt - Stack Overflow<br><a href="https://stackoverflow.com/questions/17043393/setting-the-fmt-option-in-numpy-savetxt" target="_blank" rel="noopener">https://stackoverflow.com/questions/17043393/setting-the-fmt-option-in-numpy-savetxt</a>  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 Python 相關技術，可以參考看看下面的文章，<br><a href="/python-write-csv-file/" title="Python 寫入 csv 檔案">Python 寫入 csv 檔案</a><br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a><br><a href="/python-str/" title="Python str 字串用法與範例">Python str 字串用法與範例</a><br><a href="/python-list/" title="Python list 串列用法與範例">Python list 串列用法與範例</a><br><a href="/python-set/" title="Python set 集合用法與範例">Python set 集合用法與範例</a><br><a href="/python-dict/" title="Python dict 字典用法與範例">Python dict 字典用法與範例</a><br><a href="/python-tuple/" title="Python tuple 元組用法與範例">Python tuple 元組用法與範例</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇紀錄如何使用 python numpy 的資料寫入 csv。  &lt;/p&gt;
&lt;h2 id=&quot;將-numpy-array-用-savetxt-寫入-csv&quot;&gt;&lt;a href=&quot;#將-numpy-array-用-savetxt-寫入-csv&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>macOS 使用 pip 安裝 opencv</title>
    <link href="https://shengyu7697.github.io/mac-pip-install-opencv/"/>
    <id>https://shengyu7697.github.io/mac-pip-install-opencv/</id>
    <published>2022-03-17T14:00:00.000Z</published>
    <updated>2022-05-21T02:27:24.907Z</updated>
    
    <content type="html"><![CDATA[<p>本篇記錄一下 macOS 使用 pip 安裝 opencv，安裝完後就可以開始用 python 開法 opencv 影像處理程式囉！  </p><p>python pip 安裝 opencv-python 的指令如下，預設是安裝最新版，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install opencv-python</span><br></pre></td></tr></table></figure></p><p>我的 macOS 是 10.13.4，我試過不論是 opencv 4 最新版或 opencv 3 最新版在我的環境下會編譯失敗顯示這個問題，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pip3 install opencv-python</span><br><span class="line">...</span><br><span class="line">ERROR: Could not build wheels for opencv-python, which is required to install pyproject.toml-based projects</span><br></pre></td></tr></table></figure></p><p>上網找了一下資料，除了把 macOS 版本更新到最新的方法以外，還可以試試安裝舊版 opencv，所以新版 macOS 應該沒有這個問題，我暫時還不想升級 macOS，中間我試過升級 pip 工具 <code>pip3 install --upgrade pip setuptools wheel</code>，還有安裝 python 3.9 <code>brew install python@3.9</code> (我原本使用的是 python 3.7) 都無法解決這個問題，  </p><p>最後安裝 opencv 舊版本才順利成功，使用 pip 安裝的話大約是 2021/1/4 以後的版本都會抓 source code 下來 build，舊版本才會抓預編譯的 whl 檔，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install opencv-python==3.4.13.47 # opencv 3</span><br><span class="line">pip3 install opencv-python==4.5.1.48 # opencv 4</span><br></pre></td></tr></table></figure></p><p>如果要安裝 contrib 的話則是，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip3 install opencv-contrib-python==3.4.13.47 # opencv 3</span><br><span class="line">pip3 install opencv-contrib-python==4.5.1.48 # opencv 4</span><br></pre></td></tr></table></figure></p><p>參考<br>docker - ERROR: Could not build wheels for opencv-python which use PEP 517 and cannot be installed directly - Stack Overflow<br><a href="https://stackoverflow.com/questions/63732353/error-could-not-build-wheels-for-opencv-python-which-use-pep-517-and-cannot-be" target="_blank" rel="noopener">https://stackoverflow.com/questions/63732353/error-could-not-build-wheels-for-opencv-python-which-use-pep-517-and-cannot-be</a></p><p><strong>其它相關文章推薦</strong><br>如果你想學習 Python 相關技術，可以參考看看下面的文章，<br><a href="/python-tutorial/" title="Python 新手入門教學懶人包">Python 新手入門教學懶人包</a><br><a href="/python-install-opencv/" title="Python 安裝 OpenCV 模組">Python 安裝 OpenCV 模組</a><br><a href="/python-pip-install-specific-version/" title="Python pip install 如何安裝指定版本的套件">Python pip install 如何安裝指定版本的套件</a>  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇記錄一下 macOS 使用 pip 安裝 opencv，安裝完後就可以開始用 python 開法 opencv 影像處理程式囉！  &lt;/p&gt;
&lt;p&gt;python pip 安裝 opencv-python 的指令如下，預設是安裝最新版，&lt;br&gt;&lt;figure class=
      
    
    </summary>
    
      <category term="Python教學" scheme="https://shengyu7697.github.io/categories/Python%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="Python" scheme="https://shengyu7697.github.io/tags/Python/"/>
    
      <category term="macOS" scheme="https://shengyu7697.github.io/tags/macOS/"/>
    
  </entry>
  
</feed>

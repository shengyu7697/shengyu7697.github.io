<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ShengYu Talk</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://shengyu7697.github.io/"/>
  <updated>2024-09-01T04:30:06.414Z</updated>
  <id>https://shengyu7697.github.io/</id>
  
  <author>
    <name>ShengYu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++ 設計模式 - 代理模式 Proxy Pattern</title>
    <link href="https://shengyu7697.github.io/cpp-proxy-pattern/"/>
    <id>https://shengyu7697.github.io/cpp-proxy-pattern/</id>
    <published>2024-08-29T12:00:00.000Z</published>
    <updated>2024-09-01T04:30:06.414Z</updated>
    
    <content type="html"><![CDATA[<p>在日常生活中，我們常常遇到這樣的情況：你想要完成某件事情，但由於種種原因，你無法直接接觸到那個目標，於是你請來了一個「代理」來幫你處理一切。例如你需要買一台很難找的限量版遊戲機，但由於時間或距離問題，你沒辦法親自去購買，所以你委託了一個代購服務。而這個代購就是你的「代理」。在軟體設計中，代理模式 Proxy Pattern 就是利用類似的概念，讓一個物件（代理）代表另一個物件來控制對它的存取。聽起來有點抽象？別擔心，我們馬上進入正題。  </p><h2><span id="什麼是代理模式">什麼是代理模式？</span></h2><p>代理模式的核心思想是：為某個物件提供一個替代者，以控制對這個物件的存取。這樣做的好處是你可以在不改變原物件的情況下，新增一些額外的功能，或是對存取進行控制。代理模式可以被看作是一個中間層，這個中間層負責把客戶端的請求轉發給真實物件，並在過程中執行一些額外的邏輯。  </p><p>簡單來說，代理模式中有三個角色：  </p><ol><li>Subject：定義了客戶端可以呼叫的方法。  </li><li>RealSubject：實際執行請求的真實物件。  </li><li>Proxy：代理物件，負責控制對 RealSubject 的存取。  </li></ol><h2><span id="代理模式在網頁載入中的應用">代理模式在網頁載入中的應用</span></h2><p>讓我們以網頁載入的例子來解釋代理模式的實際應用。假設我們有一個網站，其中包含許多高解析度的圖片，這些圖片可能會因為其大容量而導致網頁載入緩慢。為了優化使用者體驗，我們可以使用代理模式，先顯示一個縮圖，等使用者真的需要查看大圖時，再去載入原圖。  </p><p>首先我們定義一個 <code>Image</code> 介面，裡面有一個方法 <code>display</code>，用來顯示圖片，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象介面 Subject</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Image</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~Image() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>接下來我們實現這個介面來載入並顯示實際的圖片，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 實際主題 RealSubject</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RealImage</span> :</span> <span class="keyword">public</span> Image &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> filename;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loadFromDisk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Loading "</span> &lt;&lt; filename &lt;&lt; <span class="string">" from disk\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    RealImage(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; filename) : filename(filename) &#123;</span><br><span class="line">        loadFromDisk();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Displaying "</span> &lt;&lt; filename &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>最後我們實現一個 <code>ProxyImage</code> 來控制對 <code>RealImage</code> 的存取，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代理物件 Proxy</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyImage</span> :</span> <span class="keyword">public</span> Image &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> filename;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;RealImage&gt; realImage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    ProxyImage(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; filename) : filename(filename), realImage(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> override </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!realImage) &#123;</span><br><span class="line">            <span class="comment">// lazy initialization</span></span><br><span class="line">            realImage = <span class="built_in">std</span>::make_unique&lt;RealImage&gt;(filename);</span><br><span class="line">        &#125;</span><br><span class="line">        realImage-&gt;display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>在客戶端只需透過代理物件來存取圖片，而不必直接接觸到大圖片本身：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 客戶端程式碼</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Image&gt; image1 = <span class="built_in">std</span>::make_unique&lt;ProxyImage&gt;(<span class="string">"photo1.jpg"</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Image&gt; image2 = <span class="built_in">std</span>::make_unique&lt;ProxyImage&gt;(<span class="string">"photo2.jpg"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 圖像將從磁碟載入</span></span><br><span class="line">    image1-&gt;display();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 圖像不會再次從磁碟載入，直接顯示</span></span><br><span class="line">    image1-&gt;display();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 圖像將從磁碟載入</span></span><br><span class="line">    image2-&gt;display();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在這個例子中，第一次呼叫 <code>display()</code> 方法時，代理會建立並載入真實圖片。當第二次呼叫時，圖片已經被載入過，因此不會再次載入，直接顯示圖片內容。這樣的處理方式避免了不必要的效能消耗，還提升了效率。  </p><h2><span id="代理模式的優缺點">代理模式的優缺點</span></h2><p>代理模式帶來了許多好處，最顯而易見的是它能讓我們有效地控制對目標物件的存取。這表示我們可以根據需求延遲載入資源、設定存取權限，甚至在某些情況下，讓一個代理物件負責管理多個請求，進而優化系統的效能。另外代理模式提供了一種優雅的方式，在不改變原有類別的基礎上新增額外功能，這讓我們的程式設計更加靈活，能更好地應對未來的變化。  </p><p>代理模式也不是沒有缺點，導入代理會在客戶端和真實物件之間增加一個間接層，這可能會導致系統變得更加複雜。如果代理類別中包含了太多額外的邏輯，可能會影響效能。  </p><h2><span id="總結">總結</span></h2><p>代理模式是一個實用且靈活的設計模式，適合用於需要控制存取或增加功能的場景中。它的應用非常廣泛，例如虛擬代理、保護代理、智慧代理等，每一種代理模式都有其獨特的價值。但我們也要注意避免因為濫用代理模式而導致系統過度複雜。  </p><p>就像現實生活中的經紀人或助理一樣，代理為我們處理了許多複雜的細節，讓我們能夠專注於更重要的事務。下次當你面臨需要控制對對象的存取，或者需要在存取前後添加額外邏輯的情況時，不妨考慮使用代理模式。它可能正是你所需要的解決方案。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在日常生活中，我們常常遇到這樣的情況：你想要完成某件事情，但由於種種原因，你無法直接接觸到那個目標，於是你請來了一個「代理」來幫你處理一切。例如你需要買一台很難找的限量版遊戲機，但由於時間或距離問題，你沒辦法親自去購買，所以你委託了一個代購服務。而這個代購就是你的「代理」。
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
      <category term="設計模型" scheme="https://shengyu7697.github.io/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++ 設計模式 - 簡單工廠模式 Simple Factory Pattern</title>
    <link href="https://shengyu7697.github.io/cpp-simple-factory-pattern/"/>
    <id>https://shengyu7697.github.io/cpp-simple-factory-pattern/</id>
    <published>2024-08-28T12:00:00.000Z</published>
    <updated>2024-09-01T01:30:07.473Z</updated>
    
    <content type="html"><![CDATA[<p>在設計模式中，簡單工廠方法模式 Simple Factory Pattern 是一個常見的設計模式，特別適合用來解決物件建立的問題。今天我們就來用一個大家耳熟能詳的特斯拉汽車工廠例子來解釋這個模式。  </p><p>而工廠模式的核心思想是，將物件的建立過程封裝起來，客戶端只需要知道自己需要什麼，而不需要關心如何製作。  </p><h2><span id="什麼是簡單工廠模式">什麼是簡單工廠模式？</span></h2><p>簡單工廠模式是非正式的設計模式，它比較是一個寫程式技巧，一般在講工廠模式通常指的是簡單工廠模式，在設計模式中，簡單工廠模式通常指的是建立者（工廠）沒有子類，而產品可以有子類。  </p><p>具體來說，簡單工廠模式中工廠本身是一個靜態的方法或單一的類別，根據給定的參數來決定建立哪一種類型的物件。這個工廠類別通常不會有子類，因為它的目的就是統一處理產品的建立邏輯。然而工廠所產生的產品類別可以有不同的子類，以實現不同的具體產品。  </p><p>例如有一個簡單工廠負責生產汽車，這個工廠可以根據需求產生不同類型的汽車（如電動車、油車）。在這個場景下，工廠本身不會有子類，但生產出來的產品（汽車）可能有多個子類，代表不同類型的汽車。  </p><h2><span id="簡單工廠模式在特斯拉汽車工廠的應用">簡單工廠模式在特斯拉汽車工廠的應用</span></h2><p>讓我們用特斯拉的汽車工廠來說明這個概念。這座汽車工廠能夠生產四種不同的車型：Model 3、Model Y、Model S 和 Model X。在這個例子裡我們將這四種車型視為不同的「產品類別」，而工廠則是負責建立這些車型物件的地方。  </p><p>假設我們沒有使用工廠模式，每當需要建立一輛新的車，我們就必須自己手動選擇車型的類別並建立物件，像這樣寫，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Car&gt; myCar = <span class="built_in">std</span>::make_unique&lt;Model3&gt;();</span><br><span class="line"><span class="comment">// 或傳統指標</span></span><br><span class="line">Car* myCar = <span class="keyword">new</span> Model3();</span><br></pre></td></tr></table></figure></p><p>這種方式看起來簡單直接，但當我們的應用程式需要根據不同的條件來建立不同的車型時，程式碼就會變得很複雜，而且如果未來需要增加新的車型，我們就需要到每一處使用這段程式碼的地方進行修改，這非常容易出錯。  </p><p>我們首先定義一個簡單的工廠類別 <code>CarFactory</code>，這個類別有一個靜態方法 <code>createCar</code>，根據傳入的車型名稱來建立對應的車型物件，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Car&gt; createCar(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; carType) &#123;</span><br><span class="line">        <span class="keyword">if</span> (carType == <span class="string">"Model 3"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">std</span>::make_unique&lt;Model3&gt;();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (carType == <span class="string">"Model S"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">std</span>::make_unique&lt;ModelS&gt;();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (carType == <span class="string">"Model X"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">std</span>::make_unique&lt;ModelX&gt;();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (carType == <span class="string">"Model Y"</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">std</span>::make_unique&lt;ModelY&gt;();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>使用工廠模式後，我們只需要簡單地告訴工廠我們需要什麼車型即可，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Car&gt; myCar = CarFactory::createCar(<span class="string">"Model 3"</span>);</span><br><span class="line"><span class="comment">// 或傳統指標</span></span><br><span class="line">Car* myCar = CarFactory::createCar(<span class="string">"Model 3"</span>);</span><br></pre></td></tr></table></figure></p><p>這樣一來，如果未來特斯拉推出了新的車型，例如 <code>Model Z</code>，我們只需修改 <code>CarFactory</code> 類別，新增對 <code>Model Z</code> 的支援，而不需要去改動使用了 <code>CarFactory</code> 的所有地方。  </p><h2><span id="簡單工廠方法模式的優缺點">簡單工廠方法模式的優缺點</span></h2><p>簡單工廠模式的最大優點就是它的「簡單」。你只需要告訴工廠你想要什麼，它就能幫你生產出來。這讓程式碼變得更直觀，容易理解。所有的建立邏輯都集中在一個地方（工廠類別），如果我們要修改或新增新產品，只需要動這個工廠類別內的邏輯，其他地方的程式碼不受影響，也不需要去修改客戶端的程式碼，這樣即使需求變動，也可以輕鬆應對。  </p><p>簡單工廠模式的缺點就是所有的建立邏輯都集中在工廠類別中，如果這個工廠要處理很多不同的產品類別，它會變得非常龐大和複雜，違反了「單一職責原則」。雖然新增新產品相對容易，但如果工廠需要產生的產品越來越多，工廠類別的邏輯也會越來越複雜，導致它變得難以維護和修改。簡單工廠適合處理簡單的物件建立需求，但如果每個產品的建立過程都很複雜，工廠就會變得難以維持。  </p><h2><span id="簡單工廠模式跟工廠方法模式的差別">簡單工廠模式跟工廠方法模式的差別</span></h2><p>簡單工廠模式和工廠方法模式是兩種不同的設計模式，各自有不同的用途和適用場景，但它們確實有一定的關聯性。  </p><p>簡單工廠模式（Simple Factory Pattern）並不被視為一個正式的設計模式，更像是一個寫程式技巧。它集中了一個工廠類來生產產品，通常使用一個靜態方法根據參數決定要建立的物件。這樣做的好處是簡單易用，但缺點在於違反了「開放封閉原則」，也就是如果需要擴展產品類型，就必須修改工廠的程式碼。  </p><p>工廠方法模式（Factory Method Pattern）是一個正式的設計模式，屬於建立型設計模式之一。它的核心思想是將建立物件的過程延遲到子類別，透過定義一個工廠接口，讓子類別決定具體要實例化的產品類型。這樣，工廠方法模式解決了簡單工廠的缺點，符合「開放封閉原則」，因為新增產品類型時不需要修改已有的程式碼，只需擴展子類別即可。  </p><p>可以說簡單工廠模式是工廠方法模式的簡化，而工廠方法模式是簡單工廠模式的改良版，更靈活但也更複雜。工廠方法模式讓系統更具擴展性，特別是在需要經常擴展產品種類的場景中更有優勢。  </p><p>在實際開發中，選擇哪種模式取決於項目的複雜度和未來的擴展需求。如果產品類型較少且變化不大，簡單工廠模式是一個快速且簡單的選擇；如果產品類型多且經常變化，工廠方法模式則能提供更好的擴展性和可維護性。  </p><h2><span id="總結">總結</span></h2><p>工廠模式的核心思想是：<strong>把物件的建立過程封裝起來，使得客戶端（使用者）不需要關心具體物件是如何建立的，只需透過工廠來取得所需的物件。</strong>這樣不僅減少了客戶端的複雜度，也增加了系統的靈活性，因為我們可以輕鬆地改變建立物件的方式，而不影響使用者的程式碼。  </p><p>簡單工廠模式就像是一個自動化的汽車生產工廠，讓我們能夠方便地建立不同的物件。透過這個例子，我們能夠看到這種設計模式如何讓我們的程式碼變得更簡潔、更易於維護。就像特斯拉工廠能夠快速應對市場需求，生產出各式各樣的車型，我們的程式碼也能夠靈活地產生各種物件來應對不同的需求。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在設計模式中，簡單工廠方法模式 Simple Factory Pattern 是一個常見的設計模式，特別適合用來解決物件建立的問題。今天我們就來用一個大家耳熟能詳的特斯拉汽車工廠例子來解釋這個模式。  &lt;/p&gt;
&lt;p&gt;而工廠模式的核心思想是，將物件的建立過程封裝起來，客戶端
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
      <category term="設計模型" scheme="https://shengyu7697.github.io/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++ 設計模式 - 抽象工廠模式 Abstract Factory Pattern</title>
    <link href="https://shengyu7697.github.io/cpp-abstract-factory-pattern/"/>
    <id>https://shengyu7697.github.io/cpp-abstract-factory-pattern/</id>
    <published>2024-08-27T12:00:00.000Z</published>
    <updated>2024-08-31T15:00:07.064Z</updated>
    
    <content type="html"><![CDATA[<p>在學習設計模式時，你可能會遇到一個問題：「為什麼有這麼多工廠模式？他們到底在解決什麼問題？」工廠方法模式（Factory Method Pattern）提供了一個方法來建立物件，這個方法可以在子類中覆蓋，以便建立不同類型的物件。而抽象工廠模式（Abstract Factory Pattern）則進一步擴展，允許你建立一系列相關的物件，這對於組織和管理大型系統非常有幫助。今天我們將透過一個GUI（圖形使用者界面）的例子來解釋這個概念。  </p><h2><span id="什麼是抽象工廠模式">什麼是抽象工廠模式？</span></h2><p>抽象工廠模式的核心思想是提供一個接口，讓客戶端程式能夠產生一系列相關的或相互依賴的物件，而不必指定具體的類型。這種模式特別適合用於需要產生不同風格或主題的GUI元件的場景。假設我們正在開發一個跨平台的應用程式，該應用可以執行在Windows、macOS、Linux等多個平台上，並且每個平台都有自己獨特的GUI風格。在這種情況下使用抽象工廠模式可以讓我們輕鬆地為不同平台產生相應風格的GUI元件。  </p><p>在解釋具體範例之前，讓我們先來看一下抽象工廠模式中的幾個核心角色：<br>抽象工廠（Abstract Factory）：定義建立一系列相關物件的方法接口。這些方法通常與產品家族有關，例如在GUI應用中，這些方法可能包括建立按鈕（Button）、文字框（TextBox）等。<br>具體工廠（Concrete Factory）：實現抽象工廠的接口，負責產生具體的產品。每一個具體工廠對應一個具體的產品家族。例如，Windows 工廠負責產生 Windows 風格的按鈕和文字框，而 macOS 工廠則產生 Mac 風格的物件。<br>抽象產品（Abstract Product）：定義產品的接口。這些接口將由具體產品來實現。例如，Button 和 TextBox 分別是兩個不同的抽象產品接口。<br>具體產品（Concrete Product）：實現抽象產品接口的具體類。每一個具體產品都由相應的具體工廠來建立。  </p><h2><span id="抽象工廠模式在gui元件的應用">抽象工廠模式在GUI元件的應用</span></h2><p>假設我們要在需要 Windows 與 Mac 下建立不同平台的按鈕（Button）和文字框（TextBox）。  </p><p>首先我們需要定義這些元件的抽象產品介面，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象產品 Abstract Product</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~Button() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TextBox</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">render</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~TextBox() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>接著我們定義一個抽象工廠介面來產生這些GUI元件，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象工廠 Abstract Factory</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GUIFactory</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Button&gt; createButton() = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;TextBox&gt; createTextBox() = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~GUIFactory() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>然後我們定義具體產品，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 具體產品 Concrete Product</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowsButton</span> :</span> <span class="keyword">public</span> Button &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">render</span><span class="params">()</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Render a Windows style button."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowsTextBox</span> :</span> <span class="keyword">public</span> TextBox &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">render</span><span class="params">()</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Render a Windows style text box."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MacButton</span> :</span> <span class="keyword">public</span> Button &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">render</span><span class="params">()</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Render a Mac style button."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MacTextBox</span> :</span> <span class="keyword">public</span> TextBox &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">render</span><span class="params">()</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Render a Mac style text box."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>每個平台會有自己的具體工廠來產生相應風格的GUI元件，我們來定義具體的工廠來產生這些元件，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 具體工廠 Concrete Factory</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowsGUIFactory</span> :</span> <span class="keyword">public</span> GUIFactory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Button&gt; createButton() override &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::make_unique&lt;WindowsButton&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;TextBox&gt; createTextBox() override &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::make_unique&lt;WindowsTextBox&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MacGUIFactory</span> :</span> <span class="keyword">public</span> GUIFactory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Button&gt; createButton() override &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::make_unique&lt;MacButton&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;TextBox&gt; createTextBox() override &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::make_unique&lt;MacTextBox&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>現在我們可以寫一些客戶端程式碼來產生和使用這些GUI元件，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clientCode</span><span class="params">(GUIFactory&amp; factory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> button = factory.createButton();</span><br><span class="line">    <span class="keyword">auto</span> textBox = factory.createTextBox();</span><br><span class="line"></span><br><span class="line">    button-&gt;render();</span><br><span class="line">    textBox-&gt;render();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    WindowsGUIFactory windowsFactory;</span><br><span class="line">    MacGUIFactory macFactory;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Using Windows GUI Factory:\n"</span>;</span><br><span class="line">    clientCode(windowsFactory);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Using Mac GUI Factory:\n"</span>;</span><br><span class="line">    clientCode(macFactory);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在這段程式碼中，我們只需要告訴客戶端(使用者)使用哪個工廠，它就能夠產生適合該平台的GUI元件，而不需要知道具體的類型。這讓程式碼更加靈活以及容易擴展。  </p><h2><span id="抽象工廠模式的優缺點">抽象工廠模式的優缺點</span></h2><p>抽象工廠模式優點就像一個能夠保持風格統一的工具箱，比如說當你需要開發一個跨平台的應用程式時，它讓你能夠輕鬆地在不同平台之間切換，並確保你的界面風格一致。當你需要支持新的平台或者改變應用的整體外觀風格時，只需要新增一個新的工廠類，現有的程式碼幾乎不需要做任何改動。這種擴展性讓你能夠輕鬆應對未來的需求變化，而不需要擔心系統的核心結構被打亂。</p><p>然而抽象工廠模式也不是沒有缺點的，當你匯入抽象工廠模式後，你的系統架構會變得複雜，特別是當你的專案規模不大時，這種複雜性可能會讓人感覺程式碼變得繁瑣。就好像你本來只需要一個簡單的工具箱，但卻因為引入了這麼多「多功能」工具而變得過於複雜。另外當你想在現有的工廠中新增一個產品類型時，可能會遇到一些困難。你必須去修改所有相關的工廠類，這樣的改動有時候會違背開放封閉原則。這意味著，每當你有新的需求時，你都得花一些時間去調整原本的程式碼，這可能會讓你覺得有些麻煩。  </p><p>整體來說，抽象工廠模式就像是一把雙刃劍，它能夠幫助你打造出一個統一、靈活的系統，但同時也會增加系統的複雜性和維護成本。所以在選擇是否使用這個模式時，還是得根據實際的需求來決定，不要「為了模式而模式」。  </p><h2><span id="抽象工廠模式與工廠方法模式的區別">抽象工廠模式與工廠方法模式的區別</span></h2><p>抽象工廠模式是專注於建立一系列相關聯的產品。適合需要建立整套相關物件（例如一整個產品家族）的場合。  </p><p>工廠方法模式專注於為一個產品家族中的單一產品建立對應的工廠。也就是說如果你只需要產生某一類型的物件（例如按鈕、文字框等），工廠方法模式是理想的選擇。每一個工廠方法只關心如何產生單一類型的產品，而不是整個產品家族。  </p><p>例如在 GUI 開發中，假設你只需要根據不同的平台（Windows 或 Mac）產生特定風格的按鈕，那麼你可以使用工廠方法模式來為每個平台建立對應的按鈕工廠。這樣當你需要一個按鈕時，你只需呼叫對應的工廠方法來取得相應平台的按鈕。  </p><h2><span id="總結">總結</span></h2><p>抽象工廠模式讓我們能夠優雅地管理和組織大型系統中的物件建立過程。在GUI開發中這種模式可以讓我們輕鬆地產生不同平台的元件，還有很多應用場合，例如：特斯拉工廠不僅生產不同的車型，還能生產不同的零組件，比如「標準版」或「高性能版」的輪胎和引擎，或者假設你正在開發一個需要支援多個資料庫（如MySQL、SQL Server、Oracle）的應用程式。每個資料庫有自己特定的連線方式、查詢語法和資料處理方式等等例子，下次當你面對需要建立一系列相關物件的場景時，不妨考慮使用抽象工廠模式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在學習設計模式時，你可能會遇到一個問題：「為什麼有這麼多工廠模式？他們到底在解決什麼問題？」工廠方法模式（Factory Method Pattern）提供了一個方法來建立物件，這個方法可以在子類中覆蓋，以便建立不同類型的物件。而抽象工廠模式（Abstract Factor
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
      <category term="設計模型" scheme="https://shengyu7697.github.io/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++ 設計模式 - 工廠方法模式 Factory Method Pattern</title>
    <link href="https://shengyu7697.github.io/cpp-factory-method-pattern/"/>
    <id>https://shengyu7697.github.io/cpp-factory-method-pattern/</id>
    <published>2024-08-26T12:00:00.000Z</published>
    <updated>2024-08-31T08:10:06.169Z</updated>
    
    <content type="html"><![CDATA[<p>想像你走進一間特斯拉汽車工廠，這裡的工廠並不只是為了生產一款車型，而是可以生產多種不同的車型，像是Model 3、Model Y、Model S、Model X。每個車型雖然都有自己獨特的設計和功能，但它們都有一個共同的特點：它們都是特斯拉生產的。這種情境正好反映了工廠方法模式 Factory Method Pattern 的應用。  </p><h2><span id="什麼是工廠方法模式">什麼是工廠方法模式？</span></h2><p>工廠方法模式是一種建立型設計模式，透過定義一個建立物件的介面來讓子類決定實例化哪一個類別。也就是說工廠方法將物件的建立過程延遲到子類別進行，當我們需要新增車款時，只需建立新的車款子類別，而不必改現有的類別程式碼，從而達成開放封閉原則。在工廠模式中，我們在建立物件時不會對客戶端暴露建立邏輯，而是透過使用一個共同的介面來指向新建立的物件。  </p><p>工廠模式的核心思想是：『把物件的建立過程封裝起來，使得客戶端（使用者）不需要關心具體物件是如何建立的，只需透過工廠來取得所需的物件。』這樣不僅減少了客戶端的複雜度，也增加了系統的靈活性，因為我們可以輕鬆地改變建立物件的方式，而不影響使用者的程式碼。  </p><h2><span id="工廠方法模式在特斯拉汽車工廠的應用">工廠方法模式在特斯拉汽車工廠的應用</span></h2><p>接下來我們將用工廠方法模式來模擬特斯拉工廠如何生產不同的車款。  </p><p>在工廠方法模式中通常會有以下幾個角色：<br>Product（產品）：定義了工廠方法所建立的物件的介面。<br>ConcreteProduct（具體產品）：實現了 Product 介面，具體化了不同車款的類別。<br>Creator（建立者）：宣告了工廠方法，該方法回傳 Product 物件。Creator 的子類別將實現這個方法，  來建立具體的產品物件。<br>ConcreteCreator（具體建立者）：實現 Creator 介面並定義具體工廠方法來建立不同的車款。  </p><p>首先定義一個通用的汽車介面（Product），<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 汽車介面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~Car() &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>我們為每一款車建立具體產品類別（ConcreteProduct），<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 具體產品類別 Model3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model3</span> :</span> <span class="keyword">public</span> Car &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Driving a Tesla Model 3.\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具體產品類別 ModelY</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelY</span> :</span> <span class="keyword">public</span> Car &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Driving a Tesla Model Y.\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具體產品類別 ModelS</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelS</span> :</span> <span class="keyword">public</span> Car &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Driving a Tesla Model S.\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具體產品類別 ModelX</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelX</span> :</span> <span class="keyword">public</span> Car &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">drive</span><span class="params">()</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Driving a Tesla Model X.\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>再來定義建立者（Creator）和具體建立者（ConcreteCreator），<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建立者介面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Car&gt; createCar() = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~CarFactory() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具體建立者：Model 3 工廠</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model3Factory</span> :</span> <span class="keyword">public</span> CarFactory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Car&gt; createCar() override &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::make_unique&lt;Model3&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具體建立者：Model Y 工廠</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelYFactory</span> :</span> <span class="keyword">public</span> CarFactory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Car&gt; createCar() override &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::make_unique&lt;ModelY&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具體建立者：Model S 工廠</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelSFactory</span> :</span> <span class="keyword">public</span> CarFactory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Car&gt; createCar() override &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::make_unique&lt;ModelS&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具體建立者：Model X 工廠</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModelXFactory</span> :</span> <span class="keyword">public</span> CarFactory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Car&gt; createCar() override &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::make_unique&lt;ModelX&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>現在我們可以使用這些工廠來生產不同的車款，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 建立各個車型的工廠</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;CarFactory&gt; model3Factory = <span class="built_in">std</span>::make_unique&lt;Model3Factory&gt;();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;CarFactory&gt; modelYFactory = <span class="built_in">std</span>::make_unique&lt;ModelYFactory&gt;();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;CarFactory&gt; modelSFactory = <span class="built_in">std</span>::make_unique&lt;ModelSFactory&gt;();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;CarFactory&gt; modelXFactory = <span class="built_in">std</span>::make_unique&lt;ModelXFactory&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 產生 Model 3</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Car&gt; model3 = model3Factory-&gt;createCar();</span><br><span class="line">    model3-&gt;drive();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 產生 Model Y</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Car&gt; modelY = modelYFactory-&gt;createCar();</span><br><span class="line">    modelY-&gt;drive();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 產生 Model S</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Car&gt; modelS = modelSFactory-&gt;createCar();</span><br><span class="line">    modelS-&gt;drive();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 產生 Model X</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Car&gt; modelX = modelXFactory-&gt;createCar();</span><br><span class="line">    modelX-&gt;drive();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在這個範例中每個 CarFactory 子類別負責建立特定車型的汽車，工廠方法 createCar() 回傳一個 Car 物件。這樣的設計讓我們能夠輕鬆地新增或修改車型，而不必更改主程式的邏輯。  </p><p>工廠方法模式最大的體現在於客戶端無需直接接觸實際的產品類別，以這個例子為例，客戶端不需直接去 new Model3 這個 class，這個 Model3 class 就放在工廠內部的實現就好，這樣解耦客戶端與具體產品類別之間的依賴關係。這樣客戶端的程式碼不會因為產品類別的改變而受到影響，這就是工廠方法模式提供的高度靈活性和可擴展性。  </p><h2><span id="工廠方法模式的優缺點">工廠方法模式的優缺點</span></h2><p>工廠方法模式有不少好處，像是當我們需要新增車款時，不需要動到現有的程式碼，只需新增一個相應的工廠類別就可以了，這樣一來系統變得更靈活，也更符合開放封閉原則。另外工廠方法模式還能讓產品的產生與使用分離開來，這樣做的好處是減少了系統內部的耦合，讓程式碼更容易維護和擴展。  </p><p>工廠方法模式也有它的缺點。因為每新增一款車，就要寫一個新的工廠類別，久而久之類別的數量會不斷增加，讓程式碼結構變得複雜，管理起來也會變得麻煩。這樣的代價在某些系統中可能會造成不便，特別是當產品種類多而需求變化頻繁的時候。  </p><p>工廠方法模式在需要靈活建立不同產品的系統中非常有用，但也需要考慮到它可能帶來的複雜性，衡量是否適合使用。  </p><h2><span id="工廠方法模式-vs-簡單工廠模式">工廠方法模式 vs. 簡單工廠模式</span></h2><p>工廠方法模式（Factory Method Pattern）和簡單工廠模式（Simple Factory Pattern）都是用來建立物件的設計模式，但它們在結構和適用範圍上有所不同。以下是它們的主要差異：  </p><p>簡單工廠模式不是正式的設計模式（而是一種設計理念），它由一個工廠類別負責根據給定的參數建立不同類型的物件。這個工廠類別包含了一個靜態方法（或全域方法）來根據需要建立物件。  </p><p>簡單工廠模式特點是只有一個工廠類別，這個工廠類別根據參數決定實例化哪個具體類別。簡單工廠模式擴展困難，當需要增加新的產品類型時，需要修改工廠類別的程式碼，這會違背開放封閉原則。適合簡單的需求和少量的產品類型。  </p><p>工廠方法模式定義了一個建立物件的介面，但讓子類決定具體實例化哪個類別。這樣可以透過擴展工廠方法來支持新類型，而不需要修改已有程式碼。  </p><p>工廠方法模式特點是多個工廠，每個具體工廠子類負責建立特定類型的物件。工廠方法模式將物件建立的邏輯分散到多個子工廠中。工廠方法模式新增產品類型只需要增加新的工廠子類，不需要修改現有的工廠類別。符合開放封閉原則，可以透過擴展工廠子類來支持新的產品，而不改動現有的程式碼。  </p><h2><span id="總結">總結</span></h2><p>工廠方法模式它允許我們根據需求建立不同的產品物件。在這篇文章中我們透過特斯拉汽車工廠的範例，展示了如何使用工廠方法模式來靈活地產生 Model 3、Model Y、Model S 和 Model X 等不同的車款。這種模式不僅提高了系統的靈活性和可擴展性，還降低了系統的耦合度。  </p><p>設計模式是解決問題的工具，而不是目的本身。靈活運用才能寫出真正優雅且實用的程式碼。就像一個熟練的廚師，知道何時使用何種工具來製作最美味的菜餚，一個優秀的程式設計師也應該知道何時使用何種設計模式來創造出最優雅的程式碼。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;想像你走進一間特斯拉汽車工廠，這裡的工廠並不只是為了生產一款車型，而是可以生產多種不同的車型，像是Model 3、Model Y、Model S、Model X。每個車型雖然都有自己獨特的設計和功能，但它們都有一個共同的特點：它們都是特斯拉生產的。這種情境正好反映了工廠方法
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
      <category term="設計模型" scheme="https://shengyu7697.github.io/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++ 設計模式 - 樣板方法模式 Template Method Pattern</title>
    <link href="https://shengyu7697.github.io/cpp-template-method-pattern/"/>
    <id>https://shengyu7697.github.io/cpp-template-method-pattern/</id>
    <published>2024-08-25T12:00:00.000Z</published>
    <updated>2024-08-29T13:00:07.968Z</updated>
    
    <content type="html"><![CDATA[<p>在資料分析領域中，我們需要從海量的資料中提取有價值的資訊。但是面對不同格式的資料，例如：XML、CSV、JSON 等格式，我們該如何設計一個靈活又高效的分析工具呢？然而不論資料格式種類不同，分析的步驟通常是相似的，今天讓我們一起來探討設計模式中的樣板方法模式 Template Method Pattern ，看看它如何幫助我們解決這個問題。  </p><h2><span id="什麼是樣板方法模式">什麼是樣板方法模式？</span></h2><p>樣板方法模式是一種行為設計模式，它在一個方法中定義了一個演算法的骨架，而將一些通用步驟的實作延遲到子類中。樣板方法使得子類可以在不改變演算法結構的情況下，重新定義演算法中的某些步驟的內容。換句話說，樣板方法確保了演算法的骨架（例如流程的步驟）是一致的，但細節部分可以由不同的子類自行定義。  </p><p>聽起來有點抽象？別擔心，讓我們用一個生活中的例子來解釋。  </p><p>想像你在煮一鍋湯。無論你煮的是什麼湯，基本步驟都是相似的：  </p><ol><li>準備食材</li><li>加水並煮沸</li><li>加入主要食材</li><li>調味</li><li>盛盤</li></ol><p>這個流程就是一個「樣板方法」。不同的湯可能在食材準備和調味方式上有所不同，但整體流程是一致的。  </p><h2><span id="樣板方法模式資料分析工具的應用">樣板方法模式資料分析工具的應用</span></h2><p>回到資料分析的情景，假設我們正在開發一個資料分析工具，這個工具可以讀取不同格式的資料（XML、CSV、JSON），並產生分析報告。無論資料來源為何，我們的分析流程大致相同，包括讀取資料、分析資料、生成報告。  </p><p>我們可以定義一個 <code>DataAnalyzer</code> 基類，來統一處理通用的分析步驟，但將具體的資料讀取方式交給子類別來實作。  </p><p>首先，定義 <code>DataAnalyzer</code> 基類，其中包含了樣板方法 <code>analyze()</code>，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataAnalyzer</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">analyze</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        readData();</span><br><span class="line">        processData();</span><br><span class="line">        generateReport();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~DataAnalyzer() = <span class="keyword">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">readData</span><span class="params">()</span> </span>= <span class="number">0</span>; <span class="comment">// 抽象方法，由子類別實作</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">processData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Processing data..."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="comment">// 通用的資料處理邏輯</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">generateReport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Generating report..."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="comment">// 通用的報告生成邏輯</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>接著，我們可以為每種資料格式建立不同的子類別，並各自實作 <code>readData()</code> 方法。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XMLDataAnalyzer</span> :</span> <span class="keyword">public</span> DataAnalyzer &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">readData</span><span class="params">()</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Reading data from XML file..."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="comment">// 具體的 XML 資料讀取邏輯</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CSVDataAnalyzer</span> :</span> <span class="keyword">public</span> DataAnalyzer &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">readData</span><span class="params">()</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Reading data from CSV file..."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="comment">// 具體的 CSV 資料讀取邏輯</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSONDataAnalyzer</span> :</span> <span class="keyword">public</span> DataAnalyzer &#123;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">readData</span><span class="params">()</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Reading data from JSON file..."</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="comment">// 具體的 JSON 資料讀取邏輯</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>當我們使用這些子類別時，無需擔心具體的資料讀取邏輯，只需關注分析流程的整體結構，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClientCode</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;DataAnalyzer&gt; analyzer)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  analyzer-&gt;analyze();</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;XMLDataAnalyzer&gt; xmlAnalyzer = <span class="built_in">std</span>::make_unique&lt;XMLDataAnalyzer&gt;();</span><br><span class="line">    ClientCode(<span class="built_in">std</span>::move(xmlAnalyzer)); <span class="comment">// 分析 XML 資料</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;DataAnalyzer&gt; csvAnalyzer =  <span class="built_in">std</span>::make_unique&lt;CSVDataAnalyzer&gt;();</span><br><span class="line">    ClientCode(<span class="built_in">std</span>::move(csvAnalyzer)); <span class="comment">// 分析 CSV 資料</span></span><br><span class="line"></span><br><span class="line">    ClientCode(<span class="built_in">std</span>::make_unique&lt;JSONDataAnalyzer&gt;()); <span class="comment">// 分析 JSON 資料</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>執行上述程式碼，我們會得到以下輸出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Reading data from XML file...</span><br><span class="line">Processing data...</span><br><span class="line">Generating report...</span><br><span class="line">Reading data from CSV file...</span><br><span class="line">Processing data...</span><br><span class="line">Generating report...</span><br><span class="line">Reading data from JSON file...</span><br><span class="line">Processing data...</span><br><span class="line">Generating report...</span><br></pre></td></tr></table></figure></p><p>在這個範例中，我們展示了如何使用樣板方法模式來處理不同資料格式的分析流程。透過定義通用的分析步驟，我們確保了分析邏輯的一致性，同時又保留了靈活性，讓我們可以根據實際不同需求來實作對應的資料讀取方式。</p><h2><span id="樣板方法模式的優點">樣板方法模式的優點</span></h2><p>樣板方法模式的優點如下，主要優勢在於統一流程和靈活擴展，  </p><ul><li>程式碼複用性：將通用的分析步驟寫在基類中，避免了在每個子類別中重複寫相同的邏輯。  </li><li>靈活與擴展性：可以輕鬆添加新的資料格式，只需建立新的子類別並實現對應的讀取方法，而不需要改變整體的分析流程。  </li><li>容易維護：分析流程的改動只需修改基類，而不需要修改每個子類別，這使得系統更加易於維護。  </li></ul><h2><span id="總結">總結</span></h2><p>樣板方法模式在軟體開發中，就像是一個烹飪配方，固定的步驟確保了整體的流程不會亂套，而細節上的變化則由各種料理的需求來決定。這樣的設計不僅讓程式更具結構性，也讓開發者能夠輕鬆地應對需求的變更或擴展。如果你在日常的開發工作中需要處理類似的問題，不妨考慮使用樣板方法模式來優雅地解決。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在資料分析領域中，我們需要從海量的資料中提取有價值的資訊。但是面對不同格式的資料，例如：XML、CSV、JSON 等格式，我們該如何設計一個靈活又高效的分析工具呢？然而不論資料格式種類不同，分析的步驟通常是相似的，今天讓我們一起來探討設計模式中的樣板方法模式 Templat
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
      <category term="設計模型" scheme="https://shengyu7697.github.io/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>PHP base64_encode 編碼使用指南：方法與應用</title>
    <link href="https://shengyu7697.github.io/php-base64_encode/"/>
    <id>https://shengyu7697.github.io/php-base64_encode/</id>
    <published>2024-08-24T12:00:00.000Z</published>
    <updated>2024-06-18T00:00:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 PHP base64_encode 用法與範例，在 PHP 開發中，<code>base64_encode</code> 是一個常用的函式，它可以將二進位資料轉換為 ASCII 字串。這種編碼方式特別適合在需要傳輸或儲存二進位資料的情況下使用。本文將介紹 <code>base64_encode</code> 的基本用法及其在不同場景中的應用。</p><h2><span id="什麼是-base64-編碼">什麼是 Base64 編碼？</span></h2><p>Base64 是一種將二進位資料編碼為 ASCII 字串的方式。它將資料轉換為僅包含字母、數字、加號和斜杠的字元，以及等號 <code>=</code> 作為填充符。這種編碼可以安全地在 URL 和電子郵件中使用，因為它不會引起轉義問題。</p><h2><span id="base64_encode-函式的基本用法"><code>base64_encode</code> 函式的基本用法</span></h2><p>在 PHP 中，<code>base64_encode</code> 函式用於將資料編碼為 Base64 格式。以下是其基本用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string base64_encode ( string $data )</span><br></pre></td></tr></table></figure><ul><li><strong>參數：</strong> <code>$data</code> 是需要編碼的資料，通常是字串形式。</li><li><strong>回傳值：</strong> 回傳 Base64 編碼後的字串。</li></ul><h2><span id="範例">範例</span></h2><p>以下是一個簡單的範例，展示如何使用 <code>base64_encode</code> 將字串編碼為 Base64 格式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 原始資料</span></span><br><span class="line">$data = <span class="string">"Hello, World!"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將資料編碼為 Base64</span></span><br><span class="line">$encodedData = base64_encode($data);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出編碼後的結果</span></span><br><span class="line"><span class="keyword">echo</span> $encodedData; <span class="comment">// 輸出：SGVsbG8sIFdvcmxkIQ==</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在這個範例中，我們將字串 “Hello, World!” 編碼為 Base64 格式，結果為 “SGVsbG8sIFdvcmxkIQ==”.</p><h2><span id="base64-編碼的應用場景">Base64 編碼的應用場景</span></h2><ol><li><strong>在 URL 中傳輸資料：</strong> 由於 Base64 編碼的結果僅包含 URL 安全的字元，因此可以安全地用於 URL 中，而不會引起轉義問題。</li><li><strong>儲存二進位資料：</strong> 在需要將圖片或其他二進位檔案儲存到資料庫時，可以先將其編碼為 Base64 格式。</li><li><strong>電子郵件：</strong> 在 MIME 電子郵件中，Base64 常用於編碼附件，以確保二進位資料在傳輸過程中不會被損壞。</li></ol><h2><span id="補充">補充</span></h2><p>若需要將 Base64 編碼的資料解碼回原始格式，可以使用 <code>base64_decode</code> 函式。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$decodedData = base64_decode($encodedData);</span><br><span class="line"><span class="keyword">echo</span> $decodedData; <span class="comment">// 輸出：Hello, World!</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2><span id="結論">結論</span></h2><p><code>base64_encode</code> 是 PHP 中非常實用的一個函式，尤其在需要安全傳輸或儲存二進位資料時。透過本文的介紹，希望你能夠更好地理解和應用這個函式，提升你的 PHP 開發效率。</p><p>以上就是 PHP base64_encode 用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 PHP 相關技術，可以參考看看下面的文章，<br><a href="/php-pdo/" title="PHP 和 PDO 進行資料庫操作">PHP 和 PDO 進行資料庫操作</a><br><a href="/php-display-errors/" title="PHP 執行發生錯誤在 Chrome/Firefox 上顯示 Error 500，要怎麼讓 PHP 顯示錯誤">PHP 執行發生錯誤在 Chrome/Firefox 上顯示 Error 500，要怎麼讓 PHP 顯示錯誤</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 PHP base64_encode 用法與範例，在 PHP 開發中，&lt;code&gt;base64_encode&lt;/code&gt; 是一個常用的函式，它可以將二進位資料轉換為 ASCII 字串。這種編碼方式特別適合在需要傳輸或儲存二進位資料的情況下使用。本
      
    
    </summary>
    
      <category term="PHP教學" scheme="https://shengyu7697.github.io/categories/PHP%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="PHP" scheme="https://shengyu7697.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>C++ 設計模式 - 裝飾者模式 Decorator Pattern</title>
    <link href="https://shengyu7697.github.io/cpp-decorator-pattern/"/>
    <id>https://shengyu7697.github.io/cpp-decorator-pattern/</id>
    <published>2024-08-23T12:00:00.000Z</published>
    <updated>2024-08-28T13:30:08.453Z</updated>
    
    <content type="html"><![CDATA[<p>在日常生活中，我們經常會去咖啡店買咖啡，但如果想要來點變化，像是加一點牛奶或糖，就可以讓平凡的咖啡多一點風味。同樣地，在程式設計中，我們有時也需要在不改變原有功能的前提下，為某些物件「加點料」。這就是裝飾者模式 Decorator Pattern 所要解決的問題。  </p><h2><span id="什麼是裝飾者模式">什麼是裝飾者模式？</span></h2><p>裝飾者模式是一種結構型設計模式，它允許你動態地為物件添加功能，而不需要修改其原有的程式碼。換句話說，裝飾者模式讓你可以根據不同的需求，隨時為一個物件「增添佐料」，就像你為咖啡加牛奶或糖一樣，都會改變咖啡的口感和價格，但我們並沒有改變咖啡本身。  </p><h2><span id="裝飾者模式在咖啡店的應用">裝飾者模式在咖啡店的應用</span></h2><p>讓我們用一個簡單的例子來說明。假設我們有一個基本的咖啡類別 <code>Coffee</code>，它代表一杯不加任何配料的黑咖啡。你可以根據需求選擇加入牛奶、糖或其他配料。使用裝飾者模式，我們可以輕鬆地計算出各種組合的價格，而不需要為每種可能的組合建立新的類別。  </p><p>首先，我們定義一個 <code>Coffee</code> 類別，並為它計算基本價錢的功能：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">getDescription</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"黑咖啡"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">cost</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">50</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~Coffee() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>假設你想在咖啡中加牛奶，我們可以建立一個裝飾者類別 <code>MilkDecorator</code>，這個類別將會裝飾（也就是包裝）<code>Coffee</code> 類別，並在其基礎上增加牛奶的功能：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MilkDecorator</span> :</span> <span class="keyword">public</span> Coffee &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Coffee&gt; coffee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MilkDecorator(<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Coffee&gt; c) : coffee(<span class="built_in">std</span>::move(c)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">getDescription</span><span class="params">()</span> <span class="keyword">const</span> override </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> coffee-&gt;getDescription() + <span class="string">"+牛奶"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cost</span><span class="params">()</span> <span class="keyword">const</span> override </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> coffee-&gt;cost() + <span class="number">15</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>如果你想再加點糖，可以再建立一個 <code>SugarDecorator</code> 類別：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SugarDecorator</span> :</span> <span class="keyword">public</span> Coffee &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Coffee&gt; coffee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    SugarDecorator(<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Coffee&gt; c) : coffee(<span class="built_in">std</span>::move(c)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">getDescription</span><span class="params">()</span> <span class="keyword">const</span> override </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> coffee-&gt;getDescription() + <span class="string">"+糖"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cost</span><span class="params">()</span> <span class="keyword">const</span> override </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> coffee-&gt;cost() + <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>最後我們就可以根據自己的需求自由組合這些裝飾者：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;Coffee&gt; coffee = <span class="built_in">std</span>::make_unique&lt;Coffee&gt;();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; coffee-&gt;getDescription() &lt;&lt; <span class="string">"價格："</span></span><br><span class="line">              &lt;&lt; coffee-&gt;cost() &lt;&lt; <span class="string">"元\n"</span>;</span><br><span class="line">    coffee = <span class="built_in">std</span>::make_unique&lt;MilkDecorator&gt;(<span class="built_in">std</span>::move(coffee));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; coffee-&gt;getDescription() &lt;&lt; <span class="string">"價格："</span></span><br><span class="line">              &lt;&lt; coffee-&gt;cost() &lt;&lt; <span class="string">"元\n"</span>;</span><br><span class="line">    coffee = <span class="built_in">std</span>::make_unique&lt;SugarDecorator&gt;(<span class="built_in">std</span>::move(coffee));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; coffee-&gt;getDescription() &lt;&lt; <span class="string">"價格："</span></span><br><span class="line">              &lt;&lt; coffee-&gt;cost() &lt;&lt; <span class="string">"元\n"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>執行上述程式碼，我們會得到以下輸出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">黑咖啡價格：50元</span><br><span class="line">黑咖啡+牛奶價格：65元</span><br><span class="line">黑咖啡+牛奶+糖價格：70元</span><br></pre></td></tr></table></figure></p><p>在這個範例中，我們從一杯基本的黑咖啡開始，然後動態地添加牛奶和糖，最終計算出一杯加了牛奶和糖的咖啡價格。每次添加新配料時，我們不需要修改現有的咖啡類別，只需透過裝飾者來實現功能的擴展。這樣的設計讓我們可以靈活地擴展功能，也讓程式碼更加易於維護。  </p><h2><span id="裝飾者模式的優點">裝飾者模式的優點</span></h2><p>裝飾者模式的最大優點就是靈活性，你可以任意組合裝飾者成各種不同的組合。當你面對需要不斷添加新功能的情況時，使用裝飾者模式可以避免類別數量的膨脹，讓程式碼更易於維護和擴展。同時它也保持了開放封閉原則，也就是添加新的裝飾者不需要修改原始類別，也符合單一職責原則，即每個裝飾者只負責一項特定的功能增強。  </p><h2><span id="總結">總結</span></h2><p>裝飾者模式就像是在咖啡裡添加牛奶和糖，讓原本簡單的東西變得更加豐富多樣。在程式設計中，它能幫助我們以一種靈活的方式，擴展物件的功能，同時保持程式碼的清晰與可維護性。下次當你面臨需要擴展物件功能的需求時，考慮一下裝飾者模式，它或許就是你需要的解決方案！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在日常生活中，我們經常會去咖啡店買咖啡，但如果想要來點變化，像是加一點牛奶或糖，就可以讓平凡的咖啡多一點風味。同樣地，在程式設計中，我們有時也需要在不改變原有功能的前提下，為某些物件「加點料」。這就是裝飾者模式 Decorator Pattern 所要解決的問題。  &lt;/p
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
      <category term="設計模型" scheme="https://shengyu7697.github.io/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++ 設計模式 - 觀察者模式 Observer Pattern</title>
    <link href="https://shengyu7697.github.io/cpp-observer-pattern/"/>
    <id>https://shengyu7697.github.io/cpp-observer-pattern/</id>
    <published>2024-08-22T12:00:00.000Z</published>
    <updated>2024-08-27T14:30:07.001Z</updated>
    
    <content type="html"><![CDATA[<p>今天你訂閱了一個喜歡的 YouTube 頻道，這個頻道一旦有新影片發布，你就會收到通知。不需要你反覆檢查頻道是否有新內容，所有更新自動發送到你手上。在軟體開發中，我們常常需要處理這樣的情境，當一個物件的狀態發生變化時，其他相關物件需要自動更新，並做出相應的回應。這種情境下我們就可以運用觀察者模式 Observer Pattern。  </p><h2><span id="什麼是觀察者模式">什麼是觀察者模式？</span></h2><p>觀察者模式是一種行為設計模式，它定義了一種一對多的依賴關係，當一個物件（被觀察者）發生改變時，所有依賴它的物件（觀察者）都會自動收到通知並更新自己。這讓系統中的物件之間能夠鬆散耦合，保持靈活性和可維護性。  </p><h2><span id="觀察者模式在-youtube-訂閱的應用">觀察者模式在 YouTube 訂閱的應用</span></h2><p>在這個範例中，我們將 YouTube 頻道視為「被觀察者」，訂閱該頻道的使用者則是「觀察者」。當頻道有新影片上傳時，所有訂閱者都會自動收到通知。讓我們用 C++ 來實踐這個概念。  </p><p>我們定義一個 <code>Observer</code> 介面，所有的觀察者（訂閱者）都要實作這個介面。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; videoTitle)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~Observer() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>接著我們定義一個 <code>Subject</code> 介面，讓被觀察者（YouTube 頻道）管理觀察者的訂閱和通知。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Observer&gt; observer)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Observer&gt; observer)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~Subject() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>接下來我們實作一個具體的 <code>YouTubeChannel</code> 類別，這個類別代表 YouTube 頻道，當有新影片發布時，它會通知所有的訂閱者。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YouTubeChannel</span> :</span> <span class="keyword">public</span> Subject &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">list</span>&lt;<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Observer&gt;&gt; subscribers;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> latestVideo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Observer&gt; observer)</span> override </span>&#123;</span><br><span class="line">        subscribers.push_back(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Observer&gt; observer)</span> override </span>&#123;</span><br><span class="line">        subscribers.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> override </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; observer : subscribers) &#123;</span><br><span class="line">            observer-&gt;update(latestVideo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uploadNewVideo</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; videoTitle)</span> </span>&#123;</span><br><span class="line">        latestVideo = videoTitle;</span><br><span class="line">        notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>最後我們可以定義多個觀察者來代表不同的訂閱者，他們會在接收到新影片通知時，顯示影片的標題。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subscriber</span> :</span> <span class="keyword">public</span> Observer &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Subscriber(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; name) : name(name) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; videoTitle)</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="string">" received notification: "</span> </span><br><span class="line">            &lt;&lt; videoTitle &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>當我們將 <code>Subscriber</code> 加入 <code>YouTubeChannel</code> 的訂閱者清單時，頻道一旦上傳新影片，所有的訂閱者都會自動收到通知。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    YouTubeChannel channel;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Subscriber&gt; alice = <span class="built_in">std</span>::make_shared&lt;Subscriber&gt;(<span class="string">"Alice"</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">shared_ptr</span>&lt;Subscriber&gt; bob = <span class="built_in">std</span>::make_shared&lt;Subscriber&gt;(<span class="string">"Bob"</span>);</span><br><span class="line"></span><br><span class="line">    channel.addObserver(alice);</span><br><span class="line">    channel.addObserver(bob);</span><br><span class="line">    channel.uploadNewVideo(<span class="string">"First Video"</span>);</span><br><span class="line"></span><br><span class="line">    channel.removeObserver(bob);</span><br><span class="line">    channel.uploadNewVideo(<span class="string">"Second Video"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>執行上述程式碼，我們會得到以下輸出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Alice received notification: First Video</span><br><span class="line">Bob received notification: First Video</span><br><span class="line">Alice received notification: Second Video</span><br></pre></td></tr></table></figure></p><p>這個範例中使用了觀察者模式來模擬 YouTube 訂閱系統。當 YouTube 頻道上傳新影片時，所有的訂閱者都會自動收到通知。這讓我們的系統能夠更靈活地應對訂閱和通知的需求。  </p><h2><span id="觀察者模式的優點">觀察者模式的優點</span></h2><p>以這個例子來說，使用觀察者模式降低了耦合度，訂閱者和 YouTube 頻道之間的關係是鬆散的，YouTube 頻道不需要知道實際上是誰訂閱了它，它只需要通知所有訂閱者，這讓系統更容易擴展跟維護。  </p><p>同時也具備擴展性，你可以輕鬆地新增或移除訂閱者，而不需要修改 YouTube 頻道的程式碼。  </p><h2><span id="總結">總結</span></h2><p>觀察者模式是一種常見的設計模式，能有效處理多個物件之間的通知和更新需求。在我們生活中無所不在，例如：股票價格變化時，關注該股票的投資者都會收到通知，天氣變化時，訂閱天氣服務的使用者都會收到更新，電子報發布時，訂閱的讀者也會收到信件。下次你在設計系統時，如果遇到一對多的依賴關係，並且希望它們能夠自動更新的情況，不妨試試觀察者模式！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天你訂閱了一個喜歡的 YouTube 頻道，這個頻道一旦有新影片發布，你就會收到通知。不需要你反覆檢查頻道是否有新內容，所有更新自動發送到你手上。在軟體開發中，我們常常需要處理這樣的情境，當一個物件的狀態發生變化時，其他相關物件需要自動更新，並做出相應的回應。這種情境下我
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
      <category term="設計模型" scheme="https://shengyu7697.github.io/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++ 設計模式 - 策略模式 Strategy Pattern</title>
    <link href="https://shengyu7697.github.io/cpp-strategy-pattern/"/>
    <id>https://shengyu7697.github.io/cpp-strategy-pattern/</id>
    <published>2024-08-21T12:00:00.000Z</published>
    <updated>2024-08-26T14:50:06.841Z</updated>
    
    <content type="html"><![CDATA[<p>在日常開發中，我們常需要對檔案進行壓縮，而不同的壓縮格式（如 Zip、Rar、7z 等）各有其優缺點。有時候我們希望能夠根據當下需求自由地切換壓縮方式，而不需要改動太多的程式碼。這時候策略模式 Strategy Pattern 就可以幫我們輕鬆實現這個需求。  </p><h2><span id="什麼是策略模式">什麼是策略模式？</span></h2><p>策略模式是一種行為設計模式，它可以讓我們定義一系列的演算法，將每個演算法封裝起來，並讓它們可以互相替換使用。這樣一來程式碼不僅更加靈活，也更容易擴展跟維護了。  </p><p>簡單來說，策略模式就是讓程式可以隨意更換的「策略」，讓程式能夠靈活地應對不同種的情況。  </p><h2><span id="策略模式在壓縮器中的應用">策略模式在壓縮器中的應用</span></h2><p>假設你正在開發一個檔案壓縮的功能。一開始你可能只支援 ZIP 格式壓縮。但隨著使用者需求的增加，你發現需要添加 RAR、7Z 等其他壓縮格式的支援。  </p><p>你的程式碼可能會寫成這樣：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compressor</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">compress</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; filename, <span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; format)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (format == <span class="string">"zip"</span>) &#123;</span><br><span class="line">            <span class="comment">// ZIP 壓縮邏輯</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (format == <span class="string">"rar"</span>) &#123;</span><br><span class="line">            <span class="comment">// RAR 壓縮邏輯</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (format == <span class="string">"7z"</span>) &#123;</span><br><span class="line">            <span class="comment">// 7Z 壓縮邏輯</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">std</span>::runtime_error(<span class="string">"不支援的格式"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>這種方法的問題在於每次新增新的壓縮格式時，都需要修改 Compressor 類別。這違反了「開放封閉原則」，也就是軟體應該對擴展開放，對修改封閉。  </p><p>讓我們看看如何使用策略模式來改進這個設計：  </p><p>我們先定義一個壓縮策略介面 CompressionStrategy，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompressionStrategy</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">compress</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; filename)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~CompressionStrategy() = <span class="keyword">default</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>然後為每種壓縮格式實作具體的策略，分別為 ZipStrategy、RarStrategy、SevenZipStrategy，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZipStrategy</span> :</span> <span class="keyword">public</span> CompressionStrategy &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">compress</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; filename)</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"使用 ZIP 壓縮 "</span> &lt;&lt; filename &lt;&lt; <span class="string">" 檔案\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RarStrategy</span> :</span> <span class="keyword">public</span> CompressionStrategy &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">compress</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; filename)</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"使用 RAR 壓縮 "</span> &lt;&lt; filename &lt;&lt; <span class="string">" 檔案\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SevenZipStrategy</span> :</span> <span class="keyword">public</span> CompressionStrategy &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">compress</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; filename)</span> override </span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"使用 7Z 壓縮 "</span> &lt;&lt; filename &lt;&lt; <span class="string">" 檔案\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>根據此情境在設計時，建立一個 Compressor 壓縮器，又為稱上下文類別，這個 Compressor 類別可以根據需求動態選擇不同的壓縮策略。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compressor</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;CompressionStrategy&gt; strategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Compressor(<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;CompressionStrategy&gt; strategy) </span><br><span class="line">        : strategy(<span class="built_in">std</span>::move(strategy)) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;CompressionStrategy&gt; newStrategy)</span> </span>&#123;</span><br><span class="line">        strategy = <span class="built_in">std</span>::move(newStrategy);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">compress</span><span class="params">(<span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">string</span>&amp; filename)</span> </span>&#123;</span><br><span class="line">        strategy-&gt;compress(filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>當需要使用壓縮器時，可以這樣寫，Compressor 將會執行已經選擇的壓縮策略進行壓縮，然後也可以執行期間更換壓縮策略，<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Compressor <span class="title">compressor</span><span class="params">(<span class="built_in">std</span>::make_unique&lt;ZipStrategy&gt;())</span></span>;</span><br><span class="line">    compressor.compress(<span class="string">"file1.txt"</span>);  <span class="comment">// 輸出：使用 ZIP 壓縮 file1.txt 檔案</span></span><br><span class="line"></span><br><span class="line">    compressor.setStrategy(<span class="built_in">std</span>::make_unique&lt;SevenZipStrategy&gt;());</span><br><span class="line">    compressor.compress(<span class="string">"file2.txt"</span>);  <span class="comment">// 輸出：使用 7Z 壓縮 file2.txt 檔案</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2><span id="策略模式的優點">策略模式的優點</span></h2><p>使用策略模式，讓我們能夠方便地擴展壓縮器的功能，當需要增加新的壓縮格式時，只需新增一個實作了 CompressionStrategy 介面，並將其設定到 Compressor 中即可，完全不需要修改現有 Compressor 與其它壓縮策略的程式碼。另外策略模式還能讓程式碼變得更加清晰易懂，避免大量的條件判斷或分支邏輯，使系統在面對複雜業務需求時，依然能保持穩定和易於維護。  </p><h2><span id="總結">總結</span></h2><p>策略模式是一個很實用的設計模式，能夠有效解決系統中某些功能需要頻繁變動或擴展的問題。在這個壓縮器範例中，我們看到如何使用策略模式來靈活地切換壓縮格式，並保持程式碼的清晰和可維護性。並能在日後的開發中靈活運用它，讓你的程式碼更加優雅。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在日常開發中，我們常需要對檔案進行壓縮，而不同的壓縮格式（如 Zip、Rar、7z 等）各有其優缺點。有時候我們希望能夠根據當下需求自由地切換壓縮方式，而不需要改動太多的程式碼。這時候策略模式 Strategy Pattern 就可以幫我們輕鬆實現這個需求。  &lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
      <category term="設計模型" scheme="https://shengyu7697.github.io/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>C++ 設計模式入門：什麼是設計模式？為什麼要學習它們？</title>
    <link href="https://shengyu7697.github.io/cpp-design-patterns/"/>
    <id>https://shengyu7697.github.io/cpp-design-patterns/</id>
    <published>2024-08-20T12:00:00.000Z</published>
    <updated>2024-08-25T15:40:06.927Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="設計模式入門什麼是設計模式為什麼要學習它們">設計模式入門：什麼是設計模式？為什麼要學習它們？</span></h2><p>當聽到「設計模式」這個詞時，可能會覺得這是什麼複雜寫程式的技術或者高深的專業知識。但實際上設計模式是一種能讓我們能夠寫出更好、更靈活程式的一套方法，不是專屬於高手的工具，反而是所有開發者都應該掌握的基礎。  </p><h2><span id="什麼是設計模式">什麼是設計模式？</span></h2><p>設計模式其實是一組解決特定問題的經驗法則和最佳實踐。它們就像是軟體設計中的藍圖，你可以用它們來解決程式碼中反復出現的設計問題。換句話說，設計模式不是要讓你重新發明輪子，而是告訴你輪子怎麼樣做才能又快又穩。  </p><p>假如你正在建造一座房子。你不會每次都從零開始設計門或窗戶對吧？你會使用已經被證明有效的設計。設計模式在軟體開發中的作用就像這些可重用的建築元素。  </p><h2><span id="為什麼要學習設計模式">為什麼要學習設計模式？</span></h2><p>學習設計模式的目的不僅僅是為了寫出漂亮的程式碼或者通過面試，更重要的是它能讓你在面對複雜問題時，有一套成熟的方法來應對。  </p><p>你可能會問：「為什麼不直接寫程式呢？為什麼要花時間學習這些理論？」原因在於，當你寫程式寫得越久，你會發現自己常常面對相似的問題。如果每次都從零開始解決這些問題，不僅耗時還容易出錯。而設計模式正是經過專家長久時間驗證淬鍊的解決方案，能幫助你更快地找到正確的方向。  </p><p>學習設計模式有以下幾點好處：  </p><ol><li>提高程式碼質量：設計模式提供了經過時間考驗的解決方案，可以幫助你寫出更清晰、更容易維護的程式碼。  </li><li>加快開發速度：一旦你熟悉了常見的設計模式，你就可以更快識別問題並實作解決方案，而不是每次都重新造輪子。  </li><li>促進團隊合作：為開發者提供了一種共同語言。當你說『我們這裡可以用觀察者模式』時，懂設計模式的同事馬上就能了解你的意思。  </li><li>應對軟體變化：好的設計模式能讓你的程式碼更容易適應變化。在軟體開發中，變化是唯一不變的東西！  </li><li>學習優秀的實踐設計：學習設計模式不僅是學習具體的解決方案，更是學習如何思考和解決問題。  </li></ol><p>讓我們開始掌握設計模式，成為一個更有智慧的開發者吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;設計模式入門什麼是設計模式為什麼要學習它們&quot;&gt;設計模式入門：什麼是設計模式？為什麼要學習它們？&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;當聽到「設計模式」這個詞時，可能會覺得這是什麼複雜寫程式的技術或者高深的專業知識。但實際上設計模式是一種能讓我們能夠寫出更好、更
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
      <category term="設計模型" scheme="https://shengyu7697.github.io/tags/%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>PHP 中的 Session 用途與實踐範例：完整指南</title>
    <link href="https://shengyu7697.github.io/php-session/"/>
    <id>https://shengyu7697.github.io/php-session/</id>
    <published>2024-08-17T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 PHP 中的 Session 用法與範例，在當今的網路應用程式中，會話管理是一個關鍵組成部分。PHP 中的 <code>$_SESSION</code> 是一個強大的工具，讓開發者可以在不同的網頁之間儲存和共享使用者資料。本指南將詳細介紹 PHP 中的會話用途及實踐範例，幫助您在項目中有效使用會話。</p><h2><span id="什麼是-php-中的-session">什麼是 PHP 中的 Session？</span></h2><p>會話（Session）是一個臨時的資料儲存機制，用於在使用者瀏覽不同的網頁時，保持使用者資料的持久性。在 PHP 中，<code>$_SESSION</code> 是一個超全域陣列，用於儲存會話資料。會話資料儲存在伺服器上，而使用者端則透過一個唯一的會話 ID 來識別。</p><h2><span id="會話的主要用途">會話的主要用途</span></h2><ol><li><strong>保持使用者登入狀態</strong>：當使用者登錄到一個網站時，會話可以保存使用者的登入狀態，這樣在使用者瀏覽不同頁面時不需要重新登錄。</li><li><strong>保存使用者首選項</strong>：會話可以保存使用者的設定和首選項，比如語言選擇、顏色主題等。</li><li><strong>暫存表單資料</strong>：在多步驟表單中，可以使用會話來保存每一步的資料，直到使用者完成所有步驟。</li><li><strong>購物車</strong>：在電子商務網站中，會話可以用來保存使用者的購物車內容，直到使用者結帳。</li></ol><h2><span id="如何使用-php-中的-session">如何使用 PHP 中的 Session</span></h2><h3><span id="1-開始會話">1. 開始會話</span></h3><p>在使用會話之前，需要先啟動會話。這通常是在每個頁面的開頭進行的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="2-設定會話變數">2. 設定會話變數</span></h3><p>可以將資料儲存到會話中，透過給 <code>$_SESSION</code> 陣列賦值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[<span class="string">'username'</span>] = <span class="string">'JohnDoe'</span>;</span><br><span class="line">$_SESSION[<span class="string">'email'</span>] = <span class="string">'john.doe@example.com'</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="3-讀取會話變數">3. 讀取會話變數</span></h3><p>在需要使用會話資料的地方，可以讀取 <code>$_SESSION</code> 陣列中的值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Username: '</span> . $_SESSION[<span class="string">'username'</span>]; <span class="comment">// 輸出：Username: JohnDoe</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">'Email: '</span> . $_SESSION[<span class="string">'email'</span>]; <span class="comment">// 輸出：Email: john.doe@example.com</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="4-刪除會話變數">4. 刪除會話變數</span></h3><p>可以使用 <code>unset()</code> 函式來刪除會話中的某個變數：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">unset</span>($_SESSION[<span class="string">'email'</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3><span id="5-銷毀會話">5. 銷毀會話</span></h3><p>如果需要刪除所有會話資料並結束會話，可以使用 <code>session_destroy()</code> 函式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line">session_destroy();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2><span id="範例簡單的登入系統">範例：簡單的登入系統</span></h2><p>以下是一個簡單的登入系統範例，使用會話來保存和檢查使用者的登入狀態。</p><h3><span id="loginphp">login.php</span></h3><p>這個頁面包含一個基本的登入表單。當使用者送出表單時，會檢查使用者名和密碼是否對應，如果對應，則設定會話變數並重導向到歡迎頁面。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">'REQUEST_METHOD'</span>] == <span class="string">'POST'</span>) &#123;</span><br><span class="line">    $username = $_POST[<span class="string">'username'</span>];</span><br><span class="line">    $password = $_POST[<span class="string">'password'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 假設使用簡單的硬編碼認證</span></span><br><span class="line">    <span class="keyword">if</span> ($username == <span class="string">'admin'</span> &amp;&amp; $password == <span class="string">'password'</span>) &#123;</span><br><span class="line">        $_SESSION[<span class="string">'loggedin'</span>] = <span class="keyword">true</span>;</span><br><span class="line">        $_SESSION[<span class="string">'username'</span>] = $username;</span><br><span class="line">        header(<span class="string">'Location: welcome.php'</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $error = <span class="string">'Invalid username or password'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form method=<span class="string">"POST"</span>&gt;</span><br><span class="line">        Username: &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> required&gt;&lt;br&gt;</span><br><span class="line">        Password: &lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span> required&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"Login"</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">if</span> (<span class="keyword">isset</span>($error)) <span class="keyword">echo</span> $error; <span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3><span id="welcomephp">welcome.php</span></h3><p>這個頁面是使用者登入後的歡迎頁面。如果使用者沒有登入，會重導向回登入頁面。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>($_SESSION[<span class="string">'loggedin'</span>])) &#123;</span><br><span class="line">    header(<span class="string">'Location: login.php'</span>);</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Welcome, <span class="meta">&lt;?php</span> <span class="keyword">echo</span> $_SESSION[<span class="string">'username'</span>]; <span class="meta">?&gt;</span>!&lt;/h1&gt;</span><br><span class="line">    &lt;a href=<span class="string">"logout.php"</span>&gt;Logout&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3><span id="logoutphp">logout.php</span></h3><p>這個頁面用於使用者登出，銷毀會話並重導向回登入頁面。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line">session_destroy();</span><br><span class="line">header(<span class="string">'Location: login.php'</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2><span id="結論">結論</span></h2><p>PHP 中的會話功能是一個強大且靈活的工具，能夠在不同頁面之間共享資料，實現使用者狀態保持、資料儲存和跨頁面資料共享。透過上面的範例，您可以看到如何在您的應用程式中實現會話管理。</p><p>以上就是 PHP Session 用途與實踐範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 PHP 相關技術，可以參考看看下面的文章，<br><a href="/php-pdo/" title="PHP 和 PDO 進行資料庫操作">PHP 和 PDO 進行資料庫操作</a><br><a href="/php-post/" title="PHP $_POST 變數用途、語法與實用範例詳解">PHP $_POST 變數用途、語法與實用範例詳解</a><br><a href="/php-isset/" title="深入理解 PHP 中的 isset 用法、範例及最佳實踐">深入理解 PHP 中的 isset 用法、範例及最佳實踐</a><br><a href="/php-substr/" title="PHP substr 函式全面解析與應用範例">PHP substr 函式全面解析與應用範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 PHP 中的 Session 用法與範例，在當今的網路應用程式中，會話管理是一個關鍵組成部分。PHP 中的 &lt;code&gt;$_SESSION&lt;/code&gt; 是一個強大的工具，讓開發者可以在不同的網頁之間儲存和共享使用者資料。本指南將詳細介紹 PHP
      
    
    </summary>
    
      <category term="PHP教學" scheme="https://shengyu7697.github.io/categories/PHP%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="PHP" scheme="https://shengyu7697.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP $_POST 變數用途、語法與實用範例詳解</title>
    <link href="https://shengyu7697.github.io/php-post/"/>
    <id>https://shengyu7697.github.io/php-post/</id>
    <published>2024-08-10T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 PHP <code>substr</code> 用法與範例，在現代的網頁開發中，表單資料的處理是非常常見的需求之一。PHP 提供了許多方便的方法來處理表單資料，其中 <code>_POST</code> 超全域變數尤為重要。這篇文章將詳細介紹 PHP 的 <code>_POST</code> 變數，包括其用途、語法和多個實用範例，幫助開發者更好地理解和應用這個功能。</p><h2><span id="什麼是-_post-變數">什麼是 <code>_POST</code> 變數？</span></h2><p><code>_POST</code> 是 PHP 中的超全域變數（superglobal），用來收集透過 HTTP POST 方法送出的表單資料。當使用者送出表單後，表單資料會被儲存在 <code>_POST</code> 變數中，並可以在伺服器端進行訪問和處理。這種方法通常用於需要保密或較大資料量的表單送出，例如使用者登錄、註冊和檔案上傳。</p><h2><span id="_post-的主要用途"><code>$_POST</code> 的主要用途</span></h2><ol><li><strong>表單資料接收</strong>：用於處理表單送出時傳遞的資料，例如使用者註冊、登錄表單等。</li><li><strong>檔案上傳</strong>：用於處理檔案上傳時傳遞的資料。</li><li><strong>安全性</strong>：相比 GET 方法，POST 方法不會將資料顯示在 URL 中，因此更適合傳遞敏感資訊（例如密碼）。</li></ol><h2><span id="_post-變數的使用方法"><code>_POST</code> 變數的使用方法</span></h2><p>要使用 <code>_POST</code> 變數，首先需要建立一個使用 POST 方法送出的 HTML 表單。然後，在 PHP 腳本中訪問 <code>_POST</code> 變數來處理送出的資料。</p><h2><span id="範例一簡單表單處理">範例一：簡單表單處理</span></h2><p>以下是一個簡單的例子，展示如何使用 <code>$_POST</code> 接收和處理來自表單的資料。<br>首先，我們建立一個簡單的 HTML 表單，讓使用者輸入名字和電子郵件地址。</p><p><strong>HTML 表單：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>POST 表單範例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"process_form.php"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span>名字:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>電子郵件:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"送出"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>PHP 腳本 (process_form.php)：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] == <span class="string">"POST"</span>) &#123;</span><br><span class="line">    $name = $_POST[<span class="string">'name'</span>];</span><br><span class="line">    $email = $_POST[<span class="string">'email'</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"名字: "</span> . htmlspecialchars($name) . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"電子郵件: "</span> . htmlspecialchars($email);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在這個範例中，使用者送出表單後，資料會被發送到 <code>process_form.php</code>。PHP 腳本檢查請求方法是否為 POST，然後透過 <code>_POST</code> 變數訪問表單資料，並使用 <code>htmlspecialchars</code> 函式進行輸出，防止 XSS 攻擊。</p><h2><span id="範例二帶有驗證的表單處理">範例二：帶有驗證的表單處理</span></h2><p>除了基本的表單處理，我們還可以新增一些資料驗證來確保送出的資料是有效的。</p><p><strong>HTML 表單：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>帶驗證的 POST 表單<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"process_form_with_validation.php"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span>&gt;</span>名字:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>電子郵件:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"送出"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>PHP 腳本 (process_form_with_validation.php)：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$name = $email = <span class="string">""</span>;</span><br><span class="line">$nameErr = $emailErr = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] == <span class="string">"POST"</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">'name'</span>])) &#123;</span><br><span class="line">        $nameErr = <span class="string">"名字是必填項"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $name = test_input($_POST[<span class="string">'name'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">empty</span>($_POST[<span class="string">'email'</span>])) &#123;</span><br><span class="line">        $emailErr = <span class="string">"電子郵件是必填項"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $email = test_input($_POST[<span class="string">'email'</span>]);</span><br><span class="line">        <span class="keyword">if</span> (!filter_var($email, FILTER_VALIDATE_EMAIL)) &#123;</span><br><span class="line">            $emailErr = <span class="string">"無效的電子郵件格式"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test_input</span><span class="params">($data)</span> </span>&#123;</span><br><span class="line">    $data = trim($data);</span><br><span class="line">    $data = stripslashes($data);</span><br><span class="line">    $data = htmlspecialchars($data);</span><br><span class="line">    <span class="keyword">return</span> $data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;表單結果&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h2&gt;表單驗證結果&lt;/h2&gt;</span><br><span class="line">    &lt;p&gt;&lt;span class="error"&gt;* 必填字段&lt;/span&gt;&lt;/p&gt;</span><br><span class="line">    &lt;form method=<span class="string">"post"</span> action=<span class="string">"&lt;?php echo htmlspecialchars($_SERVER["</span>PHP_SELF<span class="string">"]);?&gt;"</span>&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">"name"</span>&gt;名字:&lt;/label&gt;</span><br><span class="line">        &lt;input type=<span class="string">"text"</span> id=<span class="string">"name"</span> name=<span class="string">"name"</span> value=<span class="string">"&lt;?php echo $name;?&gt;"</span>&gt;</span><br><span class="line">        &lt;span class="error"&gt;* &lt;?php echo $nameErr;?&gt;&lt;/span&gt;</span><br><span class="line">        &lt;br&gt;&lt;br&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">"email"</span>&gt;電子郵件:&lt;/label&gt;</span><br><span class="line">        &lt;input type=<span class="string">"email"</span> id=<span class="string">"email"</span> name=<span class="string">"email"</span> value=<span class="string">"&lt;?php echo $email;?&gt;"</span>&gt;</span><br><span class="line">        &lt;span class="error"&gt;* &lt;?php echo $emailErr;?&gt;&lt;/span&gt;</span><br><span class="line">        &lt;br&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type=<span class="string">"submit"</span> value=<span class="string">"送出"</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">if</span> ($_SERVER[<span class="string">"REQUEST_METHOD"</span>] == <span class="string">"POST"</span> &amp;&amp; $nameErr == <span class="string">""</span> &amp;&amp; $emailErr == <span class="string">""</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"&lt;h3&gt;表單資料已送出成功&lt;/h3&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"名字: "</span> . $name . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"電子郵件: "</span> . $email;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在這個範例中，我們新增了基本的資料驗證。<code>test_input</code> 函式對輸入資料進行處理，防止注入攻擊和 XSS 攻擊。表單送出後，資料會被檢查，如果有錯誤，錯誤資訊會顯示在表單旁邊。只有當所有字段都正確填寫時，表單資料才會被顯示。</p><h2><span id="為什麼要使用-_post">為什麼要使用 <code>$_POST</code>？</span></h2><h3><span id="保護資料隱私">保護資料隱私</span></h3><p>相比 GET 方法，POST 方法不會將資料顯示在 URL 中，因此更適合傳遞敏感資訊。例如，當使用者送出包含密碼的表單時，使用 POST 方法可以避免密碼在 URL 中曝光。</p><h3><span id="傳輸大資料量">傳輸大資料量</span></h3><p>POST 方法沒有 GET 方法的 URL 長度限制，這意味著我們可以使用 POST 方法來傳輸更大的資料量，例如檔案上傳。</p><h2><span id="安全性考量">安全性考量</span></h2><p>使用 <code>$_POST</code> 處理表單資料時，我們需要注意以下幾點，以確保資料的安全：</p><ol><li><strong>資料驗證</strong>：對接收到的資料進行驗證，確保資料符合預期。例如，檢查電子郵件地址是否有效。</li><li><strong>資料消毒</strong>：使用 <code>htmlspecialchars</code> 或其他合適的函式來消毒資料，防止 XSS 攻擊。</li><li><strong>SQL 注入防護</strong>：如果將資料儲存到資料庫中，應使用預處理語句或其他方法防止 SQL 注入。</li></ol><h2><span id="結論">結論</span></h2><p><code>_POST</code> 變數是 PHP 中一個非常重要的工具，用於收集和處理來自 HTML 表單的資料。透過理解其基本用法和結合資料驗證技術，我們可以更安全有效地處理使用者輸入的資料。</p><p>希望這篇文章能幫助你更好地理解 PHP $_POST 變數的用途和實踐方式。<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 PHP 相關技術，可以參考看看下面的文章，<br><a href="/php-pdo/" title="PHP 和 PDO 進行資料庫操作">PHP 和 PDO 進行資料庫操作</a><br><a href="/php-session/" title="PHP 中的 Session 用途與實踐範例：完整指南">PHP 中的 Session 用途與實踐範例：完整指南</a><br><a href="/php-substr/" title="PHP substr 函式全面解析與應用範例">PHP substr 函式全面解析與應用範例</a><br><a href="/php-isset/" title="深入理解 PHP 中的 isset 用法、範例及最佳實踐">深入理解 PHP 中的 isset 用法、範例及最佳實踐</a><br><a href="/php-session_start/" title="了解 PHP 中的 session_start() 函式用途與範例">了解 PHP 中的 session_start() 函式用途與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 PHP &lt;code&gt;substr&lt;/code&gt; 用法與範例，在現代的網頁開發中，表單資料的處理是非常常見的需求之一。PHP 提供了許多方便的方法來處理表單資料，其中 &lt;code&gt;_POST&lt;/code&gt; 超全域變數尤為重要。這篇文章將詳細介紹 P
      
    
    </summary>
    
      <category term="PHP教學" scheme="https://shengyu7697.github.io/categories/PHP%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="PHP" scheme="https://shengyu7697.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP substr 函式全面解析與應用範例</title>
    <link href="https://shengyu7697.github.io/php-substr/"/>
    <id>https://shengyu7697.github.io/php-substr/</id>
    <published>2024-08-03T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 PHP <code>substr</code> 用法與範例，在開發 PHP 應用程式的過程中，字串處理是一個非常常見的需求。無論是提取使用者輸入的一部分資料，還是展示文章的部分內容，這些操作都離不開字串處理函式。而在眾多的 PHP 字串處理函式中，<code>substr</code> 函式是一個非常實用的工具。本篇文章將深入解析 PHP <code>substr</code> 函式的用途及其應用範例，幫助開發者更好地理解和運用這個函式。</p><h2><span id="什麼是-php-substr-函式">什麼是 PHP substr 函式？</span></h2><p><code>substr</code> 函式的全稱是 “substring”，即從一個字串中提取子串。它能夠根據指定的起始位置和長度，從原始字串中截取出所需的部分，並回傳這個子串。這個函式的使用頻率非常高，尤其是在處理使用者輸入、產生摘要或顯示部分內容時，<code>substr</code> 都能發揮重要作用。</p><h2><span id="php-substr-函式的語法">PHP substr 函式的語法</span></h2><p>在開始探討具體的應用範例之前，我們先來看一下 <code>substr</code> 函式的語法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">substr(string $string, int $start, int $length = ?): string</span><br></pre></td></tr></table></figure><ul><li><strong>$string</strong>：要處理的原始字串。</li><li><strong>$start</strong>：開始截取的位置，從 0 開始。如果是負數，表示從字串末尾開始計算的位置。</li><li><strong>$length</strong>（可選）：截取的長度。如果未提供或為 null，則一直截取到字串末尾。如果是負數，表示到字串末尾之前的字元數。</li></ul><h2><span id="php-substr-函式的應用範例">PHP substr 函式的應用範例</span></h2><p>為了讓大家更好地理解 <code>substr</code> 函式的用法，我們將透過一些具體的例子來進行說明。</p><h3><span id="範例-1基本用法">範例 1：基本用法</span></h3><p>假設我們有一個字串 “Hello, World!”，我們希望從中截取出 “World” 這個子串。可以這樣寫：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$text = <span class="string">"Hello, World!"</span>;</span><br><span class="line">$substring = substr($text, <span class="number">7</span>, <span class="number">5</span>); <span class="comment">// 從位置 7 開始，截取 5 個字元</span></span><br><span class="line"><span class="keyword">echo</span> $substring; <span class="comment">// 輸出 "World"</span></span><br></pre></td></tr></table></figure><p>在這個例子中，我們從字串的第 7 個位置開始，截取 5 個字元，結果得到了 “World”。</p><h3><span id="範例-2從字串末尾開始計算">範例 2：從字串末尾開始計算</span></h3><p>如果我們希望從字串的末尾開始計算位置，同樣可以使用 <code>substr</code> 函式。以下是具體用法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$text = <span class="string">"Hello, World!"</span>;</span><br><span class="line">$substring = substr($text, <span class="number">-6</span>, <span class="number">5</span>); <span class="comment">// 從倒數第 6 個字元開始，截取 5 個字元</span></span><br><span class="line"><span class="keyword">echo</span> $substring; <span class="comment">// 輸出 "World"</span></span><br></pre></td></tr></table></figure><p>在這裡，我們從倒數第 6 個字元開始，截取 5 個字元，結果同樣是 “World”。</p><h3><span id="範例-3省略長度參數">範例 3：省略長度參數</span></h3><p>如果我們希望從某個位置開始，一直截取到字串末尾，可以省略長度參數：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$text = <span class="string">"Hello, World!"</span>;</span><br><span class="line">$substring = substr($text, <span class="number">7</span>); <span class="comment">// 從位置 7 開始，一直截取到字串末尾</span></span><br><span class="line"><span class="keyword">echo</span> $substring; <span class="comment">// 輸出 "World!"</span></span><br></pre></td></tr></table></figure><p>這樣寫可以確保從第 7 個位置開始，將剩餘的字串全部截取出來。</p><h3><span id="範例-4使用負數長度">範例 4：使用負數長度</span></h3><p><code>substr</code> 函式還支持負數長度，表示從開始位置到字串末尾之前的字元數：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$text = <span class="string">"Hello, World!"</span>;</span><br><span class="line">$substring = substr($text, <span class="number">0</span>, <span class="number">-7</span>); <span class="comment">// 從位置 0 開始，截取到倒數第 7 個字元之前</span></span><br><span class="line"><span class="keyword">echo</span> $substring; <span class="comment">// 輸出 "Hello"</span></span><br></pre></td></tr></table></figure><p>在這個例子中，我們從位置 0 開始，截取到倒數第 7 個字元之前，結果得到了 “Hello”。</p><h3><span id="範例-5長度超過字串長度">範例 5：長度超過字串長度</span></h3><p>當長度參數超過了字串本身的長度時，<code>substr</code> 函式會自動截取到字串末尾：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$text = <span class="string">"Hello"</span>;</span><br><span class="line">$substring = substr($text, <span class="number">2</span>, <span class="number">10</span>); <span class="comment">// 長度參數超過了字串長度</span></span><br><span class="line"><span class="keyword">echo</span> $substring; <span class="comment">// 輸出 "llo"（從位置 2 開始，一直截取到字串末尾）</span></span><br></pre></td></tr></table></figure><p>在這裡，我們從位置 2 開始截取，儘管指定的長度為 10，但實際只截取到字串末尾，結果為 “llo”。</p><h3><span id="範例-6開始位置超過字串長度">範例 6：開始位置超過字串長度</span></h3><p>如果開始位置超過了字串的長度，<code>substr</code> 會回傳一個空字串：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$text = <span class="string">"Hello"</span>;</span><br><span class="line">$substring = substr($text, <span class="number">10</span>); <span class="comment">// 開始位置超過字串長度</span></span><br><span class="line"><span class="keyword">echo</span> $substring; <span class="comment">// 輸出 ""（空字串）</span></span><br></pre></td></tr></table></figure><p>在這個例子中，開始位置超過了字串的長度，結果回傳了一個空字串。</p><h2><span id="注意事項">注意事項</span></h2><p>在使用 <code>substr</code> 函式時，有幾點需要特別注意：</p><ul><li><strong>負數開始位置</strong>：如果 <code>$start</code> 是負數，表示從字串末尾開始計算的位置。</li><li><strong>負數長度</strong>：如果 <code>$length</code> 是負數，表示到字串末尾之前的字元數。</li><li><strong>開始位置超過字串長度</strong>：如果 <code>$start</code> 超過了字串長度，將回傳一個空字串。</li><li><strong>長度超過字串長度</strong>：如果 <code>$length</code> 超過了剩餘的字元數，將截取到字串末尾。</li></ul><h2><span id="結語">結語</span></h2><p>PHP 的 <code>substr</code> 函式是處理字串時的一個強大工具，透過靈活運用它的各種參數，可以實現多種字串操作需求。無論是在截取使用者輸入的一部分資料，還是產生文章摘要，<code>substr</code> 函式都能夠提供高效的解決方案。</p><p>希望這篇文章能幫助你更好地理解 PHP <code>substr</code> 的用途和實踐方式。<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 PHP 相關技術，可以參考看看下面的文章，<br><a href="/php-str_pad/" title="PHP str_pad 函式用途、語法與實用範例解析">PHP str_pad 函式用途、語法與實用範例解析</a><br><a href="/php-pdo/" title="PHP 和 PDO 進行資料庫操作">PHP 和 PDO 進行資料庫操作</a><br><a href="/php-isset/" title="深入理解 PHP 中的 isset 用法、範例及最佳實踐">深入理解 PHP 中的 isset 用法、範例及最佳實踐</a><br><a href="/php-session_start/" title="了解 PHP 中的 session_start() 函式用途與範例">了解 PHP 中的 session_start() 函式用途與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 PHP &lt;code&gt;substr&lt;/code&gt; 用法與範例，在開發 PHP 應用程式的過程中，字串處理是一個非常常見的需求。無論是提取使用者輸入的一部分資料，還是展示文章的部分內容，這些操作都離不開字串處理函式。而在眾多的 PHP 字串處理函式中
      
    
    </summary>
    
      <category term="PHP教學" scheme="https://shengyu7697.github.io/categories/PHP%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="PHP" scheme="https://shengyu7697.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>PHP str_pad 函式用途、語法與實用範例解析</title>
    <link href="https://shengyu7697.github.io/php-str_pad/"/>
    <id>https://shengyu7697.github.io/php-str_pad/</id>
    <published>2024-07-27T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 PHP <code>str_pad</code> 用法與範例，在現代的網頁開發中，處理和格式化字串是常見且重要的操作之一。PHP 提供了許多強大的字串處理函式，其中 <code>str_pad</code> 函式尤為實用。這篇文章將詳細介紹 PHP 的 <code>str_pad</code> 函式，包括其用途、語法和多個實用範例，幫助開發者更好地理解和應用這個功能。</p><h2><span id="什麼是-str_pad-函式">什麼是 <code>str_pad</code> 函式？</span></h2><p><code>str_pad</code> 是 PHP 中用來對字串進行填充的函式。它可以在字串的左邊、右邊或兩邊填充指定的字元，使字串達到預定的長度。這在格式化輸出、對齊文字和產生報表時非常有用。例如，在需要產生統一寬度的資料表格時，我們可以利用 <code>str_pad</code> 函式來確保每個欄位都具有相同的寬度，從而使表格更加整齊和易於閱讀。</p><h2><span id="str_pad-函式的語法"><code>str_pad</code> 函式的語法</span></h2><p><code>str_pad</code> 函式的語法如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str_pad(string $input, int $pad_length, string $pad_string = <span class="string">" "</span>, int $pad_type = STR_PAD_RIGHT): string</span><br></pre></td></tr></table></figure><p>這裡我們來逐一解釋各個參數的含義：</p><ul><li><strong>$input</strong>: 要填充的原始字串。</li><li><strong>$pad_length</strong>: 填充後的總長度。如果指定的長度小於或等於原始字串的長度，則不會進行填充。</li><li><strong>$pad_string</strong>: 用來填充的字串。預設為一個空格字元。</li><li><strong>$pad_type</strong>: 填充類型，可以是以下三種之一：<ul><li><code>STR_PAD_RIGHT</code>（預設）：在字串的右邊填充。</li><li><code>STR_PAD_LEFT</code>：在字串的左邊填充。</li><li><code>STR_PAD_BOTH</code>：在字串的兩邊填充。</li></ul></li></ul><h2><span id="str_pad-函式的使用範例"><code>str_pad</code> 函式的使用範例</span></h2><p>以下是幾個常見的 <code>str_pad</code> 函式使用範例，展示了如何根據不同需求對字串進行填充。</p><h3><span id="範例一右邊填充">範例一：右邊填充</span></h3><p>在這個範例中，我們將字串的右邊填充指定的字元，使其達到預定的長度。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$input = <span class="string">"Hello"</span>;</span><br><span class="line">$padded = str_pad($input, <span class="number">10</span>, <span class="string">"-"</span>);</span><br><span class="line"><span class="keyword">echo</span> $padded; <span class="comment">// 輸出 "Hello-----"</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在這裡，原始字串 “Hello” 被填充了 5 個 “-“ 號，最終達到了 10 個字元的長度。</p><h3><span id="範例二左邊填充">範例二：左邊填充</span></h3><p>有時候我們需要在字串的左邊進行填充。下面的範例展示了如何實現這一點。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$input = <span class="string">"Hello"</span>;</span><br><span class="line">$padded = str_pad($input, <span class="number">10</span>, <span class="string">"-"</span>, STR_PAD_LEFT);</span><br><span class="line"><span class="keyword">echo</span> $padded; <span class="comment">// 輸出 "-----Hello"</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>這次，字串 “Hello” 的左邊被填充了 5 個 “-“ 號。</p><h3><span id="範例三兩邊填充">範例三：兩邊填充</span></h3><p>如果需要在字串的兩邊同時進行填充，可以使用 <code>STR_PAD_BOTH</code> 參數。這個範例展示了這種用法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$input = <span class="string">"Hello"</span>;</span><br><span class="line">$padded = str_pad($input, <span class="number">10</span>, <span class="string">"-"</span>, STR_PAD_BOTH);</span><br><span class="line"><span class="keyword">echo</span> $padded; <span class="comment">// 輸出 "--Hello---"（注意：左右填充字元數可能不完全相等）</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在這範例裡，字串 “Hello” 被填充在兩邊，但由於總長度為 10，左右兩邊的填充字元數可能不完全相等。</p><h3><span id="範例四使用多字元填充">範例四：使用多字元填充</span></h3><p><code>str_pad</code> 函式不僅可以使用單個字元來填充，還可以使用多個字元。下面的範例展示了如何使用多字元填充。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$input = <span class="string">"Hello"</span>;</span><br><span class="line">$padded = str_pad($input, <span class="number">10</span>, <span class="string">"123"</span>);</span><br><span class="line"><span class="keyword">echo</span> $padded; <span class="comment">// 輸出 "Hello12312"</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在這裡，填充字串 “123” 被重複使用，直到原始字串達到指定的長度 10。</p><h3><span id="範例五格式化數字">範例五：格式化數字</span></h3><p>在處理數字格式時，<code>str_pad</code> 也非常有用。例如，當我們需要統一顯示數字的位數時，可以使用 <code>str_pad</code> 進行左側填充。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$number = <span class="number">7</span>;</span><br><span class="line">$formattedNumber = str_pad($number, <span class="number">5</span>, <span class="string">"0"</span>, STR_PAD_LEFT);</span><br><span class="line"><span class="keyword">echo</span> $formattedNumber; <span class="comment">// 輸出 "00007"</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>在這個範例中，數字 7 被填充了四個 “0”，使其總長度達到 5 位，便於對齊和顯示。</p><h2><span id="為什麼-str_pad-函式這麼重要">為什麼 <code>str_pad</code> 函式這麼重要？</span></h2><p><code>str_pad</code> 函式在許多情況下都非常實用，特別是在需要格式化和對齊文字時。例如：</p><ol><li><strong>產生報表</strong>：在產生報表時，我們常常需要對齊各個欄位的資料，使得報表更加美觀和易於閱讀。</li><li><strong>格式化輸出</strong>：在終端或控制台輸出中，格式化的輸出能夠使資料更加清晰明瞭。</li><li><strong>處理固定寬度檔案</strong>：在處理一些固定寬度的檔案（如某些舊式資料格式）時，我們需要確保每個欄位都具有固定的寬度。</li></ol><h2><span id="結論">結論</span></h2><p><code>str_pad</code> 函式是 PHP 中一個非常強大且靈活的工具，能夠幫助我們輕鬆地對字串進行填充和格式化。無論是在產生報表、格式化輸出還是處理固定寬度檔案時，<code>str_pad</code> 都能發揮重要作用。透過理解其語法和各種填充模式，我們可以根據不同的需求靈活應用這個函式，從而提高程式碼的可讀性和可維護性。</p><p>希望這篇文章能夠幫助你更好地理解和使用 <code>str_pad</code> 函式。以上就是我們對 PHP <code>str_pad</code> 函式的全面解析。<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 PHP 相關技術，可以參考看看下面的文章，<br><a href="/php-substr/" title="PHP substr 函式全面解析與應用範例">PHP substr 函式全面解析與應用範例</a><br><a href="/php-pdo/" title="PHP 和 PDO 進行資料庫操作">PHP 和 PDO 進行資料庫操作</a><br><a href="/php-display-errors/" title="PHP 執行發生錯誤在 Chrome/Firefox 上顯示 Error 500，要怎麼讓 PHP 顯示錯誤">PHP 執行發生錯誤在 Chrome/Firefox 上顯示 Error 500，要怎麼讓 PHP 顯示錯誤</a><br><a href="/php-isset/" title="深入理解 PHP 中的 isset 用法、範例及最佳實踐">深入理解 PHP 中的 isset 用法、範例及最佳實踐</a><br><a href="/php-session_start/" title="了解 PHP 中的 session_start() 函式用途與範例">了解 PHP 中的 session_start() 函式用途與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 PHP &lt;code&gt;str_pad&lt;/code&gt; 用法與範例，在現代的網頁開發中，處理和格式化字串是常見且重要的操作之一。PHP 提供了許多強大的字串處理函式，其中 &lt;code&gt;str_pad&lt;/code&gt; 函式尤為實用。這篇文章將詳細介紹 PH
      
    
    </summary>
    
      <category term="PHP教學" scheme="https://shengyu7697.github.io/categories/PHP%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="PHP" scheme="https://shengyu7697.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 PHP 的 uniqid 函式產生唯一ID並提高應用程式安全性</title>
    <link href="https://shengyu7697.github.io/php-uniqid/"/>
    <id>https://shengyu7697.github.io/php-uniqid/</id>
    <published>2024-07-20T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 PHP <code>uniqid</code> 用法與範例，在現代Web開發中，唯一ID產生是一項非常常見的需求，無論是用於使用者帳號、訂單號還是其他標識符。PHP 提供了一個非常方便的內置函式 <code>uniqid()</code>，能夠根據當前時間戳產生一個唯一ID。在這篇文章中，我們將詳細介紹 <code>uniqid()</code> 函式的使用方法，以及如何進一步提高ID的唯一性和安全性。</p><h2><span id="什麼是-uniqid-函式">什麼是 <code>uniqid()</code> 函式？</span></h2><p><code>uniqid()</code> 是 PHP 中的一個內置函式，用於產生基於當前時間微秒數的唯一ID。該函式的基本用法非常簡單：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$id = uniqid();</span><br><span class="line"><span class="keyword">echo</span> $id;</span><br></pre></td></tr></table></figure><p>這段程式碼將產生一個類似於 <code>5f2c912cd6d88</code> 的字串，其中包含13個字元。產生的ID基於當前的時間戳，精確到微秒。這意味著，在通常情況下，每次呼叫 <code>uniqid()</code> 都會產生一個不同的ID。</p><h2><span id="uniqid-的可選參數"><code>uniqid()</code> 的可選參數</span></h2><p><code>uniqid()</code> 函式有兩個可選參數：</p><ol><li><code>$prefix</code>：一個可選的字串參數，新增到產生的唯一ID之前。</li><li><code>$more_entropy</code>：一個布爾值（預設為 <code>false</code>）。如果設定為 <code>true</code>，將附加更多的熵（隨機性）以進一步提高唯一性。</li></ol><p>讓我們看看這些參數如何影響 <code>uniqid()</code> 函式的輸出。</p><h2><span id="uniqid-帶前綴的使用方法"><code>uniqid()</code> 帶前綴的使用方法</span></h2><p>有時候，我們可能希望產生的唯一ID包含某些前綴，以便於區分不同類型的ID。例如，可以為使用者ID新增前綴“user_”：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$prefix = <span class="string">'user_'</span>;</span><br><span class="line">$id = uniqid($prefix);</span><br><span class="line"><span class="keyword">echo</span> $id;</span><br></pre></td></tr></table></figure><p>這將產生一個類似於 <code>user_5f2c912cd6d88</code> 的字串。這樣的ID不僅唯一，還能透過前綴快速識別其用途。</p><h2><span id="uniqid-增加熵的使用方法"><code>uniqid()</code> 增加熵的使用方法</span></h2><p>在高併發環境下，僅僅依賴時間戳可能不足以保證唯一性。此時，我們可以透過設定 <code>$more_entropy</code> 參數來增加ID的熵（隨機性）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$id = uniqid(<span class="string">''</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">echo</span> $id;</span><br></pre></td></tr></table></figure><p>這將產生一個更長、更複雜的唯一ID，例如 <code>5f2c912cd6d88.66138147</code>。這樣的ID在高併發環境下的唯一性更高。</p><h2><span id="uniqid-綜合使用方法"><code>uniqid()</code> 綜合使用方法</span></h2><p>當我們既需要前綴又需要增加熵時，可以同時使用兩個參數：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$prefix = <span class="string">'order_'</span>;</span><br><span class="line">$id = uniqid($prefix, <span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">echo</span> $id;</span><br></pre></td></tr></table></figure><p>這將產生一個帶前綴和更多熵的唯一ID，例如 <code>order_5f2c912cd6d88.66138147</code>。</p><h2><span id="uniqid-提高唯一性和安全性"><code>uniqid()</code> 提高唯一性和安全性</span></h2><p>雖然 <code>uniqid()</code> 能產生基於時間戳的唯一ID，但在某些高並發環境下，產生的ID仍有可能重複。如果需要更高的唯一性和安全性，我們可以結合其他方法，如使用 <code>md5()</code> 或 <code>sha1()</code>，甚至 PHP 的隨機位元組產生函式 <code>random_bytes()</code>。</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$id = md5(uniqid(rand(), <span class="keyword">true</span>));</span><br><span class="line"><span class="keyword">echo</span> $id;</span><br></pre></td></tr></table></figure><p>這將產生一個32字元長的唯一ID，例如 <code>e7d1bc78bafb0dbd8c43f8d3fba95025</code>。這種方法透過混合隨機數和時間戳，並使用 <code>md5()</code> 哈希函式，極大地提高了ID的唯一性和不可預測性。</p><h2><span id="使用-random_bytes-產生高安全性id">使用 <code>random_bytes()</code> 產生高安全性ID</span></h2><p>如果應用場景需要極高的安全性（例如加密密鑰或重要資料標識符），可以使用 PHP 的 <code>random_bytes()</code> 函式來產生高安全性的隨機位元組，然後將其轉換為十六進位字串：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$id = bin2hex(random_bytes(<span class="number">16</span>));</span><br><span class="line"><span class="keyword">echo</span> $id;</span><br></pre></td></tr></table></figure><p>這將產生一個32字元長的隨機ID，例如 <code>4e5d6c9a2b3f4d7e8f9a1b2c3d4e5f6a</code>。 <code>random_bytes()</code> 函式使用作業系統的隨機數產生器，保證了隨機性的質量。</p><h2><span id="結論">結論</span></h2><p>PHP 的 <code>uniqid()</code> 函式是一個方便且易於使用的工具，適用於多種需要唯一標識符的場景。透過適當使用其可選參數，我們可以在大多數應用中產生足夠唯一的ID。然而，在高並發或安全需求更高的情況下，建議結合其他隨機數產生方法以進一步提高ID的唯一性和安全性。透過這些方法，我們可以確保應用程式的穩定性和安全性，滿足各種業務需求。</p><p>希望這篇文章能幫助你更好地理解 PHP <code>uniqid</code> 的用途和實踐方式。<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 PHP 相關技術，可以參考看看下面的文章，<br><a href="/php-substr/" title="PHP substr 函式全面解析與應用範例">PHP substr 函式全面解析與應用範例</a><br><a href="/php-str_pad/" title="PHP str_pad 函式用途、語法與實用範例解析">PHP str_pad 函式用途、語法與實用範例解析</a><br><a href="/php-pdo/" title="PHP 和 PDO 進行資料庫操作">PHP 和 PDO 進行資料庫操作</a><br><a href="/php-isset/" title="深入理解 PHP 中的 isset 用法、範例及最佳實踐">深入理解 PHP 中的 isset 用法、範例及最佳實踐</a><br><a href="/php-session_start/" title="了解 PHP 中的 session_start() 函式用途與範例">了解 PHP 中的 session_start() 函式用途與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 PHP &lt;code&gt;uniqid&lt;/code&gt; 用法與範例，在現代Web開發中，唯一ID產生是一項非常常見的需求，無論是用於使用者帳號、訂單號還是其他標識符。PHP 提供了一個非常方便的內置函式 &lt;code&gt;uniqid()&lt;/code&gt;，能夠根
      
    
    </summary>
    
      <category term="PHP教學" scheme="https://shengyu7697.github.io/categories/PHP%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="PHP" scheme="https://shengyu7697.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 下安裝 wordpress</title>
    <link href="https://shengyu7697.github.io/ubuntu-wordpress/"/>
    <id>https://shengyu7697.github.io/ubuntu-wordpress/</id>
    <published>2024-07-14T12:00:00.000Z</published>
    <updated>2024-07-14T23:30:06.695Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 紀錄在 Ubuntu 下安裝 wordpress，我自己是用 Ubuntu 22.04 安裝 wordpress 6.5.5。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">sudo apt install php libapache2-mod-php php-mysql \</span><br><span class="line">php-curl php-gd php-xml php-mbstring php-xmlrpc \</span><br><span class="line">php-zip php-soap php-intl -y</span><br><span class="line"></span><br><span class="line"># ubuntu 官網</span><br><span class="line">sudo apt install apache2 \</span><br><span class="line">                 ghostscript \</span><br><span class="line">                 libapache2-mod-php \</span><br><span class="line">                 mysql-server \</span><br><span class="line">                 php \</span><br><span class="line">                 php-bcmath \</span><br><span class="line">                 php-curl \</span><br><span class="line">                 php-imagick \</span><br><span class="line">                 php-intl \</span><br><span class="line">                 php-json \</span><br><span class="line">                 php-mbstring \</span><br><span class="line">                 php-mysql \</span><br><span class="line">                 php-xml \</span><br><span class="line">                 php-zip</span><br></pre></td></tr></table></figure><p>下載wordpress-6.5.5版<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://tw.wordpress.org/wordpress-6.5.5-zh_TW.zip</span><br><span class="line">sudo unzip wordpress-6.5.5-zh_TW.zip -d /var/www/html</span><br><span class="line">sudo chown -R www-data:www-data /var/www/html/wordpress/</span><br></pre></td></tr></table></figure></p><p>或者下載最新版<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://tw.wordpress.org/latest-zh_TW.zip</span><br><span class="line">sudo unzip latest-zh_TW.zip -d /var/www/html</span><br><span class="line">sudo chown -R www-data:www-data /var/www/html/wordpress/</span><br></pre></td></tr></table></figure></p><p>新建資料庫<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql</span><br><span class="line">CREATE DATABASE wordpress;</span><br><span class="line">CREATE USER &apos;wordpressuser&apos;@&apos;localhost&apos; IDENTIFIED BY &apos;your-password&apos;;</span><br><span class="line">GRANT ALL PRIVILEGES ON wordpress.* TO &apos;wordpressuser&apos;@&apos;localhost&apos;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">EXIT;</span><br></pre></td></tr></table></figure></p><p>編輯 wordpress.conf<br>sudo vim /etc/apache2/sites-available/wordpress.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory /var/www/html/wordpress/&gt;</span><br><span class="line">   AllowOverride All</span><br><span class="line">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure></p><p>重啟 apache<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo a2ensite wordpress.conf</span><br><span class="line">sudo a2enmod rewrite</span><br><span class="line">sudo systemctl restart apache2</span><br></pre></td></tr></table></figure></p><p>開啟網頁，填上剛剛稍早設定的資料，按下安裝，搞定！<br>資料庫名稱 wordpress<br>使用者名稱 wordpressuser<br>密碼 your-password</p><p>以上就是 Ubuntu 下安裝 wordpress 筆記，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p>其他參考<br><a href="https://www.taki.com.tw/blog/how-to-install-wordpress-on-ubuntu/" rel="noopener" target="_blank">安裝 WordPress – 如何在 Ubuntu 上安裝 WordPress</a><br><a href="https://ubuntu.com/tutorials/install-and-configure-wordpress" rel="noopener" target="_blank">ubuntu官網Install and configure WordPress</a></p><p><strong>其它相關文章推薦</strong><br><a href="/mac-ubuntu-prevent-accidental-deletion-with-rm-command/" title="macOS 下使用 rm 指令如何避免誤刪除">macOS 下使用 rm 指令如何避免誤刪除</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 紀錄在 Ubuntu 下安裝 wordpress，我自己是用 Ubuntu 22.04 安裝 wordpress 6.5.5。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shengyu7697.github.io/tags/Ubuntu/"/>
    
      <category term="Linux Command" scheme="https://shengyu7697.github.io/tags/Linux-Command/"/>
    
      <category term="Linux" scheme="https://shengyu7697.github.io/tags/Linux/"/>
    
      <category term="Shell Script" scheme="https://shengyu7697.github.io/tags/Shell-Script/"/>
    
  </entry>
  
  <entry>
    <title>深入理解 PHP 中的 isset 用法、範例及最佳實踐</title>
    <link href="https://shengyu7697.github.io/php-isset/"/>
    <id>https://shengyu7697.github.io/php-isset/</id>
    <published>2024-07-13T12:00:00.000Z</published>
    <updated>2024-06-06T23:31:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 PHP <code>isset</code> 用法與範例，在PHP編程中，<code>isset</code> 是 PHP 內建的函式，它用於檢查變數是否已設定且其值不為 <code>null</code>。了解和正確使用 <code>isset</code> 對於避免未定義變數錯誤和提高程式碼穩定性至關重要。本文將詳細介紹 <code>isset</code> 的用途、語法，並透過多個範例展示其在不同場景中的應用。</p><h2><span id="isset-的用途"><code>isset</code> 的用途</span></h2><p><code>isset</code> 函式主要用於以下幾個方面：</p><ol><li><strong>檢查表單送出中的變數是否存在</strong>：這有助於避免在處理使用者送出的表單資料時遇到未定義變數的錯誤。</li><li><strong>檢查陣列中的key是否存在</strong>：在處理陣列資料時，這樣做可以確保某個key確實存在並且有值。</li><li><strong>檢查物件屬性是否已設定</strong>：這在面向物件編程中尤為重要，用來確保某個屬性已經被初始化。</li></ol><h2><span id="isset-的語法"><code>isset</code> 的語法</span></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool <span class="keyword">isset</span>(mixed $var, mixed ...$vars)</span><br></pre></td></tr></table></figure><ul><li><code>$var</code>：要檢查的變數。</li><li><code>$vars</code>：可選的額外變數，可以一次檢查多個變數。</li></ul><h2><span id="isset-的基本用法"><code>isset</code> 的基本用法</span></h2><p>下面是一個基本的 <code>isset</code> 使用範例，展示了如何檢查單個變數是否被設定：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$var1 = <span class="string">"Hello, World!"</span>;</span><br><span class="line">$var2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($var1)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'$var1 is set and not null'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'$var1 is not set or is null'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 輸出：$var1 is set and not null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($var2)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'$var2 is set and not null'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'$var2 is not set or is null'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 輸出：$var2 is not set or is null</span></span><br></pre></td></tr></table></figure><p>在這個範例中，<code>$var1</code> 被設定為一個字串，因此 <code>isset($var1)</code> 回傳 <code>true</code>，而 <code>$var2</code> 被設定為 <code>null</code>，因此 <code>isset($var2)</code> 回傳 <code>false</code>。</p><h2><span id="檢查陣列key">檢查陣列key</span></h2><p>使用 <code>isset</code> 可以方便地檢查陣列中的某個key是否存在：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$array = <span class="keyword">array</span>(<span class="string">'key1'</span> =&gt; <span class="string">'value1'</span>, <span class="string">'key2'</span> =&gt; <span class="string">'value2'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($array[<span class="string">'key1'</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'$array["key1"] is set and not null'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'$array["key1"] is not set or is null'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 輸出：$array["key1"] is set and not null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($array[<span class="string">'key3'</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'$array["key3"] is set and not null'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'$array["key3"] is not set or is null'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 輸出：$array["key3"] is not set or is null</span></span><br></pre></td></tr></table></figure><p>這裡展示了如何檢查陣列中某個key是否存在。<code>$array[&#39;key1&#39;]</code> 存在且有值，因此 <code>isset($array[&#39;key1&#39;])</code> 回傳 <code>true</code>。而 <code>$array[&#39;key3&#39;]</code> 不存在，因此 <code>isset($array[&#39;key3&#39;])</code> 回傳 <code>false</code>。</p><h2><span id="一次檢查多個變數">一次檢查多個變數</span></h2><p><code>isset</code> 可以一次檢查多個變數，只要其中任何一個變數未設定或為 <code>null</code>，就會回傳 <code>false</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$var1 = <span class="string">"Hello"</span>;</span><br><span class="line">$var2 = <span class="string">"World"</span>;</span><br><span class="line">$var3 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($var1, $var2, $var3)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'All variables are set and not null'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'One or more variables are not set or are null'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 輸出：One or more variables are not set or are null</span></span><br></pre></td></tr></table></figure><p>在這個範例中，雖然 <code>$var1</code> 和 <code>$var2</code> 都被設定且不為 <code>null</code>，但 <code>$var3</code> 為 <code>null</code>，因此 <code>isset($var1, $var2, $var3)</code> 回傳 <code>false</code>。</p><h2><span id="檢查表單送出">檢查表單送出</span></h2><p>在處理使用者送出的表單時，<code>isset</code> 可以用來檢查表單字段是否被設定，從而避免處理未定義變數的錯誤。假設我們有一個簡單的HTML表單：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">"process.php"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Login"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>process.php</code> 中，我們可以使用 <code>isset</code> 來檢查表單字段是否被設定：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_POST[<span class="string">'username'</span>]) &amp;&amp; <span class="keyword">isset</span>($_POST[<span class="string">'password'</span>])) &#123;</span><br><span class="line">    $username = $_POST[<span class="string">'username'</span>];</span><br><span class="line">    $password = $_POST[<span class="string">'password'</span>];</span><br><span class="line">    <span class="comment">// 處理登錄邏輯</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Username: "</span> . $username . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Password: "</span> . $password;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Please fill in both username and password."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透過這種方式，我們可以確保使用者送出的 <code>username</code> 和 <code>password</code> 字段已經被設定並且不為 <code>null</code>，從而避免處理未定義變數的錯誤。</p><h2><span id="總結">總結</span></h2><p><code>isset</code> 是 PHP 中非常實用的函式，透過檢查變數是否被設定且不為 <code>null</code>，它幫助開發者避免了許多常見的錯誤。無論是在處理表單送出、檢查陣列key還是檢查物件屬性，<code>isset</code> 都能發揮重要作用。透過正確理解和使用 <code>isset</code>，我們可以編寫出更加健壯和可靠的PHP程式碼。</p><p>希望這篇文章能幫助你更好地理解 PHP <code>isset</code> 的用途和最佳實踐。<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 PHP 相關技術，可以參考看看下面的文章，<br><a href="/php-post/" title="PHP $_POST 變數用途、語法與實用範例詳解">PHP $_POST 變數用途、語法與實用範例詳解</a><br><a href="/php-session/" title="PHP 中的 Session 用途與實踐範例：完整指南">PHP 中的 Session 用途與實踐範例：完整指南</a><br><a href="/php-pdo/" title="PHP 和 PDO 進行資料庫操作">PHP 和 PDO 進行資料庫操作</a><br><a href="/php-display-errors/" title="PHP 執行發生錯誤在 Chrome/Firefox 上顯示 Error 500，要怎麼讓 PHP 顯示錯誤">PHP 執行發生錯誤在 Chrome/Firefox 上顯示 Error 500，要怎麼讓 PHP 顯示錯誤</a><br><a href="/php-session_start/" title="了解 PHP 中的 session_start() 函式用途與範例">了解 PHP 中的 session_start() 函式用途與範例</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 PHP &lt;code&gt;isset&lt;/code&gt; 用法與範例，在PHP編程中，&lt;code&gt;isset&lt;/code&gt; 是 PHP 內建的函式，它用於檢查變數是否已設定且其值不為 &lt;code&gt;null&lt;/code&gt;。了解和正確使用 &lt;code&gt;isset
      
    
    </summary>
    
      <category term="PHP教學" scheme="https://shengyu7697.github.io/categories/PHP%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="PHP" scheme="https://shengyu7697.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>如何使用 C/C++ 中的 printf 函式：詳盡指南</title>
    <link href="https://shengyu7697.github.io/cpp-printf/"/>
    <id>https://shengyu7697.github.io/cpp-printf/</id>
    <published>2024-07-12T12:00:00.000Z</published>
    <updated>2024-06-17T23:50:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹 C/C++ printf 用法與範例，在C/C++編程中，經常需要將資料印出。而<code>printf</code>函式正是這樣一個常用且強大的工具，它用於格式化輸出到標準輸出（如螢幕）。本文將深入探討<code>printf</code>函式的基本用法和一些高級技巧，幫助您更好地掌握這個函式，printf 詳細用法範例請繼續往下閱讀。  </p><p>C 語言要將資料格式化輸出到標準輸出(stdout)可以使用 printf，要使用 printf 的話需要引入的標頭檔 <code>&lt;stdio.h&gt;</code>，如果要使用 C++ 的標頭檔則是引入 <code>&lt;cstdio&gt;</code>，<br>printf 函式原型為<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * format, ...)</span></span>;</span><br></pre></td></tr></table></figure></p><p><code>const char *format</code>：格式化字串，定義了輸出的格式。該字串包含普通字元和格式說明符。普通字元直接輸出，格式說明符用來格式化並插入後續變數。</p><p><code>...</code>：可變參數清單，包含要格式化的資料。這些資料將根據格式化字串中的格式說明符依次插入。</p><p><code>printf</code> 函式的回傳值是輸出字元的總數。如果發生輸出錯誤，則回傳一個負數。</p><h2><span id="cc-printf-基本用法">C/C++ printf 基本用法</span></h2><p>使用 <code>printf</code> 的基本用法如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"格式化字串"</span>, 變數<span class="number">1</span>, 變數<span class="number">2</span>, ...);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="格式化字串中的格式說明符">格式化字串中的格式說明符</span></h2><p>格式化字串包含文字和格式說明符，格式說明符用於指示如何格式化變數。以下是常見的格式說明符：</p><ul><li><code>%d</code>：整數（十進位）</li><li><code>%f</code>：浮點數</li><li><code>%c</code>：單個字元</li><li><code>%s</code>：字串</li><li><code>%x</code>：整數（十六進位）</li></ul><h2><span id="範例">範例</span></h2><p>以下是一些 <code>printf</code> 函式的範例程式碼：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line">    <span class="keyword">float</span> f = <span class="number">3.14159</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="string">'A'</span>;</span><br><span class="line">    <span class="keyword">char</span> str[] = <span class="string">"Hello, World!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"整數：%d\n"</span>, i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"浮點數：%f\n"</span>, f);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"字元：%c\n"</span>, c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"字串：%s\n"</span>, str);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>執行以上程式碼，輸出結果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">整數：42</span><br><span class="line">浮點數：3.141590</span><br><span class="line">字元：A</span><br><span class="line">字串：Hello, World!</span><br></pre></td></tr></table></figure><h2><span id="高級用法">高級用法</span></h2><h3><span id="指定寬度和精度">指定寬度和精度</span></h3><p>您可以使用格式說明符來指定輸出的寬度和精度，例如：</p><ul><li><code>%5d</code>：最小寬度為 5 的整數</li><li><code>%.2f</code>：小數點後保留 2 位的浮點數</li><li><code>%5.2f</code>：最小寬度為 5 且小數點後保留 2 位的浮點數</li></ul><p>以下是相應的範例程式碼：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">42</span>;</span><br><span class="line">    <span class="keyword">float</span> f = <span class="number">3.14159</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"寬度為 5 的整數：%5d\n"</span>, i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"小數點後保留 2 位的浮點數：%.2f\n"</span>, f);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"寬度為 5 且小數點後保留 2 位的浮點數：%5.2f\n"</span>, f);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>執行以上程式碼，輸出結果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">寬度為 5 的整數：   42</span><br><span class="line">小數點後保留 2 位的浮點數：3.14</span><br><span class="line">寬度為 5 且小數點後保留 2 位的浮點數： 3.14</span><br></pre></td></tr></table></figure><h2><span id="小結">小結</span></h2><p><code>printf</code> 是 C 和 C++ 中格式化輸出的基本工具。透過使用格式說明符和各種選項，您可以輕鬆地控制輸出的格式，滿足不同的需求。掌握這些技巧，將讓您的編程工作更加得心應手。</p><p>以上就是 C/C++ printf 的用法與範例介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br>如果你想學習 C++ 相關技術，可以參考看看下面的文章，<br><a href="/cpp-tutorial/" title="C/C++ 新手入門教學懶人包">C/C++ 新手入門教學懶人包</a><br><a href="/cpp-printf-format/" title="C/C++ printf 參數說明">C/C++ printf 參數說明</a><br><a href="/cpp-scanf/" title="C/C++ scanf 用法與範例">C/C++ scanf 用法與範例</a><br><a href="/cpp-sscanf/" title="C/C++ sscanf 用法與範例">C/C++ sscanf 用法與範例</a><br><a href="/cpp-snprintf/" title="C/C++ snprintf 用法與範例">C/C++ snprintf 用法與範例</a><br><a href="/cpp-sprintf/" title="C/C++ sprintf 用法與範例">C/C++ sprintf 用法與範例</a><br><a href="/cpp-printf-size_t/" title="C/C++ printf 列印 size_t 的方法">C/C++ printf 列印 size_t 的方法</a><br><a href="/cpp-printf-int64_t-uint64_t/" title="32/64bit 作業系統 printf 列印 int64_t / uint64_t 的方法">32/64bit 作業系統 printf 列印 int64_t / uint64_t 的方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹 C/C++ printf 用法與範例，在C/C++編程中，經常需要將資料印出。而&lt;code&gt;printf&lt;/code&gt;函式正是這樣一個常用且強大的工具，它用於格式化輸出到標準輸出（如螢幕）。本文將深入探討&lt;code&gt;printf&lt;/code&gt;函式
      
    
    </summary>
    
      <category term="C/C++教學" scheme="https://shengyu7697.github.io/categories/C-C-%E6%95%99%E5%AD%B8/"/>
    
    
      <category term="C/C++" scheme="https://shengyu7697.github.io/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>macOS 下 RDP client 遠端桌面軟體</title>
    <link href="https://shengyu7697.github.io/mac-rdp-client/"/>
    <id>https://shengyu7697.github.io/mac-rdp-client/</id>
    <published>2024-07-12T12:00:00.000Z</published>
    <updated>2024-07-14T09:30:06.861Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 紀錄 macOS 下 RDP client 軟體，RDP 就是我們常聽到 Windows 的遠端桌面使用的協議，這次我是要在macOS 下 RDP client 來連接到遠端的 Ubuntu 24.04 電腦，而 Ubuntu 24.04 內建的就是支援 RDP，不要問我為什麼是 RDP 而不是 VNC 我不知道，想知道怎麼使用的繼續看下去，理論上這個軟體也可以連接到遠端的 Windows 上。</p><p>一般來說，到 Mac App Store 的  <a href="https://apps.apple.com/us/app/microsoft-remote-desktop/id1295203466" rel="noopener" target="_blank">Microsoft Remote Desktop 或者叫 Microsoft 遠端桌面</a> 下載安裝即可使用。</p><p>但假如你的 macOS 跟我一樣已經升不上去停留在 macOS 11.x 的話，那麼你是無法從 App store 下載的</p><p>到<a href="https://learn.microsoft.com/zh-tw/windows-server/remote/remote-desktop-services/clients/mac-whatsnew" rel="noopener" target="_blank">適用於 macOS 的遠端桌面用戶端的新功能</a>裡點選<a href="https://install.appcenter.ms/orgs/rdmacios-k2vy/apps/microsoft-remote-desktop-for-mac/distribution_groups/all-users-of-microsoft-remote-desktop-for-mac" rel="noopener" target="_blank">Microsoft AppCenter</a><br>從這邊下載歷史舊版本</p><p>Version 10.8.4 (2111) 可用<br>Jun 15, 2023 at 02:59<br>60.05 MB</p><p>Version 10.9.3 (2158) 可用<br>Sep 22, 2023 at 05:35<br>55.47 MB</p><p>Version 10.9.6 (2185) 可用<br>Feb 14, 2024 at 07:31<br>55.64 MB</p><p>基本上 10.9.6 (2185) 以下的版本都可以使用，超過以上的版本會需要更高的 macOS 版本。</p><p>可能遇到的問題：可以開啟但連線後無法開啟新畫面，<br>其中一個原因是因為你的 Ubuntu 已經螢幕鎖定了，需要解鎖<br><a href="https://help.ubuntu.com/stable/ubuntu-help/session-screenlocks.html" rel="noopener" target="_blank">解除螢幕鎖定</a>：<code>Settings</code> &gt; <code>Privacy &amp; Security</code><br>如果 <code>Automatic Screen Lock</code> 已開啟，將其關閉。</p><p>以上就是 macOS 下 RDP client 遠端桌面軟體介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 紀錄 macOS 下 RDP client 軟體，RDP 就是我們常聽到 Windows 的遠端桌面使用的協議，這次我是要在macOS 下 RDP client 來連接到遠端的 Ubuntu 24.04 電腦，而 Ubuntu 24.04 內建的就是支
      
    
    </summary>
    
    
      <category term="macOS" scheme="https://shengyu7697.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu 下使用 rm 指令如何避免誤刪除</title>
    <link href="https://shengyu7697.github.io/ubuntu-prevent-accidental-deletion-with-rm-command/"/>
    <id>https://shengyu7697.github.io/ubuntu-prevent-accidental-deletion-with-rm-command/</id>
    <published>2024-07-10T12:00:00.000Z</published>
    <updated>2024-07-03T23:40:08.385Z</updated>
    
    <content type="html"><![CDATA[<p>本篇 ShengYu 介紹在 Ubuntu 下使用 rm 指令如何避免誤刪除，在使用 Ubuntu 的過程中，檔案管理是日常操作中不可或缺的一部分。其中，rm 指令是刪除檔案和目錄的常用工具。然而，不小心刪除了重要檔案是一個常見且令人沮喪的問題，本人可是有切身之痛阿，曾經誤刪除重要資料然後使用救援工具挽救資料，最後還是流失不少重要資料。本文將介紹幾種方法，幫助你在 Ubuntu 中使用 rm 指令時避免誤刪除檔案。</p><p>你可以透過將 <code>rm</code> 指令別名為 <code>trash</code> 來實現使用 <code>trash-cli</code> 工具代替 <code>rm</code> 指令的效果。這樣，每當你使用 <code>rm</code> 指令時，檔案將被移動到垃圾桶而不是直接刪除。以下是具體步驟：</p><h2><span id="1-安裝-trash-cli">1. 安裝 <code>trash-cli</code></span></h2><p>首先，確保你已經安裝了 <code>trash-cli</code> 工具。如果還沒有安裝，可以使用以下指令進行安裝：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install trash-cli</span><br></pre></td></tr></table></figure></p><h2><span id="2-建立別名">2. 建立別名</span></h2><p>打開你的 <code>~/.bashrc</code> 檔案（或 <code>~/.zshrc</code> 檔案，如果你使用 Zsh）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure></p><p>在檔案末尾新增以下行，將 <code>rm</code> 指令別名為 <code>trash</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> rm=<span class="string">'trash-put'</span></span><br></pre></td></tr></table></figure></p><h2><span id="3-重新載入設定檔案">3. 重新載入設定檔案</span></h2><p>保存並關閉檔案，然後重新載入 <code>~/.bashrc</code> 檔案以使更改生效：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></p><h2><span id="4-驗證">4. 驗證</span></h2><p>現在，你可以驗證新的 <code>rm</code> 別名是否正常工作。嘗試刪除一個檔案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch testfile</span><br><span class="line">rm testfile</span><br></pre></td></tr></table></figure></p><p>然後，檢查檔案是否在垃圾桶中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trash-list</span><br></pre></td></tr></table></figure></p><p>你應該能看到 <code>testfile</code> 在垃圾桶中。</p><h2><span id="5-還原檔案">5. 還原檔案</span></h2><p>如果你誤刪了檔案，可以使用 <code>trash-restore</code> 指令恢覆檔案：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trash-restore</span><br></pre></td></tr></table></figure></p><p>按照提示選擇你要恢覆的檔案。</p><p>透過這些步驟，你可以將 <code>rm</code> 指令別名為 <code>trash</code>，這樣在刪除檔案時，它們會被移動到垃圾桶，而不是直接刪除，從而有效避免誤刪檔案。</p><p>要清空垃圾桶，你可以使用 <code>trash-empty</code> 指令。這個指令會永久刪除垃圾桶中的所有檔案。你也可以選擇只刪除一定天數前的檔案。以下是一些常用的方法：</p><h2><span id="6-清空所有垃圾桶內容">6. 清空所有垃圾桶內容</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trash-empty</span><br></pre></td></tr></table></figure><p>這個指令會永久刪除垃圾桶中的所有檔案。</p><h2><span id="7-清空指定天數之前的檔案">7. 清空指定天數之前的檔案</span></h2><p>如果你只想刪除一定天數之前的檔案，例如，刪除7天前的檔案，可以使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trash-empty 7</span><br></pre></td></tr></table></figure></p><p>這個指令會永久刪除垃圾桶中7天前的檔案。</p><h2><span id="3-查看幫助">3. 查看幫助</span></h2><p>如果你需要更多關於 <code>trash-empty</code> 指令的資訊，可以查看幫助：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trash-empty --<span class="built_in">help</span></span><br></pre></td></tr></table></figure></p><p>以上就是 Ubuntu 下使用 rm 指令如何避免誤刪除介紹，<br>如果你覺得我的文章寫得不錯、對你有幫助的話記得 <a href="https://www.facebook.com/shengyu7697/" rel="noopener" target="_blank">Facebook 按讚</a>支持一下！  </p><p><strong>其它相關文章推薦</strong><br><a href="/mac-ubuntu-prevent-accidental-deletion-with-rm-command/" title="macOS 下使用 rm 指令如何避免誤刪除">macOS 下使用 rm 指令如何避免誤刪除</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇 ShengYu 介紹在 Ubuntu 下使用 rm 指令如何避免誤刪除，在使用 Ubuntu 的過程中，檔案管理是日常操作中不可或缺的一部分。其中，rm 指令是刪除檔案和目錄的常用工具。然而，不小心刪除了重要檔案是一個常見且令人沮喪的問題，本人可是有切身之痛阿，曾經誤
      
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://shengyu7697.github.io/tags/Ubuntu/"/>
    
      <category term="Linux Command" scheme="https://shengyu7697.github.io/tags/Linux-Command/"/>
    
      <category term="Linux" scheme="https://shengyu7697.github.io/tags/Linux/"/>
    
      <category term="Shell Script" scheme="https://shengyu7697.github.io/tags/Shell-Script/"/>
    
  </entry>
  
</feed>
